(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module kv::kvimpl_t'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.control_flow.spec_from_blanket_identity. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Ok_0. FuelId)
(declare-const fuel%vstd!std_specs.result.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.seq_to_set_is_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%22.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!kv.kvimpl_t.impl&%4.arrow_required. FuelId)
(declare-const fuel%lib!kv.kvimpl_t.impl&%4.arrow_key. FuelId)
(declare-const fuel%lib!kv.kvimpl_t.impl&%4.arrow_actual. FuelId)
(declare-const fuel%lib!kv.kvimpl_t.impl&%4.arrow_InvalidKey_key. FuelId)
(declare-const fuel%lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_required. FuelId)
(declare-const fuel%lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_actual. FuelId)
(declare-const fuel%lib!kv.kvimpl_t.impl&%4.arrow_SerializationError_error. FuelId)
(declare-const fuel%lib!kv.kvimpl_t.impl&%4.arrow_DeserializationError_error. FuelId)
(declare-const fuel%lib!kv.kvimpl_t.impl&%5.view. FuelId)
(declare-const fuel%lib!kv.kvimpl_t.impl&%5.valid. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.spec_index. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.create. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.read_item_and_list. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.read_list_entry_at_index. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.update_item. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.delete. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.append_to_list. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.update_list_entry_at_index. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.trim_list. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.trim_list_and_update_item. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.get_keys. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.committed. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.len. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.spec_index. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%7.committed. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.control_flow.spec_from_blanket_identity. fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.impl&%0.get_Ok_0. fuel%vstd!std_specs.result.spec_unwrap. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.seq_to_set_is_finite. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%22.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%lib!kv.kvimpl_t.impl&%4.arrow_required. fuel%lib!kv.kvimpl_t.impl&%4.arrow_key. fuel%lib!kv.kvimpl_t.impl&%4.arrow_actual. fuel%lib!kv.kvimpl_t.impl&%4.arrow_InvalidKey_key. fuel%lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_required. fuel%lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_actual. fuel%lib!kv.kvimpl_t.impl&%4.arrow_SerializationError_error. fuel%lib!kv.kvimpl_t.impl&%4.arrow_DeserializationError_error. fuel%lib!kv.kvimpl_t.impl&%5.view. fuel%lib!kv.kvimpl_t.impl&%5.valid. fuel%lib!kv.kvspec_t.impl&%2.spec_index. fuel%lib!kv.kvspec_t.impl&%2.create. fuel%lib!kv.kvspec_t.impl&%2.read_item_and_list. fuel%lib!kv.kvspec_t.impl&%2.read_list_entry_at_index. fuel%lib!kv.kvspec_t.impl&%2.update_item. fuel%lib!kv.kvspec_t.impl&%2.delete. fuel%lib!kv.kvspec_t.impl&%2.append_to_list. fuel%lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item. fuel%lib!kv.kvspec_t.impl&%2.update_list_entry_at_index. fuel%lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item. fuel%lib!kv.kvspec_t.impl&%2.trim_list. fuel%lib!kv.kvspec_t.impl&%2.trim_list_and_update_item. fuel%lib!kv.kvspec_t.impl&%2.get_keys. fuel%lib!pmem.pmemspec_t.impl&%6.committed. fuel%lib!pmem.pmemspec_t.impl&%7.len. fuel%lib!pmem.pmemspec_t.impl&%7.spec_index. fuel%lib!pmem.pmemspec_t.impl&%7.committed. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!seq_lib.seq_to_set_is_finite.)))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.spec_from_blanket_identity.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort core!convert.Infallible. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. 0)
(declare-sort vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. 0)
(declare-sort vstd!seq.Seq<vstd!seq.Seq<u8.>.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!ops.control_flow.ControlFlow. 0) (core!option.Option. 0) (core!result.Result. 0) (core!marker.PhantomData. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!kv.kvimpl_t.KvError. 0) (lib!kv.kvimpl_t.KvStore. 0) (lib!kv.kvspec_t.AbstractKvStoreState. 0) (lib!pmem.pmemspec_t.PersistentMemoryByte. 0) (lib!pmem.pmemspec_t.PersistentMemoryRegionView. 0) (lib!pmem.pmemspec_t.PersistentMemoryRegionsView. 0) (tuple%0. 0) (tuple%2. 0)) (((core!ops.control_flow.ControlFlow./Continue (core!ops.control_flow.ControlFlow./Continue/?0 Poly)) (core!ops.control_flow.ControlFlow./Break (core!ops.control_flow.ControlFlow./Break/?0 Poly))) ((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((core!marker.PhantomData./PhantomData )) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!kv.kvimpl_t.KvError./NotImplemented ) (lib!kv.kvimpl_t.KvError./InvalidParameter ) (lib!kv.kvimpl_t.KvError./InternalError ) (lib!kv.kvimpl_t.KvError./KeyNotFound ) (lib!kv.kvimpl_t.KvError./KeyAlreadyExists ) (lib!kv.kvimpl_t.KvError./InvalidKey (lib!kv.kvimpl_t.KvError./InvalidKey/?key Poly)) (lib!kv.kvimpl_t.KvError./IndexOutOfRange ) (lib!kv.kvimpl_t.KvError./RegionTooSmall (lib!kv.kvimpl_t.KvError./RegionTooSmall/?required Int) (lib!kv.kvimpl_t.KvError./RegionTooSmall/?actual Int)) (lib!kv.kvimpl_t.KvError./OutOfSpace ) (lib!kv.kvimpl_t.KvError./InvalidPersistentMemoryRegionProvided ) (lib!kv.kvimpl_t.KvError./SerializationError (lib!kv.kvimpl_t.KvError./SerializationError/?error Poly)) (lib!kv.kvimpl_t.KvError./DeserializationError (lib!kv.kvimpl_t.KvError./DeserializationError/?error Poly))) ((lib!kv.kvimpl_t.KvStore./KvStore (lib!kv.kvimpl_t.KvStore./KvStore/?id Int) (lib!kv.kvimpl_t.KvStore./KvStore/?untrusted_kv_impl Poly))) ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?id Int) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?contents Poly) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?_phantom core!option.Option.))) ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush Int) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write core!option.Option.))) ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.))) ((lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/?regions vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!ops.control_flow.ControlFlow./Continue/0 (core!ops.control_flow.ControlFlow.) Poly)
(declare-fun core!ops.control_flow.ControlFlow./Break/0 (core!ops.control_flow.ControlFlow.) Poly)
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!kv.kvimpl_t.KvError./InvalidKey/key (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun lib!kv.kvimpl_t.KvError./RegionTooSmall/required (lib!kv.kvimpl_t.KvError.) Int)
(declare-fun lib!kv.kvimpl_t.KvError./RegionTooSmall/actual (lib!kv.kvimpl_t.KvError.) Int)
(declare-fun lib!kv.kvimpl_t.KvError./SerializationError/error (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun lib!kv.kvimpl_t.KvError./DeserializationError/error (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun lib!kv.kvimpl_t.KvStore./KvStore/id (lib!kv.kvimpl_t.KvStore.) Int)
(declare-fun lib!kv.kvimpl_t.KvStore./KvStore/untrusted_kv_impl (lib!kv.kvimpl_t.KvStore.) Poly)
(declare-fun lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (lib!kv.kvspec_t.AbstractKvStoreState.) Int)
(declare-fun lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (lib!kv.kvspec_t.AbstractKvStoreState.) Poly)
(declare-fun lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom (lib!kv.kvspec_t.AbstractKvStoreState.) core!option.Option.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (lib!pmem.pmemspec_t.PersistentMemoryByte.) Int)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (lib!pmem.pmemspec_t.PersistentMemoryByte.) core!option.Option.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!ops.control_flow.ControlFlow. (Dcr Type Dcr Type) Type)
(declare-const TYPE%core!convert.Infallible. Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!marker.PhantomData. (Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!kv.kvimpl_t.KvError. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!kv.kvimpl_t.KvStore. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!kv.kvspec_t.TrustedKvPermission. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!kv.kvspec_t.AbstractKvStoreState. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%core!convert.Infallible. (core!convert.Infallible.) Poly)
(declare-fun %Poly%core!convert.Infallible. (Poly) core!convert.Infallible.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (Poly) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (vstd!seq.Seq<vstd!seq.Seq<u8.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (Poly) vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow.) Poly)
(declare-fun %Poly%core!ops.control_flow.ControlFlow. (Poly) core!ops.control_flow.ControlFlow.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%core!marker.PhantomData. (core!marker.PhantomData.) Poly)
(declare-fun %Poly%core!marker.PhantomData. (Poly) core!marker.PhantomData.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun %Poly%lib!kv.kvimpl_t.KvError. (Poly) lib!kv.kvimpl_t.KvError.)
(declare-fun Poly%lib!kv.kvimpl_t.KvStore. (lib!kv.kvimpl_t.KvStore.) Poly)
(declare-fun %Poly%lib!kv.kvimpl_t.KvStore. (Poly) lib!kv.kvimpl_t.KvStore.)
(declare-fun Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState.) Poly)
(declare-fun %Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly) lib!kv.kvspec_t.AbstractKvStoreState.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)) )) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) ))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x core!convert.Infallible.)) (! (= x (%Poly%core!convert.Infallible. (Poly%core!convert.Infallible. x))) :pattern ((Poly%core!convert.Infallible. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%core!convert.Infallible.) (= x (Poly%core!convert.Infallible. (%Poly%core!convert.Infallible. x)))) :pattern ((has_type x TYPE%core!convert.Infallible.)) )))
(assert (forall ((x core!convert.Infallible.)) (! (has_type (Poly%core!convert.Infallible. x) TYPE%core!convert.Infallible.) :pattern ((has_type (Poly%core!convert.Infallible. x) TYPE%core!convert.Infallible.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) (= x (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))) )))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))) )))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (= x (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.))) )))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.))) )))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= x (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (%Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (= x (%Poly%core!ops.control_flow.ControlFlow. (Poly%core!ops.control_flow.ControlFlow. x))) :pattern ((Poly%core!ops.control_flow.ControlFlow. x)) )))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&)) (= x (Poly%core!ops.control_flow.ControlFlow. (%Poly%core!ops.control_flow.ControlFlow. x)))) :pattern ((has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (_0! Poly)) (! (=> (has_type _0! C&) (has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Continue _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Continue _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (= (core!ops.control_flow.ControlFlow./Continue/0 x) (core!ops.control_flow.ControlFlow./Continue/?0 x)) :pattern ((core!ops.control_flow.ControlFlow./Continue/0 x)) )))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&)) (has_type (core!ops.control_flow.ControlFlow./Continue/0 (%Poly%core!ops.control_flow.ControlFlow. x)) C&)) :pattern ((core!ops.control_flow.ControlFlow./Continue/0 (%Poly%core!ops.control_flow.ControlFlow. x)) (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (_0! Poly)) (! (=> (has_type _0! B&) (has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Break _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((has_type (Poly%core!ops.control_flow.ControlFlow. (core!ops.control_flow.ControlFlow./Break _0!)) (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (= (core!ops.control_flow.ControlFlow./Break/0 x) (core!ops.control_flow.ControlFlow./Break/?0 x)) :pattern ((core!ops.control_flow.ControlFlow./Break/0 x)) )))
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&)) (has_type (core!ops.control_flow.ControlFlow./Break/0 (%Poly%core!ops.control_flow.ControlFlow. x)) B&)) :pattern ((core!ops.control_flow.ControlFlow./Break/0 (%Poly%core!ops.control_flow.ControlFlow. x)) (has_type x (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(define-fun is-core!ops.control_flow.ControlFlow./Continue_ ((c core!ops.control_flow.ControlFlow.)) Bool ((_ is core!ops.control_flow.ControlFlow./Continue) c))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (=> (is-core!ops.control_flow.ControlFlow./Continue_ x) (height_lt (height (core!ops.control_flow.ControlFlow./Continue/0 x)) (height (Poly%core!ops.control_flow.ControlFlow. x)))) :pattern ((height (core!ops.control_flow.ControlFlow./Continue/0 x))) )))
(define-fun is-core!ops.control_flow.ControlFlow./Break_ ((c core!ops.control_flow.ControlFlow.)) Bool ((_ is core!ops.control_flow.ControlFlow./Break) c))
(assert (forall ((x core!ops.control_flow.ControlFlow.)) (! (=> (is-core!ops.control_flow.ControlFlow./Break_ x) (height_lt (height (core!ops.control_flow.ControlFlow./Break/0 x)) (height (Poly%core!ops.control_flow.ControlFlow. x)))) :pattern ((height (core!ops.control_flow.ControlFlow./Break/0 x))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))) )))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))) )))
(assert (forall ((x core!marker.PhantomData.)) (! (= x (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. x))) :pattern ((Poly%core!marker.PhantomData. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!marker.PhantomData. V&. V&)) (= x (Poly%core!marker.PhantomData. (%Poly%core!marker.PhantomData. x)))) :pattern ((has_type x (TYPE%core!marker.PhantomData. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (x core!marker.PhantomData.)) (! (has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&)) :pattern ((has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&))) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= x (%Poly%lib!kv.kvimpl_t.KvError. (Poly%lib!kv.kvimpl_t.KvError. x))) :pattern ((Poly%lib!kv.kvimpl_t.KvError. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (= x (Poly%lib!kv.kvimpl_t.KvError. (%Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./NotImplemented) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./NotImplemented) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidParameter) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidParameter) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InternalError) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InternalError) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyAlreadyExists) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyAlreadyExists) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_key! Poly)) (! (=> (has_type _key! K&) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./InvalidKey _key!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./InvalidKey _key!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./InvalidKey/key x) (lib!kv.kvimpl_t.KvError./InvalidKey/?key x)) :pattern ((lib!kv.kvimpl_t.KvError./InvalidKey/key x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.KvError./InvalidKey/key (%Poly%lib!kv.kvimpl_t.KvError. x)) K&)) :pattern ((lib!kv.kvimpl_t.KvError./InvalidKey/key (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./IndexOutOfRange) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./IndexOutOfRange) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_required! Int) (_actual! Int)) (! (=> (and (uInv SZ _required!) (uInv SZ _actual!)) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./RegionTooSmall _required! _actual!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./RegionTooSmall _required! _actual!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./RegionTooSmall/required x) (lib!kv.kvimpl_t.KvError./RegionTooSmall/?required x)) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/required x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (uInv SZ (lib!kv.kvimpl_t.KvError./RegionTooSmall/required (%Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/required (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./RegionTooSmall/actual x) (lib!kv.kvimpl_t.KvError./RegionTooSmall/?actual x)) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/actual x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (uInv SZ (lib!kv.kvimpl_t.KvError./RegionTooSmall/actual (%Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/actual (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./OutOfSpace) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./OutOfSpace) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidPersistentMemoryRegionProvided) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidPersistentMemoryRegionProvided) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_error! Poly)) (! (=> (has_type _error! E&) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./SerializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./SerializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./SerializationError/error x) (lib!kv.kvimpl_t.KvError./SerializationError/?error x)) :pattern ((lib!kv.kvimpl_t.KvError./SerializationError/error x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.KvError./SerializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) E&)) :pattern ((lib!kv.kvimpl_t.KvError./SerializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_error! Poly)) (! (=> (has_type _error! E&) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./DeserializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./DeserializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./DeserializationError/error x) (lib!kv.kvimpl_t.KvError./DeserializationError/?error x)) :pattern ((lib!kv.kvimpl_t.KvError./DeserializationError/error x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.KvError./DeserializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) E&)) :pattern ((lib!kv.kvimpl_t.KvError./DeserializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(define-fun is-lib!kv.kvimpl_t.KvError./InvalidKey_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./InvalidKey) c))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (=> (is-lib!kv.kvimpl_t.KvError./InvalidKey_ x) (height_lt (height (lib!kv.kvimpl_t.KvError./InvalidKey/key x)) (height (Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((height (lib!kv.kvimpl_t.KvError./InvalidKey/key x))) )))
(define-fun is-lib!kv.kvimpl_t.KvError./SerializationError_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./SerializationError) c))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (=> (is-lib!kv.kvimpl_t.KvError./SerializationError_ x) (height_lt (height (lib!kv.kvimpl_t.KvError./SerializationError/error x)) (height (Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((height (lib!kv.kvimpl_t.KvError./SerializationError/error x))) )))
(define-fun is-lib!kv.kvimpl_t.KvError./DeserializationError_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./DeserializationError) c))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (=> (is-lib!kv.kvimpl_t.KvError./DeserializationError_ x) (height_lt (height (lib!kv.kvimpl_t.KvError./DeserializationError/error x)) (height (Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((height (lib!kv.kvimpl_t.KvError./DeserializationError/error x))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvStore.)) (! (= x (%Poly%lib!kv.kvimpl_t.KvStore. (Poly%lib!kv.kvimpl_t.KvStore. x))) :pattern ((Poly%lib!kv.kvimpl_t.KvStore. x)) )))
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (= x (Poly%lib!kv.kvimpl_t.KvStore. (%Poly%lib!kv.kvimpl_t.KvStore. x)))) :pattern ((has_type x (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&))) )))
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (_id! Int) (_untrusted_kv_impl! Poly)) (! (=> (and (uInv 128 _id!) (has_type _untrusted_kv_impl! (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&))) (has_type (Poly%lib!kv.kvimpl_t.KvStore. (lib!kv.kvimpl_t.KvStore./KvStore _id! _untrusted_kv_impl!)) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvStore. (lib!kv.kvimpl_t.KvStore./KvStore _id! _untrusted_kv_impl!)) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvStore.)) (! (= (lib!kv.kvimpl_t.KvStore./KvStore/id x) (lib!kv.kvimpl_t.KvStore./KvStore/?id x)) :pattern ((lib!kv.kvimpl_t.KvStore./KvStore/id x)) )))
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (uInv 128 (lib!kv.kvimpl_t.KvStore./KvStore/id (%Poly%lib!kv.kvimpl_t.KvStore. x)))) :pattern ((lib!kv.kvimpl_t.KvStore./KvStore/id (%Poly%lib!kv.kvimpl_t.KvStore. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvStore.)) (! (= (lib!kv.kvimpl_t.KvStore./KvStore/untrusted_kv_impl x) (lib!kv.kvimpl_t.KvStore./KvStore/?untrusted_kv_impl x)) :pattern ((lib!kv.kvimpl_t.KvStore./KvStore/untrusted_kv_impl x)) )))
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (has_type (lib!kv.kvimpl_t.KvStore./KvStore/untrusted_kv_impl (%Poly%lib!kv.kvimpl_t.KvStore. x)) (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&))) :pattern ((lib!kv.kvimpl_t.KvStore./KvStore/untrusted_kv_impl (%Poly%lib!kv.kvimpl_t.KvStore. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&))) )))
(define-fun is-lib!kv.kvimpl_t.KvStore./KvStore_ ((c lib!kv.kvimpl_t.KvStore.)) Bool ((_ is lib!kv.kvimpl_t.KvStore./KvStore) c))
(assert (forall ((x lib!kv.kvimpl_t.KvStore.)) (! (=> (is-lib!kv.kvimpl_t.KvStore./KvStore_ x) (height_lt (height (lib!kv.kvimpl_t.KvStore./KvStore/untrusted_kv_impl x)) (height (Poly%lib!kv.kvimpl_t.KvStore. x)))) :pattern ((height (lib!kv.kvimpl_t.KvStore./KvStore/untrusted_kv_impl x))) )))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (= x (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. x))) :pattern ((Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (= x (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)))) :pattern ((has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (_id! Int) (_contents! Poly) (__phantom! core!option.Option.)) (! (=> (and (uInv 128 _id!) (has_type _contents! (TYPE%vstd!map.Map. K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)))) (has_type (Poly%core!option.Option. __phantom!) (TYPE%core!option.Option. E&. E&))) (has_type (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState _id! _contents! __phantom!)) (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState _id! _contents! __phantom!)) (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (= (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id x) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?id x)) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (uInv 128 (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)))) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)) (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (= (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents x) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?contents x)) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)) (TYPE%vstd!map.Map. K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&))))) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)) (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (= (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom x) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?_phantom x)) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type (Poly%core!option.Option. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x))) (TYPE%core!option.Option. E&. E&))) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)) (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) )))
(define-fun is-lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState_ ((c lib!kv.kvspec_t.AbstractKvStoreState.)) Bool ((_ is lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState) c))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (=> (is-lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState_ x) (height_lt (height (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents x)) (height (Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)))) :pattern ((height (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents x))) )))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (=> (is-lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState_ x) (height_lt (height (Poly%core!option.Option. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom x))) (height (Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)))) :pattern ((height (Poly%core!option.Option. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom x)))) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((_state_at_last_flush! Int) (_outstanding_write! core!option.Option.)) (! (=> (and (uInv 8 _state_at_last_flush!) (has_type (Poly%core!option.Option. _outstanding_write!) (TYPE%core!option.Option. $ (UINT 8)))) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (uInv 8 (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (TYPE%core!option.Option. $ (UINT 8)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))) (ext_eq deep (TYPE%core!option.Option. $ (UINT 8)) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions x) (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/?regions x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions x)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x))) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. x y)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%core!fmt.Debug. (Dcr Type) Bool)
(declare-fun tr_bound%core!convert.From. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialEq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.Eq. (Dcr Type) Bool)
(declare-fun tr_bound%core!hash.Hash. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!kv.durable.durableimpl_v.DurableKvStore. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!kv.kvimpl_t.Item. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!kv.volatile.volatileimpl_v.VolatileKvIndex. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopy. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.SpecPmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.wrpm_t.CheckPermission. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSafe. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!fmt.Debug. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%core!convert.From. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! true :pattern ((tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!cmp.Eq. Self%&. Self%&) (tr_bound%core!cmp.PartialEq. Self%&. Self%& Self%&. Self%&)) :pattern ((tr_bound%core!cmp.Eq. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!hash.Hash. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! true :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. Self%&. Self%& T&. T& E&. E&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type)) (! (=> (tr_bound%lib!kv.durable.durableimpl_v.DurableKvStore. Self%&. Self%& PM&. PM& K&. K& I&. I& L&. L& E&. E&) (and (tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. PM&. PM&) (tr_bound%core!hash.Hash. K&. K&) (tr_bound%core!cmp.Eq. K&. K&) (tr_bound%core!clone.Clone. K&. K&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. K&. K&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. I&. I&) (tr_bound%lib!kv.kvimpl_t.Item. I&. I& K&. K&) (tr_bound%core!fmt.Debug. I&. I&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. L&. L&) (tr_bound%core!fmt.Debug. L&. L&) (tr_bound%core!fmt.Debug. E&. E&))) :pattern ((tr_bound%lib!kv.durable.durableimpl_v.DurableKvStore. Self%&. Self%& PM&. PM& K&. K& I&. I& L&. L& E&. E&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type)) (! true :pattern ((tr_bound%lib!kv.kvimpl_t.Item. Self%&. Self%& K&. K&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (=> (tr_bound%lib!kv.volatile.volatileimpl_v.VolatileKvIndex. Self%&. Self%& K&. K& E&. E&) (and (tr_bound%core!hash.Hash. K&. K&) (tr_bound%core!cmp.Eq. K&. K&) (tr_bound%core!clone.Clone. K&. K&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. K&. K&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%core!fmt.Debug. E&. E&))) :pattern ((tr_bound%lib!kv.volatile.volatileimpl_v.VolatileKvIndex. Self%&. Self%& K&. K& E&. E&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&) (and (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&))) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (State&. Dcr) (State& Type)) (! true :pattern ((tr_bound%lib!pmem.wrpm_t.CheckPermission. Self%&. Self%& State&. State&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT 128)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 128)) (UINT 128)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegions::view")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegions::inv")
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegions.inv%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::len")
(declare-fun lib!pmem.pmemspec_t.impl&%7.len.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::spec_index")
(declare-fun lib!pmem.pmemspec_t.impl&%7.spec_index.? (Poly Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map")
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionView::committed")
(declare-fun lib!pmem.pmemspec_t.impl&%6.committed.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::Item::spec_key")
(declare-fun lib!kv.kvimpl_t.Item.spec_key.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!kv.kvimpl_t.Item.spec_key%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::kv::durable::durableimpl_v::DurableKvStore::recover_to_kv_state")
(declare-fun lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state%default%.? (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::spec_unwrap")
(declare-fun vstd!std_specs.result.spec_unwrap.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::control_flow::spec_from")
(declare-fun vstd!std_specs.control_flow.spec_from.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::spec_phantom_data")
(declare-fun lib!kv.kvimpl_t.spec_phantom_data.? (Dcr Type) core!marker.PhantomData.)
(set-info :comment ";; Function-Decl lib::pmem::wrpm_t::CheckPermission::check_permission")
(declare-fun lib!pmem.wrpm_t.CheckPermission.check_permission.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!pmem.wrpm_t.CheckPermission.check_permission%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::KvError::arrow_required")
(declare-fun lib!kv.kvimpl_t.impl&%4.arrow_required.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::KvError::arrow_key")
(declare-fun lib!kv.kvimpl_t.impl&%4.arrow_key.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::KvError::arrow_actual")
(declare-fun lib!kv.kvimpl_t.impl&%4.arrow_actual.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::KvError::arrow_InvalidKey_key")
(declare-fun lib!kv.kvimpl_t.impl&%4.arrow_InvalidKey_key.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::KvError::arrow_RegionTooSmall_required")
(declare-fun lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_required.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::KvError::arrow_RegionTooSmall_actual")
(declare-fun lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_actual.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::KvError::arrow_SerializationError_error")
(declare-fun lib!kv.kvimpl_t.impl&%4.arrow_SerializationError_error.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::KvError::arrow_DeserializationError_error")
(declare-fun lib!kv.kvimpl_t.impl&%4.arrow_DeserializationError_error.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_v::UntrustedKvStoreImpl::view")
(declare-fun lib!kv.kvimpl_v.impl&%0.view.? (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly) lib!kv.kvspec_t.AbstractKvStoreState.)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::KvStore::view")
(declare-fun lib!kv.kvimpl_t.impl&%5.view.? (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly) lib!kv.kvspec_t.AbstractKvStoreState.)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_v::UntrustedKvStoreImpl::valid")
(declare-fun lib!kv.kvimpl_v.impl&%0.valid.? (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_t::KvStore::valid")
(declare-fun lib!kv.kvimpl_t.impl&%5.valid.? (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::kv::kvimpl_v::UntrustedKvStoreImpl::recover")
(declare-fun lib!kv.kvimpl_v.impl&%0.recover.? (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::spec_index")
(declare-fun lib!kv.kvspec_t.impl&%2.spec_index.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::create")
(declare-fun lib!kv.kvspec_t.impl&%2.create.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::read_item_and_list")
(declare-fun lib!kv.kvspec_t.impl&%2.read_item_and_list.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::read_list_entry_at_index")
(declare-fun lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::update_item")
(declare-fun lib!kv.kvspec_t.impl&%2.update_item.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::delete")
(declare-fun lib!kv.kvspec_t.impl&%2.delete.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::append_to_list")
(declare-fun lib!kv.kvspec_t.impl&%2.append_to_list.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::append_to_list_and_update_item")
(declare-fun lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::update_list_entry_at_index")
(declare-fun lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::update_entry_at_index_and_item")
(declare-fun lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::trim_list")
(declare-fun lib!kv.kvspec_t.impl&%2.trim_list.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::trim_list_and_update_item")
(declare-fun lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::kvspec_t::AbstractKvStoreState::get_keys")
(declare-fun lib!kv.kvspec_t.impl&%2.get_keys.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::pmem::pmemspec_t::PersistentMemoryRegionsView::committed")
(declare-fun lib!pmem.pmemspec_t.impl&%7.committed.? (Poly) vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegions::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegions::inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!) BOOL)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::len")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.len.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.len.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. self!))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionsView.) (<= 0 (lib!pmem.pmemspec_t.impl&%7.len.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%7.len.? self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::spec_index")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.spec_index.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.spec_index.) (forall ((self! Poly) (i! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.spec_index.? self! i!) (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryRegionView.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionsView./PersistentMemoryRegionsView/regions (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionsView. self!))) i!))) :pattern ((lib!pmem.pmemspec_t.impl&%7.spec_index.? self! i!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%2 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%0 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionView::committed")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.committed.))
(declare-fun %%lambda%%1 () %%Function%%)
(assert (forall ((_addr$ Poly) (b$ Poly)) (! (= (%%apply%%1 %%lambda%%1 _addr$ b$) (I (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. b$)))) :pattern ((%%apply%%1 %%lambda%%1 _addr$ b$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.committed.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.committed.? self!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ (UINT 8) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun %%lambda%%1))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.committed.? self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_t::Item::spec_key")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!kv.kvimpl_t.Item.spec_key.? Self%&. Self%& K&. K& self!) K&)) :pattern ((lib!kv.kvimpl_t.Item.spec_key.? Self%&. Self%& K&. K& self!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::Item::key")
(declare-fun ens%lib!kv.kvimpl_t.Item.key. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (self! Poly) (out! Poly)) (! (= (ens%lib!kv.kvimpl_t.Item.key. Self%&. Self%& K&. K& self! out!) (and (has_type out! K&) (= out! (lib!kv.kvimpl_t.Item.spec_key.? Self%&. Self%& K&. K& self!)))) :pattern ((ens%lib!kv.kvimpl_t.Item.key. Self%&. Self%& K&. K& self! out!)) )))
(set-info :comment ";; Function-Axioms lib::kv::durable::durableimpl_v::DurableKvStore::recover_to_kv_state")
(assert (forall ((Self%&. Dcr) (Self%& Type) (PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (bytes! Poly) (id! Poly)) (! (=> (and (has_type bytes! (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type id! (UINT 128))) (has_type (lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? Self%&. Self%& PM&. PM& K&. K& I&. I& L&. L& E&. E& bytes! id!) (TYPE%core!option.Option. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)))) :pattern ((lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? Self%&. Self%& PM&. PM& K&. K& I&. I& L&. L& E&. E& bytes! id!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%core!fmt.Debug. E&. E&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%core!fmt.Debug. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!) T&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::get_Ok_0")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Ok_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Ok_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Ok/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::result::spec_unwrap")
(declare-fun req%vstd!std_specs.result.spec_unwrap. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! Poly)) (! (= (req%vstd!std_specs.result.spec_unwrap. T&. T& E&. E& result!) (=> %%global_location_label%%5 (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!)))) :pattern ((req%vstd!std_specs.result.spec_unwrap. T&. T& E&. E& result!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.result.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! Poly)) (! (= (vstd!std_specs.result.spec_unwrap.? T&. T& E&. E& result!) (core!result.Result./Ok/0 (%Poly%core!result.Result. result!))) :pattern ((vstd!std_specs.result.spec_unwrap.? T&. T& E&. E& result!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! Poly)) (! (=> (has_type result! (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (vstd!std_specs.result.spec_unwrap.? T&. T& E&. E& result!) T&)) :pattern ((vstd!std_specs.result.spec_unwrap.? T&. T& E&. E& result!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%2 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%2 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs core::result::impl&%26::branch")
(declare-fun ens%core!result.impl&%26.branch. (Dcr Type Dcr Type core!result.Result. core!ops.control_flow.ControlFlow.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.) (cf! core!ops.control_flow.ControlFlow.)) (! (= (ens%core!result.impl&%26.branch. T&. T& E&. E& result! cf!) (and (has_type (Poly%core!ops.control_flow.ControlFlow. cf!) (TYPE%core!ops.control_flow.ControlFlow. $ (TYPE%core!result.Result. $ TYPE%core!convert.Infallible. E&. E&) T&. T&)) (= cf! (ite (is-core!result.Result./Ok_ result!) (let ((v$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))) (core!ops.control_flow.ControlFlow./Continue v$)) (let ((e$ (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))) (core!ops.control_flow.ControlFlow./Break (Poly%core!result.Result. (core!result.Result./Err e$)))))))) :pattern ((ens%core!result.impl&%26.branch. T&. T& E&. E& result! cf!)) )))
(set-info :comment ";; Broadcast vstd::std_specs::control_flow::spec_from_blanket_identity")
(assert (=> (fuel_bool fuel%vstd!std_specs.control_flow.spec_from_blanket_identity.) (forall ((T&. Dcr) (T& Type) (t! Poly) (s! Poly)) (! (=> (and (has_type t! T&) (has_type s! T&)) (=> (vstd!std_specs.control_flow.spec_from.? T&. T& T&. T& t! s!) (= t! s!))) :pattern ((vstd!std_specs.control_flow.spec_from.? T&. T& T&. T& t! s!)) ))))
(set-info :comment ";; Function-Specs core::result::impl&%27::from_residual")
(declare-fun ens%core!result.impl&%27.from_residual. (Dcr Type Dcr Type Dcr Type core!result.Result. core!result.Result.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (F&. Dcr) (F& Type) (result! core!result.Result.) (result2! core!result.Result.)) (! (= (ens%core!result.impl&%27.from_residual. T&. T& E&. E& F&. F& result! result2!) (and (has_type (Poly%core!result.Result. result2!) (TYPE%core!result.Result. T&. T& F&. F&)) (let ((tmp%%$ (tuple%2./tuple%2 (Poly%core!result.Result. result!) (Poly%core!result.Result. result2!)))) (and (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((e$ (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((e2$ (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (vstd!std_specs.control_flow.spec_from.? F&. F& E&. E& e$ e2$))))))) :pattern ((ens%core!result.impl&%27.from_residual. T&. T& E&. E& F&. F& result! result2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%6 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite")
(assert (=> (fuel_bool fuel%vstd!seq_lib.seq_to_set_is_finite.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ (UINT 64)))
(set-info :comment ";; Function-Axioms lib::pmem::wrpm_t::CheckPermission::check_permission")
(assert (forall ((Self%&. Dcr) (Self%& Type) (State&. Dcr) (State& Type) (self! Poly) (state! Poly)) (! (=> (and (has_type self! Self%&) (has_type state! State&)) (has_type (lib!pmem.wrpm_t.CheckPermission.check_permission.? Self%&. Self%& State&. State& self! state!) BOOL)) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? Self%&. Self%& State&. State& self! state!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%22::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%22.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%22.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 128) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 128) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_t::KvError::arrow_required")
(assert (fuel_bool_default fuel%lib!kv.kvimpl_t.impl&%4.arrow_required.))
(assert (=> (fuel_bool fuel%lib!kv.kvimpl_t.impl&%4.arrow_required.) (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvimpl_t.impl&%4.arrow_required.? K&. K& E&. E& self!) (lib!kv.kvimpl_t.KvError./RegionTooSmall/required (%Poly%lib!kv.kvimpl_t.KvError. self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_required.? K&. K& E&. E& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (uInv SZ (lib!kv.kvimpl_t.impl&%4.arrow_required.? K&. K& E&. E& self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_required.? K&. K& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_t::KvError::arrow_key")
(assert (fuel_bool_default fuel%lib!kv.kvimpl_t.impl&%4.arrow_key.))
(assert (=> (fuel_bool fuel%lib!kv.kvimpl_t.impl&%4.arrow_key.) (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvimpl_t.impl&%4.arrow_key.? K&. K& E&. E& self!) (lib!kv.kvimpl_t.KvError./InvalidKey/key (%Poly%lib!kv.kvimpl_t.KvError. self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_key.? K&. K& E&. E& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.impl&%4.arrow_key.? K&. K& E&. E& self!) K&)) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_key.? K&. K& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_t::KvError::arrow_actual")
(assert (fuel_bool_default fuel%lib!kv.kvimpl_t.impl&%4.arrow_actual.))
(assert (=> (fuel_bool fuel%lib!kv.kvimpl_t.impl&%4.arrow_actual.) (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvimpl_t.impl&%4.arrow_actual.? K&. K& E&. E& self!) (lib!kv.kvimpl_t.KvError./RegionTooSmall/actual (%Poly%lib!kv.kvimpl_t.KvError. self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_actual.? K&. K& E&. E& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (uInv SZ (lib!kv.kvimpl_t.impl&%4.arrow_actual.? K&. K& E&. E& self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_actual.? K&. K& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_t::KvError::arrow_InvalidKey_key")
(assert (fuel_bool_default fuel%lib!kv.kvimpl_t.impl&%4.arrow_InvalidKey_key.))
(assert (=> (fuel_bool fuel%lib!kv.kvimpl_t.impl&%4.arrow_InvalidKey_key.) (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvimpl_t.impl&%4.arrow_InvalidKey_key.? K&. K& E&. E& self!) (lib!kv.kvimpl_t.KvError./InvalidKey/key (%Poly%lib!kv.kvimpl_t.KvError. self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_InvalidKey_key.? K&. K& E&. E& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.impl&%4.arrow_InvalidKey_key.? K&. K& E&. E& self!) K&)) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_InvalidKey_key.? K&. K& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_t::KvError::arrow_RegionTooSmall_required")
(assert (fuel_bool_default fuel%lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_required.))
(assert (=> (fuel_bool fuel%lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_required.) (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_required.? K&. K& E&. E& self!) (lib!kv.kvimpl_t.KvError./RegionTooSmall/required (%Poly%lib!kv.kvimpl_t.KvError. self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_required.? K&. K& E&. E& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (uInv SZ (lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_required.? K&. K& E&. E& self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_required.? K&. K& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_t::KvError::arrow_RegionTooSmall_actual")
(assert (fuel_bool_default fuel%lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_actual.))
(assert (=> (fuel_bool fuel%lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_actual.) (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_actual.? K&. K& E&. E& self!) (lib!kv.kvimpl_t.KvError./RegionTooSmall/actual (%Poly%lib!kv.kvimpl_t.KvError. self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_actual.? K&. K& E&. E& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (uInv SZ (lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_actual.? K&. K& E&. E& self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_RegionTooSmall_actual.? K&. K& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_t::KvError::arrow_SerializationError_error")
(assert (fuel_bool_default fuel%lib!kv.kvimpl_t.impl&%4.arrow_SerializationError_error.))
(assert (=> (fuel_bool fuel%lib!kv.kvimpl_t.impl&%4.arrow_SerializationError_error.) (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvimpl_t.impl&%4.arrow_SerializationError_error.? K&. K& E&. E& self!) (lib!kv.kvimpl_t.KvError./SerializationError/error (%Poly%lib!kv.kvimpl_t.KvError. self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_SerializationError_error.? K&. K& E&. E& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.impl&%4.arrow_SerializationError_error.? K&. K& E&. E& self!) E&)) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_SerializationError_error.? K&. K& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_t::KvError::arrow_DeserializationError_error")
(assert (fuel_bool_default fuel%lib!kv.kvimpl_t.impl&%4.arrow_DeserializationError_error.))
(assert (=> (fuel_bool fuel%lib!kv.kvimpl_t.impl&%4.arrow_DeserializationError_error.) (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvimpl_t.impl&%4.arrow_DeserializationError_error.? K&. K& E&. E& self!) (lib!kv.kvimpl_t.KvError./DeserializationError/error (%Poly%lib!kv.kvimpl_t.KvError. self!))) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_DeserializationError_error.? K&. K& E&. E& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.impl&%4.arrow_DeserializationError_error.? K&. K& E&. E& self!) E&)) :pattern ((lib!kv.kvimpl_t.impl&%4.arrow_DeserializationError_error.? K&. K& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_v::UntrustedKvStoreImpl::view")
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (has_type (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) :pattern ((lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_t::KvStore::view")
(assert (fuel_bool_default fuel%lib!kv.kvimpl_t.impl&%5.view.))
(assert (=> (fuel_bool fuel%lib!kv.kvimpl_t.impl&%5.view.) (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (lib!kv.kvimpl_t.KvStore./KvStore/untrusted_kv_impl (%Poly%lib!kv.kvimpl_t.KvStore. self!)))) :pattern ((lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) ))))
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (has_type (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) :pattern ((lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_t::KvStore::valid")
(assert (fuel_bool_default fuel%lib!kv.kvimpl_t.impl&%5.valid.))
(assert (=> (fuel_bool fuel%lib!kv.kvimpl_t.impl&%5.valid.) (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (lib!kv.kvimpl_t.KvStore./KvStore/untrusted_kv_impl (%Poly%lib!kv.kvimpl_t.KvStore. self!)))) :pattern ((lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) ))))
(set-info :comment ";; Function-Axioms lib::kv::kvimpl_v::UntrustedKvStoreImpl::recover")
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (mems! Poly) (kv_id! Poly)) (! (=> (and (has_type mems! (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type kv_id! (UINT 128))) (has_type (Poly%core!option.Option. (lib!kv.kvimpl_v.impl&%0.recover.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& mems! kv_id!)) (TYPE%core!option.Option. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)))) :pattern ((lib!kv.kvimpl_v.impl&%0.recover.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& mems! kv_id!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::spec_index")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.spec_index.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! key!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))) key!) (core!option.Option./Some (vstd!map.impl&%0.index.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key!)) core!option.Option./None)) :pattern ((lib!kv.kvspec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&)) (has_type (Poly%core!option.Option. (lib!kv.kvspec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! key!)) (TYPE%core!option.Option. $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&))))) :pattern ((lib!kv.kvspec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::create")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.create.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.create.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (item! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.create.? K&. K& I&. I& L&. L& E&. E& self! key! item!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))) key!) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyAlreadyExists)) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 item! (vstd!seq.Seq.empty.? L&. L&)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) :pattern ((lib!kv.kvspec_t.impl&%2.create.? K&. K& I&. I& L&. L& E&. E& self! key! item!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (item! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type item! I&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.create.? K&. K& I&. I& L&. L& E&. E& self! key! item!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.create.? K&. K& I&. I& L&. L& E&. E& self! key! item!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::read_item_and_list")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.read_item_and_list.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.read_item_and_list.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))) key!) (core!option.Option./Some (vstd!map.impl&%0.index.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key!)) core!option.Option./None)) :pattern ((lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&)) (has_type (Poly%core!option.Option. (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!)) (TYPE%core!option.Option. $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&))))) :pattern ((lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::read_list_entry_at_index")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))) key!) (let ((tmp%%$ (%Poly%tuple%2. (vstd!map.impl&%0.index.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key!)))) (let ((offset$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((list$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (ite (> (vstd!seq.Seq.len.? L&. L& list$) (%I idx!)) (core!result.Result./Ok (vstd!seq.Seq.index.? L&. L& list$ idx!)) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./IndexOutOfRange)))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound)))) :pattern ((lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type idx! INT)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx!)) (TYPE%core!result.Result. L&. L& $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::update_item")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.update_item.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.update_item.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_item! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_item!) (let ((val$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ val$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. val$)))))) (let ((old_item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. val$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. val$))))))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 new_item! pages$))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_item!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_item! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type new_item! I&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_item!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_item!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::delete")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.delete.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.delete.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.delete.? K&. K& I&. I& L&. L& E&. E& self! key!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))) key!) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.remove.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key!) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound)))) :pattern ((lib!kv.kvspec_t.impl&%2.delete.? K&. K& I&. I& L&. L& E&. E& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.delete.? K&. K& I&. I& L&. L& E&. E& self! key!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.delete.? K&. K& I&. I& L&. L& E&. E& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::append_to_list")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.append_to_list.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.append_to_list.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_list_entry! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.append_to_list.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 item$ (vstd!seq.Seq.push.? L&. L& pages$ new_list_entry!)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.append_to_list.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_list_entry! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type new_list_entry! L&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.append_to_list.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.append_to_list.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::append_to_list_and_update_item")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_list_entry! Poly) (new_item! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry! new_item!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 new_item! (vstd!seq.Seq.push.? L&. L& pages$ new_list_entry!)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry! new_item!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_list_entry! Poly) (new_item! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type new_list_entry! L&) (has_type new_item! I&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry! new_item!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry! new_item!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::update_list_entry_at_index")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly) (new_list_entry! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$1 (vstd!seq.Seq.update.? L&. L& pages$ idx! new_list_entry!))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 item$ pages$1))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly) (new_list_entry! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type idx! (UINT SZ)) (has_type new_list_entry! L&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::update_entry_at_index_and_item")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly) (new_list_entry! Poly) (new_item! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry! new_item!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$1 (vstd!seq.Seq.update.? L&. L& pages$ idx! new_list_entry!))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 new_item! pages$1))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry! new_item!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly) (new_list_entry! Poly) (new_item! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type idx! (UINT SZ)) (has_type new_list_entry! L&) (has_type new_item! I&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry! new_item!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry! new_item!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::trim_list")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.trim_list.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.trim_list.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (trim_length! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.trim_list.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$1 (vstd!seq.Seq.subrange.? L&. L& pages$ trim_length! (I (vstd!seq.Seq.len.? L&. L& pages$))))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 item$ pages$1))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.trim_list.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (trim_length! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type trim_length! INT)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.trim_list.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.trim_list.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::trim_list_and_update_item")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (trim_length! Poly) (new_item! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length! new_item!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$1 (vstd!seq.Seq.subrange.? L&. L& pages$ trim_length! (I (vstd!seq.Seq.len.? L&. L& pages$))))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 new_item! pages$1))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length! new_item!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (trim_length! Poly) (new_item! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type trim_length! INT) (has_type new_item! I&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length! new_item!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length! new_item!)) )))
(set-info :comment ";; Function-Axioms lib::kv::kvspec_t::AbstractKvStoreState::get_keys")
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.get_keys.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.get_keys.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.get_keys.? K&. K& I&. I& L&. L& E&. E& self!) (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) :pattern ((lib!kv.kvspec_t.impl&%2.get_keys.? K&. K& I&. I& L&. L& E&. E& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type (lib!kv.kvspec_t.impl&%2.get_keys.? K&. K& I&. I& L&. L& E&. E& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((lib!kv.kvspec_t.impl&%2.get_keys.? K&. K& I&. I& L&. L& E&. E& self!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128)))
(set-info :comment ";; Function-Axioms lib::pmem::pmemspec_t::PersistentMemoryRegionsView::committed")
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%7.committed.))
(declare-fun %%lambda%%3 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0) i$) (Poly%vstd!seq.Seq<u8.>. (lib!pmem.pmemspec_t.impl&%6.committed.? (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.impl&%7.spec_index.? %%hole%%0 i$))))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0) i$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%7.committed.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%7.committed.? self!) (%Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (vstd!seq.Seq.new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%fun%1. $ INT $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (I (lib!pmem.pmemspec_t.impl&%7.len.? self!)) (Poly%fun%1. (mk_fun (%%lambda%%3 self!)))))) :pattern ((lib!pmem.pmemspec_t.impl&%7.committed.? self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&) :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Eq. U&. U&) (tr_bound%core!cmp.Eq. T&. T&)) (tr_bound%core!cmp.Eq. $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%tuple%2. U&. U& T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ BOOL $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!cmp.Eq. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%core!option.Option. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialEq. A&. A& B&. B&) (tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!cmp.Eq. A&. A&) (tr_bound%core!cmp.Eq. (REF A&.) A&)) :pattern ((tr_bound%core!cmp.Eq. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. B&. B& B&. B&) (tr_bound%core!cmp.PartialEq. C&. C& C&. C&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&) $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&) $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type)) (! (=> (and (tr_bound%core!cmp.Eq. B&. B&) (tr_bound%core!cmp.Eq. C&. C&)) (tr_bound%core!cmp.Eq. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. $ (TYPE%core!marker.PhantomData. T&. T&) $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!marker.PhantomData. T&. T&) $ (TYPE%core!marker.PhantomData. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Eq. $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%core!marker.PhantomData. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 128) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.PartialEq. $ TYPE%core!convert.Infallible. $ TYPE%core!convert.Infallible.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!cmp.Eq. $ TYPE%core!convert.Infallible.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Eq. $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.Eq. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& U&. U&) (tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (SLICE U&. U&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!cmp.Eq. $ (SLICE T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Eq. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.Eq. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. E&. E& E&. E&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!cmp.Eq. E&. E&)) (tr_bound%core!cmp.Eq. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%core!result.Result. T&. T& E&. E&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%core!alloc.Allocator. A1&. A1&) (tr_bound%core!alloc.Allocator. A2&. A2&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A1&. A1&) $ (TYPE%alloc!vec.Vec. U&. U& A2&. A2&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A1&. A1&) $ (TYPE%alloc!vec.Vec. U&. U& A2&. A2&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&)) (tr_bound%core!cmp.Eq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!fmt.Debug. U&. U&) (tr_bound%core!fmt.Debug. T&. T&)) (tr_bound%core!fmt.Debug. $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%tuple%2. U&. U& T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type)) (! (=> (and (tr_bound%core!fmt.Debug. B&. B&) (tr_bound%core!fmt.Debug. C&. C&)) (tr_bound%core!fmt.Debug. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!fmt.Debug. $ (PTR T&. T&)) :pattern ((tr_bound%core!fmt.Debug. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ TYPE%core!convert.Infallible.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%core!option.Option. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. (REF T&.) T&)) :pattern ((tr_bound%core!fmt.Debug. (REF T&.) T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. $ (SLICE T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!fmt.Debug. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!fmt.Debug. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!fmt.Debug. $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%core!marker.PhantomData. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%core!fmt.Debug. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%core!result.Result. T&. T& E&. E&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&)) (tr_bound%core!fmt.Debug. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!fmt.Debug. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. (REF $) (SLICE T&. T&) $ (TYPE%alloc!vec.Vec. U&. U& A&. A&))) :pattern ((tr_bound%core!cmp.PartialEq. (REF $) (SLICE T&. T&) $ (TYPE%alloc!vec.Vec. U&. U& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (TYPE%alloc!vec.Vec. U&. U& A&. A&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE T&. T&) $ (TYPE%alloc!vec.Vec. U&. U& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) $ (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) $ (SLICE U&. U&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!cmp.PartialEq. T&. T& U&. U&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) (REF $) (SLICE U&. U&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) (REF $) (SLICE U&. U&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. T&. T& T&. T&) :pattern ((tr_bound%core!convert.From. T&. T& T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 128) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 128) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 128) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 8) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 64) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT 64) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. $ (TYPE%core!option.Option. (REF T&.) T&) (REF $) (TYPE%core!option.Option. T&. T&)) :pattern ((tr_bound%core!convert.From. $ (TYPE%core!option.Option. (REF T&.) T&) (REF $) (TYPE%core!option.Option. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!convert.From. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%core!convert.From. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT SZ) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!convert.From. $ (UINT SZ) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!convert.From. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) (REF $) (SLICE T&. T&))) :pattern ((tr_bound%core!convert.From. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) (REF $) (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!hash.Hash. $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%core!marker.PhantomData. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ TYPE%core!convert.Infallible.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. (REF T&.) T&)) :pattern ((tr_bound%core!hash.Hash. (REF T&.) T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (B&. Dcr) (B& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. B&. B&)) (tr_bound%core!hash.Hash. $ (TYPE%tuple%2. T&. T& B&. B&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%tuple%2. T&. T& B&. B&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%core!option.Option. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. E&. E&)) (tr_bound%core!hash.Hash. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%core!result.Result. T&. T& E&. E&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!hash.Hash. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!hash.Hash. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!hash.Hash. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type)) (! (=> (and (tr_bound%core!hash.Hash. B&. B&) (tr_bound%core!hash.Hash. C&. C&)) (tr_bound%core!hash.Hash. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. $ (SLICE T&. T&))) :pattern ((tr_bound%core!hash.Hash. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!hash.Hash. $ (PTR T&. T&)) :pattern ((tr_bound%core!hash.Hash. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&)) (tr_bound%core!hash.Hash. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. E&. E&)) (tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!marker.PhantomData. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((B&. Dcr) (B& Type) (C&. Dcr) (C& Type)) (! (=> (and (tr_bound%core!clone.Clone. B&. B&) (tr_bound%core!clone.Clone. C&. C&)) (tr_bound%core!clone.Clone. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!ops.control_flow.ControlFlow. B&. B& C&. C&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%core!convert.Infallible.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) :pattern ((tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. PM&. PM&) (tr_bound%core!hash.Hash. K&. K&) (tr_bound%core!cmp.Eq. K&. K&) (tr_bound%core!clone.Clone. K&. K&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. K&. K&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. I&. I&) (tr_bound%lib!kv.kvimpl_t.Item. I&. I& K&. K&) (tr_bound%core!fmt.Debug. I&. I&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. L&. L&) (tr_bound%core!fmt.Debug. L&. L&) (tr_bound%lib!kv.durable.durableimpl_v.DurableKvStore. D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%lib!pmem.wrpm_t.CheckPermission. $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((tr_bound%lib!pmem.wrpm_t.CheckPermission. $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. K&. K& K&. K&) (tr_bound%core!cmp.PartialEq. E&. E& E&. E&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!clone.Clone. K&. K&) (tr_bound%core!clone.Clone. E&. E&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%core!clone.Clone. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ BOOL))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_new")
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_new. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Int Int Int core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pmem! Poly) (kvstore_id! Int) (max_keys! Int) (list_node_size! Int) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_new. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pmem! kvstore_id! max_keys! list_node_size! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (=> (is-core!result.Result./Ok_ result!) (let ((new_kv$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!))))) (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& new_kv$))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_new. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pmem! kvstore_id! max_keys! list_node_size! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::new")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.new. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pmem! Poly) (kvstore_id! Int) (max_keys! Int) (list_node_size! Int)) (! (= (req%lib!kv.kvimpl_t.impl&%5.new. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pmem! kvstore_id! max_keys! list_node_size!) (=> %%global_location_label%%7 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? PM&. PM& pmem!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.new. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pmem! kvstore_id! max_keys! list_node_size!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.new. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Int Int Int core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pmem! Poly) (kvstore_id! Int) (max_keys! Int) (list_node_size! Int) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.new. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pmem! kvstore_id! max_keys! list_node_size! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (=> (is-core!result.Result./Ok_ result!) (let ((new_kv$ (%Poly%lib!kv.kvimpl_t.KvStore. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. new_kv$)))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.new. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pmem! kvstore_id! max_keys! list_node_size! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::new")
(set-info :comment ";; src/kv/kvimpl_t.rs:113:5: 118:46 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::restore")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.restore. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pmem! Poly) (region_size! Int) (kvstore_id! Int)) (! (= (req%lib!kv.kvimpl_t.impl&%5.restore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pmem! region_size! kvstore_id!) (=> %%global_location_label%%8 (%B (lib!pmem.pmemspec_t.PersistentMemoryRegions.inv.? PM&. PM& pmem!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.restore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pmem! region_size! kvstore_id!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.restore. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Int Int core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pmem! Poly) (region_size! Int) (kvstore_id! Int) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.restore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pmem! region_size! kvstore_id! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (=> (is-core!result.Result./Ok_ result!) (let ((restored_kv$ (%Poly%lib!kv.kvimpl_t.KvStore. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (let ((restored_state$ (lib!kv.kvimpl_v.impl&%0.recover.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (lib!pmem.pmemspec_t.impl&%7.committed.? (lib!pmem.pmemspec_t.PersistentMemoryRegions.view.? PM&. PM& pmem!))) (I kvstore_id!)))) (and (is-core!option.Option./Some_ restored_state$) (let ((restored_state$1 (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. restored_state$)))))) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. restored_kv$)) restored_state$1)))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.restore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pmem! region_size! kvstore_id! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::restore")
(set-info :comment ";; src/kv/kvimpl_t.rs:142:5: 142:103 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_contains_key")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_contains_key. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_contains_key. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key!) (=> %%global_location_label%%9 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_contains_key. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_contains_key. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Bool) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (result! Bool)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_contains_key. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! result!) (ite (= result! true) (is-core!option.Option./Some_ (lib!kv.kvspec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) key!)) (is-core!option.Option./None_ (lib!kv.kvspec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) key!)))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_contains_key. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvspec_t::TrustedKvPermission::new_two_possibilities")
(declare-fun ens%lib!kv.kvspec_t.impl&%1.new_two_possibilities. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Int lib!kv.kvspec_t.AbstractKvStoreState. lib!kv.kvspec_t.AbstractKvStoreState. Poly) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (E&. Dcr) (E& Type) (kv_id! Int) (state1! lib!kv.kvspec_t.AbstractKvStoreState.) (state2! lib!kv.kvspec_t.AbstractKvStoreState.) (perm! Poly)) (! (= (ens%lib!kv.kvspec_t.impl&%1.new_two_possibilities. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E& kv_id! state1! state2! perm!) (and (has_type perm! (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&)) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) perm! s$)) (or (= (%Poly%core!option.Option. (lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E& s$ (I kv_id!))) (core!option.Option./Some (Poly%lib!kv.kvspec_t.AbstractKvStoreState. state1!))) (= (%Poly%core!option.Option. (lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E& s$ (I kv_id!))) (core!option.Option./Some (Poly%lib!kv.kvspec_t.AbstractKvStoreState. state2!)))))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) perm! s$)) )))) :pattern ((ens%lib!kv.kvspec_t.impl&%1.new_two_possibilities. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E& kv_id! state1! state2! perm!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_create")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_create. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (key! Poly) (item! Poly) (perm! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_create. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! item! perm!) (and (=> %%global_location_label%%10 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!)) (=> %%global_location_label%%11 (= key! (lib!kv.kvimpl_t.Item.spec_key.? I&. I& K&. K& item!))))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_create. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! item! perm!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_create. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly Poly core!result.Result.) Bool)
(define-fun is-tuple%0./tuple%0_ ((c tuple%0.)) Bool ((_ is tuple%0./tuple%0) c))
(define-fun is-lib!kv.kvimpl_t.KvError./KeyAlreadyExists_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./KeyAlreadyExists) c))
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (self! Poly) (key! Poly) (item! Poly) (perm! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_create. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! item! perm! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type self! (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.create.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!)) key! item!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyAlreadyExists_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))))) key!) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!) (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_create. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! item! perm! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::create")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.create. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (item! Poly)) (! (= (req%lib!kv.kvimpl_t.impl&%5.create. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! item!) (and (=> %%global_location_label%%12 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!))) (=> %%global_location_label%%13 (= key! (lib!kv.kvimpl_t.Item.spec_key.? I&. I& K&. K& item!))))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.create. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! item!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.create. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. lib!kv.kvimpl_t.KvStore. Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (item! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.create. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! item! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type (Poly%lib!kv.kvimpl_t.KvStore. self!) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.create.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!))) key! item!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyAlreadyExists_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))))) key!) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)) (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.create. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! item! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::create")
(set-info :comment ";; src/kv/kvimpl_t.rs:160:5: 160:81 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_read_item")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_read_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_read_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key!) (=> %%global_location_label%%14 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_read_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_read_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly core!option.Option.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (result! core!option.Option.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_read_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! result!) (and (has_type (Poly%core!option.Option. result!) (TYPE%core!option.Option. (REF I&.) I&)) (let ((spec_result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) key!))) (let ((tmp%%$ (tuple%2./tuple%2 (Poly%core!option.Option. result!) (Poly%core!option.Option. spec_result$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (let ((output_item$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((spec_item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (= spec_item$ output_item$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((output_item$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) false) (=> (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (let ((spec_item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) false))))))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_read_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::read_item")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.read_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly)) (! (= (req%lib!kv.kvimpl_t.impl&%5.read_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key!) (=> %%global_location_label%%15 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.read_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.read_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly core!option.Option.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (result! core!option.Option.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.read_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! result!) (and (has_type (Poly%core!option.Option. result!) (TYPE%core!option.Option. (REF I&.) I&)) (let ((spec_result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!))) key!))) (let ((tmp%%$ (tuple%2./tuple%2 (Poly%core!option.Option. result!) (Poly%core!option.Option. spec_result$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (let ((output_item$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((spec_item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (= spec_item$ output_item$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((output_item$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) false) (=> (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (let ((spec_item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) false))))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.read_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::read_item")
(set-info :comment ";; src/kv/kvimpl_t.rs:186:5: 186:56 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_read_list_entry_at_index")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_read_list_entry_at_index. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Int)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_read_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! idx!) (=> %%global_location_label%%16 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_read_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! idx!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_read_list_entry_at_index. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Int core!result.Result.) Bool)
(define-fun is-lib!kv.kvimpl_t.KvError./IndexOutOfRange_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./IndexOutOfRange) c))
(define-fun is-lib!kv.kvimpl_t.KvError./KeyNotFound_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./KeyNotFound) c))
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Int) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_read_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! idx! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. (REF L&.) L& $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (let ((spec_result$ (lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) key! (I idx!)))) (let ((tmp%%$ (tuple%2./tuple%2 (Poly%core!result.Result. result!) (Poly%core!result.Result. spec_result$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!result.Result./Ok_ (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!result.Result./Ok_ (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((output_entry$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((spec_entry$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (= output_entry$ spec_entry$))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (and (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-lib!kv.kvimpl_t.KvError./IndexOutOfRange_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (and (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-lib!kv.kvimpl_t.KvError./IndexOutOfRange_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))))) key!) (<= (vstd!seq.Seq.len.? L&. L& (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!map.impl&%0.index.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)))) key!)))) idx!)) (and (and (and (is-tuple%2./tuple%2_ tmp%%$) (and (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (and (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))))) key!))))))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_read_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! idx! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::read_list_entry_at_index")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.read_list_entry_at_index. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly Int) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (idx! Int)) (! (= (req%lib!kv.kvimpl_t.impl&%5.read_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! idx!) (=> %%global_location_label%%17 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.read_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! idx!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.read_list_entry_at_index. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly Int core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (idx! Int) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.read_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! idx! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. (REF L&.) L& $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (let ((spec_result$ (lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!))) key! (I idx!)))) (let ((tmp%%$ (tuple%2./tuple%2 (Poly%core!result.Result. result!) (Poly%core!result.Result. spec_result$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!result.Result./Ok_ (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!result.Result./Ok_ (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((output_entry$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((spec_entry$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (= output_entry$ spec_entry$))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (and (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-lib!kv.kvimpl_t.KvError./IndexOutOfRange_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (and (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-lib!kv.kvimpl_t.KvError./IndexOutOfRange_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))))) key!) (<= (vstd!seq.Seq.len.? L&. L& (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!map.impl&%0.index.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!))))) key!)))) idx!)) (and (and (and (is-tuple%2./tuple%2_ tmp%%$) (and (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (and (is-core!result.Result./Err_ (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))))) (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))))) key!))))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.read_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! key! idx! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::read_list_entry_at_index")
(set-info :comment ";; src/kv/kvimpl_t.rs:226:5: 226:96 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_update_item")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (key! Poly) (new_item! Poly) (perm! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_item! perm!) (=> %%global_location_label%%18 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_item! perm!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (self! Poly) (key! Poly) (new_item! Poly) (perm! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_item! perm! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type self! (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_item.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!)) key! new_item!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))))) key!)) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!) (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_item! perm! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::update_item")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (new_item! Poly)) (! (= (req%lib!kv.kvimpl_t.impl&%5.update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_item!) (=> %%global_location_label%%19 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_item!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. lib!kv.kvimpl_t.KvStore. Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (new_item! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_item! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type (Poly%lib!kv.kvimpl_t.KvStore. self!) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_item.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!))) key! new_item!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))))) key!)) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)) (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_item! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::update_item")
(set-info :comment ";; src/kv/kvimpl_t.rs:269:5: 269:90 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_delete")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_delete. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (key! Poly) (perm! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_delete. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! perm!) (=> %%global_location_label%%20 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_delete. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! perm!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_delete. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (self! Poly) (key! Poly) (perm! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_delete. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! perm! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type self! (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.delete.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!)) key!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))))) key!)) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!) (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_delete. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! perm! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::delete")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.delete. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (key! Poly)) (! (= (req%lib!kv.kvimpl_t.impl&%5.delete. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key!) (=> %%global_location_label%%21 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.delete. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.delete. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. lib!kv.kvimpl_t.KvStore. Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.delete. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type (Poly%lib!kv.kvimpl_t.KvStore. self!) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.delete.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!))) key!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))))) key!)) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)) (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.delete. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::delete")
(set-info :comment ";; src/kv/kvimpl_t.rs:294:5: 294:72 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_append_to_list")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (key! Poly) (new_list_entry! Poly) (perm! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_list_entry! perm!) (=> %%global_location_label%%22 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_list_entry! perm!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (self! Poly) (key! Poly) (new_list_entry! Poly) (perm! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_list_entry! perm! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type self! (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.append_to_list.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!)) key! new_list_entry!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))))) key!)) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!) (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_list_entry! perm! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::append_to_list")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.append_to_list. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (new_list_entry! Poly)) (! (= (req%lib!kv.kvimpl_t.impl&%5.append_to_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_list_entry!) (=> %%global_location_label%%23 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.append_to_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_list_entry!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.append_to_list. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. lib!kv.kvimpl_t.KvStore. Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (new_list_entry! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.append_to_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_list_entry! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type (Poly%lib!kv.kvimpl_t.KvStore. self!) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.append_to_list.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!))) key! new_list_entry!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))))) key!)) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)) (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.append_to_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_list_entry! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::append_to_list")
(set-info :comment ";; src/kv/kvimpl_t.rs:319:5: 323:44 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_append_to_list_and_update_item")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list_and_update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (key! Poly) (new_list_entry! Poly) (new_item! Poly) (perm! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_list_entry! new_item! perm!) (=> %%global_location_label%%24 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_list_entry! new_item! perm!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list_and_update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (self! Poly) (key! Poly) (new_list_entry! Poly) (new_item! Poly) (perm! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_list_entry! new_item! perm! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type self! (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!)) key! new_list_entry! new_item!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))))) key!)) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!) (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_append_to_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_list_entry! new_item! perm! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::append_to_list_and_update_item")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.append_to_list_and_update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly Poly Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (new_list_entry! Poly) (new_item! Poly)) (! (= (req%lib!kv.kvimpl_t.impl&%5.append_to_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_list_entry! new_item!) (=> %%global_location_label%%25 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.append_to_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! new_list_entry! new_item!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.append_to_list_and_update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. lib!kv.kvimpl_t.KvStore. Poly Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (new_list_entry! Poly) (new_item! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.append_to_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_list_entry! new_item! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type (Poly%lib!kv.kvimpl_t.KvStore. self!) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!))) key! new_list_entry! new_item!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))))) key!)) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)) (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.append_to_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! new_list_entry! new_item! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::append_to_list_and_update_item")
(set-info :comment ";; src/kv/kvimpl_t.rs:348:5: 353:44 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_update_list_entry_at_index")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_update_list_entry_at_index. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (key! Poly) (idx! Int) (new_list_entry! Poly) (perm! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_update_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! idx! new_list_entry! perm!) (=> %%global_location_label%%26 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_update_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! idx! new_list_entry! perm!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_update_list_entry_at_index. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Int Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (self! Poly) (key! Poly) (idx! Int) (new_list_entry! Poly) (perm! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_update_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! idx! new_list_entry! perm! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type self! (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!)) key! (I idx!) new_list_entry!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))))) key!)) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!) (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_update_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! idx! new_list_entry! perm! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::update_list_entry_at_index")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.update_list_entry_at_index. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly Int Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (idx! Int) (new_list_entry! Poly)) (! (= (req%lib!kv.kvimpl_t.impl&%5.update_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! idx! new_list_entry!) (=> %%global_location_label%%27 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.update_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! idx! new_list_entry!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.update_list_entry_at_index. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. lib!kv.kvimpl_t.KvStore. Poly Int Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (idx! Int) (new_list_entry! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.update_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! idx! new_list_entry! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type (Poly%lib!kv.kvimpl_t.KvStore. self!) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!))) key! (I idx!) new_list_entry!)))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))))) key!)) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)) (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.update_list_entry_at_index. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! idx! new_list_entry! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::update_list_entry_at_index")
(set-info :comment ";; src/kv/kvimpl_t.rs:378:5: 378:123 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_update_entry_at_index_and_item")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_update_entry_at_index_and_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Int Poly Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (key! Poly) (idx! Int) (new_list_entry! Poly) (new_item! Poly) (perm! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_update_entry_at_index_and_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! idx! new_list_entry! new_item! perm!) (=> %%global_location_label%%28 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_update_entry_at_index_and_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! idx! new_list_entry! new_item! perm!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_update_entry_at_index_and_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Int Poly Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (self! Poly) (key! Poly) (idx! Int) (new_list_entry! Poly) (new_item! Poly) (perm! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_update_entry_at_index_and_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! idx! new_list_entry! new_item! perm! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type self! (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!)) key! (I idx!) new_list_entry! new_item!))))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))))) key!)) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!) (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_update_entry_at_index_and_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! idx! new_list_entry! new_item! perm! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::update_entry_at_index_and_item")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.update_entry_at_index_and_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (idx! Int) (new_list_entry! Poly) (new_item! Poly)) (! (= (req%lib!kv.kvimpl_t.impl&%5.update_entry_at_index_and_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! idx! new_list_entry! new_item!) (=> %%global_location_label%%29 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.update_entry_at_index_and_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! idx! new_list_entry! new_item!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.update_entry_at_index_and_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. lib!kv.kvimpl_t.KvStore. Poly Int Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (idx! Int) (new_list_entry! Poly) (new_item! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.update_entry_at_index_and_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! idx! new_list_entry! new_item! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type (Poly%lib!kv.kvimpl_t.KvStore. self!) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!))) key! (I idx!) new_list_entry! new_item!))))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))))) key!)) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)) (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.update_entry_at_index_and_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! idx! new_list_entry! new_item! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::update_entry_at_index_and_item")
(set-info :comment ";; src/kv/kvimpl_t.rs:402:5: 408:44 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_trim_list")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Int Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (key! Poly) (trim_length! Int) (perm! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! trim_length! perm!) (=> %%global_location_label%%30 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! trim_length! perm!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Int Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (self! Poly) (key! Poly) (trim_length! Int) (perm! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! trim_length! perm! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type self! (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.trim_list.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!)) key! (I trim_length!)))))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))))) key!)) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!) (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! trim_length! perm! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::trim_list")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.trim_list. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly Int) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (trim_length! Int)) (! (= (req%lib!kv.kvimpl_t.impl&%5.trim_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! trim_length!) (=> %%global_location_label%%31 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.trim_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! trim_length!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.trim_list. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. lib!kv.kvimpl_t.KvStore. Poly Int core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (trim_length! Int) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.trim_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! trim_length! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type (Poly%lib!kv.kvimpl_t.KvStore. self!) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.trim_list.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!))) key! (I trim_length!)))))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))))) key!)) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)) (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.trim_list. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! trim_length! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::trim_list")
(set-info :comment ";; src/kv/kvimpl_t.rs:432:5: 436:44 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_trim_list_and_update_item")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list_and_update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Int Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (key! Poly) (trim_length! Int) (new_item! Poly) (perm! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! trim_length! new_item! perm!) (=> %%global_location_label%%32 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! trim_length! new_item! perm!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list_and_update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Int Poly Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! Poly) (self! Poly) (key! Poly) (trim_length! Int) (new_item! Poly) (perm! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! trim_length! new_item! perm! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type self! (TYPE%lib!kv.kvimpl_v.UntrustedKvStoreImpl. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!)) key! (I trim_length!) new_item!))))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!))))) key!)) (= (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self!) (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_trim_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! trim_length! new_item! perm! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::trim_list_and_update_item")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.trim_list_and_update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly Int Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (trim_length! Int) (new_item! Poly)) (! (= (req%lib!kv.kvimpl_t.impl&%5.trim_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! trim_length! new_item!) (=> %%global_location_label%%33 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.trim_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! key! trim_length! new_item!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.trim_list_and_update_item. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. lib!kv.kvimpl_t.KvStore. Poly Int Poly core!result.Result.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (pre%self! lib!kv.kvimpl_t.KvStore.) (self! lib!kv.kvimpl_t.KvStore.) (key! Poly) (trim_length! Int) (new_item! Poly) (result! core!result.Result.)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.trim_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! trim_length! new_item! result!) (and (has_type (Poly%core!result.Result. result!) (TYPE%core!result.Result. $ TYPE%tuple%0. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) (has_type (Poly%lib!kv.kvimpl_t.KvStore. self!) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)) (ite (and (is-core!result.Result./Ok_ result!) (is-tuple%0./tuple%0_ (%Poly%tuple%0. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)) (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!))) key! (I trim_length!) new_item!))))))) (and (and (is-core!result.Result./Err_ result!) (is-lib!kv.kvimpl_t.KvError./KeyNotFound_ (%Poly%lib!kv.kvimpl_t.KvError. (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) (and (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)))))) key!)) (= (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. pre%self!)) (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.trim_list_and_update_item. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& pre%self! self! key! trim_length! new_item! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::trim_list_and_update_item")
(set-info :comment ";; src/kv/kvimpl_t.rs:460:5: 465:44 (#0)")
(set-info :comment ";; Function-Specs lib::kv::kvimpl_v::UntrustedKvStoreImpl::untrusted_get_keys")
(declare-fun req%lib!kv.kvimpl_v.impl&%0.untrusted_get_keys. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (req%lib!kv.kvimpl_v.impl&%0.untrusted_get_keys. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (=> %%global_location_label%%34 (lib!kv.kvimpl_v.impl&%0.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!))) :pattern ((req%lib!kv.kvimpl_v.impl&%0.untrusted_get_keys. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) )))
(declare-fun ens%lib!kv.kvimpl_v.impl&%0.untrusted_get_keys. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! Poly) (result! Poly)) (! (= (ens%lib!kv.kvimpl_v.impl&%0.untrusted_get_keys. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! result!) (and (has_type result! (TYPE%alloc!vec.Vec. K&. K& $ ALLOCATOR_GLOBAL)) (= (vstd!seq_lib.impl&%0.to_set.? K&. K& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. K&. K& $ ALLOCATOR_GLOBAL) result!)) (lib!kv.kvspec_t.impl&%2.get_keys.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_v.impl&%0.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)))))) :pattern ((ens%lib!kv.kvimpl_v.impl&%0.untrusted_get_keys. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! result!)) )))
(set-info :comment ";; Function-Specs lib::kv::kvimpl_t::KvStore::get_keys")
(declare-fun req%lib!kv.kvimpl_t.impl&%5.get_keys. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore.) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! lib!kv.kvimpl_t.KvStore.)) (! (= (req%lib!kv.kvimpl_t.impl&%5.get_keys. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!) (=> %%global_location_label%%35 (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))) :pattern ((req%lib!kv.kvimpl_t.impl&%5.get_keys. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self!)) )))
(declare-fun ens%lib!kv.kvimpl_t.impl&%5.get_keys. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type lib!kv.kvimpl_t.KvStore. Poly) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (V&. Dcr) (V& Type) (E&. Dcr) (E& Type) (self! lib!kv.kvimpl_t.KvStore.) (result! Poly)) (! (= (ens%lib!kv.kvimpl_t.impl&%5.get_keys. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! result!) (and (has_type result! (TYPE%alloc!vec.Vec. K&. K& $ ALLOCATOR_GLOBAL)) (= (vstd!seq_lib.impl&%0.to_set.? K&. K& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. K&. K& $ ALLOCATOR_GLOBAL) result!)) (lib!kv.kvspec_t.impl&%2.get_keys.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!))))))) :pattern ((ens%lib!kv.kvimpl_t.impl&%5.get_keys. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& self! result!)) )))
(set-info :comment ";; Function-Def lib::kv::kvimpl_t::KvStore::get_keys")
(set-info :comment ";; src/kv/kvimpl_t.rs:489:5: 489:42 (#0)")
(declare-const PM&. Dcr)
(declare-const PM& Type)
(declare-const K&. Dcr)
(declare-const K& Type)
(declare-const I&. Dcr)
(declare-const I& Type)
(declare-const L&. Dcr)
(declare-const L& Type)
(declare-const D&. Dcr)
(declare-const D& Type)
(declare-const V&. Dcr)
(declare-const V& Type)
(declare-const E&. Dcr)
(declare-const E& Type)
(declare-const result! Poly)
(declare-const self! lib!kv.kvimpl_t.KvStore.)
(declare-const tmp%1 Poly)
(declare-const tmp%2 Poly)
(assert fuel_defaults)
(assert (has_type (Poly%lib!kv.kvimpl_t.KvStore. self!) (TYPE%lib!kv.kvimpl_t.KvStore. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E&)))
(assert (tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. PM&. PM&))
(assert (tr_bound%core!hash.Hash. K&. K&))
(assert (tr_bound%core!cmp.Eq. K&. K&))
(assert (tr_bound%core!clone.Clone. K&. K&))
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. K&. K&))
(assert (tr_bound%core!fmt.Debug. K&. K&))
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. I&. I&))
(assert (tr_bound%lib!kv.kvimpl_t.Item. I&. I& K&. K&))
(assert (tr_bound%core!fmt.Debug. I&. I&))
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. L&. L&))
(assert (tr_bound%core!fmt.Debug. L&. L&))
(assert (tr_bound%lib!kv.durable.durableimpl_v.DurableKvStore. D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E&))
(assert (tr_bound%lib!kv.volatile.volatileimpl_v.VolatileKvIndex. V&. V& K&. K& E&. E&))
(assert (tr_bound%core!fmt.Debug. E&. E&))
(assert (lib!kv.kvimpl_t.impl&%5.valid.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!)))
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%1 Bool)
(assert (not (=> (= tmp%2 (lib!kv.kvimpl_t.KvStore./KvStore/untrusted_kv_impl (%Poly%lib!kv.kvimpl_t.KvStore. (Poly%lib!kv.kvimpl_t.KvStore. self!)))) (and (=> %%location_label%%0 (req%lib!kv.kvimpl_v.impl&%0.untrusted_get_keys. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& tmp%2)) (=> (ens%lib!kv.kvimpl_v.impl&%0.untrusted_get_keys. PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& tmp%2 tmp%1) (=> (= result! tmp%1) (=> %%location_label%%1 (= (vstd!seq_lib.impl&%0.to_set.? K&. K& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. K&. K& $ ALLOCATOR_GLOBAL) result!)) (lib!kv.kvspec_t.impl&%2.get_keys.? K&. K& I&. I& L&. L& E&. E& (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvimpl_t.impl&%5.view.? PM&. PM& K&. K& I&. I& L&. L& D&. D& V&. V& E&. E& (Poly%lib!kv.kvimpl_t.KvStore. self!))))))))))))
(check-sat)
(exit)
