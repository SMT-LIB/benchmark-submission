(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module kv::volatile::volatilespec_t'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.impl&%0.len. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.remove_keys. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%vstd!set_lib.axiom_is_empty. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%0.has_free_space. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%0.append_entry. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.spec_index. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.contains_key. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.len. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.insert_item_offset. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.append_node_offset. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.get_node_view. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.get_node_offset. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.list_len. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.append_to_list. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.trim_list. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.remove. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.empty. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.keys. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.impl&%0.len. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.is_empty. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.remove_keys. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!set_lib.impl&%0.is_empty. fuel%vstd!set_lib.axiom_is_empty. fuel%lib!kv.volatile.volatilespec_t.impl&%0.has_free_space. fuel%lib!kv.volatile.volatilespec_t.impl&%0.append_entry. fuel%lib!kv.volatile.volatilespec_t.impl&%1.spec_index. fuel%lib!kv.volatile.volatilespec_t.impl&%1.contains_key. fuel%lib!kv.volatile.volatilespec_t.impl&%1.len. fuel%lib!kv.volatile.volatilespec_t.impl&%1.insert_item_offset. fuel%lib!kv.volatile.volatilespec_t.impl&%1.append_node_offset. fuel%lib!kv.volatile.volatilespec_t.impl&%1.get_node_view. fuel%lib!kv.volatile.volatilespec_t.impl&%1.get_node_offset. fuel%lib!kv.volatile.volatilespec_t.impl&%1.list_len. fuel%lib!kv.volatile.volatilespec_t.impl&%1.append_to_list. fuel%lib!kv.volatile.volatilespec_t.impl&%1.trim_list. fuel%lib!kv.volatile.volatilespec_t.impl&%1.remove. fuel%lib!kv.volatile.volatilespec_t.impl&%1.empty. fuel%lib!kv.volatile.volatilespec_t.impl&%1.keys. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (=> (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!set_lib.axiom_is_empty.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. 0)
(declare-sort vstd!set.Set<tuple%2<int./int.>.>. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. 0) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. 0) (lib!kv.volatile.volatilespec_t.VolatileKvIndexView. 0) (lib!kv.kvimpl_t.KvError. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?start_index Int) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?live_index Int) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?physical_offset Int) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?free_entries Int))) ((lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?item_offset Int) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?list_node_offsets vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?list_len Int))) ((lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/?contents Poly) (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/?list_entries_per_node Int))) ((lib!kv.kvimpl_t.KvError./NotImplemented ) (lib!kv.kvimpl_t.KvError./InvalidParameter ) (lib!kv.kvimpl_t.KvError./InternalError ) (lib!kv.kvimpl_t.KvError./KeyNotFound ) (lib!kv.kvimpl_t.KvError./KeyAlreadyExists ) (lib!kv.kvimpl_t.KvError./InvalidKey (lib!kv.kvimpl_t.KvError./InvalidKey/?key Poly)) (lib!kv.kvimpl_t.KvError./IndexOutOfRange ) (lib!kv.kvimpl_t.KvError./RegionTooSmall (lib!kv.kvimpl_t.KvError./RegionTooSmall/?required Int) (lib!kv.kvimpl_t.KvError./RegionTooSmall/?actual Int)) (lib!kv.kvimpl_t.KvError./OutOfSpace ) (lib!kv.kvimpl_t.KvError./InvalidPersistentMemoryRegionProvided ) (lib!kv.kvimpl_t.KvError./SerializationError (lib!kv.kvimpl_t.KvError./SerializationError/?error Poly)) (lib!kv.kvimpl_t.KvError./DeserializationError (lib!kv.kvimpl_t.KvError./DeserializationError/?error Poly))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/start_index (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/live_index (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/physical_offset (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/free_entries (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/item_offset (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_node_offsets (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.)
(declare-fun lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_len (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (lib!kv.volatile.volatilespec_t.VolatileKvIndexView.) Poly)
(declare-fun lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/list_entries_per_node (lib!kv.volatile.volatilespec_t.VolatileKvIndexView.) Int)
(declare-fun lib!kv.kvimpl_t.KvError./InvalidKey/key (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun lib!kv.kvimpl_t.KvError./RegionTooSmall/required (lib!kv.kvimpl_t.KvError.) Int)
(declare-fun lib!kv.kvimpl_t.KvError./RegionTooSmall/actual (lib!kv.kvimpl_t.KvError.) Int)
(declare-fun lib!kv.kvimpl_t.KvError./SerializationError/error (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun lib!kv.kvimpl_t.KvError./DeserializationError/error (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. Type)
(declare-const TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. Type)
(declare-fun TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (Dcr Type) Type)
(declare-fun TYPE%lib!kv.kvimpl_t.KvError. (Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (Poly) vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.)
(declare-fun Poly%vstd!set.Set<tuple%2<int./int.>.>. (vstd!set.Set<tuple%2<int./int.>.>.) Poly)
(declare-fun %Poly%vstd!set.Set<tuple%2<int./int.>.>. (Poly) vstd!set.Set<tuple%2<int./int.>.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) Poly)
(declare-fun %Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (Poly) lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)
(declare-fun Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) Poly)
(declare-fun %Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (Poly) lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)
(declare-fun Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView.) Poly)
(declare-fun %Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (Poly) lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)
(declare-fun Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun %Poly%lib!kv.kvimpl_t.KvError. (Poly) lib!kv.kvimpl_t.KvError.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.)) (! (= x (%Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. x))) :pattern ((Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (= x (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (%Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.))) )))
(assert (forall ((x vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.)) (! (has_type (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. x) (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) :pattern ((has_type (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. x) (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.))) )))
(assert (forall ((x vstd!set.Set<tuple%2<int./int.>.>.)) (! (= x (%Poly%vstd!set.Set<tuple%2<int./int.>.>. (Poly%vstd!set.Set<tuple%2<int./int.>.>. x))) :pattern ((Poly%vstd!set.Set<tuple%2<int./int.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ INT $ INT))) (= x (Poly%vstd!set.Set<tuple%2<int./int.>.>. (%Poly%vstd!set.Set<tuple%2<int./int.>.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ INT $ INT)))) )))
(assert (forall ((x vstd!set.Set<tuple%2<int./int.>.>.)) (! (has_type (Poly%vstd!set.Set<tuple%2<int./int.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ INT $ INT))) :pattern ((has_type (Poly%vstd!set.Set<tuple%2<int./int.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%tuple%2. $ INT $ INT)))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))) )))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (= x (%Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. x))) :pattern ((Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) (= x (Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (%Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. x)))) :pattern ((has_type x TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/start_index x) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?start_index x)) :pattern ((lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/start_index x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/live_index x) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?live_index x)) :pattern ((lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/live_index x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/physical_offset x) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?physical_offset x)) :pattern ((lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/physical_offset x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/free_entries x) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?free_entries x)) :pattern ((lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/free_entries x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (has_type (Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. x) TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) :pattern ((has_type (Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. x) TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (! (= x (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. x))) :pattern ((Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) (= x (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. x)))) :pattern ((has_type x TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/item_offset x) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?item_offset x)) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/item_offset x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_node_offsets x) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?list_node_offsets x)) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_node_offsets x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_len x) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?list_len x)) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_len x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (! (has_type (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. x) TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) :pattern ((has_type (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. x) TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) (! (= x (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x))) :pattern ((Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&)) (= x (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)))) :pattern ((has_type x (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_contents! Poly) (_list_entries_per_node! Int)) (! (=> (has_type _contents! (TYPE%vstd!map.Map. K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (has_type (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView _contents! _list_entries_per_node!)) (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&))) :pattern ((has_type (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView _contents! _list_entries_per_node!)) (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&))) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) (! (= (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x) (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/?contents x)) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&)) (has_type (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)) (TYPE%vstd!map.Map. K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.))) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)) (has_type x (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&))) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) (! (= (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/list_entries_per_node x) (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/?list_entries_per_node x)) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/list_entries_per_node x)) )))
(define-fun is-lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView_ ((c lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) Bool ((_ is lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView) c))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) (! (=> (is-lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView_ x) (height_lt (height (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x)) (height (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)))) :pattern ((height (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x))) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) (! (=> (is-lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView_ x) (height_lt (height (fun_from_recursive_field (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x))) (height (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)))) :pattern ((height (fun_from_recursive_field (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x)))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= x (%Poly%lib!kv.kvimpl_t.KvError. (Poly%lib!kv.kvimpl_t.KvError. x))) :pattern ((Poly%lib!kv.kvimpl_t.KvError. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (= x (Poly%lib!kv.kvimpl_t.KvError. (%Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./NotImplemented) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./NotImplemented) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidParameter) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidParameter) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InternalError) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InternalError) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyAlreadyExists) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyAlreadyExists) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_key! Poly)) (! (=> (has_type _key! K&) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./InvalidKey _key!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./InvalidKey _key!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./InvalidKey/key x) (lib!kv.kvimpl_t.KvError./InvalidKey/?key x)) :pattern ((lib!kv.kvimpl_t.KvError./InvalidKey/key x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.KvError./InvalidKey/key (%Poly%lib!kv.kvimpl_t.KvError. x)) K&)) :pattern ((lib!kv.kvimpl_t.KvError./InvalidKey/key (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./IndexOutOfRange) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./IndexOutOfRange) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_required! Int) (_actual! Int)) (! (=> (and (uInv SZ _required!) (uInv SZ _actual!)) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./RegionTooSmall _required! _actual!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./RegionTooSmall _required! _actual!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./RegionTooSmall/required x) (lib!kv.kvimpl_t.KvError./RegionTooSmall/?required x)) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/required x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (uInv SZ (lib!kv.kvimpl_t.KvError./RegionTooSmall/required (%Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/required (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./RegionTooSmall/actual x) (lib!kv.kvimpl_t.KvError./RegionTooSmall/?actual x)) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/actual x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (uInv SZ (lib!kv.kvimpl_t.KvError./RegionTooSmall/actual (%Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/actual (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./OutOfSpace) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./OutOfSpace) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidPersistentMemoryRegionProvided) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidPersistentMemoryRegionProvided) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_error! Poly)) (! (=> (has_type _error! E&) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./SerializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./SerializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./SerializationError/error x) (lib!kv.kvimpl_t.KvError./SerializationError/?error x)) :pattern ((lib!kv.kvimpl_t.KvError./SerializationError/error x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.KvError./SerializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) E&)) :pattern ((lib!kv.kvimpl_t.KvError./SerializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_error! Poly)) (! (=> (has_type _error! E&) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./DeserializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./DeserializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./DeserializationError/error x) (lib!kv.kvimpl_t.KvError./DeserializationError/?error x)) :pattern ((lib!kv.kvimpl_t.KvError./DeserializationError/error x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.KvError./DeserializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) E&)) :pattern ((lib!kv.kvimpl_t.KvError./DeserializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(define-fun is-lib!kv.kvimpl_t.KvError./InvalidKey_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./InvalidKey) c))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (=> (is-lib!kv.kvimpl_t.KvError./InvalidKey_ x) (height_lt (height (lib!kv.kvimpl_t.KvError./InvalidKey/key x)) (height (Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((height (lib!kv.kvimpl_t.KvError./InvalidKey/key x))) )))
(define-fun is-lib!kv.kvimpl_t.KvError./SerializationError_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./SerializationError) c))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (=> (is-lib!kv.kvimpl_t.KvError./SerializationError_ x) (height_lt (height (lib!kv.kvimpl_t.KvError./SerializationError/error x)) (height (Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((height (lib!kv.kvimpl_t.KvError./SerializationError/error x))) )))
(define-fun is-lib!kv.kvimpl_t.KvError./DeserializationError_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./DeserializationError) c))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (=> (is-lib!kv.kvimpl_t.KvError./DeserializationError_ x) (height_lt (height (lib!kv.kvimpl_t.KvError./DeserializationError/error x)) (height (Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((height (lib!kv.kvimpl_t.KvError./DeserializationError/error x))) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%core!fmt.Debug. (Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialEq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.Eq. (Dcr Type) Bool)
(declare-fun tr_bound%core!hash.Hash. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!fmt.Debug. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! true :pattern ((tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!cmp.Eq. Self%&. Self%&) (tr_bound%core!cmp.PartialEq. Self%&. Self%& Self%&. Self%&)) :pattern ((tr_bound%core!cmp.Eq. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!hash.Hash. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::is_empty")
(declare-fun vstd!set_lib.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::is_empty")
(declare-fun vstd!map_lib.impl&%0.is_empty.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::len")
(declare-fun vstd!map.impl&%0.len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::empty")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::spec_index")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? (Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::insert_item_offset")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.insert_item_offset.? (Dcr Type Poly Poly Poly) lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::len")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::contains_key")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.contains_key.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::get_node_view")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.get_node_view.? (Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::list_len")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.list_len.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::ListNodeIndexEntry::has_free_space")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%0.has_free_space.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::ListNodeIndexEntry::append_entry")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%0.append_entry.? (Dcr Type Dcr Type Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::append_to_list")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.append_to_list.? (Dcr Type Dcr Type Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::get_node_offset")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.get_node_offset.? (Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::remove_keys")
(declare-fun vstd!map_lib.impl&%0.remove_keys.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::trim_list")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.trim_list.? (Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::keys")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.keys.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::append_node_offset")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.append_node_offset.? (Dcr Type Poly Poly Poly Poly) lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)
(set-info :comment ";; Function-Decl lib::kv::volatile::volatilespec_t::VolatileKvIndexView::remove")
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.remove.? (Dcr Type Poly Poly) lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::is_empty")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_empty.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_empty.? A&. A& self!) (= (vstd!set.impl&%0.len.? A&. A& self!) 0)) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::is_empty")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.is_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!map_lib.impl&%0.is_empty.? K&. K& V&. V& self!) (vstd!set_lib.impl&%0.is_empty.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!))) :pattern ((vstd!map_lib.impl&%0.is_empty.? K&. K& V&. V& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%0 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%2 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::len")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.len.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.len.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!map.impl&%0.len.? K&. K& V&. V& self!) (vstd!set.impl&%0.len.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!))) :pattern ((vstd!map.impl&%0.len.? K&. K& V&. V& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (<= 0 (vstd!map.impl&%0.len.? K&. K& V&. V& self!))) :pattern ((vstd!map.impl&%0.len.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Axioms lib::kv::volatile::volatilespec_t::VolatileKvIndexView::empty")
(assert (fuel_bool_default fuel%lib!kv.volatile.volatilespec_t.impl&%1.empty.))
(assert (=> (fuel_bool fuel%lib!kv.volatile.volatilespec_t.impl&%1.empty.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!kv.volatile.volatilespec_t.impl&%1.empty.? K&. K& self!) (and (vstd!set_lib.impl&%0.is_empty.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. self!)))) (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. self!)))))) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.empty.? K&. K& self!)) ))))
(set-info :comment ";; Function-Axioms lib::kv::volatile::volatilespec_t::VolatileKvIndexView::spec_index")
(assert (fuel_bool_default fuel%lib!kv.volatile.volatilespec_t.impl&%1.spec_index.))
(assert (=> (fuel_bool fuel%lib!kv.volatile.volatilespec_t.impl&%1.spec_index.) (forall ((K&. Dcr) (K& Type) (self! Poly) (key! Poly)) (! (= (lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? K&. K& self! key!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. self!))) key!) (core!option.Option./Some (vstd!map.impl&%0.index.? K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. self!)) key!)) core!option.Option./None)) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? K&. K& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&)) (has_type key! K&)) (has_type (Poly%core!option.Option. (lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? K&. K& self! key!)) (TYPE%core!option.Option. $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.))) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? K&. K& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::kv::volatile::volatilespec_t::VolatileKvIndexView::insert_item_offset")
(assert (fuel_bool_default fuel%lib!kv.volatile.volatilespec_t.impl&%1.insert_item_offset.))
(assert (=> (fuel_bool fuel%lib!kv.volatile.volatilespec_t.impl&%1.insert_item_offset.) (forall ((K&. Dcr) (K& Type) (self! Poly) (key! Poly) (item_offset! Poly)) (! (= (lib!kv.volatile.volatilespec_t.impl&%1.insert_item_offset.? K&. K& self! key! item_offset!) (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView (vstd!map.impl&%0.insert.? K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. self!)) key! (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry (%I item_offset!) (%Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (vstd!map.impl&%0.empty.? $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (%I (I 0))))) (%I (I (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/list_entries_per_node (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. self!)))))) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.insert_item_offset.? K&. K& self! key! item_offset!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (self! Poly) (key! Poly) (item_offset! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&)) (has_type key! K&) (has_type item_offset! INT)) (has_type (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (lib!kv.volatile.volatilespec_t.impl&%1.insert_item_offset.? K&. K& self! key! item_offset!)) (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&))) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.insert_item_offset.? K&. K& self! key! item_offset!)) )))
(set-info :comment ";; Function-Axioms lib::kv::volatile::volatilespec_t::VolatileKvIndexView::len")
(assert (fuel_bool_default fuel%lib!kv.volatile.volatilespec_t.impl&%1.len.))
(assert (=> (fuel_bool fuel%lib!kv.volatile.volatilespec_t.impl&%1.len.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!kv.volatile.volatilespec_t.impl&%1.len.? K&. K& self!) (vstd!map.impl&%0.len.? K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. self!)))) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.len.? K&. K& self!)) ))))
(set-info :comment ";; Function-Axioms lib::kv::volatile::volatilespec_t::VolatileKvIndexView::contains_key")
(assert (fuel_bool_default fuel%lib!kv.volatile.volatilespec_t.impl&%1.contains_key.))
(assert (=> (fuel_bool fuel%lib!kv.volatile.volatilespec_t.impl&%1.contains_key.) (forall ((K&. Dcr) (K& Type) (self! Poly) (key! Poly)) (! (= (lib!kv.volatile.volatilespec_t.impl&%1.contains_key.? K&. K& self! key!) (is-core!option.Option./Some_ (lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? K&. K& self! key!))) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.contains_key.? K&. K& self! key!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%core!fmt.Debug. E&. E&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%core!fmt.Debug. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(set-info :comment ";; Function-Axioms lib::kv::volatile::volatilespec_t::VolatileKvIndexView::get_node_view")
(assert (fuel_bool_default fuel%lib!kv.volatile.volatilespec_t.impl&%1.get_node_view.))
(declare-fun %%choose%%0 (Type Int Int Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Int) (%%hole%%2 Int) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Poly)) (! (=> (exists ((k$ Poly)) (! (and (has_type k$ %%hole%%0) (let ((i$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. k$))))) (let ((j$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. k$))))) (and (and (<= i$ %%hole%%1) (< %%hole%%2 j$)) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$))))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%6 %%hole%%7 %%hole%%8 k$)) )) (exists ((k$ Poly)) (! (and (and (has_type k$ %%hole%%0) (let ((i$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. k$))))) (let ((j$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. k$))))) (and (and (<= i$ %%hole%%1) (< %%hole%%2 j$)) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$))))) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) k$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%6 %%hole%%7 %%hole%%8 k$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8)))))
(assert (=> (fuel_bool fuel%lib!kv.volatile.volatilespec_t.impl&%1.get_node_view.) (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (index! Poly)) (! (= (lib!kv.volatile.volatilespec_t.impl&%1.get_node_view.? K&. K& E&. E& self! key! index!) (ite (not (lib!kv.volatile.volatilespec_t.impl&%1.contains_key.? K&. K& self! key!)) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound)) (let ((index_entry$ (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (vstd!map.impl&%0.index.? K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. self!)) key!)))) (ite (exists ((k$ Poly)) (! (and (has_type k$ (TYPE%tuple%2. $ INT $ INT)) (let ((i$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. k$))))) (let ((j$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. k$))))) (and (and (<= i$ (%I index!)) (< (%I index!) j$)) (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ INT $ INT) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_node_offsets (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. index_entry$))))) k$))))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ INT $ INT) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_node_offsets (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. index_entry$))))) k$)) )) (let ((range$ (%Poly%tuple%2. (as_type (%%choose%%0 (TYPE%tuple%2. $ INT $ INT) (%I index!) (%I index!) $ (TYPE%tuple%2. $ INT $ INT) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_node_offsets (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. index_entry$))))) $ (TYPE%tuple%2. $ INT $ INT) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_node_offsets (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. index_entry$)))))) (TYPE%tuple%2. $ INT $ INT))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (Poly%tuple%2. range$) (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_node_offsets (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. index_entry$)))) (Poly%tuple%2. range$)))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./IndexOutOfRange)))))) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.get_node_view.? K&. K& E&. E& self! key! index!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (index! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&)) (has_type key! K&) (has_type index! INT)) (has_type (Poly%core!result.Result. (lib!kv.volatile.volatilespec_t.impl&%1.get_node_view.? K&. K& E&. E& self! key! index!)) (TYPE%core!result.Result. $ (TYPE%tuple%2. $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.get_node_view.? K&. K& E&. E& self! key! index!)) )))
(set-info :comment ";; Function-Specs lib::kv::volatile::volatilespec_t::VolatileKvIndexView::list_len")
(declare-fun req%lib!kv.volatile.volatilespec_t.impl&%1.list_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! Poly) (key! Poly)) (! (= (req%lib!kv.volatile.volatilespec_t.impl&%1.list_len. K&. K& self! key!) (=> %%global_location_label%%3 (lib!kv.volatile.volatilespec_t.impl&%1.contains_key.? K&. K& self! key!))) :pattern ((req%lib!kv.volatile.volatilespec_t.impl&%1.list_len. K&. K& self! key!)) )))
(set-info :comment ";; Function-Recommends lib::kv::volatile::volatilespec_t::VolatileKvIndexView::list_len")
(set-info :comment ";; src/kv/volatile/volatilespec_t.rs:169:9: 169:65 (#0)")
(declare-const K&. Dcr)
(declare-const K& Type)
(declare-const %return! Int)
(declare-const self! Poly)
(declare-const key! Poly)
(declare-const tmp%1 Poly)
(declare-const tmp%2 Poly)
(assert fuel_defaults)
(assert (has_type self! (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&)))
(assert (has_type key! K&))
(assert (tr_bound%core!hash.Hash. K&. K&))
(assert (tr_bound%core!cmp.Eq. K&. K&))
(assert (tr_bound%core!fmt.Debug. K&. K&))
(set-info :comment ";; recommendation not met")
(declare-const %%location_label%%0 Bool)
(assert (not (=> (lib!kv.volatile.volatilespec_t.impl&%1.contains_key.? K&. K& self! key!) (=> (= tmp%2 (Poly%core!option.Option. (lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? K&. K& self! key!))) (=> %%location_label%%0 (req%vstd!std_specs.option.spec_unwrap. $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. tmp%2))))))
(check-sat)
(exit)
