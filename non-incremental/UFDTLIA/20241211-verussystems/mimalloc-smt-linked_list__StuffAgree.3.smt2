(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module linked_list::StuffAgree'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%0.arrow_set_0. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%1.is_set. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%1.get_set_0. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%2.arrow_initialize_0. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%3.get_initialize_0. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.initialize. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.initialize_enabled. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.set. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.set_strong. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.set_enabled. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.next_by. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.next. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.next_strong_by. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.next_strong. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.init_by. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.init. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.invariant. FuelId)
(declare-const fuel%lib!linked_list.StuffAgree.impl&%9.inv_eq. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%lib!linked_list.StuffAgree.impl&%0.arrow_set_0. fuel%lib!linked_list.StuffAgree.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!linked_list.StuffAgree.impl&%1.is_set. fuel%lib!linked_list.StuffAgree.impl&%1.get_set_0. fuel%lib!linked_list.StuffAgree.impl&%1.is_dummy_to_use_type_params. fuel%lib!linked_list.StuffAgree.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!linked_list.StuffAgree.impl&%2.arrow_initialize_0. fuel%lib!linked_list.StuffAgree.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!linked_list.StuffAgree.impl&%3.is_initialize. fuel%lib!linked_list.StuffAgree.impl&%3.get_initialize_0. fuel%lib!linked_list.StuffAgree.impl&%3.is_dummy_to_use_type_params. fuel%lib!linked_list.StuffAgree.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!linked_list.StuffAgree.impl&%9.initialize. fuel%lib!linked_list.StuffAgree.impl&%9.initialize_enabled. fuel%lib!linked_list.StuffAgree.impl&%9.set. fuel%lib!linked_list.StuffAgree.impl&%9.set_strong. fuel%lib!linked_list.StuffAgree.impl&%9.set_enabled. fuel%lib!linked_list.StuffAgree.impl&%9.next_by. fuel%lib!linked_list.StuffAgree.impl&%9.next. fuel%lib!linked_list.StuffAgree.impl&%9.next_strong_by. fuel%lib!linked_list.StuffAgree.impl&%9.next_strong. fuel%lib!linked_list.StuffAgree.impl&%9.init_by. fuel%lib!linked_list.StuffAgree.impl&%9.init. fuel%lib!linked_list.StuffAgree.impl&%9.invariant. fuel%lib!linked_list.StuffAgree.impl&%9.inv_eq. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!state_machine_internal.NoCopy. 0)
(declare-sort vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. 0)
(declare-datatypes ((core!option.Option. 0) (lib!linked_list.StuffAgree.State. 0) (lib!linked_list.StuffAgree.Step. 0) (lib!linked_list.StuffAgree.Config. 0) (lib!linked_list.StuffAgree.Instance. 0) (lib!linked_list.StuffAgree.x. 0) (lib!linked_list.StuffAgree.x_token_data. 0) (lib!linked_list.StuffAgree.y. 0) (lib!linked_list.StuffAgree.y_token_data. 0) (lib!tokens.SegmentId. 0) (lib!tokens.PageId. 0) (lib!linked_list.BlockSizePageId. 0) (tuple%0. 0) (tuple%1. 0) (tuple%3. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!linked_list.StuffAgree.State./State (lib!linked_list.StuffAgree.State./State/?x core!option.Option.) (lib!linked_list.StuffAgree.State./State/?y core!option.Option.))) ((lib!linked_list.StuffAgree.Step./set (lib!linked_list.StuffAgree.Step./set/?0 core!option.Option.)) (lib!linked_list.StuffAgree.Step./dummy_to_use_type_params (lib!linked_list.StuffAgree.Step./dummy_to_use_type_params/?0 lib!linked_list.StuffAgree.State.))) ((lib!linked_list.StuffAgree.Config./initialize (lib!linked_list.StuffAgree.Config./initialize/?0 core!option.Option.)) (lib!linked_list.StuffAgree.Config./dummy_to_use_type_params (lib!linked_list.StuffAgree.Config./dummy_to_use_type_params/?0 lib!linked_list.StuffAgree.State.))) ((lib!linked_list.StuffAgree.Instance./Instance (lib!linked_list.StuffAgree.Instance./Instance/?send_sync vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.) (lib!linked_list.StuffAgree.Instance./Instance/?state core!option.Option.) (lib!linked_list.StuffAgree.Instance./Instance/?location Int))) ((lib!linked_list.StuffAgree.x./x (lib!linked_list.StuffAgree.x./x/?dummy_instance lib!linked_list.StuffAgree.Instance.) (lib!linked_list.StuffAgree.x./x/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!linked_list.StuffAgree.x_token_data./x_token_data (lib!linked_list.StuffAgree.x_token_data./x_token_data/?instance lib!linked_list.StuffAgree.Instance.) (lib!linked_list.StuffAgree.x_token_data./x_token_data/?value core!option.Option.))) ((lib!linked_list.StuffAgree.y./y (lib!linked_list.StuffAgree.y./y/?dummy_instance lib!linked_list.StuffAgree.Instance.) (lib!linked_list.StuffAgree.y./y/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!linked_list.StuffAgree.y_token_data./y_token_data (lib!linked_list.StuffAgree.y_token_data./y_token_data/?instance lib!linked_list.StuffAgree.Instance.) (lib!linked_list.StuffAgree.y_token_data./y_token_data/?value core!option.Option.))) ((lib!tokens.SegmentId./SegmentId (lib!tokens.SegmentId./SegmentId/?id Int) (lib!tokens.SegmentId./SegmentId/?provenance vstd!raw_ptr.Provenance.) (lib!tokens.SegmentId./SegmentId/?uniq Int))) ((lib!tokens.PageId./PageId (lib!tokens.PageId./PageId/?segment_id lib!tokens.SegmentId.) (lib!tokens.PageId./PageId/?idx Int))) ((lib!linked_list.BlockSizePageId./BlockSizePageId (lib!linked_list.BlockSizePageId./BlockSizePageId/?block_size Int) (lib!linked_list.BlockSizePageId./BlockSizePageId/?page_id lib!tokens.PageId.))) ((tuple%0./tuple%0 )) ((tuple%1./tuple%1 (tuple%1./tuple%1/?0 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!linked_list.StuffAgree.State./State/x (lib!linked_list.StuffAgree.State.) core!option.Option.)
(declare-fun lib!linked_list.StuffAgree.State./State/y (lib!linked_list.StuffAgree.State.) core!option.Option.)
(declare-fun lib!linked_list.StuffAgree.Step./set/0 (lib!linked_list.StuffAgree.Step.) core!option.Option.)
(declare-fun lib!linked_list.StuffAgree.Step./dummy_to_use_type_params/0 (lib!linked_list.StuffAgree.Step.) lib!linked_list.StuffAgree.State.)
(declare-fun lib!linked_list.StuffAgree.Config./initialize/0 (lib!linked_list.StuffAgree.Config.) core!option.Option.)
(declare-fun lib!linked_list.StuffAgree.Config./dummy_to_use_type_params/0 (lib!linked_list.StuffAgree.Config.) lib!linked_list.StuffAgree.State.)
(declare-fun lib!linked_list.StuffAgree.Instance./Instance/send_sync (lib!linked_list.StuffAgree.Instance.) vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)
(declare-fun lib!linked_list.StuffAgree.Instance./Instance/state (lib!linked_list.StuffAgree.Instance.) core!option.Option.)
(declare-fun lib!linked_list.StuffAgree.Instance./Instance/location (lib!linked_list.StuffAgree.Instance.) Int)
(declare-fun lib!linked_list.StuffAgree.x./x/dummy_instance (lib!linked_list.StuffAgree.x.) lib!linked_list.StuffAgree.Instance.)
(declare-fun lib!linked_list.StuffAgree.x./x/no_copy (lib!linked_list.StuffAgree.x.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!linked_list.StuffAgree.x_token_data./x_token_data/instance (lib!linked_list.StuffAgree.x_token_data.) lib!linked_list.StuffAgree.Instance.)
(declare-fun lib!linked_list.StuffAgree.x_token_data./x_token_data/value (lib!linked_list.StuffAgree.x_token_data.) core!option.Option.)
(declare-fun lib!linked_list.StuffAgree.y./y/dummy_instance (lib!linked_list.StuffAgree.y.) lib!linked_list.StuffAgree.Instance.)
(declare-fun lib!linked_list.StuffAgree.y./y/no_copy (lib!linked_list.StuffAgree.y.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!linked_list.StuffAgree.y_token_data./y_token_data/instance (lib!linked_list.StuffAgree.y_token_data.) lib!linked_list.StuffAgree.Instance.)
(declare-fun lib!linked_list.StuffAgree.y_token_data./y_token_data/value (lib!linked_list.StuffAgree.y_token_data.) core!option.Option.)
(declare-fun lib!tokens.SegmentId./SegmentId/id (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.SegmentId./SegmentId/provenance (lib!tokens.SegmentId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.SegmentId./SegmentId/uniq (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.PageId./PageId/segment_id (lib!tokens.PageId.) lib!tokens.SegmentId.)
(declare-fun lib!tokens.PageId./PageId/idx (lib!tokens.PageId.) Int)
(declare-fun lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (lib!linked_list.BlockSizePageId.) Int)
(declare-fun lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (lib!linked_list.BlockSizePageId.) lib!tokens.PageId.)
(declare-fun tuple%1./tuple%1/0 (tuple%1.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-fun TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. (Dcr Type) Type)
(declare-const TYPE%vstd!state_machine_internal.NoCopy. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.State. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.Step. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.Config. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.Instance. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.x. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.x_token_data. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.y. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.y_token_data. Type)
(declare-const TYPE%lib!tokens.SegmentId. Type)
(declare-const TYPE%lib!tokens.PageId. Type)
(declare-const TYPE%lib!linked_list.BlockSizePageId. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%1. (Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun FNDEF%core!clone.Clone.clone. (Dcr Type) Type)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!state_machine_internal.NoCopy. (vstd!state_machine_internal.NoCopy.) Poly)
(declare-fun %Poly%vstd!state_machine_internal.NoCopy. (Poly) vstd!state_machine_internal.NoCopy.)
(declare-fun Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.) Poly)
(declare-fun %Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (Poly) vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!linked_list.StuffAgree.State. (lib!linked_list.StuffAgree.State.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.State. (Poly) lib!linked_list.StuffAgree.State.)
(declare-fun Poly%lib!linked_list.StuffAgree.Step. (lib!linked_list.StuffAgree.Step.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.Step. (Poly) lib!linked_list.StuffAgree.Step.)
(declare-fun Poly%lib!linked_list.StuffAgree.Config. (lib!linked_list.StuffAgree.Config.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.Config. (Poly) lib!linked_list.StuffAgree.Config.)
(declare-fun Poly%lib!linked_list.StuffAgree.Instance. (lib!linked_list.StuffAgree.Instance.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.Instance. (Poly) lib!linked_list.StuffAgree.Instance.)
(declare-fun Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.StuffAgree.x.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.x. (Poly) lib!linked_list.StuffAgree.x.)
(declare-fun Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.x_token_data.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.x_token_data. (Poly) lib!linked_list.StuffAgree.x_token_data.)
(declare-fun Poly%lib!linked_list.StuffAgree.y. (lib!linked_list.StuffAgree.y.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.y. (Poly) lib!linked_list.StuffAgree.y.)
(declare-fun Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.y_token_data.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.y_token_data. (Poly) lib!linked_list.StuffAgree.y_token_data.)
(declare-fun Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId.) Poly)
(declare-fun %Poly%lib!tokens.SegmentId. (Poly) lib!tokens.SegmentId.)
(declare-fun Poly%lib!tokens.PageId. (lib!tokens.PageId.) Poly)
(declare-fun %Poly%lib!tokens.PageId. (Poly) lib!tokens.PageId.)
(declare-fun Poly%lib!linked_list.BlockSizePageId. (lib!linked_list.BlockSizePageId.) Poly)
(declare-fun %Poly%lib!linked_list.BlockSizePageId. (Poly) lib!linked_list.BlockSizePageId.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%1. (tuple%1.) Poly)
(declare-fun %Poly%tuple%1. (Poly) tuple%1.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (= x (%Poly%vstd!state_machine_internal.NoCopy. (Poly%vstd!state_machine_internal.NoCopy. x))) :pattern ((Poly%vstd!state_machine_internal.NoCopy. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!state_machine_internal.NoCopy.) (= x (Poly%vstd!state_machine_internal.NoCopy. (%Poly%vstd!state_machine_internal.NoCopy. x)))) :pattern ((has_type x TYPE%vstd!state_machine_internal.NoCopy.)) )))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.) :pattern ((has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.)) )))
(assert (forall ((x vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)) (! (= x (%Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x))) :pattern ((Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.)) (= x (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. (%Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x)))) :pattern ((has_type x (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.))) )))
(assert (forall ((x vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.)) (! (has_type (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x) (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.)) :pattern ((has_type (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>. x) (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ TYPE%tuple%0.))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x lib!linked_list.StuffAgree.State.)) (! (= x (%Poly%lib!linked_list.StuffAgree.State. (Poly%lib!linked_list.StuffAgree.State. x))) :pattern ((Poly%lib!linked_list.StuffAgree.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.State.) (= x (Poly%lib!linked_list.StuffAgree.State. (%Poly%lib!linked_list.StuffAgree.State. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.State.)) )))
(assert (forall ((_x! core!option.Option.) (_y! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _x!) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.)) (has_type (Poly%core!option.Option. _y!) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) (has_type (Poly%lib!linked_list.StuffAgree.State. (lib!linked_list.StuffAgree.State./State _x! _y!)) TYPE%lib!linked_list.StuffAgree.State.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.State. (lib!linked_list.StuffAgree.State./State _x! _y!)) TYPE%lib!linked_list.StuffAgree.State.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.State.)) (! (= (lib!linked_list.StuffAgree.State./State/x x) (lib!linked_list.StuffAgree.State./State/?x x)) :pattern ((lib!linked_list.StuffAgree.State./State/x x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.State.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.State./State/x (%Poly%lib!linked_list.StuffAgree.State. x))) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.State./State/x (%Poly%lib!linked_list.StuffAgree.State. x)) (has_type x TYPE%lib!linked_list.StuffAgree.State.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.State.)) (! (= (lib!linked_list.StuffAgree.State./State/y x) (lib!linked_list.StuffAgree.State./State/?y x)) :pattern ((lib!linked_list.StuffAgree.State./State/y x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.State.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.State./State/y (%Poly%lib!linked_list.StuffAgree.State. x))) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.State./State/y (%Poly%lib!linked_list.StuffAgree.State. x)) (has_type x TYPE%lib!linked_list.StuffAgree.State.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.Step.)) (! (= x (%Poly%lib!linked_list.StuffAgree.Step. (Poly%lib!linked_list.StuffAgree.Step. x))) :pattern ((Poly%lib!linked_list.StuffAgree.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Step.) (= x (Poly%lib!linked_list.StuffAgree.Step. (%Poly%lib!linked_list.StuffAgree.Step. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.Step.)) )))
(assert (forall ((_0! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _0!) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.)) (has_type (Poly%lib!linked_list.StuffAgree.Step. (lib!linked_list.StuffAgree.Step./set _0!)) TYPE%lib!linked_list.StuffAgree.Step.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.Step. (lib!linked_list.StuffAgree.Step./set _0!)) TYPE%lib!linked_list.StuffAgree.Step.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.Step.)) (! (= (lib!linked_list.StuffAgree.Step./set/0 x) (lib!linked_list.StuffAgree.Step./set/?0 x)) :pattern ((lib!linked_list.StuffAgree.Step./set/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Step.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.Step./set/0 (%Poly%lib!linked_list.StuffAgree.Step. x))) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.Step./set/0 (%Poly%lib!linked_list.StuffAgree.Step. x)) (has_type x TYPE%lib!linked_list.StuffAgree.Step.)) )))
(assert (forall ((_0! lib!linked_list.StuffAgree.State.)) (! (=> (has_type (Poly%lib!linked_list.StuffAgree.State. _0!) TYPE%lib!linked_list.StuffAgree.State.) (has_type (Poly%lib!linked_list.StuffAgree.Step. (lib!linked_list.StuffAgree.Step./dummy_to_use_type_params _0!)) TYPE%lib!linked_list.StuffAgree.Step.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.Step. (lib!linked_list.StuffAgree.Step./dummy_to_use_type_params _0!)) TYPE%lib!linked_list.StuffAgree.Step.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.Step.)) (! (= (lib!linked_list.StuffAgree.Step./dummy_to_use_type_params/0 x) (lib!linked_list.StuffAgree.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!linked_list.StuffAgree.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Step.) (has_type (Poly%lib!linked_list.StuffAgree.State. (lib!linked_list.StuffAgree.Step./dummy_to_use_type_params/0 (%Poly%lib!linked_list.StuffAgree.Step. x))) TYPE%lib!linked_list.StuffAgree.State.)) :pattern ((lib!linked_list.StuffAgree.Step./dummy_to_use_type_params/0 (%Poly%lib!linked_list.StuffAgree.Step. x)) (has_type x TYPE%lib!linked_list.StuffAgree.Step.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.Config.)) (! (= x (%Poly%lib!linked_list.StuffAgree.Config. (Poly%lib!linked_list.StuffAgree.Config. x))) :pattern ((Poly%lib!linked_list.StuffAgree.Config. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Config.) (= x (Poly%lib!linked_list.StuffAgree.Config. (%Poly%lib!linked_list.StuffAgree.Config. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.Config.)) )))
(assert (forall ((_0! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _0!) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.)) (has_type (Poly%lib!linked_list.StuffAgree.Config. (lib!linked_list.StuffAgree.Config./initialize _0!)) TYPE%lib!linked_list.StuffAgree.Config.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.Config. (lib!linked_list.StuffAgree.Config./initialize _0!)) TYPE%lib!linked_list.StuffAgree.Config.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.Config.)) (! (= (lib!linked_list.StuffAgree.Config./initialize/0 x) (lib!linked_list.StuffAgree.Config./initialize/?0 x)) :pattern ((lib!linked_list.StuffAgree.Config./initialize/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Config.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.Config./initialize/0 (%Poly%lib!linked_list.StuffAgree.Config. x))) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.Config./initialize/0 (%Poly%lib!linked_list.StuffAgree.Config. x)) (has_type x TYPE%lib!linked_list.StuffAgree.Config.)) )))
(assert (forall ((_0! lib!linked_list.StuffAgree.State.)) (! (=> (has_type (Poly%lib!linked_list.StuffAgree.State. _0!) TYPE%lib!linked_list.StuffAgree.State.) (has_type (Poly%lib!linked_list.StuffAgree.Config. (lib!linked_list.StuffAgree.Config./dummy_to_use_type_params _0!)) TYPE%lib!linked_list.StuffAgree.Config.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.Config. (lib!linked_list.StuffAgree.Config./dummy_to_use_type_params _0!)) TYPE%lib!linked_list.StuffAgree.Config.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.Config.)) (! (= (lib!linked_list.StuffAgree.Config./dummy_to_use_type_params/0 x) (lib!linked_list.StuffAgree.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!linked_list.StuffAgree.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Config.) (has_type (Poly%lib!linked_list.StuffAgree.State. (lib!linked_list.StuffAgree.Config./dummy_to_use_type_params/0 (%Poly%lib!linked_list.StuffAgree.Config. x))) TYPE%lib!linked_list.StuffAgree.State.)) :pattern ((lib!linked_list.StuffAgree.Config./dummy_to_use_type_params/0 (%Poly%lib!linked_list.StuffAgree.Config. x)) (has_type x TYPE%lib!linked_list.StuffAgree.Config.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (= x (%Poly%lib!linked_list.StuffAgree.Instance. (Poly%lib!linked_list.StuffAgree.Instance. x))) :pattern ((Poly%lib!linked_list.StuffAgree.Instance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Instance.) (= x (Poly%lib!linked_list.StuffAgree.Instance. (%Poly%lib!linked_list.StuffAgree.Instance. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.Instance.)) )))
(assert (forall ((_send_sync! vstd!state_machine_internal.SyncSendIfSyncSend<tuple%0.>.) (_state! core!option.Option.) (_location! Int)) (! (=> (has_type (Poly%core!option.Option. _state!) (TYPE%core!option.Option. (GHOST $) TYPE%lib!linked_list.StuffAgree.State.)) (has_type (Poly%lib!linked_list.StuffAgree.Instance. (lib!linked_list.StuffAgree.Instance./Instance _send_sync! _state! _location!)) TYPE%lib!linked_list.StuffAgree.Instance.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.Instance. (lib!linked_list.StuffAgree.Instance./Instance _send_sync! _state! _location!)) TYPE%lib!linked_list.StuffAgree.Instance.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (= (lib!linked_list.StuffAgree.Instance./Instance/send_sync x) (lib!linked_list.StuffAgree.Instance./Instance/?send_sync x)) :pattern ((lib!linked_list.StuffAgree.Instance./Instance/send_sync x)) )))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (= (lib!linked_list.StuffAgree.Instance./Instance/state x) (lib!linked_list.StuffAgree.Instance./Instance/?state x)) :pattern ((lib!linked_list.StuffAgree.Instance./Instance/state x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Instance.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.Instance./Instance/state (%Poly%lib!linked_list.StuffAgree.Instance. x))) (TYPE%core!option.Option. (GHOST $) TYPE%lib!linked_list.StuffAgree.State.))) :pattern ((lib!linked_list.StuffAgree.Instance./Instance/state (%Poly%lib!linked_list.StuffAgree.Instance. x)) (has_type x TYPE%lib!linked_list.StuffAgree.Instance.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (= (lib!linked_list.StuffAgree.Instance./Instance/location x) (lib!linked_list.StuffAgree.Instance./Instance/?location x)) :pattern ((lib!linked_list.StuffAgree.Instance./Instance/location x)) )))
(assert (forall ((x lib!linked_list.StuffAgree.x.)) (! (= x (%Poly%lib!linked_list.StuffAgree.x. (Poly%lib!linked_list.StuffAgree.x. x))) :pattern ((Poly%lib!linked_list.StuffAgree.x. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x.) (= x (Poly%lib!linked_list.StuffAgree.x. (%Poly%lib!linked_list.StuffAgree.x. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.x.)) )))
(assert (forall ((_dummy_instance! lib!linked_list.StuffAgree.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!linked_list.StuffAgree.Instance. _dummy_instance!) TYPE%lib!linked_list.StuffAgree.Instance.) (has_type (Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.StuffAgree.x./x _dummy_instance! _no_copy!)) TYPE%lib!linked_list.StuffAgree.x.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.StuffAgree.x./x _dummy_instance! _no_copy!)) TYPE%lib!linked_list.StuffAgree.x.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.x.)) (! (= (lib!linked_list.StuffAgree.x./x/dummy_instance x) (lib!linked_list.StuffAgree.x./x/?dummy_instance x)) :pattern ((lib!linked_list.StuffAgree.x./x/dummy_instance x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x.) (has_type (Poly%lib!linked_list.StuffAgree.Instance. (lib!linked_list.StuffAgree.x./x/dummy_instance (%Poly%lib!linked_list.StuffAgree.x. x))) TYPE%lib!linked_list.StuffAgree.Instance.)) :pattern ((lib!linked_list.StuffAgree.x./x/dummy_instance (%Poly%lib!linked_list.StuffAgree.x. x)) (has_type x TYPE%lib!linked_list.StuffAgree.x.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.x.)) (! (= (lib!linked_list.StuffAgree.x./x/no_copy x) (lib!linked_list.StuffAgree.x./x/?no_copy x)) :pattern ((lib!linked_list.StuffAgree.x./x/no_copy x)) )))
(assert (forall ((x lib!linked_list.StuffAgree.x_token_data.)) (! (= x (%Poly%lib!linked_list.StuffAgree.x_token_data. (Poly%lib!linked_list.StuffAgree.x_token_data. x))) :pattern ((Poly%lib!linked_list.StuffAgree.x_token_data. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.) (= x (Poly%lib!linked_list.StuffAgree.x_token_data. (%Poly%lib!linked_list.StuffAgree.x_token_data. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.)) )))
(assert (forall ((_instance! lib!linked_list.StuffAgree.Instance.) (_value! core!option.Option.)) (! (=> (and (has_type (Poly%lib!linked_list.StuffAgree.Instance. _instance!) TYPE%lib!linked_list.StuffAgree.Instance.) (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) (has_type (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.x_token_data./x_token_data _instance! _value!)) TYPE%lib!linked_list.StuffAgree.x_token_data.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.x_token_data./x_token_data _instance! _value!)) TYPE%lib!linked_list.StuffAgree.x_token_data.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.x_token_data.)) (! (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/instance x) (lib!linked_list.StuffAgree.x_token_data./x_token_data/?instance x)) :pattern ((lib!linked_list.StuffAgree.x_token_data./x_token_data/instance x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.) (has_type (Poly%lib!linked_list.StuffAgree.Instance. (lib!linked_list.StuffAgree.x_token_data./x_token_data/instance (%Poly%lib!linked_list.StuffAgree.x_token_data. x))) TYPE%lib!linked_list.StuffAgree.Instance.)) :pattern ((lib!linked_list.StuffAgree.x_token_data./x_token_data/instance (%Poly%lib!linked_list.StuffAgree.x_token_data. x)) (has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.x_token_data.)) (! (= (lib!linked_list.StuffAgree.x_token_data./x_token_data/value x) (lib!linked_list.StuffAgree.x_token_data./x_token_data/?value x)) :pattern ((lib!linked_list.StuffAgree.x_token_data./x_token_data/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. x))) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.x_token_data./x_token_data/value (%Poly%lib!linked_list.StuffAgree.x_token_data. x)) (has_type x TYPE%lib!linked_list.StuffAgree.x_token_data.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.y.)) (! (= x (%Poly%lib!linked_list.StuffAgree.y. (Poly%lib!linked_list.StuffAgree.y. x))) :pattern ((Poly%lib!linked_list.StuffAgree.y. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.y.) (= x (Poly%lib!linked_list.StuffAgree.y. (%Poly%lib!linked_list.StuffAgree.y. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.y.)) )))
(assert (forall ((_dummy_instance! lib!linked_list.StuffAgree.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!linked_list.StuffAgree.Instance. _dummy_instance!) TYPE%lib!linked_list.StuffAgree.Instance.) (has_type (Poly%lib!linked_list.StuffAgree.y. (lib!linked_list.StuffAgree.y./y _dummy_instance! _no_copy!)) TYPE%lib!linked_list.StuffAgree.y.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.y. (lib!linked_list.StuffAgree.y./y _dummy_instance! _no_copy!)) TYPE%lib!linked_list.StuffAgree.y.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.y.)) (! (= (lib!linked_list.StuffAgree.y./y/dummy_instance x) (lib!linked_list.StuffAgree.y./y/?dummy_instance x)) :pattern ((lib!linked_list.StuffAgree.y./y/dummy_instance x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.y.) (has_type (Poly%lib!linked_list.StuffAgree.Instance. (lib!linked_list.StuffAgree.y./y/dummy_instance (%Poly%lib!linked_list.StuffAgree.y. x))) TYPE%lib!linked_list.StuffAgree.Instance.)) :pattern ((lib!linked_list.StuffAgree.y./y/dummy_instance (%Poly%lib!linked_list.StuffAgree.y. x)) (has_type x TYPE%lib!linked_list.StuffAgree.y.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.y.)) (! (= (lib!linked_list.StuffAgree.y./y/no_copy x) (lib!linked_list.StuffAgree.y./y/?no_copy x)) :pattern ((lib!linked_list.StuffAgree.y./y/no_copy x)) )))
(assert (forall ((x lib!linked_list.StuffAgree.y_token_data.)) (! (= x (%Poly%lib!linked_list.StuffAgree.y_token_data. (Poly%lib!linked_list.StuffAgree.y_token_data. x))) :pattern ((Poly%lib!linked_list.StuffAgree.y_token_data. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.y_token_data.) (= x (Poly%lib!linked_list.StuffAgree.y_token_data. (%Poly%lib!linked_list.StuffAgree.y_token_data. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.y_token_data.)) )))
(assert (forall ((_instance! lib!linked_list.StuffAgree.Instance.) (_value! core!option.Option.)) (! (=> (and (has_type (Poly%lib!linked_list.StuffAgree.Instance. _instance!) TYPE%lib!linked_list.StuffAgree.Instance.) (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) (has_type (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.y_token_data./y_token_data _instance! _value!)) TYPE%lib!linked_list.StuffAgree.y_token_data.)) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.y_token_data./y_token_data _instance! _value!)) TYPE%lib!linked_list.StuffAgree.y_token_data.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.y_token_data.)) (! (= (lib!linked_list.StuffAgree.y_token_data./y_token_data/instance x) (lib!linked_list.StuffAgree.y_token_data./y_token_data/?instance x)) :pattern ((lib!linked_list.StuffAgree.y_token_data./y_token_data/instance x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.y_token_data.) (has_type (Poly%lib!linked_list.StuffAgree.Instance. (lib!linked_list.StuffAgree.y_token_data./y_token_data/instance (%Poly%lib!linked_list.StuffAgree.y_token_data. x))) TYPE%lib!linked_list.StuffAgree.Instance.)) :pattern ((lib!linked_list.StuffAgree.y_token_data./y_token_data/instance (%Poly%lib!linked_list.StuffAgree.y_token_data. x)) (has_type x TYPE%lib!linked_list.StuffAgree.y_token_data.)) )))
(assert (forall ((x lib!linked_list.StuffAgree.y_token_data.)) (! (= (lib!linked_list.StuffAgree.y_token_data./y_token_data/value x) (lib!linked_list.StuffAgree.y_token_data./y_token_data/?value x)) :pattern ((lib!linked_list.StuffAgree.y_token_data./y_token_data/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.y_token_data.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.y_token_data./y_token_data/value (%Poly%lib!linked_list.StuffAgree.y_token_data. x))) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.y_token_data./y_token_data/value (%Poly%lib!linked_list.StuffAgree.y_token_data. x)) (has_type x TYPE%lib!linked_list.StuffAgree.y_token_data.)) )))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= x (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. x))) :pattern ((Poly%lib!tokens.SegmentId. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (= x (Poly%lib!tokens.SegmentId. (%Poly%lib!tokens.SegmentId. x)))) :pattern ((has_type x TYPE%lib!tokens.SegmentId.)) )))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.) (_uniq! Int)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)) :pattern ((has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)) )))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/id x) (lib!tokens.SegmentId./SegmentId/?id x)) :pattern ((lib!tokens.SegmentId./SegmentId/id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (<= 0 (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)))) :pattern ((lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)) (has_type x TYPE%lib!tokens.SegmentId.)) )))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/provenance x) (lib!tokens.SegmentId./SegmentId/?provenance x)) :pattern ((lib!tokens.SegmentId./SegmentId/provenance x)) )))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/uniq x) (lib!tokens.SegmentId./SegmentId/?uniq x)) :pattern ((lib!tokens.SegmentId./SegmentId/uniq x)) )))
(assert (forall ((x lib!tokens.PageId.)) (! (= x (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. x))) :pattern ((Poly%lib!tokens.PageId. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (= x (Poly%lib!tokens.PageId. (%Poly%lib!tokens.PageId. x)))) :pattern ((has_type x TYPE%lib!tokens.PageId.)) )))
(assert (forall ((_segment_id! lib!tokens.SegmentId.) (_idx! Int)) (! (=> (and (has_type (Poly%lib!tokens.SegmentId. _segment_id!) TYPE%lib!tokens.SegmentId.) (<= 0 _idx!)) (has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)) )))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/segment_id x) (lib!tokens.PageId./PageId/?segment_id x)) :pattern ((lib!tokens.PageId./PageId/segment_id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)) )))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/idx x) (lib!tokens.PageId./PageId/?idx x)) :pattern ((lib!tokens.PageId./PageId/idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (<= 0 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)))) :pattern ((lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)) )))
(assert (forall ((x lib!linked_list.BlockSizePageId.)) (! (= x (%Poly%lib!linked_list.BlockSizePageId. (Poly%lib!linked_list.BlockSizePageId. x))) :pattern ((Poly%lib!linked_list.BlockSizePageId. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.BlockSizePageId.) (= x (Poly%lib!linked_list.BlockSizePageId. (%Poly%lib!linked_list.BlockSizePageId. x)))) :pattern ((has_type x TYPE%lib!linked_list.BlockSizePageId.)) )))
(assert (forall ((_block_size! Int) (_page_id! lib!tokens.PageId.)) (! (=> (and (<= 0 _block_size!) (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.)) (has_type (Poly%lib!linked_list.BlockSizePageId. (lib!linked_list.BlockSizePageId./BlockSizePageId _block_size! _page_id!)) TYPE%lib!linked_list.BlockSizePageId.)) :pattern ((has_type (Poly%lib!linked_list.BlockSizePageId. (lib!linked_list.BlockSizePageId./BlockSizePageId _block_size! _page_id!)) TYPE%lib!linked_list.BlockSizePageId.)) )))
(assert (forall ((x lib!linked_list.BlockSizePageId.)) (! (= (lib!linked_list.BlockSizePageId./BlockSizePageId/block_size x) (lib!linked_list.BlockSizePageId./BlockSizePageId/?block_size x)) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/block_size x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.BlockSizePageId.) (<= 0 (lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (%Poly%lib!linked_list.BlockSizePageId. x)))) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/block_size (%Poly%lib!linked_list.BlockSizePageId. x)) (has_type x TYPE%lib!linked_list.BlockSizePageId.)) )))
(assert (forall ((x lib!linked_list.BlockSizePageId.)) (! (= (lib!linked_list.BlockSizePageId./BlockSizePageId/page_id x) (lib!linked_list.BlockSizePageId./BlockSizePageId/?page_id x)) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/page_id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.BlockSizePageId.) (has_type (Poly%lib!tokens.PageId. (lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (%Poly%lib!linked_list.BlockSizePageId. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!linked_list.BlockSizePageId./BlockSizePageId/page_id (%Poly%lib!linked_list.BlockSizePageId. x)) (has_type x TYPE%lib!linked_list.BlockSizePageId.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%1.)) (! (= x (%Poly%tuple%1. (Poly%tuple%1. x))) :pattern ((Poly%tuple%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (= x (Poly%tuple%1. (%Poly%tuple%1. x)))) :pattern ((has_type x (TYPE%tuple%1. T%0&. T%0&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (_0! Poly)) (! (=> (has_type _0! T%0&) (has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) :pattern ((has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) )))
(assert (forall ((x tuple%1.)) (! (= (tuple%1./tuple%1/0 x) (tuple%1./tuple%1/?0 x)) :pattern ((tuple%1./tuple%1/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) T%0&)) :pattern ((tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (has_type x (TYPE%tuple%1. T%0&. T%0&))) )))
(define-fun is-tuple%1./tuple%1_ ((c tuple%1.)) Bool ((_ is tuple%1./tuple%1) c))
(assert (forall ((x tuple%1.)) (! (=> (is-tuple%1./tuple%1_ x) (height_lt (height (tuple%1./tuple%1/0 x)) (height (Poly%tuple%1. x)))) :pattern ((height (tuple%1./tuple%1/0 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type y (TYPE%tuple%1. T%0&. T%0&)) (ext_eq deep T%0& (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (tuple%1./tuple%1/0 (%Poly%tuple%1. y)))) (ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) :pattern ((ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) )))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_none")
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::set")
(declare-fun lib!linked_list.StuffAgree.impl&%9.set.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::next_by")
(declare-fun lib!linked_list.StuffAgree.impl&%9.next_by.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::next")
(declare-fun lib!linked_list.StuffAgree.impl&%9.next.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::initialize")
(declare-fun lib!linked_list.StuffAgree.impl&%9.initialize.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::init_by")
(declare-fun lib!linked_list.StuffAgree.impl&%9.init_by.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::init")
(declare-fun lib!linked_list.StuffAgree.impl&%9.init.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::x::view")
(declare-fun lib!linked_list.StuffAgree.impl&%4.view.? (Poly) lib!linked_list.StuffAgree.x_token_data.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::y::view")
(declare-fun lib!linked_list.StuffAgree.impl&%5.view.? (Poly) lib!linked_list.StuffAgree.y_token_data.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::inv_eq")
(declare-fun lib!linked_list.StuffAgree.impl&%9.inv_eq.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Step::arrow_set_0")
(declare-fun lib!linked_list.StuffAgree.impl&%0.arrow_set_0.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Step::arrow_dummy_to_use_type_params_0")
(declare-fun lib!linked_list.StuffAgree.impl&%0.arrow_dummy_to_use_type_params_0.? (Poly) lib!linked_list.StuffAgree.State.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Step::is_set")
(declare-fun lib!linked_list.StuffAgree.impl&%1.is_set.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Step::get_set_0")
(declare-fun lib!linked_list.StuffAgree.impl&%1.get_set_0.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Step::is_dummy_to_use_type_params")
(declare-fun lib!linked_list.StuffAgree.impl&%1.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Step::get_dummy_to_use_type_params_0")
(declare-fun lib!linked_list.StuffAgree.impl&%1.get_dummy_to_use_type_params_0.? (Poly) lib!linked_list.StuffAgree.State.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Config::arrow_initialize_0")
(declare-fun lib!linked_list.StuffAgree.impl&%2.arrow_initialize_0.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Config::arrow_dummy_to_use_type_params_0")
(declare-fun lib!linked_list.StuffAgree.impl&%2.arrow_dummy_to_use_type_params_0.? (Poly) lib!linked_list.StuffAgree.State.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Config::is_initialize")
(declare-fun lib!linked_list.StuffAgree.impl&%3.is_initialize.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Config::get_initialize_0")
(declare-fun lib!linked_list.StuffAgree.impl&%3.get_initialize_0.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Config::is_dummy_to_use_type_params")
(declare-fun lib!linked_list.StuffAgree.impl&%3.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::Config::get_dummy_to_use_type_params_0")
(declare-fun lib!linked_list.StuffAgree.impl&%3.get_dummy_to_use_type_params_0.? (Poly) lib!linked_list.StuffAgree.State.)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::initialize_enabled")
(declare-fun lib!linked_list.StuffAgree.impl&%9.initialize_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::set_strong")
(declare-fun lib!linked_list.StuffAgree.impl&%9.set_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::set_enabled")
(declare-fun lib!linked_list.StuffAgree.impl&%9.set_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::next_strong_by")
(declare-fun lib!linked_list.StuffAgree.impl&%9.next_strong_by.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::next_strong")
(declare-fun lib!linked_list.StuffAgree.impl&%9.next_strong.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::linked_list::StuffAgree::State::invariant")
(declare-fun lib!linked_list.StuffAgree.impl&%9.invariant.? (Poly) Bool)
(set-info :comment ";; Function-Specs core::clone::Clone::clone")
(declare-fun ens%core!clone.Clone.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (%return! Poly)) (! (= (ens%core!clone.Clone.clone. Self%&. Self%& self! %return!) (has_type %return! Self%&)) :pattern ((ens%core!clone.Clone.clone. Self%&. Self%& self! %return!)) )))
(assert (forall ((tmp%%$ Poly) (Self%&. Dcr) (Self%& Type)) (! (=> (has_type tmp%%$ (TYPE%tuple%1. (REF Self%&.) Self%&)) (=> (let ((self$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) true) (closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$))) :pattern ((closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$)) )))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%21::clone")
(declare-fun ens%core!clone.impls.impl&%21.clone. (Poly Poly) Bool)
(assert (forall ((b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%21.clone. b! res!) (and (ens%core!clone.Clone.clone. $ BOOL b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%21.clone. b! res!)) )))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) BOOL)) (has_type res$ BOOL)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$) (let ((b$ (%B (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%B res$) b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$)) )))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%3::clone")
(declare-fun ens%core!clone.impls.impl&%3.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%3.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (REF T&.) T& b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%3.clone. T&. T& b! res!)) )))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (REF T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$)) )))
(set-info :comment ";; Function-Specs builtin::impl&%4::clone")
(declare-fun ens%builtin!impl&%4.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%4.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (TRACKED T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%4.clone. T&. T& b! res!)) )))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (TRACKED T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$)) )))
(set-info :comment ";; Function-Specs builtin::impl&%2::clone")
(declare-fun ens%builtin!impl&%2.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%2.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (GHOST T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%2.clone. T&. T& b! res!)) )))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (GHOST T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_none")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%0 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Specs core::option::impl&%5::clone")
(declare-fun ens%core!option.impl&%5.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (opt! Poly) (res! Poly)) (! (= (ens%core!option.impl&%5.clone. T&. T& opt! res!) (and (ens%core!clone.Clone.clone. $ (TYPE%core!option.Option. T&. T&) opt! res!) (=> (is-core!option.Option./None_ (%Poly%core!option.Option. opt!)) (is-core!option.Option./None_ (%Poly%core!option.Option. res!))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. opt!)) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. res!)) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 (core!option.Option./Some/0 (%Poly%core!option.Option. opt!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. res!))))))) :pattern ((ens%core!option.impl&%5.clone. T&. T& opt! res!)) )))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (TYPE%core!option.Option. T&. T&))) (has_type res$ (TYPE%core!option.Option. T&. T&))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%core!option.Option. T&. T&)) $ (TYPE%tuple%1. (REF $) (TYPE%core!option.Option. T&. T&)) (F fndef_singleton) tmp%%$ res$) (let ((opt$ (%Poly%core!option.Option. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (and (=> (is-core!option.Option./None_ opt$) (is-core!option.Option./None_ (%Poly%core!option.Option. res$))) (=> (is-core!option.Option./Some_ opt$) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. res$)) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. opt$))))) (core!option.Option./Some/0 (%Poly%core!option.Option. res$))))))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%core!option.Option. T&. T&)) $ (TYPE%tuple%1. (REF $) (TYPE%core!option.Option. T&. T&)) (F fndef_singleton) tmp%%$ res$)) )))
(set-info :comment ";; Function-Specs alloc::boxed::impl&%12::clone")
(declare-fun ens%alloc!boxed.impl&%12.clone. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (b! Poly) (res! Poly)) (! (= (ens%alloc!boxed.impl&%12.clone. T&. T& A&. A& b! res!) (and (ens%core!clone.Clone.clone. (BOX A&. A& T&.) T& b! res!) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 b!)) res!))) :pattern ((ens%alloc!boxed.impl&%12.clone. T&. T& A&. A& b! res!)) )))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (BOX A&. A& T&.) T&) $ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 b$)) res$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (BOX A&. A& T&.) T&) $ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&) (F fndef_singleton) tmp%%$ res$)) )))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_safety")
(declare-fun req%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_safety. b!)) )))
(declare-fun ens%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_safety. b!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::set")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%9.set.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.set.) (forall ((pre! Poly) (post! Poly) (b! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.set.? pre! post! b!) (let ((tmp_assert$ true)) (let ((tmp_assert$1 (and tmp_assert$ (= (lib!linked_list.StuffAgree.State./State/x (%Poly%lib!linked_list.StuffAgree.State. pre!)) (lib!linked_list.StuffAgree.State./State/y (%Poly%lib!linked_list.StuffAgree.State. pre!)))))) (let ((update_tmp_x$ (%Poly%core!option.Option. b!))) (let ((update_tmp_y$ (%Poly%core!option.Option. b!))) (and (=> tmp_assert$1 (= (lib!linked_list.StuffAgree.State./State/y (%Poly%lib!linked_list.StuffAgree.State. post!)) update_tmp_y$)) (=> tmp_assert$1 (= (lib!linked_list.StuffAgree.State./State/x (%Poly%lib!linked_list.StuffAgree.State. post!)) update_tmp_x$)))))))) :pattern ((lib!linked_list.StuffAgree.impl&%9.set.? pre! post! b!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::next_by")
(define-fun is-lib!linked_list.StuffAgree.Step./set_ ((c lib!linked_list.StuffAgree.Step.)) Bool ((_ is lib!linked_list.StuffAgree.Step./set) c))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.next_by.) (forall ((pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.next_by.? pre! post! step!) (and (is-lib!linked_list.StuffAgree.Step./set_ (%Poly%lib!linked_list.StuffAgree.Step. step!)) (let ((b$ (lib!linked_list.StuffAgree.Step./set/0 (%Poly%lib!linked_list.StuffAgree.Step. step!)))) (lib!linked_list.StuffAgree.impl&%9.set.? pre! post! (Poly%core!option.Option. b$))))) :pattern ((lib!linked_list.StuffAgree.impl&%9.next_by.? pre! post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::next")
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.next.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.next.? pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!linked_list.StuffAgree.Step.) (lib!linked_list.StuffAgree.impl&%9.next_by.? pre! post! step$)) :pattern ((lib!linked_list.StuffAgree.impl&%9.next_by.? pre! post! step$)) ))) :pattern ((lib!linked_list.StuffAgree.impl&%9.next.? pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::initialize")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%9.initialize.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.initialize.) (forall ((post! Poly) (b! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.initialize.? post! b!) (let ((update_tmp_x$ (%Poly%core!option.Option. b!))) (let ((update_tmp_y$ (%Poly%core!option.Option. b!))) (and (= (lib!linked_list.StuffAgree.State./State/y (%Poly%lib!linked_list.StuffAgree.State. post!)) update_tmp_y$) (= (lib!linked_list.StuffAgree.State./State/x (%Poly%lib!linked_list.StuffAgree.State. post!)) update_tmp_x$))))) :pattern ((lib!linked_list.StuffAgree.impl&%9.initialize.? post! b!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::init_by")
(define-fun is-lib!linked_list.StuffAgree.Config./initialize_ ((c lib!linked_list.StuffAgree.Config.)) Bool ((_ is lib!linked_list.StuffAgree.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.init_by.) (forall ((post! Poly) (step! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.init_by.? post! step!) (and (is-lib!linked_list.StuffAgree.Config./initialize_ (%Poly%lib!linked_list.StuffAgree.Config. step!)) (let ((b$ (lib!linked_list.StuffAgree.Config./initialize/0 (%Poly%lib!linked_list.StuffAgree.Config. step!)))) (lib!linked_list.StuffAgree.impl&%9.initialize.? post! (Poly%core!option.Option. b$))))) :pattern ((lib!linked_list.StuffAgree.impl&%9.init_by.? post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::init")
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.init.) (forall ((post! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.init.? post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!linked_list.StuffAgree.Config.) (lib!linked_list.StuffAgree.impl&%9.init_by.? post! step$)) :pattern ((lib!linked_list.StuffAgree.impl&%9.init_by.? post! step$)) ))) :pattern ((lib!linked_list.StuffAgree.impl&%9.init.? post!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::x::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.x.) (has_type (Poly%lib!linked_list.StuffAgree.x_token_data. (lib!linked_list.StuffAgree.impl&%4.view.? self!)) TYPE%lib!linked_list.StuffAgree.x_token_data.)) :pattern ((lib!linked_list.StuffAgree.impl&%4.view.? self!)) )))
(set-info :comment ";; Function-Specs lib::linked_list::StuffAgree::x::arbitrary")
(declare-fun ens%lib!linked_list.StuffAgree.impl&%4.arbitrary. (Int lib!linked_list.StuffAgree.x.) Bool)
(assert (forall ((no%param Int) (%return! lib!linked_list.StuffAgree.x.)) (! (= (ens%lib!linked_list.StuffAgree.impl&%4.arbitrary. no%param %return!) (has_type (Poly%lib!linked_list.StuffAgree.x. %return!) TYPE%lib!linked_list.StuffAgree.x.)) :pattern ((ens%lib!linked_list.StuffAgree.impl&%4.arbitrary. no%param %return!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::y::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.y.) (has_type (Poly%lib!linked_list.StuffAgree.y_token_data. (lib!linked_list.StuffAgree.impl&%5.view.? self!)) TYPE%lib!linked_list.StuffAgree.y_token_data.)) :pattern ((lib!linked_list.StuffAgree.impl&%5.view.? self!)) )))
(set-info :comment ";; Function-Specs lib::linked_list::StuffAgree::y::arbitrary")
(declare-fun ens%lib!linked_list.StuffAgree.impl&%5.arbitrary. (Int lib!linked_list.StuffAgree.y.) Bool)
(assert (forall ((no%param Int) (%return! lib!linked_list.StuffAgree.y.)) (! (= (ens%lib!linked_list.StuffAgree.impl&%5.arbitrary. no%param %return!) (has_type (Poly%lib!linked_list.StuffAgree.y. %return!) TYPE%lib!linked_list.StuffAgree.y.)) :pattern ((ens%lib!linked_list.StuffAgree.impl&%5.arbitrary. no%param %return!)) )))
(set-info :comment ";; Function-Specs lib::linked_list::StuffAgree::Instance::clone")
(declare-fun ens%lib!linked_list.StuffAgree.impl&%6.clone. (lib!linked_list.StuffAgree.Instance. lib!linked_list.StuffAgree.Instance.) Bool)
(assert (forall ((self! lib!linked_list.StuffAgree.Instance.) (s! lib!linked_list.StuffAgree.Instance.)) (! (= (ens%lib!linked_list.StuffAgree.impl&%6.clone. self! s!) (and (has_type (Poly%lib!linked_list.StuffAgree.Instance. s!) TYPE%lib!linked_list.StuffAgree.Instance.) (= self! s!))) :pattern ((ens%lib!linked_list.StuffAgree.impl&%6.clone. self! s!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::inv_eq")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%9.inv_eq.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.inv_eq.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.inv_eq.? self!) (= (lib!linked_list.StuffAgree.State./State/x (%Poly%lib!linked_list.StuffAgree.State. self!)) (lib!linked_list.StuffAgree.State./State/y (%Poly%lib!linked_list.StuffAgree.State. self!)))) :pattern ((lib!linked_list.StuffAgree.impl&%9.inv_eq.? self!)) ))))
(set-info :comment ";; Function-Specs lib::linked_list::StuffAgree::State::lemma_msg_inv_eq")
(declare-fun req%lib!linked_list.StuffAgree.impl&%9.lemma_msg_inv_eq. (lib!linked_list.StuffAgree.State.) Bool)
(assert (forall ((s! lib!linked_list.StuffAgree.State.)) (! (= (req%lib!linked_list.StuffAgree.impl&%9.lemma_msg_inv_eq. s!) (lib!linked_list.StuffAgree.impl&%9.inv_eq.? (Poly%lib!linked_list.StuffAgree.State. s!))) :pattern ((req%lib!linked_list.StuffAgree.impl&%9.lemma_msg_inv_eq. s!)) )))
(declare-fun ens%lib!linked_list.StuffAgree.impl&%9.lemma_msg_inv_eq. (lib!linked_list.StuffAgree.State.) Bool)
(assert (forall ((s! lib!linked_list.StuffAgree.State.)) (! (= (ens%lib!linked_list.StuffAgree.impl&%9.lemma_msg_inv_eq. s!) (lib!linked_list.StuffAgree.impl&%9.inv_eq.? (Poly%lib!linked_list.StuffAgree.State. s!))) :pattern ((ens%lib!linked_list.StuffAgree.impl&%9.lemma_msg_inv_eq. s!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Step::arrow_set_0")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%0.arrow_set_0.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%0.arrow_set_0.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%0.arrow_set_0.? self!) (lib!linked_list.StuffAgree.Step./set/0 (%Poly%lib!linked_list.StuffAgree.Step. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%0.arrow_set_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.Step.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.impl&%0.arrow_set_0.? self!)) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.impl&%0.arrow_set_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Step::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%0.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%0.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%0.arrow_dummy_to_use_type_params_0.? self!) (lib!linked_list.StuffAgree.Step./dummy_to_use_type_params/0 (%Poly%lib!linked_list.StuffAgree.Step. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.Step.) (has_type (Poly%lib!linked_list.StuffAgree.State. (lib!linked_list.StuffAgree.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!linked_list.StuffAgree.State.)) :pattern ((lib!linked_list.StuffAgree.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Step::is_set")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%1.is_set.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%1.is_set.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%1.is_set.? self!) (is-lib!linked_list.StuffAgree.Step./set_ (%Poly%lib!linked_list.StuffAgree.Step. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%1.is_set.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Step::get_set_0")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%1.get_set_0.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%1.get_set_0.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%1.get_set_0.? self!) (lib!linked_list.StuffAgree.Step./set/0 (%Poly%lib!linked_list.StuffAgree.Step. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%1.get_set_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.Step.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.impl&%1.get_set_0.? self!)) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.impl&%1.get_set_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Step::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%1.is_dummy_to_use_type_params.))
(define-fun is-lib!linked_list.StuffAgree.Step./dummy_to_use_type_params_ ((c lib!linked_list.StuffAgree.Step.)) Bool ((_ is lib!linked_list.StuffAgree.Step./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%1.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%1.is_dummy_to_use_type_params.? self!) (is-lib!linked_list.StuffAgree.Step./dummy_to_use_type_params_ (%Poly%lib!linked_list.StuffAgree.Step. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%1.is_dummy_to_use_type_params.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Step::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%1.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%1.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%1.get_dummy_to_use_type_params_0.? self!) (lib!linked_list.StuffAgree.Step./dummy_to_use_type_params/0 (%Poly%lib!linked_list.StuffAgree.Step. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%1.get_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.Step.) (has_type (Poly%lib!linked_list.StuffAgree.State. (lib!linked_list.StuffAgree.impl&%1.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!linked_list.StuffAgree.State.)) :pattern ((lib!linked_list.StuffAgree.impl&%1.get_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Config::arrow_initialize_0")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%2.arrow_initialize_0.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%2.arrow_initialize_0.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%2.arrow_initialize_0.? self!) (lib!linked_list.StuffAgree.Config./initialize/0 (%Poly%lib!linked_list.StuffAgree.Config. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%2.arrow_initialize_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.Config.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.impl&%2.arrow_initialize_0.? self!)) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.impl&%2.arrow_initialize_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Config::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%2.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%2.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%2.arrow_dummy_to_use_type_params_0.? self!) (lib!linked_list.StuffAgree.Config./dummy_to_use_type_params/0 (%Poly%lib!linked_list.StuffAgree.Config. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.Config.) (has_type (Poly%lib!linked_list.StuffAgree.State. (lib!linked_list.StuffAgree.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!linked_list.StuffAgree.State.)) :pattern ((lib!linked_list.StuffAgree.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Config::is_initialize")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%3.is_initialize.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%3.is_initialize.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%3.is_initialize.? self!) (is-lib!linked_list.StuffAgree.Config./initialize_ (%Poly%lib!linked_list.StuffAgree.Config. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%3.is_initialize.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Config::get_initialize_0")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%3.get_initialize_0.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%3.get_initialize_0.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%3.get_initialize_0.? self!) (lib!linked_list.StuffAgree.Config./initialize/0 (%Poly%lib!linked_list.StuffAgree.Config. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%3.get_initialize_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.Config.) (has_type (Poly%core!option.Option. (lib!linked_list.StuffAgree.impl&%3.get_initialize_0.? self!)) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.))) :pattern ((lib!linked_list.StuffAgree.impl&%3.get_initialize_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Config::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%3.is_dummy_to_use_type_params.))
(define-fun is-lib!linked_list.StuffAgree.Config./dummy_to_use_type_params_ ((c lib!linked_list.StuffAgree.Config.)) Bool ((_ is lib!linked_list.StuffAgree.Config./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%3.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%3.is_dummy_to_use_type_params.? self!) (is-lib!linked_list.StuffAgree.Config./dummy_to_use_type_params_ (%Poly%lib!linked_list.StuffAgree.Config. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%3.is_dummy_to_use_type_params.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::Config::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%3.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%3.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%3.get_dummy_to_use_type_params_0.? self!) (lib!linked_list.StuffAgree.Config./dummy_to_use_type_params/0 (%Poly%lib!linked_list.StuffAgree.Config. self!))) :pattern ((lib!linked_list.StuffAgree.impl&%3.get_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!linked_list.StuffAgree.Config.) (has_type (Poly%lib!linked_list.StuffAgree.State. (lib!linked_list.StuffAgree.impl&%3.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!linked_list.StuffAgree.State.)) :pattern ((lib!linked_list.StuffAgree.impl&%3.get_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::initialize_enabled")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%9.initialize_enabled.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.initialize_enabled.) (forall ((b! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.initialize_enabled.? b!) true) :pattern ((lib!linked_list.StuffAgree.impl&%9.initialize_enabled.? b!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::set_strong")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%9.set_strong.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.set_strong.) (forall ((pre! Poly) (post! Poly) (b! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.set_strong.? pre! post! b!) (and (= (lib!linked_list.StuffAgree.State./State/x (%Poly%lib!linked_list.StuffAgree.State. pre!)) (lib!linked_list.StuffAgree.State./State/y (%Poly%lib!linked_list.StuffAgree.State. pre!))) (let ((update_tmp_x$ (%Poly%core!option.Option. b!))) (let ((update_tmp_y$ (%Poly%core!option.Option. b!))) (and (= (lib!linked_list.StuffAgree.State./State/y (%Poly%lib!linked_list.StuffAgree.State. post!)) update_tmp_y$) (= (lib!linked_list.StuffAgree.State./State/x (%Poly%lib!linked_list.StuffAgree.State. post!)) update_tmp_x$)))))) :pattern ((lib!linked_list.StuffAgree.impl&%9.set_strong.? pre! post! b!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::set_enabled")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%9.set_enabled.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.set_enabled.) (forall ((pre! Poly) (b! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.set_enabled.? pre! b!) true) :pattern ((lib!linked_list.StuffAgree.impl&%9.set_enabled.? pre! b!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::next_strong_by")
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.next_strong_by.) (forall ((pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.next_strong_by.? pre! post! step!) (and (is-lib!linked_list.StuffAgree.Step./set_ (%Poly%lib!linked_list.StuffAgree.Step. step!)) (let ((b$ (lib!linked_list.StuffAgree.Step./set/0 (%Poly%lib!linked_list.StuffAgree.Step. step!)))) (lib!linked_list.StuffAgree.impl&%9.set_strong.? pre! post! (Poly%core!option.Option. b$))))) :pattern ((lib!linked_list.StuffAgree.impl&%9.next_strong_by.? pre! post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::next_strong")
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.next_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.next_strong.? pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!linked_list.StuffAgree.Step.) (lib!linked_list.StuffAgree.impl&%9.next_strong_by.? pre! post! step$)) :pattern ((lib!linked_list.StuffAgree.impl&%9.next_strong_by.? pre! post! step$)) ))) :pattern ((lib!linked_list.StuffAgree.impl&%9.next_strong.? pre! post!)) ))))
(set-info :comment ";; Function-Axioms lib::linked_list::StuffAgree::State::invariant")
(assert (fuel_bool_default fuel%lib!linked_list.StuffAgree.impl&%9.invariant.))
(assert (=> (fuel_bool fuel%lib!linked_list.StuffAgree.impl&%9.invariant.) (forall ((self! Poly)) (! (= (lib!linked_list.StuffAgree.impl&%9.invariant.? self!) (lib!linked_list.StuffAgree.impl&%9.inv_eq.? self!)) :pattern ((lib!linked_list.StuffAgree.impl&%9.invariant.? self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) :pattern ((tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!linked_list.StuffAgree.Instance.))
(set-info :comment ";; Function-Specs lib::linked_list::StuffAgree::State::initialize_inductive")
(declare-fun req%lib!linked_list.StuffAgree.impl&%9.initialize_inductive. (lib!linked_list.StuffAgree.State. core!option.Option.) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((post! lib!linked_list.StuffAgree.State.) (b! core!option.Option.)) (! (= (req%lib!linked_list.StuffAgree.impl&%9.initialize_inductive. post! b!) (=> %%global_location_label%%1 (lib!linked_list.StuffAgree.impl&%9.initialize.? (Poly%lib!linked_list.StuffAgree.State. post!) (Poly%core!option.Option. b!)))) :pattern ((req%lib!linked_list.StuffAgree.impl&%9.initialize_inductive. post! b!)) )))
(declare-fun ens%lib!linked_list.StuffAgree.impl&%9.initialize_inductive. (lib!linked_list.StuffAgree.State. core!option.Option.) Bool)
(assert (forall ((post! lib!linked_list.StuffAgree.State.) (b! core!option.Option.)) (! (= (ens%lib!linked_list.StuffAgree.impl&%9.initialize_inductive. post! b!) (lib!linked_list.StuffAgree.impl&%9.invariant.? (Poly%lib!linked_list.StuffAgree.State. post!))) :pattern ((ens%lib!linked_list.StuffAgree.impl&%9.initialize_inductive. post! b!)) )))
(set-info :comment ";; Function-Def lib::linked_list::StuffAgree::State::initialize_inductive")
(set-info :comment ";; linked_list.rs:1696:5: 1696:68 (#0)")
(set-info :comment ";; Function-Specs lib::linked_list::StuffAgree::State::set_inductive")
(declare-fun req%lib!linked_list.StuffAgree.impl&%9.set_inductive. (lib!linked_list.StuffAgree.State. lib!linked_list.StuffAgree.State. core!option.Option.) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((pre! lib!linked_list.StuffAgree.State.) (post! lib!linked_list.StuffAgree.State.) (b! core!option.Option.)) (! (= (req%lib!linked_list.StuffAgree.impl&%9.set_inductive. pre! post! b!) (=> %%global_location_label%%2 (and (lib!linked_list.StuffAgree.impl&%9.invariant.? (Poly%lib!linked_list.StuffAgree.State. pre!)) (lib!linked_list.StuffAgree.impl&%9.set_strong.? (Poly%lib!linked_list.StuffAgree.State. pre!) (Poly%lib!linked_list.StuffAgree.State. post!) (Poly%core!option.Option. b!))))) :pattern ((req%lib!linked_list.StuffAgree.impl&%9.set_inductive. pre! post! b!)) )))
(declare-fun ens%lib!linked_list.StuffAgree.impl&%9.set_inductive. (lib!linked_list.StuffAgree.State. lib!linked_list.StuffAgree.State. core!option.Option.) Bool)
(assert (forall ((pre! lib!linked_list.StuffAgree.State.) (post! lib!linked_list.StuffAgree.State.) (b! core!option.Option.)) (! (= (ens%lib!linked_list.StuffAgree.impl&%9.set_inductive. pre! post! b!) (lib!linked_list.StuffAgree.impl&%9.invariant.? (Poly%lib!linked_list.StuffAgree.State. post!))) :pattern ((ens%lib!linked_list.StuffAgree.impl&%9.set_inductive. pre! post! b!)) )))
(set-info :comment ";; Function-Def lib::linked_list::StuffAgree::State::set_inductive")
(set-info :comment ";; linked_list.rs:1699:5: 1699:72 (#0)")
(set-info :comment ";; Function-Def lib::linked_list::StuffAgree::State::set_asserts")
(set-info :comment ";; linked_list.rs:1667:1: 1700:3 (#1994)")
(declare-const pre! lib!linked_list.StuffAgree.State.)
(declare-const b! core!option.Option.)
(declare-const tmp%1 Bool)
(declare-const update_tmp_x@ core!option.Option.)
(declare-const update_tmp_y@ core!option.Option.)
(declare-const update_tmp_x$1@ core!option.Option.)
(declare-const update_tmp_y$1@ core!option.Option.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!linked_list.StuffAgree.State. pre!) TYPE%lib!linked_list.StuffAgree.State.))
(assert (has_type (Poly%core!option.Option. b!) (TYPE%core!option.Option. $ TYPE%lib!linked_list.BlockSizePageId.)))
(set-info :comment ";; unable to prove assertion safety condition")
(declare-const %%location_label%%0 Bool)
(assert (not (=> (lib!linked_list.StuffAgree.impl&%9.invariant.? (Poly%lib!linked_list.StuffAgree.State. pre!)) (=> (= update_tmp_x@ (lib!linked_list.StuffAgree.State./State/x (%Poly%lib!linked_list.StuffAgree.State. (Poly%lib!linked_list.StuffAgree.State. pre!)))) (=> (= update_tmp_y@ (lib!linked_list.StuffAgree.State./State/y (%Poly%lib!linked_list.StuffAgree.State. (Poly%lib!linked_list.StuffAgree.State. pre!)))) (=> (= tmp%1 (= (lib!linked_list.StuffAgree.State./State/x (%Poly%lib!linked_list.StuffAgree.State. (Poly%lib!linked_list.StuffAgree.State. pre!))) (lib!linked_list.StuffAgree.State./State/y (%Poly%lib!linked_list.StuffAgree.State. (Poly%lib!linked_list.StuffAgree.State. pre!))))) (=> %%location_label%%0 (req%vstd!state_machine_internal.assert_safety. tmp%1))))))))
(check-sat)
(exit)
