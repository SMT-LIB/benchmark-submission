(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module tspec::math::cond_bound'")
(set-info :comment ";; Fuel")
(declare-const fuel%verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond. FuelId)
(declare-const fuel%verismo!tspec.math.cond_bound.is_upper_bound. FuelId)
(assert (distinct fuel%verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond. fuel%verismo!tspec.math.cond_bound.is_upper_bound.))
(set-info :comment ";; Datatypes")
(declare-datatypes ((tuple%0. 0)) (((tuple%0./tuple%0 ))))
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Function-Decl verismo::tspec::math::cond_bound::is_upper_bound_satisfy_cond")
(declare-fun verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::cond_bound::is_upper_bound")
(declare-fun verismo!tspec.math.cond_bound.is_upper_bound.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Axioms verismo::tspec::math::cond_bound::is_upper_bound_satisfy_cond")
(assert (fuel_bool_default fuel%verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.) (forall ((cond_fn! Poly) (bound! Poly) (max! Poly)) (! (= (verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? cond_fn! bound! max!) (and (and (%B (%%apply%%0 (%Poly%fun%1. cond_fn!) bound!)) (<= (%I bound!) (%I max!))) (forall ((b$ Poly)) (! (=> (has_type b$ (UINT 64)) (=> (and (%B (%%apply%%0 (%Poly%fun%1. cond_fn!) b$)) (<= (%I b$) (%I max!))) (<= (%I b$) (%I bound!)))) :pattern ((%%apply%%0 (%Poly%fun%1. cond_fn!) b$)) )))) :pattern ((verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? cond_fn! bound! max!)) ))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::cond_bound::is_upper_bound")
(assert (fuel_bool_default fuel%verismo!tspec.math.cond_bound.is_upper_bound.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.cond_bound.is_upper_bound.) (forall ((cond_fn! Poly) (bound! Poly) (max! Poly)) (! (= (verismo!tspec.math.cond_bound.is_upper_bound.? cond_fn! bound! max!) (and (<= (%I bound!) (%I max!)) (forall ((b$ Poly)) (! (=> (has_type b$ (UINT 64)) (=> (and (%B (%%apply%%0 (%Poly%fun%1. cond_fn!) b$)) (<= (%I b$) (%I max!))) (<= (%I b$) (%I bound!)))) :pattern ((%%apply%%0 (%Poly%fun%1. cond_fn!) b$)) )))) :pattern ((verismo!tspec.math.cond_bound.is_upper_bound.? cond_fn! bound! max!)) ))))
(set-info :comment ";; Function-Specs verismo::tspec::math::cond_bound::lemma_has_conditional_upper_bound")
(declare-fun req%verismo!tspec.math.cond_bound.lemma_has_conditional_upper_bound. (Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%0 Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((val! Int) (cond_fn! %%Function%%) (max! Int)) (! (= (req%verismo!tspec.math.cond_bound.lemma_has_conditional_upper_bound. val! cond_fn! max!) (and (=> %%global_location_label%%0 (%B (%%apply%%0 cond_fn! (I val!)))) (=> %%global_location_label%%1 (<= val! max!)))) :pattern ((req%verismo!tspec.math.cond_bound.lemma_has_conditional_upper_bound. val! cond_fn! max!)) )))
(declare-fun ens%verismo!tspec.math.cond_bound.lemma_has_conditional_upper_bound. (Int %%Function%% Int) Bool)
(assert (forall ((val! Int) (cond_fn! %%Function%%) (max! Int)) (! (= (ens%verismo!tspec.math.cond_bound.lemma_has_conditional_upper_bound. val! cond_fn! max!) (exists ((val$ Poly)) (! (and (has_type val$ (UINT 64)) (verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? (Poly%fun%1. cond_fn!) val$ (I max!))) :pattern ((verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? (Poly%fun%1. cond_fn!) val$ (I max!))) ))) :pattern ((ens%verismo!tspec.math.cond_bound.lemma_has_conditional_upper_bound. val! cond_fn! max!)) )))
(set-info :comment ";; Function-Def verismo::tspec::math::cond_bound::lemma_has_conditional_upper_bound")
(set-info :comment ";; verismo/src/tspec/math/cond_bound.rs:20:7: 20:94 (#0)")
(declare-const val! Int)
(declare-const cond_fn! %%Function%%)
(declare-const max! Int)
(declare-const val@ Poly)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Bool)
(declare-const tmp%3 Bool)
(declare-const tmp%4 Bool)
(declare-const tmp%5 Bool)
(declare-const tmp%6 Bool)
(declare-const val2@ Int)
(declare-const exist_bound@ Bool)
(declare-const decrease%init0 Int)
(assert fuel_defaults)
(assert (uInv 64 val!))
(assert (has_type (Poly%fun%1. cond_fn!) (TYPE%fun%1. $ (UINT 64) $ BOOL)))
(assert (uInv 64 max!))
(assert (%B (%%apply%%0 cond_fn! (I val!))))
(assert (<= val! max!))
(declare-fun %%choose%%0 (Type %%Function%% Int Int %%Function%%) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 %%Function%%) (%%hole%%2 Int) (%%hole%%3 Int) (%%hole%%4 %%Function%%)) (! (=> (exists ((b$ Poly)) (! (and (has_type b$ %%hole%%0) (and (and (%B (%%apply%%0 %%hole%%1 b$)) (<= (%I b$) %%hole%%2)) (> (%I b$) %%hole%%3))) :pattern ((%%apply%%0 %%hole%%4 b$)) )) (exists ((b$ Poly)) (! (and (and (has_type b$ %%hole%%0) (and (and (%B (%%apply%%0 %%hole%%1 b$)) (<= (%I b$) %%hole%%2)) (> (%I b$) %%hole%%3))) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) b$)) :pattern ((%%apply%%0 %%hole%%4 b$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4)))))
(declare-const %%switch_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%9 Bool)
(assert (not (=> (= decrease%init0 (Sub max! val!)) (=> (= exist_bound@ (exists ((val$ Poly)) (! (and (has_type val$ (UINT 64)) (verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? (Poly%fun%1. cond_fn!) val$ (I max!))) :pattern ((verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? (Poly%fun%1. cond_fn!) val$ (I max!))) ))) (or (and (=> (not exist_bound@) (and (=> (has_type val@ (UINT 64)) (=> %%location_label%%0 (not (verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? (Poly%fun%1. cond_fn!) val@ (I max!))))) (=> (forall ((val$ Poly)) (! (=> (has_type val$ (UINT 64)) (not (verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? (Poly%fun%1. cond_fn!) val$ (I max!)))) :pattern ((verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? (Poly%fun%1. cond_fn!) val$ (I max!))) )) (=> (= tmp%1 (%B (%%apply%%0 cond_fn! (I val!)))) (and (=> %%location_label%%1 tmp%1) (=> tmp%1 (=> (= tmp%2 (not (verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? (Poly%fun%1. cond_fn!) (I val!) (I max!)))) (and (=> %%location_label%%2 tmp%2) (=> tmp%2 (=> (= tmp%3 (not (forall ((b$ Poly)) (! (=> (has_type b$ (UINT 64)) (=> (%B (%%apply%%0 cond_fn! b$)) (<= (%I b$) val!))) :pattern ((%%apply%%0 cond_fn! b$)) )))) (and (=> %%location_label%%3 tmp%3) (=> tmp%3 (=> (= tmp%4 (exists ((b$ Poly)) (! (and (has_type b$ (UINT 64)) (and (and (%B (%%apply%%0 cond_fn! b$)) (<= (%I b$) max!)) (> (%I b$) val!))) :pattern ((%%apply%%0 cond_fn! b$)) ))) (and (=> %%location_label%%4 tmp%4) (=> tmp%4 (=> (= val2@ (%I (as_type (%%choose%%0 (UINT 64) cond_fn! max! val! cond_fn!) (UINT 64)))) (=> (= tmp%5 (> val2@ val!)) (and (=> %%location_label%%5 tmp%5) (=> tmp%5 (=> (= tmp%6 (<= val2@ max!)) (and (=> %%location_label%%6 tmp%6) (=> tmp%6 (and (=> %%location_label%%7 (check_decrease_int (let ((val!$0 val2@) (cond_fn!$1 cond_fn!) (max!$2 max!)) (Sub max!$2 val!$0)) decrease%init0 false)) (and (=> %%location_label%%8 (req%verismo!tspec.math.cond_bound.lemma_has_conditional_upper_bound. val2@ cond_fn! max!)) (=> (ens%verismo!tspec.math.cond_bound.lemma_has_conditional_upper_bound. val2@ cond_fn! max!) %%switch_label%%0))))))))))))))))))))))))) (=> (not (not exist_bound@)) %%switch_label%%0)) (and (not %%switch_label%%0) (=> %%location_label%%9 (exists ((val$ Poly)) (! (and (has_type val$ (UINT 64)) (verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? (Poly%fun%1. cond_fn!) val$ (I max!))) :pattern ((verismo!tspec.math.cond_bound.is_upper_bound_satisfy_cond.? (Poly%fun%1. cond_fn!) val$ (I max!))) )))))))))
(check-sat)
(exit)
