(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module arch::rmp::def_s'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%verismo!arch.rmp.access_u.impl&%0.view. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_size. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_immutable. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_assigned. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_validated. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_asid. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_gpn. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_size. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_perms. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%3.spec_val. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_0. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_1. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%7.is_Pvalidate. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_0. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_1. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpUpdate. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_0. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_1. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%8.arrow_1. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_0. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_1. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_0. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_1. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_0. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_1. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.RMP_FAIL_INUSE. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.RMP_FAIL_OVERLAP. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.spec_index. fuel%vstd!set.impl&%0.choose. fuel%verismo!arch.rmp.access_u.impl&%0.view. fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable. fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned. fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated. fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa. fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid. fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn. fuel%verismo!arch.rmp.def_s.impl&%0.spec_size. fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms. fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_immutable. fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_assigned. fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_validated. fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa. fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_asid. fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_gpn. fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_size. fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_perms. fuel%verismo!arch.rmp.def_s.impl&%3.spec_val. fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val. fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust. fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_0. fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_1. fuel%verismo!arch.rmp.def_s.impl&%7.is_Pvalidate. fuel%verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_0. fuel%verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_1. fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpUpdate. fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_0. fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_1. fuel%verismo!arch.rmp.def_s.impl&%8.arrow_1. fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_0. fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_1. fuel%verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_0. fuel%verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_1. fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_0. fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_1. fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT. fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION. fuel%verismo!arch.rmp.def_s.RMP_FAIL_INUSE. fuel%verismo!arch.rmp.def_s.RMP_FAIL_OVERLAP. fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.))
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. 0)
(declare-sort vstd!set.Set<verismo!arch.entities.VMPL.>. 0)
(declare-sort vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. 0)
(declare-datatypes ((verismo!arch.addr_s.def_s.GuestPhy. 0) (verismo!arch.addr_s.def_s.SpecPage. 0) (verismo!arch.addr_s.def_s.PageSize. 0) (verismo!arch.entities.memid.MemID. 0) (verismo!arch.entities.params.PageID. 0) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. 0) (verismo!arch.rmp.def_s.RmpEntry. 0) (verismo!arch.rmp.def_s.RmpAdjustParam. 0) (verismo!arch.rmp.def_s.PvalidateParam. 0) (verismo!arch.rmp.def_s.RmpOp. 0) (verismo!arch.rmp.perm_s.Perm. 0) (verismo!arch.entities.VMPL. 0) (tuple%0. 0)) (((verismo!arch.addr_s.def_s.GuestPhy./GuestPhy )) ((verismo!arch.addr_s.def_s.SpecPage./SpecPage (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value Int) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy Poly))) ((verismo!arch.addr_s.def_s.PageSize./Size4k ) (verismo!arch.addr_s.def_s.PageSize./Size2m )) ((verismo!arch.entities.memid.MemID./Guest (verismo!arch.entities.memid.MemID./Guest/?0 Int) (verismo!arch.entities.memid.MemID./Guest/?1 verismo!arch.entities.VMPL.)) (verismo!arch.entities.memid.MemID./Hv )) ((verismo!arch.entities.params.PageID./PageID (verismo!arch.entities.params.PageID./PageID/?page verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.entities.params.PageID./PageID/?memid verismo!arch.entities.memid.MemID.))) ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?immutable Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?assigned Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?validated Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?vmsa Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?asid Int) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?gpn verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?size verismo!arch.addr_s.def_s.PageSize.) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?perms vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.))) ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/?val verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.))) ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?gpn verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?psize verismo!arch.addr_s.def_s.PageSize.) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmsa Bool) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmpl verismo!arch.entities.VMPL.) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?perms vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.))) ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?gpn verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?psize verismo!arch.addr_s.def_s.PageSize.) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?val Bool))) ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?0 verismo!arch.entities.params.PageID.) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?1 verismo!arch.rmp.def_s.RmpAdjustParam.)) (verismo!arch.rmp.def_s.RmpOp./Pvalidate (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?0 verismo!arch.entities.params.PageID.) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?1 verismo!arch.rmp.def_s.PvalidateParam.)) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?0 verismo!arch.entities.params.PageID.) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?1 verismo!arch.rmp.def_s.RmpEntry.))) ((verismo!arch.rmp.perm_s.Perm./Read ) (verismo!arch.rmp.perm_s.Perm./Write ) (verismo!arch.rmp.perm_s.Perm./ExeU ) (verismo!arch.rmp.perm_s.Perm./ExeS ) (verismo!arch.rmp.perm_s.Perm./Shadow )) ((verismo!arch.entities.VMPL./VMPL0 ) (verismo!arch.entities.VMPL./VMPL1 ) (verismo!arch.entities.VMPL./VMPL2 ) (verismo!arch.entities.VMPL./VMPL3 )) ((tuple%0./tuple%0 ))))
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (verismo!arch.addr_s.def_s.SpecPage.) Int)
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun verismo!arch.entities.memid.MemID./Guest/0 (verismo!arch.entities.memid.MemID.) Int)
(declare-fun verismo!arch.entities.memid.MemID./Guest/1 (verismo!arch.entities.memid.MemID.) verismo!arch.entities.VMPL.)
(declare-fun verismo!arch.entities.params.PageID./PageID/page (verismo!arch.entities.params.PageID.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.entities.params.PageID./PageID/memid (verismo!arch.entities.params.PageID.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Int)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (verismo!arch.rmp.def_s.RmpEntry.) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn (verismo!arch.rmp.def_s.RmpAdjustParam.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize (verismo!arch.rmp.def_s.RmpAdjustParam.) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa (verismo!arch.rmp.def_s.RmpAdjustParam.) Bool)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl (verismo!arch.rmp.def_s.RmpAdjustParam.) verismo!arch.entities.VMPL.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/perms (verismo!arch.rmp.def_s.RmpAdjustParam.) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (verismo!arch.rmp.def_s.PvalidateParam.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize (verismo!arch.rmp.def_s.PvalidateParam.) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val (verismo!arch.rmp.def_s.PvalidateParam.) Bool)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.entities.params.PageID.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.rmp.def_s.RmpAdjustParam.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.entities.params.PageID.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.rmp.def_s.PvalidateParam.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.entities.params.PageID.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.GuestPhy. Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecPage. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.PageSize. Type)
(declare-const TYPE%verismo!arch.entities.memid.MemID. Type)
(declare-fun TYPE%verismo!arch.entities.params.PageID. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. Type)
(declare-const TYPE%verismo!arch.rmp.def_s.RmpEntry. Type)
(declare-const TYPE%verismo!arch.rmp.def_s.RmpAdjustParam. Type)
(declare-const TYPE%verismo!arch.rmp.def_s.PvalidateParam. Type)
(declare-fun TYPE%verismo!arch.rmp.def_s.RmpOp. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.rmp.perm_s.Perm. Type)
(declare-const TYPE%verismo!arch.entities.VMPL. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (vstd!set.Set<verismo!arch.entities.VMPL.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly) vstd!set.Set<verismo!arch.entities.VMPL.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun Poly%verismo!arch.addr_s.def_s.GuestPhy. (verismo!arch.addr_s.def_s.GuestPhy.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.GuestPhy. (Poly) verismo!arch.addr_s.def_s.GuestPhy.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.addr_s.def_s.PageSize.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.PageSize. (Poly) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID.) Poly)
(declare-fun %Poly%verismo!arch.entities.memid.MemID. (Poly) verismo!arch.entities.memid.MemID.)
(declare-fun Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID.) Poly)
(declare-fun %Poly%verismo!arch.entities.params.PageID. (Poly) verismo!arch.entities.params.PageID.)
(declare-fun Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpAdjustParam.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly) verismo!arch.rmp.def_s.RmpAdjustParam.)
(declare-fun Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.PvalidateParam.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly) verismo!arch.rmp.def_s.PvalidateParam.)
(declare-fun Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.RmpOp. (Poly) verismo!arch.rmp.def_s.RmpOp.)
(declare-fun Poly%verismo!arch.rmp.perm_s.Perm. (verismo!arch.rmp.perm_s.Perm.) Poly)
(declare-fun %Poly%verismo!arch.rmp.perm_s.Perm. (Poly) verismo!arch.rmp.perm_s.Perm.)
(declare-fun Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.VMPL.) Poly)
(declare-fun %Poly%verismo!arch.entities.VMPL. (Poly) verismo!arch.entities.VMPL.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (= x (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) )))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) )))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) (= x (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))) )))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))) )))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= x (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) )))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) )))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestPhy.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.GuestPhy. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.GuestPhy. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (= x (Poly%verismo!arch.addr_s.def_s.GuestPhy. (%Poly%verismo!arch.addr_s.def_s.GuestPhy. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) )))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestPhy.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.GuestPhy. x) TYPE%verismo!arch.addr_s.def_s.GuestPhy.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.GuestPhy. x) TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) )))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecPage. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecPage. (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (and (<= 0 _value!) (has_type _dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) )))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) )))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) T&)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) )))
(define-fun is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ ((c verismo!arch.addr_s.def_s.SpecPage.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecPage./SpecPage) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ x) (height_lt (height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)) (height (Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x))) )))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type y (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. y))) (ext_eq deep T& (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. y)))) (ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)) )))
(assert (forall ((x verismo!arch.addr_s.def_s.PageSize.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.PageSize. (Poly%verismo!arch.addr_s.def_s.PageSize. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.PageSize. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.PageSize.) (= x (Poly%verismo!arch.addr_s.def_s.PageSize. (%Poly%verismo!arch.addr_s.def_s.PageSize. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.PageSize.)) )))
(assert (forall ((x verismo!arch.addr_s.def_s.PageSize.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.PageSize. x) TYPE%verismo!arch.addr_s.def_s.PageSize.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.PageSize. x) TYPE%verismo!arch.addr_s.def_s.PageSize.)) )))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= x (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. x))) :pattern ((Poly%verismo!arch.entities.memid.MemID. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.MemID.) (= x (Poly%verismo!arch.entities.memid.MemID. (%Poly%verismo!arch.entities.memid.MemID. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.memid.MemID.)) )))
(assert (forall ((_0! Int) (_1! verismo!arch.entities.VMPL.)) (! (=> (<= 0 _0!) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID./Guest _0! _1!)) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID./Guest _0! _1!)) TYPE%verismo!arch.entities.memid.MemID.)) )))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= (verismo!arch.entities.memid.MemID./Guest/0 x) (verismo!arch.entities.memid.MemID./Guest/?0 x)) :pattern ((verismo!arch.entities.memid.MemID./Guest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.MemID.) (<= 0 (verismo!arch.entities.memid.MemID./Guest/0 (%Poly%verismo!arch.entities.memid.MemID. x)))) :pattern ((verismo!arch.entities.memid.MemID./Guest/0 (%Poly%verismo!arch.entities.memid.MemID. x)) (has_type x TYPE%verismo!arch.entities.memid.MemID.)) )))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= (verismo!arch.entities.memid.MemID./Guest/1 x) (verismo!arch.entities.memid.MemID./Guest/?1 x)) :pattern ((verismo!arch.entities.memid.MemID./Guest/1 x)) )))
(assert (has_type (Poly%verismo!arch.entities.memid.MemID. verismo!arch.entities.memid.MemID./Hv) TYPE%verismo!arch.entities.memid.MemID.))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (= x (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. x))) :pattern ((Poly%verismo!arch.entities.params.PageID. x)) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (= x (Poly%verismo!arch.entities.params.PageID. (%Poly%verismo!arch.entities.params.PageID. x)))) :pattern ((has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_page! verismo!arch.addr_s.def_s.SpecPage.) (_memid! verismo!arch.entities.memid.MemID.)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _page!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. _memid!) TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID _page! _memid!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID _page! _memid!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) )))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (= (verismo!arch.entities.params.PageID./PageID/page x) (verismo!arch.entities.params.PageID./PageID/?page x)) :pattern ((verismo!arch.entities.params.PageID./PageID/page x)) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. AddrT&. AddrT&))) :pattern ((verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. x)) (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) )))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (= (verismo!arch.entities.params.PageID./PageID/memid x) (verismo!arch.entities.params.PageID./PageID/?memid x)) :pattern ((verismo!arch.entities.params.PageID./PageID/memid x)) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. x)) (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) )))
(define-fun is-verismo!arch.entities.params.PageID./PageID_ ((c verismo!arch.entities.params.PageID.)) Bool ((_ is verismo!arch.entities.params.PageID./PageID) c))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (=> (is-verismo!arch.entities.params.PageID./PageID_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.entities.params.PageID./PageID/page x))) (height (Poly%verismo!arch.entities.params.PageID. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.entities.params.PageID./PageID/page x)))) )))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= x (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x))) :pattern ((Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (= x (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) )))
(assert (forall ((_immutable! Bool) (_assigned! Bool) (_validated! Bool) (_vmsa! Bool) (_asid! Int) (_gpn! verismo!arch.addr_s.def_s.SpecPage.) (_size! verismo!arch.addr_s.def_s.PageSize.) (_perms! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (=> (and (<= 0 _asid!) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _gpn!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP _immutable! _assigned! _validated! _vmsa! _asid! _gpn! _size! _perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP _immutable! _assigned! _validated! _vmsa! _asid! _gpn! _size! _perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) )))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?immutable x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?assigned x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?validated x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?vmsa x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?asid x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (<= 0 (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)))) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)) (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) )))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?gpn x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)) (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) )))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?size x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?perms x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpEntry.)) (! (= x (%Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly%verismo!arch.rmp.def_s.RmpEntry. x))) :pattern ((Poly%verismo!arch.rmp.def_s.RmpEntry. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.) (= x (Poly%verismo!arch.rmp.def_s.RmpEntry. (%Poly%verismo!arch.rmp.def_s.RmpEntry. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.)) )))
(assert (forall ((_val! verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (=> (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. _val!) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry _val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry _val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpEntry.)) (! (= (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val x) (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/?val x)) :pattern ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. x))) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. x)) (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.)) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= x (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x))) :pattern ((Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.) (= x (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) )))
(assert (forall ((_gpn! verismo!arch.addr_s.def_s.SpecPage.) (_psize! verismo!arch.addr_s.def_s.PageSize.) (_vmsa! Bool) (_vmpl! verismo!arch.entities.VMPL.) (_perms! vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (=> (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _gpn!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam _gpn! _psize! _vmsa! _vmpl! _perms!)) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam _gpn! _psize! _vmsa! _vmpl! _perms!)) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?gpn x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x)) (has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?psize x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmsa x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmpl x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/perms x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?perms x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/perms x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= x (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. x))) :pattern ((Poly%verismo!arch.rmp.def_s.PvalidateParam. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.) (= x (Poly%verismo!arch.rmp.def_s.PvalidateParam. (%Poly%verismo!arch.rmp.def_s.PvalidateParam. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) )))
(assert (forall ((_gpn! verismo!arch.addr_s.def_s.SpecPage.) (_psize! verismo!arch.addr_s.def_s.PageSize.) (_val! Bool)) (! (=> (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _gpn!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam _gpn! _psize! _val!)) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam _gpn! _psize! _val!)) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) )))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn x) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?gpn x)) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (%Poly%verismo!arch.rmp.def_s.PvalidateParam. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (%Poly%verismo!arch.rmp.def_s.PvalidateParam. x)) (has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) )))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize x) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?psize x)) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val x) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?val x)) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val x)) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= x (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. x))) :pattern ((Poly%verismo!arch.rmp.def_s.RmpOp. x)) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (= x (Poly%verismo!arch.rmp.def_s.RmpOp. (%Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.PageID.) (_1! verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (=> (and (has_type (Poly%verismo!arch.entities.params.PageID. _0!) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. _1!) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?0 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x)) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 x) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?1 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 x)) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.PageID.) (_1! verismo!arch.rmp.def_s.PvalidateParam.)) (! (=> (and (has_type (Poly%verismo!arch.entities.params.PageID. _0!) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. _1!) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./Pvalidate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./Pvalidate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?0 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x)) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 x) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?1 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 x)) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.PageID.) (_1! verismo!arch.rmp.def_s.RmpEntry.)) (! (=> (and (has_type (Poly%verismo!arch.entities.params.PageID. _0!) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. _1!) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?0 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x)) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) )))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 x) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?1 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 x)) )))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) )))
(define-fun is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ ((c verismo!arch.rmp.def_s.RmpOp.)) Bool ((_ is verismo!arch.rmp.def_s.RmpOp./RmpAdjust) c))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (=> (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ x) (height_lt (height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x))) (height (Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x)))) )))
(define-fun is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ ((c verismo!arch.rmp.def_s.RmpOp.)) Bool ((_ is verismo!arch.rmp.def_s.RmpOp./Pvalidate) c))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (=> (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ x) (height_lt (height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x))) (height (Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x)))) )))
(define-fun is-verismo!arch.rmp.def_s.RmpOp./RmpUpdate_ ((c verismo!arch.rmp.def_s.RmpOp.)) Bool ((_ is verismo!arch.rmp.def_s.RmpOp./RmpUpdate) c))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (=> (is-verismo!arch.rmp.def_s.RmpOp./RmpUpdate_ x) (height_lt (height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x))) (height (Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x)))) )))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (= x (%Poly%verismo!arch.rmp.perm_s.Perm. (Poly%verismo!arch.rmp.perm_s.Perm. x))) :pattern ((Poly%verismo!arch.rmp.perm_s.Perm. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.perm_s.Perm.) (= x (Poly%verismo!arch.rmp.perm_s.Perm. (%Poly%verismo!arch.rmp.perm_s.Perm. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.perm_s.Perm.)) )))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.) :pattern ((has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.)) )))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (= x (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. x))) :pattern ((Poly%verismo!arch.entities.VMPL. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.VMPL.) (= x (Poly%verismo!arch.entities.VMPL. (%Poly%verismo!arch.entities.VMPL. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.VMPL.)) )))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.) :pattern ((has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Function-Decl vstd::layout::size_of")
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpEntry::view")
(declare-fun verismo!arch.rmp.access_u.impl&%0.view.? (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_immutable")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_assigned")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_validated")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_vmsa")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_asid")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_gpn")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_size")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly) verismo!arch.addr_s.def_s.PageSize.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_perms")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_immutable")
(declare-fun verismo!arch.rmp.def_s.impl&%1.spec_set_immutable.? (Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_assigned")
(declare-fun verismo!arch.rmp.def_s.impl&%1.spec_set_assigned.? (Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_validated")
(declare-fun verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? (Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_vmsa")
(declare-fun verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? (Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_asid")
(declare-fun verismo!arch.rmp.def_s.impl&%1.spec_set_asid.? (Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_gpn")
(declare-fun verismo!arch.rmp.def_s.impl&%1.spec_set_gpn.? (Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_size")
(declare-fun verismo!arch.rmp.def_s.impl&%1.spec_set_size.? (Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_perms")
(declare-fun verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? (Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_new")
(declare-fun verismo!arch.rmp.def_s.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpEntry::spec_val")
(declare-fun verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpEntry::spec_set_val")
(declare-fun verismo!arch.rmp.def_s.impl&%4.spec_set_val.? (Poly Poly) verismo!arch.rmp.def_s.RmpEntry.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpEntry::spec_new")
(declare-fun verismo!arch.rmp.def_s.impl&%5.spec_new.? (Poly) verismo!arch.rmp.def_s.RmpEntry.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::is_RmpAdjust")
(declare-fun verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::get_RmpAdjust_0")
(declare-fun verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_0.? (Dcr Type Poly) verismo!arch.entities.params.PageID.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::get_RmpAdjust_1")
(declare-fun verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_1.? (Dcr Type Poly) verismo!arch.rmp.def_s.RmpAdjustParam.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::is_Pvalidate")
(declare-fun verismo!arch.rmp.def_s.impl&%7.is_Pvalidate.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::get_Pvalidate_0")
(declare-fun verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_0.? (Dcr Type Poly) verismo!arch.entities.params.PageID.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::get_Pvalidate_1")
(declare-fun verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_1.? (Dcr Type Poly) verismo!arch.rmp.def_s.PvalidateParam.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::is_RmpUpdate")
(declare-fun verismo!arch.rmp.def_s.impl&%7.is_RmpUpdate.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::get_RmpUpdate_0")
(declare-fun verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_0.? (Dcr Type Poly) verismo!arch.entities.params.PageID.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::get_RmpUpdate_1")
(declare-fun verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_1.? (Dcr Type Poly) verismo!arch.rmp.def_s.RmpEntry.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::arrow_1")
(declare-fun verismo!arch.rmp.def_s.impl&%8.arrow_1.? (Dcr Type Poly) verismo!arch.rmp.def_s.RmpEntry.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::arrow_RmpAdjust_0")
(declare-fun verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_0.? (Dcr Type Poly) verismo!arch.entities.params.PageID.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::arrow_RmpAdjust_1")
(declare-fun verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_1.? (Dcr Type Poly) verismo!arch.rmp.def_s.RmpAdjustParam.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::arrow_Pvalidate_0")
(declare-fun verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_0.? (Dcr Type Poly) verismo!arch.entities.params.PageID.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::arrow_Pvalidate_1")
(declare-fun verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_1.? (Dcr Type Poly) verismo!arch.rmp.def_s.PvalidateParam.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::arrow_RmpUpdate_0")
(declare-fun verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_0.? (Dcr Type Poly) verismo!arch.entities.params.PageID.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::arrow_RmpUpdate_1")
(declare-fun verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_1.? (Dcr Type Poly) verismo!arch.rmp.def_s.RmpEntry.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RMP_FAIL_INPUT")
(declare-fun verismo!arch.rmp.def_s.RMP_FAIL_INPUT.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RMP_FAIL_PERMISSION")
(declare-fun verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RMP_FAIL_INUSE")
(declare-fun verismo!arch.rmp.def_s.RMP_FAIL_INUSE.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RMP_FAIL_OVERLAP")
(declare-fun verismo!arch.rmp.def_s.RMP_FAIL_OVERLAP.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RMP_FAIL_SIZEMISMATCH")
(declare-fun verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.? () Int)
(set-info :comment ";; Function-Axioms vstd::layout::size_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%0 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%2 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%6 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%8 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%9 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%11 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%12 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%13 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%14 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%15 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%16 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%17 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%18 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%19 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%20 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%21 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%22 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%23 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%24 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%25 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_asid")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (<= 0 (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_assigned")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!)) ))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_validated")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) ))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpEntry::spec_val")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%3.spec_val.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%3.spec_val.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!) (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpEntry::view")
(assert (fuel_bool_default fuel%verismo!arch.rmp.access_u.impl&%0.view.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.access_u.impl&%0.view.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.access_u.impl&%0.view.? self!) (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)) :pattern ((verismo!arch.rmp.access_u.impl&%0.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.access_u.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_perms")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) ))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpEntry::spec_new")
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpEntry::spec_set_val")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!) (verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)) :pattern ((verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!)) ))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type val! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_gpn")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_size")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_size.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_size.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_size.? self!)) ))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_new")
(assert (forall ((immutable! Poly) (assigned! Poly) (validated! Poly) (vmsa! Poly) (asid! Poly) (gpn! Poly) (size! Poly) (perms! Poly)) (! (=> (and (has_type immutable! BOOL) (has_type assigned! BOOL) (has_type validated! BOOL) (has_type vmsa! BOOL) (has_type asid! NAT) (has_type gpn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type size! TYPE%verismo!arch.addr_s.def_s.PageSize.) (has_type perms! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_immutable")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!)) ))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_vmsa")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!)) ))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_perms")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_perms.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_perms.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? self! val!) (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!)) (I (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!)) val!)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? self! val!)) ))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type val! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? self! val!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? self! val!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_validated")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_validated.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_validated.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? self! val!) (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!)) val! (B (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!)) (I (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)))) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? self! val!)) ))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type val! BOOL)) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? self! val!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? self! val!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::is_Pvalidate")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%7.is_Pvalidate.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%7.is_Pvalidate.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%7.is_Pvalidate.? AddrT&. AddrT& self!) (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%7.is_Pvalidate.? AddrT&. AddrT& self!)) ))))
(set-info :comment ";; Function-Def verismo::arch::rmp::def_s::RMP_FAIL_SIZEMISMATCH")
(set-info :comment ";; verismo/src/tspec/constant.rs:22:61: 22:62 (#8482)")
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RMP_FAIL_SIZEMISMATCH")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.) (= verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.? 6)))
(assert (uInv 64 verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.?))
(set-info :comment ";; Function-Def verismo::arch::rmp::def_s::RMP_FAIL_INPUT")
(set-info :comment ";; verismo/src/tspec/constant.rs:22:61: 22:62 (#8482)")
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RMP_FAIL_INPUT")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT.) (= verismo!arch.rmp.def_s.RMP_FAIL_INPUT.? 1)))
(assert (uInv 64 verismo!arch.rmp.def_s.RMP_FAIL_INPUT.?))
(set-info :comment ";; Function-Def verismo::arch::rmp::def_s::RMP_FAIL_PERMISSION")
(set-info :comment ";; verismo/src/tspec/constant.rs:22:61: 22:62 (#8482)")
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RMP_FAIL_PERMISSION")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.) (= verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.? 2)))
(assert (uInv 64 verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.?))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_vmsa")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? self! val!) (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) val! (I (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)))) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? self! val!)) ))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type val! BOOL)) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? self! val!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? self! val!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::is_RmpAdjust")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust.? AddrT&. AddrT& self!) (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust.? AddrT&. AddrT& self!)) ))))
(set-info :comment ";; Function-Specs verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::axiom_spec_new")
(declare-fun ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. (Bool Bool Bool Bool Int verismo!arch.addr_s.def_s.SpecPage. verismo!arch.addr_s.def_s.PageSize. vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) Bool)
(assert (forall ((immutable! Bool) (assigned! Bool) (validated! Bool) (vmsa! Bool) (asid! Int) (gpn! verismo!arch.addr_s.def_s.SpecPage.) (size! verismo!arch.addr_s.def_s.PageSize.) (perms! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (= (ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. immutable! assigned! validated! vmsa! asid! gpn! size! perms!) (and (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) immutable!) (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) assigned!) (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) validated!) (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) vmsa!) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) asid!) (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) gpn!) (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) size!) (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) perms!))) :pattern ((ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. immutable! assigned! validated! vmsa! asid! gpn! size! perms!)) )))
(set-info :comment ";; Broadcast verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::axiom_spec_new")
(assert (forall ((immutable! Poly) (assigned! Poly) (validated! Poly) (vmsa! Poly) (asid! Poly) (gpn! Poly) (size! Poly) (perms! Poly)) (! (=> (and (has_type immutable! BOOL) (has_type assigned! BOOL) (has_type validated! BOOL) (has_type vmsa! BOOL) (has_type asid! NAT) (has_type gpn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type size! TYPE%verismo!arch.addr_s.def_s.PageSize.) (has_type perms! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (and (and (and (and (and (and (and (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B immutable!)) (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B assigned!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B validated!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B vmsa!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%I asid!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%verismo!arch.addr_s.def_s.PageSize. size!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) :pattern ((verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)) )))
(set-info :comment ";; Function-Specs verismo::arch::rmp::def_s::RmpEntry::axiom_spec_new")
(declare-fun ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(assert (forall ((val! verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. val!) (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. val!)))) val!)) :pattern ((ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. val!)) )))
(set-info :comment ";; Broadcast verismo::arch::rmp::def_s::RmpEntry::axiom_spec_new")
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? val!))) (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. val!))) :pattern ((verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)) )))
(set-info :comment ";; Function-Specs verismo::arch::rmp::perm_s::rmp_perm_track_dom")
(declare-fun ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. verismo!arch.entities.VMPL.) Bool)
(assert (forall ((p! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) (vmpl! verismo!arch.entities.VMPL.)) (! (= (ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. p!)) (Poly%verismo!arch.entities.VMPL. vmpl!))) :pattern ((ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!)) )))
(set-info :comment ";; Broadcast verismo::arch::rmp::perm_s::rmp_perm_track_dom")
(assert (forall ((p! Poly) (vmpl! Poly)) (! (=> (and (has_type p! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (has_type vmpl! TYPE%verismo!arch.entities.VMPL.)) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_immutable")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_immutable.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_immutable.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%1.spec_set_immutable.? self! val!) (verismo!arch.rmp.def_s.impl&%2.spec_new.? val! (B (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!)) (I (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)))) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_immutable.? self! val!)) ))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type val! BOOL)) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_immutable.? self! val!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_immutable.? self! val!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_assigned")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_assigned.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_assigned.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%1.spec_set_assigned.? self! val!) (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!)) val! (B (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!)) (I (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)))) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_assigned.? self! val!)) ))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type val! BOOL)) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_assigned.? self! val!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_assigned.? self! val!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_asid")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_asid.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_asid.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%1.spec_set_asid.? self! val!) (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!)) val! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)))) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_asid.? self! val!)) ))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type val! NAT)) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_asid.? self! val!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_asid.? self! val!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_gpn")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_gpn.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_gpn.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%1.spec_set_gpn.? self! val!) (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!)) (I (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) val! (Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)))) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_gpn.? self! val!)) ))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type val! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_gpn.? self! val!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_gpn.? self! val!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_set_size")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_size.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_size.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%1.spec_set_size.? self! val!) (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!)) (I (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) val! (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)))) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_size.? self! val!)) ))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type val! TYPE%verismo!arch.addr_s.def_s.PageSize.)) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_size.? self! val!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_size.? self! val!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::get_RmpAdjust_0")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_0.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_0.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_0.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_0.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_0.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_0.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::get_RmpAdjust_1")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_1.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_1.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_1.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_1.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_1.? AddrT&. AddrT& self!)) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_RmpAdjust_1.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::get_Pvalidate_0")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_0.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_0.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_0.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_0.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_0.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_0.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::get_Pvalidate_1")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_1.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_1.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_1.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_1.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_1.? AddrT&. AddrT& self!)) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_Pvalidate_1.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::is_RmpUpdate")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpUpdate.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpUpdate.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%7.is_RmpUpdate.? AddrT&. AddrT& self!) (is-verismo!arch.rmp.def_s.RmpOp./RmpUpdate_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%7.is_RmpUpdate.? AddrT&. AddrT& self!)) ))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::get_RmpUpdate_0")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_0.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_0.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_0.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_0.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_0.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_0.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::get_RmpUpdate_1")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_1.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_1.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_1.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_1.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_1.? AddrT&. AddrT& self!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.impl&%7.get_RmpUpdate_1.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::arrow_1")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%8.arrow_1.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%8.arrow_1.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%8.arrow_1.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_1.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%8.arrow_1.? AddrT&. AddrT& self!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_1.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::arrow_RmpAdjust_0")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_0.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_0.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_0.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_0.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_0.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_0.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::arrow_RmpAdjust_1")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_1.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_1.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_1.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_1.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_1.? AddrT&. AddrT& self!)) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_RmpAdjust_1.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::arrow_Pvalidate_0")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_0.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_0.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_0.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_0.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_0.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_0.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::arrow_Pvalidate_1")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_1.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_1.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_1.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_1.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_1.? AddrT&. AddrT& self!)) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_Pvalidate_1.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::arrow_RmpUpdate_0")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_0.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_0.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_0.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_0.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_0.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_0.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::arrow_RmpUpdate_1")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_1.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_1.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_1.? AddrT&. AddrT& self!) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_1.? AddrT&. AddrT& self!)) ))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_1.? AddrT&. AddrT& self!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.impl&%8.arrow_RmpUpdate_1.? AddrT&. AddrT& self!)) )))
(set-info :comment ";; Function-Def verismo::arch::rmp::def_s::RMP_FAIL_INUSE")
(set-info :comment ";; verismo/src/tspec/constant.rs:22:61: 22:62 (#8482)")
(declare-const %return! Int)
(assert fuel_defaults)
(assert (not true))
(check-sat)
(exit)
