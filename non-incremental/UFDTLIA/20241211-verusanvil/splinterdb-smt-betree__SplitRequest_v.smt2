(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module betree::SplitRequest_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%lib!betree.SplitRequest_v.impl&%0.arrow_split_key. FuelId)
(declare-const fuel%lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx. FuelId)
(declare-const fuel%lib!betree.SplitRequest_v.impl&%0.arrow_SplitLeaf_child_idx. FuelId)
(declare-const fuel%lib!betree.SplitRequest_v.impl&%0.arrow_SplitLeaf_split_key. FuelId)
(declare-const fuel%lib!betree.SplitRequest_v.impl&%0.arrow_SplitIndex_child_idx. FuelId)
(declare-const fuel%lib!betree.SplitRequest_v.impl&%0.arrow_SplitIndex_child_pivot_idx. FuelId)
(declare-const fuel%lib!betree.SplitRequest_v.impl&%1.get_child_idx. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%lib!betree.SplitRequest_v.impl&%0.arrow_split_key. fuel%lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx. fuel%lib!betree.SplitRequest_v.impl&%0.arrow_SplitLeaf_child_idx. fuel%lib!betree.SplitRequest_v.impl&%0.arrow_SplitLeaf_split_key. fuel%lib!betree.SplitRequest_v.impl&%0.arrow_SplitIndex_child_idx. fuel%lib!betree.SplitRequest_v.impl&%0.arrow_SplitIndex_child_pivot_idx. fuel%lib!betree.SplitRequest_v.impl&%1.get_child_idx. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-datatypes ((lib!betree.SplitRequest_v.SplitRequest. 0) (lib!spec.KeyType_t.Key. 0)) (((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?child_idx Int) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?split_key lib!spec.KeyType_t.Key.)) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_idx Int) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_pivot_idx Int))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int)))))
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (lib!betree.SplitRequest_v.SplitRequest.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-const TYPE%lib!betree.SplitRequest_v.SplitRequest. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-fun Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest.) Poly)
(declare-fun %Poly%lib!betree.SplitRequest_v.SplitRequest. (Poly) lib!betree.SplitRequest_v.SplitRequest.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= x (%Poly%lib!betree.SplitRequest_v.SplitRequest. (Poly%lib!betree.SplitRequest_v.SplitRequest. x))) :pattern ((Poly%lib!betree.SplitRequest_v.SplitRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (= x (Poly%lib!betree.SplitRequest_v.SplitRequest. (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((_child_idx! Int) (_split_key! lib!spec.KeyType_t.Key.)) (! (=> (and (<= 0 _child_idx!) (has_type (Poly%lib!spec.KeyType_t.Key. _split_key!) TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf _child_idx! _split_key!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf _child_idx! _split_key!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?child_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key x) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?split_key x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((_child_idx! Int) (_child_pivot_idx! Int)) (! (=> (and (<= 0 _child_idx!) (<= 0 _child_pivot_idx!)) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitIndex _child_idx! _child_pivot_idx!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitIndex _child_idx! _child_pivot_idx!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_pivot_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(set-info :comment ";; Function-Decl lib::betree::SplitRequest_v::SplitRequest::get_child_idx")
(declare-fun lib!betree.SplitRequest_v.impl&%1.get_child_idx.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::SplitRequest_v::SplitRequest::arrow_split_key")
(declare-fun lib!betree.SplitRequest_v.impl&%0.arrow_split_key.? (Poly) lib!spec.KeyType_t.Key.)
(set-info :comment ";; Function-Decl lib::betree::SplitRequest_v::SplitRequest::arrow_child_pivot_idx")
(declare-fun lib!betree.SplitRequest_v.impl&%0.arrow_child_pivot_idx.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::SplitRequest_v::SplitRequest::arrow_SplitLeaf_child_idx")
(declare-fun lib!betree.SplitRequest_v.impl&%0.arrow_SplitLeaf_child_idx.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::SplitRequest_v::SplitRequest::arrow_SplitLeaf_split_key")
(declare-fun lib!betree.SplitRequest_v.impl&%0.arrow_SplitLeaf_split_key.? (Poly) lib!spec.KeyType_t.Key.)
(set-info :comment ";; Function-Decl lib::betree::SplitRequest_v::SplitRequest::arrow_SplitIndex_child_idx")
(declare-fun lib!betree.SplitRequest_v.impl&%0.arrow_SplitIndex_child_idx.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::SplitRequest_v::SplitRequest::arrow_SplitIndex_child_pivot_idx")
(declare-fun lib!betree.SplitRequest_v.impl&%0.arrow_SplitIndex_child_pivot_idx.? (Poly) Int)
(set-info :comment ";; Function-Recommends lib::betree::SplitRequest_v::SplitRequest::get_child_idx")
(set-info :comment ";; betree/SplitRequest_v.rs:16:5: 16:57 (#0)")
(declare-const %return! Int)
(declare-const self! Poly)
(assert fuel_defaults)
(assert (has_type self! TYPE%lib!betree.SplitRequest_v.SplitRequest.))
(assert (not true))
(check-sat)
(exit)
