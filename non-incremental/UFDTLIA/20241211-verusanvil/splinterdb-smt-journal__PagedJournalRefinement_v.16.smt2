(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module journal::PagedJournalRefinement_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map.check_argument_is_map. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_require_end. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_end_lsn. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_start_lsn. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_frozen_journal. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_ReadForRecovery_messages. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_Put_messages. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.read_for_recovery. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.freeze_for_commit. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.query_end_lsn. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.put. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.discard_old. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_journal_marshal. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_no_op. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.initialize. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.next_by. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.next. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf. FuelId)
(declare-const fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at. FuelId)
(declare-const fuel%lib!journal.PagedJournalRefinement_v.impl&%0.i. FuelId)
(declare-const fuel%lib!journal.PagedJournalRefinement_v.impl&%0.i_opt. FuelId)
(declare-const fuel%lib!journal.PagedJournalRefinement_v.impl&%1.i. FuelId)
(declare-const fuel%lib!journal.PagedJournalRefinement_v.impl&%2.wf. FuelId)
(declare-const fuel%lib!journal.PagedJournalRefinement_v.impl&%2.i. FuelId)
(declare-const fuel%lib!journal.PagedJournalRefinement_v.impl&%3.i. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%0.valid. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%0.cropped_prior. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%0.can_crop_head_records. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%0.crop_head_records. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%1.seq_end. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%1.seq_start. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%1.can_discard_to. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%1.discard_old_defn. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%1.has_messages_at_depth. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%1.append_record. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%1.can_crop. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%1.crop_head_records. FuelId)
(declare-const fuel%lib!journal.PagedJournal_v.impl&%1.freeze_for_commit. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map.check_argument_is_map. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_require_end. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_end_lsn. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_start_lsn. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_frozen_journal. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_ReadForRecovery_messages. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_Put_messages. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.read_for_recovery. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.freeze_for_commit. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.query_end_lsn. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.put. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.discard_old. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_journal_marshal. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_no_op. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.initialize. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.next_by. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.next. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start. fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf. fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at. fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat. fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. fuel%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old. fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. fuel%lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at. fuel%lib!journal.PagedJournalRefinement_v.impl&%0.i. fuel%lib!journal.PagedJournalRefinement_v.impl&%0.i_opt. fuel%lib!journal.PagedJournalRefinement_v.impl&%1.i. fuel%lib!journal.PagedJournalRefinement_v.impl&%2.wf. fuel%lib!journal.PagedJournalRefinement_v.impl&%2.i. fuel%lib!journal.PagedJournalRefinement_v.impl&%3.i. fuel%lib!journal.PagedJournal_v.impl&%0.wf. fuel%lib!journal.PagedJournal_v.impl&%0.valid. fuel%lib!journal.PagedJournal_v.impl&%0.cropped_prior. fuel%lib!journal.PagedJournal_v.impl&%0.can_crop_head_records. fuel%lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records. fuel%lib!journal.PagedJournal_v.impl&%0.crop_head_records. fuel%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records. fuel%lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop. fuel%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec. fuel%lib!journal.PagedJournal_v.impl&%1.wf. fuel%lib!journal.PagedJournal_v.impl&%1.seq_end. fuel%lib!journal.PagedJournal_v.impl&%1.seq_start. fuel%lib!journal.PagedJournal_v.impl&%1.can_discard_to. fuel%lib!journal.PagedJournal_v.impl&%1.discard_old_defn. fuel%lib!journal.PagedJournal_v.impl&%1.has_messages_at_depth. fuel%lib!journal.PagedJournal_v.impl&%1.append_record. fuel%lib!journal.PagedJournal_v.impl&%1.can_crop. fuel%lib!journal.PagedJournal_v.impl&%1.crop_head_records. fuel%lib!journal.PagedJournal_v.impl&%1.freeze_for_commit. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (lib!journal.PagedJournal_v.PagedJournal.State. 0) (lib!journal.PagedJournal_v.PagedJournal.Step. 0) (lib!journal.PagedJournal_v.PagedJournal.Label. 0) (lib!abstract_system.AbstractJournal_v.AbstractJournal.State. 0) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. 0) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. 0) (lib!abstract_system.MsgHistory_v.KeyedMessage. 0) (lib!abstract_system.MsgHistory_v.MsgHistory. 0) (lib!journal.PagedJournal_v.JournalRecord. 0) (lib!journal.PagedJournal_v.TruncatedJournal. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!journal.PagedJournal_v.PagedJournal.State./State (lib!journal.PagedJournal_v.PagedJournal.State./State/?truncated_journal lib!journal.PagedJournal_v.TruncatedJournal.) (lib!journal.PagedJournal_v.PagedJournal.State./State/?unmarshalled_tail lib!abstract_system.MsgHistory_v.MsgHistory.))) ((lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery (lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery/?0 Int)) (lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit (lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit/?0 Int)) (lib!journal.PagedJournal_v.PagedJournal.Step./query_end_lsn ) (lib!journal.PagedJournal_v.PagedJournal.Step./put ) (lib!journal.PagedJournal_v.PagedJournal.Step./discard_old ) (lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal (lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal/?0 Int)) (lib!journal.PagedJournal_v.PagedJournal.Step./internal_no_op ) (lib!journal.PagedJournal_v.PagedJournal.Step./dummy_to_use_type_params (lib!journal.PagedJournal_v.PagedJournal.Step./dummy_to_use_type_params/?0 lib!journal.PagedJournal_v.PagedJournal.State.))) ((lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery (lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit (lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit/?frozen_journal lib!journal.PagedJournal_v.TruncatedJournal.)) (lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn (lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn/?end_lsn Int)) (lib!journal.PagedJournal_v.PagedJournal.Label./Put (lib!journal.PagedJournal_v.PagedJournal.Label./Put/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/?start_lsn Int) (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/?require_end Int)) (lib!journal.PagedJournal_v.PagedJournal.Label./Internal )) ((lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/?journal lib!abstract_system.MsgHistory_v.MsgHistory.))) ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal ) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/?0 lib!abstract_system.AbstractJournal_v.AbstractJournal.State.))) ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/?frozen_journal lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/?end_lsn Int)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/?messages lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?start_lsn Int) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?require_end Int)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel )) ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key lib!spec.KeyType_t.Key.) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message lib!spec.Messages_t.Message.))) ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start Int) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end Int))) ((lib!journal.PagedJournal_v.JournalRecord./JournalRecord (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/?message_seq lib!abstract_system.MsgHistory_v.MsgHistory.) (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/?prior_rec core!option.Option.))) ((lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/?boundary_lsn Int) (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/?freshest_rec core!option.Option.))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (lib!journal.PagedJournal_v.PagedJournal.State.) lib!journal.PagedJournal_v.TruncatedJournal.)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (lib!journal.PagedJournal_v.PagedJournal.State.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery/0 (lib!journal.PagedJournal_v.PagedJournal.Step.) Int)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit/0 (lib!journal.PagedJournal_v.PagedJournal.Step.) Int)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal/0 (lib!journal.PagedJournal_v.PagedJournal.Step.) Int)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.Step./dummy_to_use_type_params/0 (lib!journal.PagedJournal_v.PagedJournal.Step.) lib!journal.PagedJournal_v.PagedJournal.State.)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery/messages (lib!journal.PagedJournal_v.PagedJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit/frozen_journal (lib!journal.PagedJournal_v.PagedJournal.Label.) lib!journal.PagedJournal_v.TruncatedJournal.)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn/end_lsn (lib!journal.PagedJournal_v.PagedJournal.Label.) Int)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.Label./Put/messages (lib!journal.PagedJournal_v.PagedJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/start_lsn (lib!journal.PagedJournal_v.PagedJournal.Label.) Int)
(declare-fun lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/require_end (lib!journal.PagedJournal_v.PagedJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Int)
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Int)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.KeyType_t.Key.)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.Messages_t.Message.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (lib!abstract_system.MsgHistory_v.MsgHistory.) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (lib!journal.PagedJournal_v.JournalRecord.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (lib!journal.PagedJournal_v.JournalRecord.) core!option.Option.)
(declare-fun lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (lib!journal.PagedJournal_v.TruncatedJournal.) Int)
(declare-fun lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (lib!journal.PagedJournal_v.TruncatedJournal.) core!option.Option.)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!journal.PagedJournal_v.PagedJournal.State. Type)
(declare-const TYPE%lib!journal.PagedJournal_v.PagedJournal.Step. Type)
(declare-const TYPE%lib!journal.PagedJournal_v.PagedJournal.Label. Type)
(declare-const TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. Type)
(declare-const TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. Type)
(declare-const TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. Type)
(declare-const TYPE%lib!journal.PagedJournal_v.JournalRecord. Type)
(declare-const TYPE%lib!journal.PagedJournal_v.TruncatedJournal. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!journal.PagedJournal_v.PagedJournal.State. (lib!journal.PagedJournal_v.PagedJournal.State.) Poly)
(declare-fun %Poly%lib!journal.PagedJournal_v.PagedJournal.State. (Poly) lib!journal.PagedJournal_v.PagedJournal.State.)
(declare-fun Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (lib!journal.PagedJournal_v.PagedJournal.Step.) Poly)
(declare-fun %Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (Poly) lib!journal.PagedJournal_v.PagedJournal.Step.)
(declare-fun Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (lib!journal.PagedJournal_v.PagedJournal.Label.) Poly)
(declare-fun %Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (Poly) lib!journal.PagedJournal_v.PagedJournal.Label.)
(declare-fun Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(declare-fun Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)
(declare-fun Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) Poly)
(declare-fun %Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly) lib!abstract_system.MsgHistory_v.KeyedMessage.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun Poly%lib!journal.PagedJournal_v.JournalRecord. (lib!journal.PagedJournal_v.JournalRecord.) Poly)
(declare-fun %Poly%lib!journal.PagedJournal_v.JournalRecord. (Poly) lib!journal.PagedJournal_v.JournalRecord.)
(declare-fun Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.TruncatedJournal.) Poly)
(declare-fun %Poly%lib!journal.PagedJournal_v.TruncatedJournal. (Poly) lib!journal.PagedJournal_v.TruncatedJournal.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (= x (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.State.)) (! (= x (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. (Poly%lib!journal.PagedJournal_v.PagedJournal.State. x))) :pattern ((Poly%lib!journal.PagedJournal_v.PagedJournal.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.State.) (= x (Poly%lib!journal.PagedJournal_v.PagedJournal.State. (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. x)))) :pattern ((has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.State.)) )))
(assert (forall ((_truncated_journal! lib!journal.PagedJournal_v.TruncatedJournal.) (_unmarshalled_tail! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (and (has_type (Poly%lib!journal.PagedJournal_v.TruncatedJournal. _truncated_journal!) TYPE%lib!journal.PagedJournal_v.TruncatedJournal.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _unmarshalled_tail!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.State. (lib!journal.PagedJournal_v.PagedJournal.State./State _truncated_journal! _unmarshalled_tail!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.State.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.State. (lib!journal.PagedJournal_v.PagedJournal.State./State _truncated_journal! _unmarshalled_tail!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.State.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.State.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal x) (lib!journal.PagedJournal_v.PagedJournal.State./State/?truncated_journal x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.State.) (has_type (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. x))) TYPE%lib!journal.PagedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.State.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.State.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail x) (lib!journal.PagedJournal_v.PagedJournal.State./State/?unmarshalled_tail x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.State.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.State.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Step.)) (! (= x (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. x))) :pattern ((Poly%lib!journal.PagedJournal_v.PagedJournal.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.) (= x (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. x)))) :pattern ((has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery _0!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery _0!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Step.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery/0 x) (lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery/?0 x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.) (<= 0 (lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery/0 (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. x)))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery/0 (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit _0!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit _0!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Step.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit/0 x) (lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit/?0 x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.) (<= 0 (lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit/0 (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. x)))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit/0 (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) )))
(assert (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. lib!journal.PagedJournal_v.PagedJournal.Step./query_end_lsn) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.))
(assert (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. lib!journal.PagedJournal_v.PagedJournal.Step./put) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.))
(assert (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. lib!journal.PagedJournal_v.PagedJournal.Step./discard_old) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal _0!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal _0!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Step.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal/0 x) (lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal/?0 x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.) (<= 0 (lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal/0 (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. x)))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal/0 (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) )))
(assert (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. lib!journal.PagedJournal_v.PagedJournal.Step./internal_no_op) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.))
(assert (forall ((_0! lib!journal.PagedJournal_v.PagedJournal.State.)) (! (=> (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.State. _0!) TYPE%lib!journal.PagedJournal_v.PagedJournal.State.) (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (lib!journal.PagedJournal_v.PagedJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Step. (lib!journal.PagedJournal_v.PagedJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Step.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.Step./dummy_to_use_type_params/0 x) (lib!journal.PagedJournal_v.PagedJournal.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.) (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.State. (lib!journal.PagedJournal_v.PagedJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. x))) TYPE%lib!journal.PagedJournal_v.PagedJournal.State.)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Label.)) (! (= x (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x))) :pattern ((Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (= x (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x)))) :pattern ((has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery _messages!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery _messages!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Label.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery/messages x) (lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery/?messages x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery/messages (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery/messages (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (forall ((_frozen_journal! lib!journal.PagedJournal_v.TruncatedJournal.)) (! (=> (has_type (Poly%lib!journal.PagedJournal_v.TruncatedJournal. _frozen_journal!) TYPE%lib!journal.PagedJournal_v.TruncatedJournal.) (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit _frozen_journal!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit _frozen_journal!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Label.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit/frozen_journal x) (lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit/?frozen_journal x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit/frozen_journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (has_type (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x))) TYPE%lib!journal.PagedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (forall ((_end_lsn! Int)) (! (=> (<= 0 _end_lsn!) (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn _end_lsn!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn _end_lsn!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Label.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn/end_lsn x) (lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn/?end_lsn x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (<= 0 (lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x)))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (lib!journal.PagedJournal_v.PagedJournal.Label./Put _messages!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (lib!journal.PagedJournal_v.PagedJournal.Label./Put _messages!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Label.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.Label./Put/messages x) (lib!journal.PagedJournal_v.PagedJournal.Label./Put/?messages x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./Put/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.Label./Put/messages (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./Put/messages (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (forall ((_start_lsn! Int) (_require_end! Int)) (! (=> (and (<= 0 _start_lsn!) (<= 0 _require_end!)) (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld _start_lsn! _require_end!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld _start_lsn! _require_end!)) TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Label.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/start_lsn x) (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/?start_lsn x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/start_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (<= 0 (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/start_lsn (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x)))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/start_lsn (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.PagedJournal.Label.)) (! (= (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/require_end x) (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/?require_end x)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/require_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (<= 0 (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/require_end (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x)))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/require_end (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. x)) (has_type x TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.)) )))
(assert (has_type (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lib!journal.PagedJournal_v.PagedJournal.Label./Internal) TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (= x (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x))) :pattern ((Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (= x (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) )))
(assert (forall ((_journal! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _journal!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State _journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State _journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/?journal x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) (! (= x (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x))) :pattern ((Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) (= x (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.))
(assert (forall ((_0! lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) (! (=> (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. _0!) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params _0!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x))) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./dummy_to_use_type_params/0 (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= x (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) :pattern ((Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (= x (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/?messages x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_frozen_journal! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _frozen_journal!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel _frozen_journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel _frozen_journal!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/?frozen_journal x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_end_lsn! Int)) (! (=> (<= 0 _end_lsn!) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel _end_lsn!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel _end_lsn!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/?end_lsn x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_messages! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _messages!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel _messages!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/?messages x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((_start_lsn! Int) (_require_end! Int)) (! (=> (and (<= 0 _start_lsn!) (<= 0 _require_end!)) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel _start_lsn! _require_end!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel _start_lsn! _require_end!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?start_lsn x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (forall ((x lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end x) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/?require_end x)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. x)) (has_type x TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) )))
(assert (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (= x (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_message! lib!spec.Messages_t.Message.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Message. _message!) TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (= x (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((_msgs! vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (_seq_start! Int) (_seq_end! Int)) (! (=> (and (<= 0 _seq_start!) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type y TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (ext_eq deep (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) :pattern ((ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) )))
(assert (forall ((x lib!journal.PagedJournal_v.JournalRecord.)) (! (= x (%Poly%lib!journal.PagedJournal_v.JournalRecord. (Poly%lib!journal.PagedJournal_v.JournalRecord. x))) :pattern ((Poly%lib!journal.PagedJournal_v.JournalRecord. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.) (= x (Poly%lib!journal.PagedJournal_v.JournalRecord. (%Poly%lib!journal.PagedJournal_v.JournalRecord. x)))) :pattern ((has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.)) )))
(assert (forall ((_message_seq! lib!abstract_system.MsgHistory_v.MsgHistory.) (_prior_rec! core!option.Option.)) (! (=> (and (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _message_seq!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%core!option.Option. _prior_rec!) (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.))) (has_type (Poly%lib!journal.PagedJournal_v.JournalRecord. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord _message_seq! _prior_rec!)) TYPE%lib!journal.PagedJournal_v.JournalRecord.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.JournalRecord. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord _message_seq! _prior_rec!)) TYPE%lib!journal.PagedJournal_v.JournalRecord.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.JournalRecord.)) (! (= (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq x) (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/?message_seq x)) :pattern ((lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. x)) (has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.JournalRecord.)) (! (= (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec x) (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/?prior_rec x)) :pattern ((lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type (Poly%core!option.Option. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. x))) (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.))) :pattern ((lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. x)) (has_type x TYPE%lib!journal.PagedJournal_v.JournalRecord.)) )))
(define-fun is-lib!journal.PagedJournal_v.JournalRecord./JournalRecord_ ((c lib!journal.PagedJournal_v.JournalRecord.)) Bool ((_ is lib!journal.PagedJournal_v.JournalRecord./JournalRecord) c))
(assert (forall ((x lib!journal.PagedJournal_v.JournalRecord.)) (! (=> (is-lib!journal.PagedJournal_v.JournalRecord./JournalRecord_ x) (height_lt (height (Poly%core!option.Option. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec x))) (height (Poly%lib!journal.PagedJournal_v.JournalRecord. x)))) :pattern ((height (Poly%core!option.Option. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec x)))) )))
(assert (forall ((x lib!journal.PagedJournal_v.TruncatedJournal.)) (! (= x (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. (Poly%lib!journal.PagedJournal_v.TruncatedJournal. x))) :pattern ((Poly%lib!journal.PagedJournal_v.TruncatedJournal. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.TruncatedJournal.) (= x (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. x)))) :pattern ((has_type x TYPE%lib!journal.PagedJournal_v.TruncatedJournal.)) )))
(assert (forall ((_boundary_lsn! Int) (_freshest_rec! core!option.Option.)) (! (=> (and (<= 0 _boundary_lsn!) (has_type (Poly%core!option.Option. _freshest_rec!) (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.))) (has_type (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal _boundary_lsn! _freshest_rec!)) TYPE%lib!journal.PagedJournal_v.TruncatedJournal.)) :pattern ((has_type (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal _boundary_lsn! _freshest_rec!)) TYPE%lib!journal.PagedJournal_v.TruncatedJournal.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.TruncatedJournal.)) (! (= (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn x) (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/?boundary_lsn x)) :pattern ((lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.TruncatedJournal.) (<= 0 (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. x)))) :pattern ((lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. x)) (has_type x TYPE%lib!journal.PagedJournal_v.TruncatedJournal.)) )))
(assert (forall ((x lib!journal.PagedJournal_v.TruncatedJournal.)) (! (= (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec x) (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/?freshest_rec x)) :pattern ((lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!journal.PagedJournal_v.TruncatedJournal.) (has_type (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. x))) (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.))) :pattern ((lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. x)) (has_type x TYPE%lib!journal.PagedJournal_v.TruncatedJournal.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::spec_affirm")
(declare-fun vstd!pervasive.spec_affirm.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::contains")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::contains_exactly")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::wf")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_follow")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_concat")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::JournalRecord::wf")
(declare-fun lib!journal.PagedJournal_v.impl&%0.wf.? (Poly) Bool)
(declare-fun lib!journal.PagedJournal_v.impl&%0.rec%wf.? (Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_discard_to")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::JournalRecord::valid")
(declare-fun lib!journal.PagedJournal_v.impl&%0.valid.? (Poly Poly) Bool)
(declare-fun lib!journal.PagedJournal_v.impl&%0.rec%valid.? (Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::TruncatedJournal::wf")
(declare-fun lib!journal.PagedJournal_v.impl&%1.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::TruncatedJournal::seq_end")
(declare-fun lib!journal.PagedJournal_v.impl&%1.seq_end.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::wf")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::Label::arrow_ReadForRecovery_messages")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_ReadForRecovery_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::JournalRecord::cropped_prior")
(declare-fun lib!journal.PagedJournal_v.impl&%0.cropped_prior.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::JournalRecord::opt_rec_can_crop_head_records")
(declare-fun lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.? (Poly Poly Poly) Bool)
(declare-fun lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_can_crop_head_records.? (Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::JournalRecord::can_crop_head_records")
(declare-fun lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly Poly Poly) Bool)
(declare-fun lib!journal.PagedJournal_v.impl&%0.rec%can_crop_head_records.? (Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::JournalRecord::opt_rec_crop_head_records")
(declare-fun lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.? (Poly Poly Poly) core!option.Option.)
(declare-fun lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_crop_head_records.? (Poly Poly Poly Fuel) core!option.Option.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::JournalRecord::crop_head_records")
(declare-fun lib!journal.PagedJournal_v.impl&%0.crop_head_records.? (Poly Poly Poly) core!option.Option.)
(declare-fun lib!journal.PagedJournal_v.impl&%0.rec%crop_head_records.? (Poly Poly Poly Fuel) core!option.Option.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::discard_old")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::maybe_discard_old")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::JournalRecord::message_seq_after_crop")
(declare-fun lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop.? (Poly Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::TruncatedJournal::has_messages_at_depth")
(declare-fun lib!journal.PagedJournal_v.impl&%1.has_messages_at_depth.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::read_for_recovery")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.read_for_recovery.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::TruncatedJournal::seq_start")
(declare-fun lib!journal.PagedJournal_v.impl&%1.seq_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::TruncatedJournal::can_discard_to")
(declare-fun lib!journal.PagedJournal_v.impl&%1.can_discard_to.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::TruncatedJournal::can_crop")
(declare-fun lib!journal.PagedJournal_v.impl&%1.can_crop.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::TruncatedJournal::crop_head_records")
(declare-fun lib!journal.PagedJournal_v.impl&%1.crop_head_records.? (Poly Poly) lib!journal.PagedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::JournalRecord::discard_old_journal_rec")
(declare-fun lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.? (Poly Poly) core!option.Option.)
(declare-fun lib!journal.PagedJournal_v.impl&%0.rec%discard_old_journal_rec.? (Poly Poly Fuel) core!option.Option.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::TruncatedJournal::discard_old_defn")
(declare-fun lib!journal.PagedJournal_v.impl&%1.discard_old_defn.? (Poly Poly) lib!journal.PagedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::TruncatedJournal::freeze_for_commit")
(declare-fun lib!journal.PagedJournal_v.impl&%1.freeze_for_commit.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::Label::arrow_frozen_journal")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_frozen_journal.? (Poly) lib!journal.PagedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::freeze_for_commit")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.freeze_for_commit.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::Label::arrow_end_lsn")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_end_lsn.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::seq_end")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::query_end_lsn")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.query_end_lsn.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::Label::arrow_Put_messages")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_Put_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::concat")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::put")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.put.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::Label::arrow_start_lsn")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_start_lsn.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::seq_start")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::Label::arrow_require_end")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_require_end.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::discard_old")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.discard_old.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::TruncatedJournal::append_record")
(declare-fun lib!journal.PagedJournal_v.impl&%1.append_record.? (Poly Poly) lib!journal.PagedJournal_v.TruncatedJournal.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::internal_journal_marshal")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_journal_marshal.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::internal_no_op")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_no_op.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::next_by")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::next")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::empty_history_at")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::initialize")
(declare-fun lib!journal.PagedJournal_v.PagedJournal.impl&%5.initialize.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::is_empty")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::State::wf")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::includes_subseq")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_ReadForRecoveryLabel_messages")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::State::read_for_recovery")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_frozen_journal")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::State::freeze_for_commit")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::State::can_end_at")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_end_lsn")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::State::observe_fresh_journal")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_PutLabel_messages")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::State::put")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_require_end")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_start_lsn")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::State::discard_old")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::State::internal")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::State::next_by")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::State::next")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::AbstractJournal_v::AbstractJournal::State::initialize")
(declare-fun lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::check_argument_is_map")
(declare-fun vstd!map.check_argument_is_map.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::Label::wf")
(declare-fun lib!journal.PagedJournalRefinement_v.impl&%2.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::JournalRecord::i")
(declare-fun lib!journal.PagedJournalRefinement_v.impl&%0.i.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.PagedJournalRefinement_v.impl&%0.rec%i.? (Poly Poly Fuel) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::JournalRecord::i_opt")
(declare-fun lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!journal.PagedJournalRefinement_v.impl&%0.rec%i_opt.? (Poly Poly Fuel) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::TruncatedJournal::i")
(declare-fun lib!journal.PagedJournalRefinement_v.impl&%1.i.? (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::Label::i")
(declare-fun lib!journal.PagedJournalRefinement_v.impl&%2.i.? (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)
(set-info :comment ";; Function-Decl lib::journal::PagedJournal_v::PagedJournal::State::i")
(declare-fun lib!journal.PagedJournalRefinement_v.impl&%3.i.? (Poly) lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%0 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Specs vstd::pervasive::spec_affirm")
(declare-fun req%vstd!pervasive.spec_affirm. (Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((b! Poly)) (! (= (req%vstd!pervasive.spec_affirm. b!) (=> %%global_location_label%%3 (%B b!))) :pattern ((req%vstd!pervasive.spec_affirm. b!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::contains")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (< (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::contains_exactly")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.) (forall ((self! Poly) (lsns! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT lsns! lsn$) (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT lsns! lsn$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$)) ))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::wf")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_follow")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_concat")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_concat.) (forall ((self! Poly) (other! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!) (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? other! (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::JournalRecord::wf")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%0.wf.))
(declare-const fuel_nat%lib!journal.PagedJournal_v.impl&%0.wf. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!journal.PagedJournal_v.impl&%0.rec%wf.? self! fuel%) (lib!journal.PagedJournal_v.impl&%0.rec%wf.? self! zero)) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%wf.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (= (lib!journal.PagedJournal_v.impl&%0.rec%wf.? self! (succ fuel%)) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!)))) (=> (is-core!option.Option./Some_ (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))) (and (lib!journal.PagedJournal_v.impl&%0.rec%wf.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))))) fuel%) (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!)))))))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))))))))) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%wf.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%0.wf.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (= (lib!journal.PagedJournal_v.impl&%0.wf.? self!) (lib!journal.PagedJournal_v.impl&%0.rec%wf.? self! (succ fuel_nat%lib!journal.PagedJournal_v.impl&%0.wf.)))) :pattern ((lib!journal.PagedJournal_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_discard_to")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (<= (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::JournalRecord::valid")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%0.valid.))
(declare-const fuel_nat%lib!journal.PagedJournal_v.impl&%0.valid. Fuel)
(assert (forall ((self! Poly) (boundary_lsn! Poly) (fuel% Fuel)) (! (= (lib!journal.PagedJournal_v.impl&%0.rec%valid.? self! boundary_lsn! fuel%) (lib!journal.PagedJournal_v.impl&%0.rec%valid.? self! boundary_lsn! zero)) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%valid.? self! boundary_lsn! fuel%)) )))
(assert (forall ((self! Poly) (boundary_lsn! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.rec%valid.? self! boundary_lsn! (succ fuel%)) (and (and (lib!journal.PagedJournal_v.impl&%0.wf.? self!) (< (%I boundary_lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))))))) (or (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))) boundary_lsn!) (and (is-core!option.Option./Some_ (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))) (lib!journal.PagedJournal_v.impl&%0.rec%valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))))) boundary_lsn! fuel%)))))) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%valid.? self! boundary_lsn! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%0.valid.) (forall ((self! Poly) (boundary_lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.valid.? self! boundary_lsn!) (lib!journal.PagedJournal_v.impl&%0.rec%valid.? self! boundary_lsn! (succ fuel_nat%lib!journal.PagedJournal_v.impl&%0.valid.)))) :pattern ((lib!journal.PagedJournal_v.impl&%0.valid.? self! boundary_lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::TruncatedJournal::wf")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%1.wf.? self!) (=> (is-core!option.Option./Some_ (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))))) (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!)))))) :pattern ((lib!journal.PagedJournal_v.impl&%1.wf.? self!)) ))))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::TruncatedJournal::seq_end")
(declare-fun req%lib!journal.PagedJournal_v.impl&%1.seq_end. (Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%1.seq_end. self!) (=> %%global_location_label%%4 (lib!journal.PagedJournal_v.impl&%1.wf.? self!))) :pattern ((req%lib!journal.PagedJournal_v.impl&%1.seq_end. self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::TruncatedJournal::seq_end")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%1.seq_end.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%1.seq_end.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%1.seq_end.? self!) (ite (is-core!option.Option./Some_ (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!)))))))))) (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!)))) :pattern ((lib!journal.PagedJournal_v.impl&%1.seq_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.TruncatedJournal.) (<= 0 (lib!journal.PagedJournal_v.impl&%1.seq_end.? self!))) :pattern ((lib!journal.PagedJournal_v.impl&%1.seq_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::wf")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf.? self!) (and (and (lib!journal.PagedJournal_v.impl&%1.wf.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!)))) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!))))) (= (lib!journal.PagedJournal_v.impl&%1.seq_end.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!)))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!)))))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::Label::arrow_ReadForRecovery_messages")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_ReadForRecovery_messages.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_ReadForRecovery_messages.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_ReadForRecovery_messages.? self!) (lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery/messages (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_ReadForRecovery_messages.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_ReadForRecovery_messages.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_ReadForRecovery_messages.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::JournalRecord::cropped_prior")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%0.cropped_prior.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%0.cropped_prior.) (forall ((self! Poly) (boundary_lsn! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!) (ite (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))))) (%I boundary_lsn!)) core!option.Option./None (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!)))) :pattern ((lib!journal.PagedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)) ))))
(assert (forall ((self! Poly) (boundary_lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT)) (has_type (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)) (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.))) :pattern ((lib!journal.PagedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::JournalRecord::opt_rec_can_crop_head_records")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.))
(declare-const fuel_nat%lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records. Fuel)
(assert (forall ((ojr! Poly) (boundary_lsn! Poly) (depth! Poly) (fuel% Fuel)) (! (= (lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_can_crop_head_records.? ojr! boundary_lsn! depth! fuel%) (lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_can_crop_head_records.? ojr! boundary_lsn! depth! zero)) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_can_crop_head_records.? ojr! boundary_lsn! depth! fuel%)) )))
(assert (forall ((ojr! Poly) (boundary_lsn! Poly) (depth! Poly) (fuel% Fuel)) (! (=> (and (has_type ojr! (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type boundary_lsn! NAT) (has_type depth! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_can_crop_head_records.? ojr! boundary_lsn! depth! (succ fuel%)) (ite (is-core!option.Option./None_ (%Poly%core!option.Option. ojr!)) (= (%I depth!) 0) (let ((rec$ (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. ojr!))))) (lib!journal.PagedJournal_v.impl&%0.rec%can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. rec$) boundary_lsn! depth! fuel%))))) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_can_crop_head_records.? ojr! boundary_lsn! depth! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.) (forall ((ojr! Poly) (boundary_lsn! Poly) (depth! Poly)) (! (=> (and (has_type ojr! (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type boundary_lsn! NAT) (has_type depth! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.? ojr! boundary_lsn! depth!) (lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_can_crop_head_records.? ojr! boundary_lsn! depth! (succ (succ fuel_nat%lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.))))) :pattern ((lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.? ojr! boundary_lsn! depth!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::JournalRecord::can_crop_head_records")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.))
(declare-const fuel_nat%lib!journal.PagedJournal_v.impl&%0.can_crop_head_records. Fuel)
(assert (forall ((self! Poly) (boundary_lsn! Poly) (depth! Poly) (fuel% Fuel)) (! (= (lib!journal.PagedJournal_v.impl&%0.rec%can_crop_head_records.? self! boundary_lsn! depth! fuel%) (lib!journal.PagedJournal_v.impl&%0.rec%can_crop_head_records.? self! boundary_lsn! depth! zero)) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%can_crop_head_records.? self! boundary_lsn! depth! fuel%)) )))
(assert (forall ((self! Poly) (boundary_lsn! Poly) (depth! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT) (has_type depth! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.rec%can_crop_head_records.? self! boundary_lsn! depth! (succ fuel%)) (and (lib!journal.PagedJournal_v.impl&%0.valid.? self! boundary_lsn!) (=> (not (= (%I depth!) 0)) (lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_can_crop_head_records.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)) boundary_lsn! (I (nClip (Sub (%I depth!) 1))) fuel%))))) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%can_crop_head_records.? self! boundary_lsn! depth! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.) (forall ((self! Poly) (boundary_lsn! Poly) (depth! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT) (has_type depth! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? self! boundary_lsn! depth!) (lib!journal.PagedJournal_v.impl&%0.rec%can_crop_head_records.? self! boundary_lsn! depth! (succ (succ fuel_nat%lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.))))) :pattern ((lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? self! boundary_lsn! depth!)) ))))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::opt_rec_crop_head_records")
(declare-fun req%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((ojr! Poly) (boundary_lsn! Poly) (depth! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records. ojr! boundary_lsn! depth!) (=> %%global_location_label%%5 (lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.? ojr! boundary_lsn! depth!))) :pattern ((req%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records. ojr! boundary_lsn! depth!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::crop_head_records")
(declare-fun req%lib!journal.PagedJournal_v.impl&%0.crop_head_records. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((self! Poly) (boundary_lsn! Poly) (depth! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%0.crop_head_records. self! boundary_lsn! depth!) (=> %%global_location_label%%6 (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? self! boundary_lsn! depth!))) :pattern ((req%lib!journal.PagedJournal_v.impl&%0.crop_head_records. self! boundary_lsn! depth!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::JournalRecord::opt_rec_crop_head_records")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.))
(declare-const fuel_nat%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records. Fuel)
(assert (forall ((ojr! Poly) (boundary_lsn! Poly) (depth! Poly) (fuel% Fuel)) (! (= (lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_crop_head_records.? ojr! boundary_lsn! depth! fuel%) (lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_crop_head_records.? ojr! boundary_lsn! depth! zero)) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_crop_head_records.? ojr! boundary_lsn! depth! fuel%)) )))
(assert (forall ((ojr! Poly) (boundary_lsn! Poly) (depth! Poly) (fuel% Fuel)) (! (=> (and (has_type ojr! (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type boundary_lsn! NAT) (has_type depth! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_crop_head_records.? ojr! boundary_lsn! depth! (succ fuel%)) (ite (is-core!option.Option./None_ (%Poly%core!option.Option. ojr!)) core!option.Option./None (let ((rec$ (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. ojr!))))) (lib!journal.PagedJournal_v.impl&%0.rec%crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. rec$) boundary_lsn! depth! fuel%))))) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_crop_head_records.? ojr! boundary_lsn! depth! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.) (forall ((ojr! Poly) (boundary_lsn! Poly) (depth! Poly)) (! (=> (and (has_type ojr! (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type boundary_lsn! NAT) (has_type depth! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.? ojr! boundary_lsn! depth!) (lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_crop_head_records.? ojr! boundary_lsn! depth! (succ (succ fuel_nat%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.))))) :pattern ((lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.? ojr! boundary_lsn! depth!)) ))))
(assert (forall ((ojr! Poly) (boundary_lsn! Poly) (depth! Poly)) (! (=> (and (has_type ojr! (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type boundary_lsn! NAT) (has_type depth! NAT)) (has_type (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.? ojr! boundary_lsn! depth!)) (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.))) :pattern ((lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.? ojr! boundary_lsn! depth!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::JournalRecord::crop_head_records")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%0.crop_head_records.))
(declare-const fuel_nat%lib!journal.PagedJournal_v.impl&%0.crop_head_records. Fuel)
(assert (forall ((self! Poly) (boundary_lsn! Poly) (depth! Poly) (fuel% Fuel)) (! (= (lib!journal.PagedJournal_v.impl&%0.rec%crop_head_records.? self! boundary_lsn! depth! fuel%) (lib!journal.PagedJournal_v.impl&%0.rec%crop_head_records.? self! boundary_lsn! depth! zero)) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%crop_head_records.? self! boundary_lsn! depth! fuel%)) )))
(assert (forall ((self! Poly) (boundary_lsn! Poly) (depth! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT) (has_type depth! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.rec%crop_head_records.? self! boundary_lsn! depth! (succ fuel%)) (ite (= (%I depth!) 0) (core!option.Option./Some self!) (lib!journal.PagedJournal_v.impl&%0.rec%opt_rec_crop_head_records.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.cropped_prior.? self! boundary_lsn!)) boundary_lsn! (I (nClip (Sub (%I depth!) 1))) fuel%)))) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%crop_head_records.? self! boundary_lsn! depth! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%0.crop_head_records.) (forall ((self! Poly) (boundary_lsn! Poly) (depth! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT) (has_type depth! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? self! boundary_lsn! depth!) (lib!journal.PagedJournal_v.impl&%0.rec%crop_head_records.? self! boundary_lsn! depth! (succ (succ fuel_nat%lib!journal.PagedJournal_v.impl&%0.crop_head_records.))))) :pattern ((lib!journal.PagedJournal_v.impl&%0.crop_head_records.? self! boundary_lsn! depth!)) ))))
(assert (forall ((self! Poly) (boundary_lsn! Poly) (depth! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT) (has_type depth! NAT)) (has_type (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? self! boundary_lsn! depth!)) (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.))) :pattern ((lib!journal.PagedJournal_v.impl&%0.crop_head_records.? self! boundary_lsn! depth!)) )))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::discard_old")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. (Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. self! lsn!) (=> %%global_location_label%%7 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.discard_old. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::discard_old")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old.))
(declare-fun %%lambda%%2 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) k$) (B (and (<= %%hole%%0 (%I k$)) (< (%I k$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) k$)))))
(declare-fun %%lambda%%3 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_old.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!) (let ((keepMap$ (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%fun%1. (mk_fun (%%lambda%%2 (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) (Poly%fun%1. (mk_fun (%%lambda%%3 $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. keepMap$)) (%I lsn!) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!)) )))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::maybe_discard_old")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old. (Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old. self! lsn!) (and (=> %%global_location_label%%8 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) (=> %%global_location_label%%9 (<= (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::maybe_discard_old")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? self! lsn!) (ite (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? self! lsn!) (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? self! lsn!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::message_seq_after_crop")
(declare-fun req%lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! Poly) (boundary_lsn! Poly) (depth! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop. self! boundary_lsn! depth!) (and (=> %%global_location_label%%10 (lib!journal.PagedJournal_v.impl&%0.valid.? self! boundary_lsn!)) (=> %%global_location_label%%11 (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? self! boundary_lsn! (I (nClip (Add (%I depth!) 1))))))) :pattern ((req%lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop. self! boundary_lsn! depth!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::JournalRecord::message_seq_after_crop")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop.) (forall ((self! Poly) (boundary_lsn! Poly) (depth! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop.? self! boundary_lsn! depth!) (let ((chrms$ (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? self! boundary_lsn! depth!)))))))) (let ((tmp%%$ (vstd!pervasive.spec_affirm.? (B (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. chrms$)))))) (lib!abstract_system.MsgHistory_v.impl&%0.maybe_discard_old.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. chrms$) boundary_lsn!)))) :pattern ((lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop.? self! boundary_lsn! depth!)) ))))
(assert (forall ((self! Poly) (boundary_lsn! Poly) (depth! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT) (has_type depth! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop.? self! boundary_lsn! depth!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop.? self! boundary_lsn! depth!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::TruncatedJournal::has_messages_at_depth")
(declare-fun req%lib!journal.PagedJournal_v.impl&%1.has_messages_at_depth. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((self! Poly) (msgs! Poly) (depth! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%1.has_messages_at_depth. self! msgs! depth!) (and (=> %%global_location_label%%12 (lib!journal.PagedJournal_v.impl&%1.wf.? self!)) (=> %%global_location_label%%13 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? msgs!)))) :pattern ((req%lib!journal.PagedJournal_v.impl&%1.has_messages_at_depth. self! msgs! depth!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::TruncatedJournal::has_messages_at_depth")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%1.has_messages_at_depth.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%1.has_messages_at_depth.) (forall ((self! Poly) (msgs! Poly) (depth! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%1.has_messages_at_depth.? self! msgs! depth!) (and (and (is-core!option.Option./Some_ (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))))) (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) (I (nClip (Add (%I depth!) 1))))) (= (lib!journal.PagedJournal_v.impl&%0.message_seq_after_crop.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))))) (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) depth!) (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs!)))) :pattern ((lib!journal.PagedJournal_v.impl&%1.has_messages_at_depth.? self! msgs! depth!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::read_for_recovery")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.read_for_recovery.))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery_ ((c lib!journal.PagedJournal_v.PagedJournal.Label.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery) c))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.read_for_recovery.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (depth! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.read_for_recovery.? pre! post! lbl! depth!) (let ((update_tmp_truncated_journal$ (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!)))) (let ((update_tmp_unmarshalled_tail$ (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!)))) (and (lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf.? pre!) (and (is-lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery/messages (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)))) (and (lib!journal.PagedJournal_v.impl&%1.has_messages_at_depth.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery/messages (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!))) depth!) (and (= (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_truncated_journal$))))))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.read_for_recovery.? pre! post! lbl! depth!)) ))))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::TruncatedJournal::seq_start")
(declare-fun req%lib!journal.PagedJournal_v.impl&%1.seq_start. (Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%1.seq_start. self!) (=> %%global_location_label%%14 (lib!journal.PagedJournal_v.impl&%1.wf.? self!))) :pattern ((req%lib!journal.PagedJournal_v.impl&%1.seq_start. self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::TruncatedJournal::seq_start")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%1.seq_start.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%1.seq_start.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%1.seq_start.? self!) (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) :pattern ((lib!journal.PagedJournal_v.impl&%1.seq_start.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.TruncatedJournal.) (<= 0 (lib!journal.PagedJournal_v.impl&%1.seq_start.? self!))) :pattern ((lib!journal.PagedJournal_v.impl&%1.seq_start.? self!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::TruncatedJournal::can_discard_to")
(declare-fun req%lib!journal.PagedJournal_v.impl&%1.can_discard_to. (Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%1.can_discard_to. self! lsn!) (=> %%global_location_label%%15 (lib!journal.PagedJournal_v.impl&%1.wf.? self!))) :pattern ((req%lib!journal.PagedJournal_v.impl&%1.can_discard_to. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::TruncatedJournal::can_discard_to")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%1.can_discard_to.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%1.can_discard_to.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%1.can_discard_to.? self! lsn!) (and (<= (lib!journal.PagedJournal_v.impl&%1.seq_start.? self!) (%I lsn!)) (<= (%I lsn!) (lib!journal.PagedJournal_v.impl&%1.seq_end.? self!)))) :pattern ((lib!journal.PagedJournal_v.impl&%1.can_discard_to.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::TruncatedJournal::can_crop")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%1.can_crop.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%1.can_crop.) (forall ((self! Poly) (depth! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%1.can_crop.? self! depth!) (lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) depth!)) :pattern ((lib!journal.PagedJournal_v.impl&%1.can_crop.? self! depth!)) ))))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::TruncatedJournal::crop_head_records")
(declare-fun req%lib!journal.PagedJournal_v.impl&%1.crop_head_records. (Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((self! Poly) (depth! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%1.crop_head_records. self! depth!) (=> %%global_location_label%%16 (lib!journal.PagedJournal_v.impl&%1.can_crop.? self! depth!))) :pattern ((req%lib!journal.PagedJournal_v.impl&%1.crop_head_records. self! depth!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::TruncatedJournal::crop_head_records")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%1.crop_head_records.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%1.crop_head_records.) (forall ((self! Poly) (depth! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%1.crop_head_records.? self! depth!) (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal (%I (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) depth!))))) :pattern ((lib!journal.PagedJournal_v.impl&%1.crop_head_records.? self! depth!)) ))))
(assert (forall ((self! Poly) (depth! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.TruncatedJournal.) (has_type depth! NAT)) (has_type (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.impl&%1.crop_head_records.? self! depth!)) TYPE%lib!journal.PagedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.PagedJournal_v.impl&%1.crop_head_records.? self! depth!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::discard_old_journal_rec")
(declare-fun req%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec. (Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((ojr! Poly) (lsn! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec. ojr! lsn!) (=> %%global_location_label%%17 (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. ojr!)) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. ojr!)) lsn!)))) :pattern ((req%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec. ojr! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::JournalRecord::discard_old_journal_rec")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.))
(declare-const fuel_nat%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec. Fuel)
(assert (forall ((ojr! Poly) (lsn! Poly) (fuel% Fuel)) (! (= (lib!journal.PagedJournal_v.impl&%0.rec%discard_old_journal_rec.? ojr! lsn! fuel%) (lib!journal.PagedJournal_v.impl&%0.rec%discard_old_journal_rec.? ojr! lsn! zero)) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%discard_old_journal_rec.? ojr! lsn! fuel%)) )))
(assert (forall ((ojr! Poly) (lsn! Poly) (fuel% Fuel)) (! (=> (and (has_type ojr! (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type lsn! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.rec%discard_old_journal_rec.? ojr! lsn! (succ fuel%)) (ite (is-core!option.Option./None_ (%Poly%core!option.Option. ojr!)) core!option.Option./None (let ((rec$ (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. ojr!))))) (let ((prior_rec$ (ite (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (Poly%lib!journal.PagedJournal_v.JournalRecord. rec$)))))) (%I lsn!)) core!option.Option./None (lib!journal.PagedJournal_v.impl&%0.rec%discard_old_journal_rec.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. (Poly%lib!journal.PagedJournal_v.JournalRecord. rec$)))) lsn! fuel%)))) (core!option.Option./Some (Poly%lib!journal.PagedJournal_v.JournalRecord. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (Poly%lib!journal.PagedJournal_v.JournalRecord. rec$))))) (%Poly%core!option.Option. (Poly%core!option.Option. prior_rec$)))))))))) :pattern ((lib!journal.PagedJournal_v.impl&%0.rec%discard_old_journal_rec.? ojr! lsn! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.) (forall ((ojr! Poly) (lsn! Poly)) (! (=> (and (has_type ojr! (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type lsn! NAT)) (= (lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.? ojr! lsn!) (lib!journal.PagedJournal_v.impl&%0.rec%discard_old_journal_rec.? ojr! lsn! (succ fuel_nat%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.)))) :pattern ((lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.? ojr! lsn!)) ))))
(assert (forall ((ojr! Poly) (lsn! Poly)) (! (=> (and (has_type ojr! (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type lsn! NAT)) (has_type (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.? ojr! lsn!)) (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.))) :pattern ((lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.? ojr! lsn!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::TruncatedJournal::discard_old_defn")
(declare-fun req%lib!journal.PagedJournal_v.impl&%1.discard_old_defn. (Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%1.discard_old_defn. self! lsn!) (and (=> %%global_location_label%%18 (lib!journal.PagedJournal_v.impl&%1.wf.? self!)) (=> %%global_location_label%%19 (lib!journal.PagedJournal_v.impl&%1.can_discard_to.? self! lsn!)))) :pattern ((req%lib!journal.PagedJournal_v.impl&%1.discard_old_defn. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::TruncatedJournal::discard_old_defn")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%1.discard_old_defn.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%1.discard_old_defn.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%1.discard_old_defn.? self! lsn!) (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal (%I lsn!) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (= (lib!journal.PagedJournal_v.impl&%1.seq_end.? self!) (%I lsn!)) core!option.Option./None (lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) lsn!)))))) :pattern ((lib!journal.PagedJournal_v.impl&%1.discard_old_defn.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.TruncatedJournal.) (has_type lsn! NAT)) (has_type (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.impl&%1.discard_old_defn.? self! lsn!)) TYPE%lib!journal.PagedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.PagedJournal_v.impl&%1.discard_old_defn.? self! lsn!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::TruncatedJournal::freeze_for_commit")
(declare-fun req%lib!journal.PagedJournal_v.impl&%1.freeze_for_commit. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((self! Poly) (frozen_journal! Poly) (depth! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%1.freeze_for_commit. self! frozen_journal! depth!) (=> %%global_location_label%%20 (lib!journal.PagedJournal_v.impl&%1.wf.? self!))) :pattern ((req%lib!journal.PagedJournal_v.impl&%1.freeze_for_commit. self! frozen_journal! depth!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::TruncatedJournal::freeze_for_commit")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%1.freeze_for_commit.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%1.freeze_for_commit.) (forall ((self! Poly) (frozen_journal! Poly) (depth! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%1.freeze_for_commit.? self! frozen_journal! depth!) (and (and (and (lib!journal.PagedJournal_v.impl&%1.wf.? frozen_journal!) (lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) depth!)) (lib!journal.PagedJournal_v.impl&%1.can_discard_to.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.impl&%1.crop_head_records.? self! depth!)) (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. frozen_journal!))))) (= (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. frozen_journal!) (lib!journal.PagedJournal_v.impl&%1.discard_old_defn.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.impl&%1.crop_head_records.? self! depth!)) (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. frozen_journal!))))))) :pattern ((lib!journal.PagedJournal_v.impl&%1.freeze_for_commit.? self! frozen_journal! depth!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::Label::arrow_frozen_journal")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_frozen_journal.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_frozen_journal.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_frozen_journal.? self!) (lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_frozen_journal.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (has_type (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_frozen_journal.? self!)) TYPE%lib!journal.PagedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_frozen_journal.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::freeze_for_commit")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.freeze_for_commit.))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit_ ((c lib!journal.PagedJournal_v.PagedJournal.Label.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit) c))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.freeze_for_commit.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (depth! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.freeze_for_commit.? pre! post! lbl! depth!) (let ((update_tmp_truncated_journal$ (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!)))) (let ((update_tmp_unmarshalled_tail$ (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!)))) (and (is-lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)) (and (lib!journal.PagedJournal_v.impl&%1.freeze_for_commit.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))) (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!))) depth!) (and (= (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_truncated_journal$))))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.freeze_for_commit.? pre! post! lbl! depth!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::Label::arrow_end_lsn")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_end_lsn.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_end_lsn.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_end_lsn.? self!) (lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_end_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (<= 0 (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_end_lsn.? self!))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_end_lsn.? self!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::PagedJournal::State::seq_end")
(declare-fun req%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end. (Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end. self!) (=> %%global_location_label%%21 (lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf.? self!))) :pattern ((req%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end. self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::seq_end")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end.? self!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!)))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.PagedJournal.State.) (<= 0 (lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end.? self!))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::query_end_lsn")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.query_end_lsn.))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn_ ((c lib!journal.PagedJournal_v.PagedJournal.Label.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn) c))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.query_end_lsn.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.query_end_lsn.? pre! post! lbl!) (let ((update_tmp_truncated_journal$ (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!)))) (let ((update_tmp_unmarshalled_tail$ (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!)))) (and (is-lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)) (and (= (lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)) (lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end.? pre!)) (and (= (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_truncated_journal$))))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.query_end_lsn.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::Label::arrow_Put_messages")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_Put_messages.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_Put_messages.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_Put_messages.? self!) (lib!journal.PagedJournal_v.PagedJournal.Label./Put/messages (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_Put_messages.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_Put_messages.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_Put_messages.? self!)) )))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::concat")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.concat. (Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((self! Poly) (other! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.concat. self! other!) (=> %%global_location_label%%22 (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? self! other!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.concat. self! other!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::concat")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.concat.) (forall ((self! Poly) (other! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!))))) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!)))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) ))))
(assert (forall ((self! Poly) (other! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type other! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.concat.? self! other!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::put")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.put.))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Label./Put_ ((c lib!journal.PagedJournal_v.PagedJournal.Label.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Label./Put) c))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.put.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.put.? pre! post! lbl!) (let ((update_tmp_truncated_journal$ (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!)))) (and (is-lib!journal.PagedJournal_v.PagedJournal.Label./Put_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)) (and (let ((msgs$ (lib!journal.PagedJournal_v.PagedJournal.Label./Put/messages (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)))) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs$)) (and (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs$))) (lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end.? pre!)) (let ((update_tmp_unmarshalled_tail$ (lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs$)))) (= (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_unmarshalled_tail$))))) (= (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_truncated_journal$))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.put.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::Label::arrow_start_lsn")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_start_lsn.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_start_lsn.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_start_lsn.? self!) (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/start_lsn (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_start_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (<= 0 (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_start_lsn.? self!))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_start_lsn.? self!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::PagedJournal::State::seq_start")
(declare-fun req%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start. (Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start. self!) (=> %%global_location_label%%23 (lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf.? self!))) :pattern ((req%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start. self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::seq_start")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start.? self!) (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!)))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.PagedJournal.State.) (<= 0 (lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start.? self!))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::Label::arrow_require_end")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_require_end.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_require_end.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_require_end.? self!) (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/require_end (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_require_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (<= 0 (lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_require_end.? self!))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%4.arrow_require_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::discard_old")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.discard_old.))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld_ ((c lib!journal.PagedJournal_v.PagedJournal.Label.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld) c))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.discard_old.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.discard_old.? pre! post! lbl!) (and (is-lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)) (let ((lsn$ (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/start_lsn (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)))) (and (and (<= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_start.? pre!) lsn$) (<= lsn$ (lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end.? pre!))) (and (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.seq_end.? pre!) (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/require_end (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!))) (let ((update_tmp_unmarshalled_tail$ (ite (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))))) lsn$) (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))) (I lsn$)) (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))))) (let ((update_tmp_truncated_journal$ (ite (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))))) lsn$) (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal (%I (I lsn$)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))) (lib!journal.PagedJournal_v.impl&%1.discard_old_defn.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))) (I lsn$))))) (and (= (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_truncated_journal$) (= (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_unmarshalled_tail$))))))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.discard_old.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. (Poly Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. self! lsn!) (=> %%global_location_label%%24 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!) (let ((keepMap$ (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%fun%1. (mk_fun (%%lambda%%2 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)))) (Poly%fun%1. (mk_fun (%%lambda%%3 $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. keepMap$)) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (%I lsn!)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::TruncatedJournal::append_record")
(declare-fun req%lib!journal.PagedJournal_v.impl&%1.append_record. (Poly Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((self! Poly) (msgs! Poly)) (! (= (req%lib!journal.PagedJournal_v.impl&%1.append_record. self! msgs!) (and (=> %%global_location_label%%25 (lib!journal.PagedJournal_v.impl&%1.wf.? self!)) (=> %%global_location_label%%26 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? msgs!)))) :pattern ((req%lib!journal.PagedJournal_v.impl&%1.append_record. self! msgs!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::TruncatedJournal::append_record")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.impl&%1.append_record.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.impl&%1.append_record.) (forall ((self! Poly) (msgs! Poly)) (! (= (lib!journal.PagedJournal_v.impl&%1.append_record.? self! msgs!) (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal (%I (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!journal.PagedJournal_v.JournalRecord. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs!) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))))))))))) :pattern ((lib!journal.PagedJournal_v.impl&%1.append_record.? self! msgs!)) ))))
(assert (forall ((self! Poly) (msgs! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.TruncatedJournal.) (has_type msgs! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.impl&%1.append_record.? self! msgs!)) TYPE%lib!journal.PagedJournal_v.TruncatedJournal.)) :pattern ((lib!journal.PagedJournal_v.impl&%1.append_record.? self! msgs!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::internal_journal_marshal")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_journal_marshal.))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Label./Internal_ ((c lib!journal.PagedJournal_v.PagedJournal.Label.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Label./Internal) c))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_journal_marshal.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (cut! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_journal_marshal.? pre! post! lbl! cut!) (and (is-lib!journal.PagedJournal_v.PagedJournal.Label./Internal_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)) (and (< (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))))) (%I cut!)) (and (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))) cut!) (let ((marshalled_msgs$ (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))) cut!))) (let ((update_tmp_truncated_journal$ (lib!journal.PagedJournal_v.impl&%1.append_record.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. marshalled_msgs$)))) (let ((update_tmp_unmarshalled_tail$ (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!))) cut!))) (and (= (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_truncated_journal$))))))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_journal_marshal.? pre! post! lbl! cut!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::internal_no_op")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_no_op.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_no_op.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_no_op.? pre! post! lbl!) (let ((update_tmp_truncated_journal$ (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!)))) (let ((update_tmp_unmarshalled_tail$ (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. pre!)))) (and (is-lib!journal.PagedJournal_v.PagedJournal.Label./Internal_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)) (and (= (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_truncated_journal$)))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_no_op.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::next_by")
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery_ ((c lib!journal.PagedJournal_v.PagedJournal.Step.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery) c))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit_ ((c lib!journal.PagedJournal_v.PagedJournal.Step.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit) c))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Step./query_end_lsn_ ((c lib!journal.PagedJournal_v.PagedJournal.Step.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Step./query_end_lsn) c))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Step./put_ ((c lib!journal.PagedJournal_v.PagedJournal.Step.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Step./put) c))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Step./discard_old_ ((c lib!journal.PagedJournal_v.PagedJournal.Step.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Step./discard_old) c))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal_ ((c lib!journal.PagedJournal_v.PagedJournal.Step.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal) c))
(define-fun is-lib!journal.PagedJournal_v.PagedJournal.Step./internal_no_op_ ((c lib!journal.PagedJournal_v.PagedJournal.Step.)) Bool ((_ is lib!journal.PagedJournal_v.PagedJournal.Step./internal_no_op) c))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. step!)) (let ((depth$ (lib!journal.PagedJournal_v.PagedJournal.Step./read_for_recovery/0 (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. step!)))) (lib!journal.PagedJournal_v.PagedJournal.impl&%5.read_for_recovery.? pre! post! label! (I depth$))) (ite (is-lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. step!)) (let ((depth$ (lib!journal.PagedJournal_v.PagedJournal.Step./freeze_for_commit/0 (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. step!)))) (lib!journal.PagedJournal_v.PagedJournal.impl&%5.freeze_for_commit.? pre! post! label! (I depth$))) (ite (is-lib!journal.PagedJournal_v.PagedJournal.Step./query_end_lsn_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. step!)) (lib!journal.PagedJournal_v.PagedJournal.impl&%5.query_end_lsn.? pre! post! label!) (ite (is-lib!journal.PagedJournal_v.PagedJournal.Step./put_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. step!)) (lib!journal.PagedJournal_v.PagedJournal.impl&%5.put.? pre! post! label!) (ite (is-lib!journal.PagedJournal_v.PagedJournal.Step./discard_old_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. step!)) (lib!journal.PagedJournal_v.PagedJournal.impl&%5.discard_old.? pre! post! label!) (ite (is-lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. step!)) (let ((cut$ (lib!journal.PagedJournal_v.PagedJournal.Step./internal_journal_marshal/0 (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. step!)))) (lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_journal_marshal.? pre! post! label! (I cut$))) (and (is-lib!journal.PagedJournal_v.PagedJournal.Step./internal_no_op_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Step. step!)) (lib!journal.PagedJournal_v.PagedJournal.impl&%5.internal_no_op.? pre! post! label!))))))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.next_by.? pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::next")
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!journal.PagedJournal_v.PagedJournal.Step.) (lib!journal.PagedJournal_v.PagedJournal.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.next.? pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::empty_history_at")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.) (forall ((lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (%I lsn!) (%I lsn!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? lsn!)) ))))
(assert (forall ((lsn! Poly)) (! (=> (has_type lsn! NAT) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? lsn!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::initialize")
(assert (fuel_bool_default fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournal_v.PagedJournal.impl&%5.initialize.) (forall ((post! Poly) (truncated_journal! Poly)) (! (= (lib!journal.PagedJournal_v.PagedJournal.impl&%5.initialize.? post! truncated_journal!) (and (lib!journal.PagedJournal_v.impl&%1.wf.? truncated_journal!) (let ((update_tmp_truncated_journal$ (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. truncated_journal!))) (let ((update_tmp_unmarshalled_tail$ (lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? (I (lib!journal.PagedJournal_v.impl&%1.seq_end.? truncated_journal!))))) (and (= (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_unmarshalled_tail$) (= (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) update_tmp_truncated_journal$)))))) :pattern ((lib!journal.PagedJournal_v.PagedJournal.impl&%5.initialize.? post! truncated_journal!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::is_empty")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::State::wf")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? self!) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. self!))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? self!)) ))))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::includes_subseq")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. (Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((self! Poly) (subseq! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. self! subseq!) (and (=> %%global_location_label%%27 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) (=> %%global_location_label%%28 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? subseq!)))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq. self! subseq!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::includes_subseq")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.) (forall ((self! Poly) (subseq! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? self! subseq!) (and (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. subseq!))) (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. subseq!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (=> (lib!abstract_system.MsgHistory_v.impl&%0.contains.? subseq! lsn$) (and (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$) (= (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) lsn$) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. subseq!))) lsn$))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? subseq! lsn$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$)) )))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? self! subseq!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_ReadForRecoveryLabel_messages")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_ReadForRecoveryLabel_messages.? self!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::State::read_for_recovery")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!)))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$)))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_frozen_journal")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_frozen_journal.? self!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::State::freeze_for_commit")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!)))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (and (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel/frozen_journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::State::can_end_at")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.? self! lsn!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. self!))))) (%I lsn!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_end_lsn")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.? self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_end_lsn.? self!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::State::observe_fresh_journal")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!)))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.can_end_at.? pre! (I (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel/end_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$)))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_PutLabel_messages")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_PutLabel_messages.? self!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::State::put")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.? pre! post! lbl!) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))))) (let ((update_tmp_journal$ (lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel/messages (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$)))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_require_end")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.? self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_require_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::Label::arrow_start_lsn")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.) (forall ((self! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.) (<= 0 (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.? self!))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%4.arrow_start_lsn.? self!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::State::discard_old")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.? pre! post! lbl!) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (and (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))))) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/require_end (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!))) (and (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (I (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))) (let ((update_tmp_journal$ (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!))) (I (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel/start_lsn (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)))))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$))))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::State::internal")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.? pre! post! lbl!) (let ((update_tmp_journal$ (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. pre!)))) (and (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.wf.? pre!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. lbl!)) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::State::next_by")
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery) c))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit) c))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal) c))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put) c))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old) c))
(define-fun is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal_ ((c lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.)) Bool ((_ is lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal) c))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./read_for_recovery_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.read_for_recovery.? pre! post! label!) (ite (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./freeze_for_commit_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.freeze_for_commit.? pre! post! label!) (ite (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./observe_fresh_journal_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.observe_fresh_journal.? pre! post! label!) (ite (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./put_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.put.? pre! post! label!) (ite (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./discard_old_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.discard_old.? pre! post! label!) (and (is-lib!abstract_system.AbstractJournal_v.AbstractJournal.Step./internal_ (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step. step!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.internal.? pre! post! label!)))))))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.? pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::State::next")
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Step.) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::AbstractJournal_v::AbstractJournal::State::initialize")
(assert (fuel_bool_default fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.) (forall ((post! Poly) (persistent_journal! Poly)) (! (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.? post! persistent_journal!) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? persistent_journal!) (let ((update_tmp_journal$ (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. persistent_journal!))) (= (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. post!)) update_tmp_journal$)))) :pattern ((lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.? post! persistent_journal!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::check_argument_is_map")
(assert (fuel_bool_default fuel%vstd!map.check_argument_is_map.))
(assert (=> (fuel_bool fuel%vstd!map.check_argument_is_map.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly)) (! (= (vstd!map.check_argument_is_map.? K&. K& V&. V& m!) m!) :pattern ((vstd!map.check_argument_is_map.? K&. K& V&. V& m!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.check_argument_is_map.? K&. K& V&. V& m!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.check_argument_is_map.? K&. K& V&. V& m!)) )))
(set-info :comment ";; Function-Recommends lib::journal::PagedJournal_v::PagedJournal::Label::wf")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:354:5: 354:47 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::Label::wf")
(assert (fuel_bool_default fuel%lib!journal.PagedJournalRefinement_v.impl&%2.wf.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournalRefinement_v.impl&%2.wf.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournalRefinement_v.impl&%2.wf.? self!) (=> (is-lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)) (let ((frozen_journal$ (lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)))) (lib!journal.PagedJournal_v.impl&%1.wf.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. frozen_journal$))))) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%2.wf.? self!)) ))))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::i")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%0.i. (Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((self! Poly) (boundary_lsn! Poly)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%0.i. self! boundary_lsn!) (=> %%global_location_label%%29 (lib!journal.PagedJournal_v.impl&%0.wf.? self!))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%0.i. self! boundary_lsn!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::i_opt")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%0.i_opt. (Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((ojr! Poly) (boundary_lsn! Poly)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%0.i_opt. ojr! boundary_lsn!) (=> %%global_location_label%%30 (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. ojr!)) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. ojr!)) boundary_lsn!)))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%0.i_opt. ojr! boundary_lsn!)) )))
(set-info :comment ";; Spec-Termination lib::journal::PagedJournal_v::JournalRecord::i")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:27:5: 27:80 (#0)")
(set-info :comment ";; Spec-Termination lib::journal::PagedJournal_v::JournalRecord::i_opt")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:43:5: 43:97 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::JournalRecord::i")
(assert (fuel_bool_default fuel%lib!journal.PagedJournalRefinement_v.impl&%0.i.))
(declare-const fuel_nat%lib!journal.PagedJournalRefinement_v.impl&%0.i. Fuel)
(assert (forall ((self! Poly) (boundary_lsn! Poly) (fuel% Fuel)) (! (= (lib!journal.PagedJournalRefinement_v.impl&%0.rec%i.? self! boundary_lsn! fuel%) (lib!journal.PagedJournalRefinement_v.impl&%0.rec%i.? self! boundary_lsn! zero)) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%0.rec%i.? self! boundary_lsn! fuel%)) )))
(assert (forall ((self! Poly) (boundary_lsn! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT)) (= (lib!journal.PagedJournalRefinement_v.impl&%0.rec%i.? self! boundary_lsn! (succ fuel%)) (ite (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))) boundary_lsn!) (lib!abstract_system.MsgHistory_v.impl&%0.discard_old.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))) boundary_lsn!) (lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%0.rec%i_opt.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))) boundary_lsn! fuel%)) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. self!))))))) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%0.rec%i.? self! boundary_lsn! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournalRefinement_v.impl&%0.i.) (forall ((self! Poly) (boundary_lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT)) (= (lib!journal.PagedJournalRefinement_v.impl&%0.i.? self! boundary_lsn!) (lib!journal.PagedJournalRefinement_v.impl&%0.rec%i.? self! boundary_lsn! (succ (succ fuel_nat%lib!journal.PagedJournalRefinement_v.impl&%0.i.))))) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%0.i.? self! boundary_lsn!)) ))))
(assert (forall ((self! Poly) (boundary_lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%0.i.? self! boundary_lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%0.i.? self! boundary_lsn!)) )))
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::JournalRecord::i_opt")
(assert (fuel_bool_default fuel%lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.))
(declare-const fuel_nat%lib!journal.PagedJournalRefinement_v.impl&%0.i_opt. Fuel)
(assert (forall ((ojr! Poly) (boundary_lsn! Poly) (fuel% Fuel)) (! (= (lib!journal.PagedJournalRefinement_v.impl&%0.rec%i_opt.? ojr! boundary_lsn! fuel%) (lib!journal.PagedJournalRefinement_v.impl&%0.rec%i_opt.? ojr! boundary_lsn! zero)) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%0.rec%i_opt.? ojr! boundary_lsn! fuel%)) )))
(assert (forall ((ojr! Poly) (boundary_lsn! Poly) (fuel% Fuel)) (! (=> (and (has_type ojr! (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type boundary_lsn! NAT)) (= (lib!journal.PagedJournalRefinement_v.impl&%0.rec%i_opt.? ojr! boundary_lsn! (succ fuel%)) (ite (is-core!option.Option./None_ (%Poly%core!option.Option. ojr!)) (lib!abstract_system.MsgHistory_v.impl&%0.empty_history_at.? boundary_lsn!) (let ((rec$ (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. ojr!))))) (lib!journal.PagedJournalRefinement_v.impl&%0.rec%i.? (Poly%lib!journal.PagedJournal_v.JournalRecord. rec$) boundary_lsn! fuel%))))) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%0.rec%i_opt.? ojr! boundary_lsn! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.) (forall ((ojr! Poly) (boundary_lsn! Poly)) (! (=> (and (has_type ojr! (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type boundary_lsn! NAT)) (= (lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.? ojr! boundary_lsn!) (lib!journal.PagedJournalRefinement_v.impl&%0.rec%i_opt.? ojr! boundary_lsn! (succ (succ fuel_nat%lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.))))) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.? ojr! boundary_lsn!)) ))))
(assert (forall ((ojr! Poly) (boundary_lsn! Poly)) (! (=> (and (has_type ojr! (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type boundary_lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.? ojr! boundary_lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.? ojr! boundary_lsn!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::TruncatedJournal::i")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%1.i. (Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%1.i. self!) (=> %%global_location_label%%31 (lib!journal.PagedJournal_v.impl&%1.wf.? self!))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%1.i. self!)) )))
(set-info :comment ";; Function-Recommends lib::journal::PagedJournal_v::TruncatedJournal::i")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:301:5: 301:52 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::TruncatedJournal::i")
(assert (fuel_bool_default fuel%lib!journal.PagedJournalRefinement_v.impl&%1.i.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournalRefinement_v.impl&%1.i.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournalRefinement_v.impl&%1.i.? self!) (lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))) (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!))))) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%1.i.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.TruncatedJournal.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%1.i.? self!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%1.i.? self!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::PagedJournal::Label::i")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%2.i. (Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%2.i. self!) (=> %%global_location_label%%32 (lib!journal.PagedJournalRefinement_v.impl&%2.wf.? self!))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%2.i. self!)) )))
(set-info :comment ";; Function-Recommends lib::journal::PagedJournal_v::PagedJournal::Label::i")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:362:5: 362:64 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::Label::i")
(assert (fuel_bool_default fuel%lib!journal.PagedJournalRefinement_v.impl&%2.i.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournalRefinement_v.impl&%2.i.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournalRefinement_v.impl&%2.i.? self!) (ite (is-lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)) (let ((messages$ (lib!journal.PagedJournal_v.PagedJournal.Label./ReadForRecovery/messages (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)))) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./ReadForRecoveryLabel (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. messages$)))) (ite (is-lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)) (let ((frozen_journal$ (lib!journal.PagedJournal_v.PagedJournal.Label./FreezeForCommit/frozen_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)))) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./FreezeForCommitLabel (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%1.i.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. frozen_journal$)))))) (ite (is-lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)) (let ((end_lsn$ (lib!journal.PagedJournal_v.PagedJournal.Label./QueryEndLsn/end_lsn (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)))) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./QueryEndLsnLabel (%I (I end_lsn$)))) (ite (is-lib!journal.PagedJournal_v.PagedJournal.Label./Put_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)) (let ((messages$ (lib!journal.PagedJournal_v.PagedJournal.Label./Put/messages (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)))) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./PutLabel (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. messages$)))) (ite (is-lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld_ (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)) (let ((start_lsn$ (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/start_lsn (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)))) (let ((require_end$ (lib!journal.PagedJournal_v.PagedJournal.Label./DiscardOld/require_end (%Poly%lib!journal.PagedJournal_v.PagedJournal.Label. self!)))) (lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./DiscardOldLabel (%I (I start_lsn$)) (%I (I require_end$))))) lib!abstract_system.AbstractJournal_v.AbstractJournal.Label./InternalLabel)))))) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%2.i.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.PagedJournal.Label.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!journal.PagedJournalRefinement_v.impl&%2.i.? self!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label.)) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%2.i.? self!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::PagedJournal::State::i")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%3.i. (Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%3.i. self!) (=> %%global_location_label%%33 (lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf.? self!))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%3.i. self!)) )))
(set-info :comment ";; Function-Recommends lib::journal::PagedJournal_v::PagedJournal::State::i")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:384:5: 384:64 (#0)")
(set-info :comment ";; Function-Axioms lib::journal::PagedJournal_v::PagedJournal::State::i")
(assert (fuel_bool_default fuel%lib!journal.PagedJournalRefinement_v.impl&%3.i.))
(assert (=> (fuel_bool fuel%lib!journal.PagedJournalRefinement_v.impl&%3.i.) (forall ((self! Poly)) (! (= (lib!journal.PagedJournalRefinement_v.impl&%3.i.? self!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%1.i.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.PagedJournal.State./State/truncated_journal (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!))))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.PagedJournal.State./State/unmarshalled_tail (%Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!)))))))) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%3.i.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!journal.PagedJournal_v.PagedJournal.State.) (has_type (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!journal.PagedJournalRefinement_v.impl&%3.i.? self!)) TYPE%lib!abstract_system.AbstractJournal_v.AbstractJournal.State.)) :pattern ((lib!journal.PagedJournalRefinement_v.impl&%3.i.? self!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::concat_lemma")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.concat_lemma. (lib!abstract_system.MsgHistory_v.MsgHistory. lib!abstract_system.MsgHistory_v.MsgHistory.) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((self! lib!abstract_system.MsgHistory_v.MsgHistory.) (other! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.concat_lemma. self! other!) (and (=> %%global_location_label%%34 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (=> %%global_location_label%%35 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!))) (=> %%global_location_label%%36 (lib!abstract_system.MsgHistory_v.impl&%0.can_concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!))))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.concat_lemma. self! other!)) )))
(declare-fun ens%lib!abstract_system.MsgHistory_v.impl&%0.concat_lemma. (lib!abstract_system.MsgHistory_v.MsgHistory. lib!abstract_system.MsgHistory_v.MsgHistory.) Bool)
(assert (forall ((self! lib!abstract_system.MsgHistory_v.MsgHistory.) (other! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (ens%lib!abstract_system.MsgHistory_v.impl&%0.concat_lemma. self! other!) (let ((result$ (lib!abstract_system.MsgHistory_v.impl&%0.concat.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!)))) (and (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. result$)) (forall ((x$ Poly)) (! (=> (has_type x$ NAT) (= (lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. result$) x$) (or (lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!) x$) (lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!) x$)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. result$) x$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!) x$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!) x$)) ))) (=> (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. other!)) (= result$ self!))))) :pattern ((ens%lib!abstract_system.MsgHistory_v.impl&%0.concat_lemma. self! other!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::i_lemma")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%0.i_lemma. (lib!journal.PagedJournal_v.JournalRecord. Int) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (boundary_lsn! Int)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%0.i_lemma. self! boundary_lsn!) (=> %%global_location_label%%37 (lib!journal.PagedJournal_v.impl&%0.valid.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I boundary_lsn!)))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%0.i_lemma. self! boundary_lsn!)) )))
(declare-fun ens%lib!journal.PagedJournalRefinement_v.impl&%0.i_lemma. (lib!journal.PagedJournal_v.JournalRecord. Int) Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (boundary_lsn! Int)) (! (= (ens%lib!journal.PagedJournalRefinement_v.impl&%0.i_lemma. self! boundary_lsn!) (let ((out$ (lib!journal.PagedJournalRefinement_v.impl&%0.i.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I boundary_lsn!)))) (and (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. out$)) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. out$))) boundary_lsn!)) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. out$))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (Poly%lib!journal.PagedJournal_v.JournalRecord. self!)))))))))) :pattern ((ens%lib!journal.PagedJournalRefinement_v.impl&%0.i_lemma. self! boundary_lsn!)) )))
(set-info :comment ";; Function-Def lib::journal::PagedJournal_v::JournalRecord::i_lemma")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:55:5: 55:50 (#0)")
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::i_lemma_forall")
(declare-fun ens%lib!journal.PagedJournalRefinement_v.impl&%0.i_lemma_forall. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!journal.PagedJournalRefinement_v.impl&%0.i_lemma_forall. no%param) (forall ((selff$ Poly) (boundary_lsn$ Poly)) (! (=> (and (has_type selff$ TYPE%lib!journal.PagedJournal_v.JournalRecord.) (has_type boundary_lsn$ NAT)) (=> (lib!journal.PagedJournal_v.impl&%0.valid.? selff$ boundary_lsn$) (let ((out$ (lib!journal.PagedJournalRefinement_v.impl&%0.i.? selff$ boundary_lsn$))) (and (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. out$)) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. out$))) (%I boundary_lsn$))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. out$))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. selff$)))))))))) :pattern ((lib!journal.PagedJournal_v.impl&%0.valid.? selff$ boundary_lsn$)) ))) :pattern ((ens%lib!journal.PagedJournalRefinement_v.impl&%0.i_lemma_forall. no%param)) )))
(set-info :comment ";; Function-Def lib::journal::PagedJournal_v::JournalRecord::i_lemma_forall")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:80:5: 80:34 (#0)")
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::PagedJournal::State::init_refines")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%3.init_refines. (lib!journal.PagedJournal_v.PagedJournal.State. lib!journal.PagedJournal_v.TruncatedJournal.) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.PagedJournal.State.) (truncated_journal! lib!journal.PagedJournal_v.TruncatedJournal.)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%3.init_refines. self! truncated_journal!) (=> %%global_location_label%%38 (lib!journal.PagedJournal_v.PagedJournal.impl&%5.initialize.? (Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!) (Poly%lib!journal.PagedJournal_v.TruncatedJournal. truncated_journal!)))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%3.init_refines. self! truncated_journal!)) )))
(declare-fun ens%lib!journal.PagedJournalRefinement_v.impl&%3.init_refines. (lib!journal.PagedJournal_v.PagedJournal.State. lib!journal.PagedJournal_v.TruncatedJournal.) Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.PagedJournal.State.) (truncated_journal! lib!journal.PagedJournal_v.TruncatedJournal.)) (! (= (ens%lib!journal.PagedJournalRefinement_v.impl&%3.init_refines. self! truncated_journal!) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.initialize.? (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!journal.PagedJournalRefinement_v.impl&%3.i.? (Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.AbstractJournal_v.AbstractJournal.State./State/journal (%Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!journal.PagedJournalRefinement_v.impl&%3.i.? (Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!)))))))) :pattern ((ens%lib!journal.PagedJournalRefinement_v.impl&%3.init_refines. self! truncated_journal!)) )))
(set-info :comment ";; Function-Def lib::journal::PagedJournal_v::PagedJournal::State::init_refines")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:531:5: 531:73 (#0)")
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::discard_valid")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%0.discard_valid. (lib!journal.PagedJournal_v.JournalRecord. Int Int) Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (old_lsn! Int) (new_lsn! Int)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%0.discard_valid. self! old_lsn! new_lsn!) (and (=> %%global_location_label%%39 (lib!journal.PagedJournal_v.impl&%0.valid.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I old_lsn!))) (=> %%global_location_label%%40 (and (<= old_lsn! new_lsn!) (< new_lsn! (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (Poly%lib!journal.PagedJournal_v.JournalRecord. self!))))))))))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%0.discard_valid. self! old_lsn! new_lsn!)) )))
(declare-fun ens%lib!journal.PagedJournalRefinement_v.impl&%0.discard_valid. (lib!journal.PagedJournal_v.JournalRecord. Int Int) Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (old_lsn! Int) (new_lsn! Int)) (! (= (ens%lib!journal.PagedJournalRefinement_v.impl&%0.discard_valid. self! old_lsn! new_lsn!) (lib!journal.PagedJournal_v.impl&%0.valid.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I new_lsn!))) :pattern ((ens%lib!journal.PagedJournalRefinement_v.impl&%0.discard_valid. self! old_lsn! new_lsn!)) )))
(set-info :comment ";; Function-Def lib::journal::PagedJournal_v::JournalRecord::discard_valid")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:286:5: 286:65 (#0)")
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::opt_rec_crop_head_records_lemma")
(declare-fun req%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records_lemma. (core!option.Option. Int Int) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((ojr! core!option.Option.) (boundary_lsn! Int) (depth! Int)) (! (= (req%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records_lemma. ojr! boundary_lsn! depth!) (=> %%global_location_label%%41 (lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.? (Poly%core!option.Option. ojr!) (I boundary_lsn!) (I depth!)))) :pattern ((req%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records_lemma. ojr! boundary_lsn! depth!)) )))
(declare-fun ens%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records_lemma. (core!option.Option. Int Int) Bool)
(assert (forall ((ojr! core!option.Option.) (boundary_lsn! Int) (depth! Int)) (! (= (ens%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records_lemma. ojr! boundary_lsn! depth!) (let ((out$ (lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.? (Poly%core!option.Option. ojr!) (I boundary_lsn!) (I depth!)))) (=> (is-core!option.Option./Some_ out$) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. out$))) (I boundary_lsn!))))) :pattern ((ens%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records_lemma. ojr! boundary_lsn! depth!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::crop_head_records_lemma")
(declare-fun req%lib!journal.PagedJournal_v.impl&%0.crop_head_records_lemma. (lib!journal.PagedJournal_v.JournalRecord. Int Int) Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (boundary_lsn! Int) (depth! Int)) (! (= (req%lib!journal.PagedJournal_v.impl&%0.crop_head_records_lemma. self! boundary_lsn! depth!) (=> %%global_location_label%%42 (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I boundary_lsn!) (I depth!)))) :pattern ((req%lib!journal.PagedJournal_v.impl&%0.crop_head_records_lemma. self! boundary_lsn! depth!)) )))
(declare-fun ens%lib!journal.PagedJournal_v.impl&%0.crop_head_records_lemma. (lib!journal.PagedJournal_v.JournalRecord. Int Int) Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (boundary_lsn! Int) (depth! Int)) (! (= (ens%lib!journal.PagedJournal_v.impl&%0.crop_head_records_lemma. self! boundary_lsn! depth!) (let ((out$ (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I boundary_lsn!) (I depth!)))) (=> (is-core!option.Option./Some_ out$) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. out$))) (I boundary_lsn!))))) :pattern ((ens%lib!journal.PagedJournal_v.impl&%0.crop_head_records_lemma. self! boundary_lsn! depth!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::TruncatedJournal::crop_head_records_wf_lemma")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%1.crop_head_records_wf_lemma. (lib!journal.PagedJournal_v.TruncatedJournal. Int) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.TruncatedJournal.) (depth! Int)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%1.crop_head_records_wf_lemma. self! depth!) (=> %%global_location_label%%43 (lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/freshest_rec (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. (Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!)))) (I (lib!journal.PagedJournal_v.TruncatedJournal./TruncatedJournal/boundary_lsn (%Poly%lib!journal.PagedJournal_v.TruncatedJournal. (Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!)))) (I depth!)))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%1.crop_head_records_wf_lemma. self! depth!)) )))
(declare-fun ens%lib!journal.PagedJournalRefinement_v.impl&%1.crop_head_records_wf_lemma. (lib!journal.PagedJournal_v.TruncatedJournal. Int) Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.TruncatedJournal.) (depth! Int)) (! (= (ens%lib!journal.PagedJournalRefinement_v.impl&%1.crop_head_records_wf_lemma. self! depth!) (lib!journal.PagedJournal_v.impl&%1.wf.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. (lib!journal.PagedJournal_v.impl&%1.crop_head_records.? (Poly%lib!journal.PagedJournal_v.TruncatedJournal. self!) (I depth!))))) :pattern ((ens%lib!journal.PagedJournalRefinement_v.impl&%1.crop_head_records_wf_lemma. self! depth!)) )))
(set-info :comment ";; Function-Def lib::journal::PagedJournal_v::TruncatedJournal::crop_head_records_wf_lemma")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:310:5: 310:62 (#0)")
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::can_crop_monotonic")
(declare-fun req%lib!journal.PagedJournal_v.impl&%0.can_crop_monotonic. (lib!journal.PagedJournal_v.JournalRecord. Int Int Int) Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (boundary_lsn! Int) (depth! Int) (more! Int)) (! (= (req%lib!journal.PagedJournal_v.impl&%0.can_crop_monotonic. self! boundary_lsn! depth! more!) (and (=> %%global_location_label%%44 (< depth! more!)) (=> %%global_location_label%%45 (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I boundary_lsn!) (I more!))))) :pattern ((req%lib!journal.PagedJournal_v.impl&%0.can_crop_monotonic. self! boundary_lsn! depth! more!)) )))
(declare-fun ens%lib!journal.PagedJournal_v.impl&%0.can_crop_monotonic. (lib!journal.PagedJournal_v.JournalRecord. Int Int Int) Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (boundary_lsn! Int) (depth! Int) (more! Int)) (! (= (ens%lib!journal.PagedJournal_v.impl&%0.can_crop_monotonic. self! boundary_lsn! depth! more!) (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I boundary_lsn!) (I depth!))) :pattern ((ens%lib!journal.PagedJournal_v.impl&%0.can_crop_monotonic. self! boundary_lsn! depth! more!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::can_crop_more_yields_some")
(declare-fun req%lib!journal.PagedJournal_v.impl&%0.can_crop_more_yields_some. (lib!journal.PagedJournal_v.JournalRecord. Int Int Int) Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (boundary_lsn! Int) (depth! Int) (more! Int)) (! (= (req%lib!journal.PagedJournal_v.impl&%0.can_crop_more_yields_some. self! boundary_lsn! depth! more!) (and (=> %%global_location_label%%46 (and (<= 0 depth!) (< depth! more!))) (=> %%global_location_label%%47 (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I boundary_lsn!) (I more!))))) :pattern ((req%lib!journal.PagedJournal_v.impl&%0.can_crop_more_yields_some. self! boundary_lsn! depth! more!)) )))
(declare-fun ens%lib!journal.PagedJournal_v.impl&%0.can_crop_more_yields_some. (lib!journal.PagedJournal_v.JournalRecord. Int Int Int) Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (boundary_lsn! Int) (depth! Int) (more! Int)) (! (= (ens%lib!journal.PagedJournal_v.impl&%0.can_crop_more_yields_some. self! boundary_lsn! depth! more!) (is-core!option.Option./Some_ (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I boundary_lsn!) (I depth!)))) :pattern ((ens%lib!journal.PagedJournal_v.impl&%0.can_crop_more_yields_some. self! boundary_lsn! depth! more!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::opt_rec_crop_head_records_lemma_forall")
(declare-fun ens%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records_lemma_forall. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records_lemma_forall. no%param) (forall ((ojr$ Poly) (boundary_lsn$ Poly) (depth$ Poly)) (! (=> (and (has_type ojr$ (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)) (has_type boundary_lsn$ NAT) (has_type depth$ NAT)) (=> (lib!journal.PagedJournal_v.impl&%0.opt_rec_can_crop_head_records.? ojr$ boundary_lsn$ depth$) (=> (is-core!option.Option./Some_ (lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.? ojr$ boundary_lsn$ depth$)) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.? ojr$ boundary_lsn$ depth$)))) boundary_lsn$)))) :pattern ((lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records.? ojr$ boundary_lsn$ depth$)) ))) :pattern ((ens%lib!journal.PagedJournal_v.impl&%0.opt_rec_crop_head_records_lemma_forall. no%param)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::cant_crop")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%0.cant_crop. (lib!journal.PagedJournal_v.JournalRecord. Int Int) Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (bdy! Int) (depth! Int)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%0.cant_crop. self! bdy! depth!) (and (=> %%global_location_label%%48 (< 0 depth!)) (=> %%global_location_label%%49 (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I (nClip (Sub depth! 1))))) (=> %%global_location_label%%50 (is-core!option.Option./Some_ (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I (nClip (Sub depth! 1)))))) (=> %%global_location_label%%51 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I (nClip (Sub depth! 1)))))))))) (I bdy!))))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%0.cant_crop. self! bdy! depth!)) )))
(declare-fun ens%lib!journal.PagedJournalRefinement_v.impl&%0.cant_crop. (lib!journal.PagedJournal_v.JournalRecord. Int Int) Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (bdy! Int) (depth! Int)) (! (= (ens%lib!journal.PagedJournalRefinement_v.impl&%0.cant_crop. self! bdy! depth!) (not (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I (nClip (Add depth! 1)))))) :pattern ((ens%lib!journal.PagedJournalRefinement_v.impl&%0.cant_crop. self! bdy! depth!)) )))
(set-info :comment ";; Function-Def lib::journal::PagedJournal_v::JournalRecord::cant_crop")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:105:5: 105:55 (#0)")
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::crop_head_records_chaining")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%0.crop_head_records_chaining. (lib!journal.PagedJournal_v.JournalRecord. Int Int) Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (bdy! Int) (depth! Int)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%0.crop_head_records_chaining. self! bdy! depth!) (and (=> %%global_location_label%%52 (< 0 depth!)) (=> %%global_location_label%%53 (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I (nClip (Sub depth! 1))))) (=> %%global_location_label%%54 (is-core!option.Option./Some_ (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I (nClip (Sub depth! 1)))))) (=> %%global_location_label%%55 (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I depth!))))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%0.crop_head_records_chaining. self! bdy! depth!)) )))
(declare-fun ens%lib!journal.PagedJournalRefinement_v.impl&%0.crop_head_records_chaining. (lib!journal.PagedJournal_v.JournalRecord. Int Int) Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (bdy! Int) (depth! Int)) (! (= (ens%lib!journal.PagedJournalRefinement_v.impl&%0.crop_head_records_chaining. self! bdy! depth!) (= (lib!journal.PagedJournal_v.impl&%0.cropped_prior.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I (nClip (Sub depth! 1))))))) (I bdy!)) (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I depth!)))) :pattern ((ens%lib!journal.PagedJournalRefinement_v.impl&%0.crop_head_records_chaining. self! bdy! depth!)) )))
(set-info :comment ";; Function-Def lib::journal::PagedJournal_v::JournalRecord::crop_head_records_chaining")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:121:5: 121:72 (#0)")
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::cropped_subseq_in_interpretation")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%0.cropped_subseq_in_interpretation. (lib!journal.PagedJournal_v.JournalRecord. Int Int lib!abstract_system.MsgHistory_v.MsgHistory.) Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (bdy! Int) (depth! Int) (msgs! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%0.cropped_subseq_in_interpretation. self! bdy! depth! msgs!) (and (=> %%global_location_label%%56 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs!))) (=> %%global_location_label%%57 (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I (nClip (Add depth! 1))))) (=> %%global_location_label%%58 (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I depth!))) (=> %%global_location_label%%59 (is-core!option.Option./Some_ (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I depth!)))) (=> %%global_location_label%%60 (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%0.i.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I depth!))))) (I bdy!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs!))))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%0.cropped_subseq_in_interpretation. self! bdy! depth! msgs!)) )))
(declare-fun ens%lib!journal.PagedJournalRefinement_v.impl&%0.cropped_subseq_in_interpretation. (lib!journal.PagedJournal_v.JournalRecord. Int Int lib!abstract_system.MsgHistory_v.MsgHistory.) Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.JournalRecord.) (bdy! Int) (depth! Int) (msgs! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (ens%lib!journal.PagedJournalRefinement_v.impl&%0.cropped_subseq_in_interpretation. self! bdy! depth! msgs!) (and (=> (< 0 depth!) (lib!journal.PagedJournal_v.impl&%0.can_crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I (nClip (Sub depth! 1))))) (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%0.i.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.crop_head_records.? (Poly%lib!journal.PagedJournal_v.JournalRecord. self!) (I bdy!) (I 0))))) (I bdy!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. msgs!)))) :pattern ((ens%lib!journal.PagedJournalRefinement_v.impl&%0.cropped_subseq_in_interpretation. self! bdy! depth! msgs!)) )))
(set-info :comment ";; Function-Def lib::journal::PagedJournal_v::JournalRecord::cropped_subseq_in_interpretation")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:143:5: 143:96 (#0)")
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::PagedJournal::State::read_for_recovery_refines")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%3.read_for_recovery_refines. (lib!journal.PagedJournal_v.PagedJournal.State. lib!journal.PagedJournal_v.PagedJournal.State. lib!journal.PagedJournal_v.PagedJournal.Label. Int) Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.PagedJournal.State.) (post! lib!journal.PagedJournal_v.PagedJournal.State.) (lbl! lib!journal.PagedJournal_v.PagedJournal.Label.) (depth! Int)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%3.read_for_recovery_refines. self! post! lbl! depth!) (and (=> %%global_location_label%%61 (lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf.? (Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!))) (=> %%global_location_label%%62 (lib!journal.PagedJournal_v.PagedJournal.impl&%5.read_for_recovery.? (Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!) (Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!) (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!) (I depth!))))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%3.read_for_recovery_refines. self! post! lbl! depth!)) )))
(declare-fun ens%lib!journal.PagedJournalRefinement_v.impl&%3.read_for_recovery_refines. (lib!journal.PagedJournal_v.PagedJournal.State. lib!journal.PagedJournal_v.PagedJournal.State. lib!journal.PagedJournal_v.PagedJournal.Label. Int) Bool)
(assert (forall ((self! lib!journal.PagedJournal_v.PagedJournal.State.) (post! lib!journal.PagedJournal_v.PagedJournal.State.) (lbl! lib!journal.PagedJournal_v.PagedJournal.Label.) (depth! Int)) (! (= (ens%lib!journal.PagedJournalRefinement_v.impl&%3.read_for_recovery_refines. self! post! lbl! depth!) (and (lib!journal.PagedJournal_v.PagedJournal.impl&%5.wf.? (Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!)) (lib!abstract_system.AbstractJournal_v.AbstractJournal.impl&%5.next.? (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!journal.PagedJournalRefinement_v.impl&%3.i.? (Poly%lib!journal.PagedJournal_v.PagedJournal.State. self!))) (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.State. (lib!journal.PagedJournalRefinement_v.impl&%3.i.? (Poly%lib!journal.PagedJournal_v.PagedJournal.State. post!))) (Poly%lib!abstract_system.AbstractJournal_v.AbstractJournal.Label. (lib!journal.PagedJournalRefinement_v.impl&%2.i.? (Poly%lib!journal.PagedJournal_v.PagedJournal.Label. lbl!)))))) :pattern ((ens%lib!journal.PagedJournalRefinement_v.impl&%3.read_for_recovery_refines. self! post! lbl! depth!)) )))
(set-info :comment ";; Function-Def lib::journal::PagedJournal_v::PagedJournal::State::read_for_recovery_refines")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:391:5: 391:99 (#0)")
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::option_new_boundary_valid")
(declare-fun req%lib!journal.PagedJournal_v.impl&%0.option_new_boundary_valid. (core!option.Option. Int Int) Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((ojr! core!option.Option.) (old_lsn! Int) (new_lsn! Int)) (! (= (req%lib!journal.PagedJournal_v.impl&%0.option_new_boundary_valid. ojr! old_lsn! new_lsn!) (and (=> %%global_location_label%%63 (=> (is-core!option.Option./Some_ ojr!) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!))) (I old_lsn!)))) (=> %%global_location_label%%64 (=> (is-core!option.Option./Some_ ojr!) (< new_lsn! (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!))))))))))) (=> %%global_location_label%%65 (<= old_lsn! new_lsn!)))) :pattern ((req%lib!journal.PagedJournal_v.impl&%0.option_new_boundary_valid. ojr! old_lsn! new_lsn!)) )))
(declare-fun ens%lib!journal.PagedJournal_v.impl&%0.option_new_boundary_valid. (core!option.Option. Int Int) Bool)
(assert (forall ((ojr! core!option.Option.) (old_lsn! Int) (new_lsn! Int)) (! (= (ens%lib!journal.PagedJournal_v.impl&%0.option_new_boundary_valid. ojr! old_lsn! new_lsn!) (=> (is-core!option.Option./Some_ ojr!) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!))) (I new_lsn!)))) :pattern ((ens%lib!journal.PagedJournal_v.impl&%0.option_new_boundary_valid. ojr! old_lsn! new_lsn!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::discard_old_journal_rec_ensures")
(declare-fun req%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec_ensures. (core!option.Option. Int) Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((ojr! core!option.Option.) (lsn! Int)) (! (= (req%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec_ensures. ojr! lsn!) (=> %%global_location_label%%66 (=> (is-core!option.Option./Some_ ojr!) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!))) (I lsn!))))) :pattern ((req%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec_ensures. ojr! lsn!)) )))
(declare-fun ens%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec_ensures. (core!option.Option. Int) Bool)
(assert (forall ((ojr! core!option.Option.) (lsn! Int)) (! (= (ens%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec_ensures. ojr! lsn!) (let ((out$ (lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.? (Poly%core!option.Option. ojr!) (I lsn!)))) (=> (is-core!option.Option./Some_ out$) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. out$))) (I lsn!))))) :pattern ((ens%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec_ensures. ojr! lsn!)) )))
(set-info :comment ";; Function-Specs lib::journal::PagedJournal_v::JournalRecord::discard_old_maintains_subseq")
(declare-fun req%lib!journal.PagedJournalRefinement_v.impl&%0.discard_old_maintains_subseq. (core!option.Option. Int Int) Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(assert (forall ((ojr! core!option.Option.) (old_bdy! Int) (new_bdy! Int)) (! (= (req%lib!journal.PagedJournalRefinement_v.impl&%0.discard_old_maintains_subseq. ojr! old_bdy! new_bdy!) (and (=> %%global_location_label%%67 (<= old_bdy! new_bdy!)) (=> %%global_location_label%%68 (=> (is-core!option.Option./None_ ojr!) (= new_bdy! old_bdy!))) (=> %%global_location_label%%69 (=> (is-core!option.Option./Some_ ojr!) (< new_bdy! (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!))))))))))) (=> %%global_location_label%%70 (=> (is-core!option.Option./Some_ ojr!) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!))) (I old_bdy!)))))) :pattern ((req%lib!journal.PagedJournalRefinement_v.impl&%0.discard_old_maintains_subseq. ojr! old_bdy! new_bdy!)) )))
(declare-fun ens%lib!journal.PagedJournalRefinement_v.impl&%0.discard_old_maintains_subseq. (core!option.Option. Int Int) Bool)
(assert (forall ((ojr! core!option.Option.) (old_bdy! Int) (new_bdy! Int)) (! (= (ens%lib!journal.PagedJournalRefinement_v.impl&%0.discard_old_maintains_subseq. ojr! old_bdy! new_bdy!) (and (=> (is-core!option.Option./Some_ ojr!) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!))) (I new_bdy!))) (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.? (Poly%core!option.Option. ojr!) (I old_bdy!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.? (Poly%core!option.Option. ojr!) (I new_bdy!))) (I new_bdy!)))))) :pattern ((ens%lib!journal.PagedJournalRefinement_v.impl&%0.discard_old_maintains_subseq. ojr! old_bdy! new_bdy!)) )))
(set-info :comment ";; Function-Def lib::journal::PagedJournal_v::JournalRecord::discard_old_maintains_subseq")
(set-info :comment ";; journal/PagedJournalRefinement_v.rs:215:5: 215:102 (#0)")
(declare-const ojr! core!option.Option.)
(declare-const old_bdy! Int)
(declare-const new_bdy! Int)
(declare-const tmp%1 core!option.Option.)
(declare-const tmp%2 lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-const prior@ core!option.Option.)
(declare-const priornew@ lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-const decrease%init0 core!option.Option.)
(assert fuel_defaults)
(assert (has_type (Poly%core!option.Option. ojr!) (TYPE%core!option.Option. $ TYPE%lib!journal.PagedJournal_v.JournalRecord.)))
(assert (<= 0 old_bdy!))
(assert (<= 0 new_bdy!))
(assert (<= old_bdy! new_bdy!))
(assert (=> (is-core!option.Option./None_ ojr!) (= new_bdy! old_bdy!)))
(assert (=> (is-core!option.Option./Some_ ojr!) (< new_bdy! (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!)))))))))))
(assert (=> (is-core!option.Option./Some_ ojr!) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!))) (I old_bdy!))))
(declare-const %%switch_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%6 Bool)
(assert (not (=> (= decrease%init0 ojr!) (=> (ens%lib!journal.PagedJournalRefinement_v.impl&%0.i_lemma_forall. 0) (and (=> %%location_label%%0 (req%lib!journal.PagedJournal_v.impl&%0.option_new_boundary_valid. ojr! old_bdy! new_bdy!)) (=> (ens%lib!journal.PagedJournal_v.impl&%0.option_new_boundary_valid. ojr! old_bdy! new_bdy!) (or (and (=> (and (is-core!option.Option./Some_ ojr!) (< new_bdy! (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!)))))))))) (=> (= tmp%1 (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!)))))) (and (=> %%location_label%%1 (check_decrease_height (Poly%core!option.Option. (let ((ojr!$0 tmp%1) (old_bdy!$1 old_bdy!) (new_bdy!$2 new_bdy!)) ojr!$0)) (Poly%core!option.Option. decrease%init0) false)) (and (=> %%location_label%%2 (req%lib!journal.PagedJournalRefinement_v.impl&%0.discard_old_maintains_subseq. tmp%1 old_bdy! new_bdy!)) (=> (ens%lib!journal.PagedJournalRefinement_v.impl&%0.discard_old_maintains_subseq. tmp%1 old_bdy! new_bdy!) (=> (= prior@ (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/prior_rec (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!)))))) (and (=> %%location_label%%3 (req%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec_ensures. prior@ new_bdy!)) (=> (ens%lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec_ensures. prior@ new_bdy!) (=> (= priornew@ (lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.? (Poly%core!option.Option. prior@) (I new_bdy!))) (I new_bdy!))) (=> (= tmp%2 (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!)))))) (and (=> %%location_label%%4 (req%lib!abstract_system.MsgHistory_v.impl&%0.concat_lemma. priornew@ tmp%2)) (=> (ens%lib!abstract_system.MsgHistory_v.impl&%0.concat_lemma. priornew@ tmp%2) %%switch_label%%0)))))))))))) (=> (not (and (is-core!option.Option./Some_ ojr!) (< new_bdy! (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournal_v.JournalRecord./JournalRecord/message_seq (%Poly%lib!journal.PagedJournal_v.JournalRecord. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!))))))))))) %%switch_label%%0)) (and (not %%switch_label%%0) (and (=> %%location_label%%5 (=> (is-core!option.Option./Some_ ojr!) (lib!journal.PagedJournal_v.impl&%0.valid.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ojr!))) (I new_bdy!)))) (=> %%location_label%%6 (lib!abstract_system.MsgHistory_v.impl&%0.includes_subseq.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.? (Poly%core!option.Option. ojr!) (I old_bdy!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!journal.PagedJournalRefinement_v.impl&%0.i_opt.? (Poly%core!option.Option. (lib!journal.PagedJournal_v.impl&%0.discard_old_journal_rec.? (Poly%core!option.Option. ojr!) (I new_bdy!))) (I new_bdy!))))))))))))))
(check-sat)
(exit)
