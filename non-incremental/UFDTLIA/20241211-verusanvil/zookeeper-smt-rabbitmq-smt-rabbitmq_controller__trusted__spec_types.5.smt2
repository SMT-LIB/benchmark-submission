(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module rabbitmq_controller::trusted::spec_types'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Ok_0. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.default. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.metadata. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.kind. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.object_ref. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.spec. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.status. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.marshal. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.unmarshal. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.state_validation. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.transition_validation. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.impl&%0.get_Ok_0. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!set.impl&%0.choose. fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.default. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.metadata. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.kind. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.object_ref. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.spec. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.status. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.marshal. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.unmarshal. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.state_validation. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.transition_validation.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec (Dcr Type) Dcr)
(declare-fun proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec (Dcr Type) Type)
(declare-fun proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status (Dcr Type) Dcr)
(declare-fun proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. 0) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. 0) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. 0) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. 0) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler. 0) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. 0) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. 0) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. 0) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. 0) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. 0) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. 0) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. 0) (rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. 0) (rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView./AffinityView )) ((rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./ConfigMapKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./CustomResourceKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./DaemonSetKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./PersistentVolumeClaimKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./PodKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./RoleKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./RoleBindingKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./StatefulSetKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./ServiceKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./ServiceAccountKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./SecretKind )) ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?kind rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?name Poly) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?namespace Poly))) ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?kind rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?metadata rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?spec rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?status rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))) ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Null ) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool/?0 Bool)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/?0 Int)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int/?0 Int)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/?0 Poly)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/?0 vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/?0 Poly)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/?0 vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.))) ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?name core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?namespace core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?resource_version core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?uid core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?labels core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?annotations core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?owner_references core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?finalizers core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?deletion_timestamp core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?block_owner_deletion core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?controller core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?kind rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?name Poly) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?uid Int))) ((rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView./EmptyStatusView )) ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?limits core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?requests core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/?when_deleted core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/?when_scaled core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView./TolerationView )) ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler./RabbitmqReconciler )) ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/?reconcile_step rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/?latest_config_map_rv_opt core!option.Option.))) ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?metadata rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?spec rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?status core!option.Option.))) ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?replicas Int) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?image Poly) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?persistence rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?rabbitmq_config core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?affinity core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?tolerations core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?labels Poly) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?annotations Poly) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?resources core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?pod_management_policy Poly) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?persistent_volume_claim_retention_policy core!option.Option.))) ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?additional_config core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?advanced_config core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?env_config core!option.Option.))) ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/?storage_class_name Poly) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/?storage Poly))) ((rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./Init ) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/?0 rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/?1 rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./Done ) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./Error )) ((rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./HeadlessService ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./Service ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./ErlangCookieSecret ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./DefaultUserSecret ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./PluginsConfigMap ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./ServerConfigMap ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./ServiceAccount ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./Role ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./RoleBinding ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./StatefulSet )) ((rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind./Get ) (rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind./Create ) (rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind./Update )) ((rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./MissingField ) (rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnexpectedType ) (rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError ) (rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./ExecError )) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/kind (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Bool)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Int)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Int)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Int)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_deleted (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_scaled (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/reconcile_step (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.) rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/replicas (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Int)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/labels (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/additional_config (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/0 (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/1 (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly) vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. (rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. (rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. (rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (Poly) rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (= x (%Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x))) :pattern ((Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (= x (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (%Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))) )))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((_kind! rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (_name! Poly) (_namespace! Poly)) (! (=> (and (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _namespace! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef _kind! _name! _namespace!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef _kind! _name! _namespace!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/kind x) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?kind x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/kind x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name x) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace x) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((_kind! rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (_metadata! rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_spec! rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (_status! rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (and (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. _spec!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. _status!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView _kind! _metadata! _spec! _status!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView _kind! _metadata! _spec! _status!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind x) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?kind x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata x) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?metadata x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec x) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?spec x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status x) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?status x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Null) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))
(assert (forall ((_0! Bool)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool/0 x)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (<= 0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((_0! Int)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int/0 x)) )))
(assert (forall ((_0! Poly)) (! (=> (has_type _0! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((_0! vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x)) )))
(assert (forall ((_0! Poly)) (! (=> (has_type _0! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((_0! vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x)) )))
(define-fun is-rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array_ ((c rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) Bool ((_ is rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array) c))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (is-rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array_ x) (height_lt (height (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x))) (height (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((height (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x)))) )))
(define-fun is-rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object_ ((c rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) Bool ((_ is rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object) c))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (is-rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object_ x) (height_lt (height (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x))) (height (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((height (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x)))) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (is-rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x)))) (height (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x))))) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((_name! core!option.Option.) (_namespace! core!option.Option.) (_resource_version! core!option.Option.) (_uid! core!option.Option.) (_labels! core!option.Option.) (_annotations! core!option.Option.) (_owner_references! core!option.Option.) (_finalizers! core!option.Option.) (_deletion_timestamp! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _namespace!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _resource_version!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _uid!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _labels!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _annotations!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _owner_references!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) (has_type (Poly%core!option.Option. _finalizers!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _deletion_timestamp!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView _name! _namespace! _resource_version! _uid! _labels! _annotations! _owner_references! _finalizers! _deletion_timestamp!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView _name! _namespace! _resource_version! _uid! _labels! _annotations! _owner_references! _finalizers! _deletion_timestamp!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?resource_version x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?uid x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?labels x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?annotations x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?owner_references x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?finalizers x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?deletion_timestamp x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((_block_owner_deletion! core!option.Option.) (_controller! core!option.Option.) (_kind! rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (_name! Poly) (_uid! Int)) (! (=> (and (has_type (Poly%core!option.Option. _block_owner_deletion!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _controller!) (TYPE%core!option.Option. $ BOOL)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView _block_owner_deletion! _controller! _kind! _name! _uid!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView _block_owner_deletion! _controller! _kind! _name! _uid!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion x) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?block_owner_deletion x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller x) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?controller x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind x) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?kind x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid x) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?uid x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((_limits! core!option.Option.) (_requests! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _limits!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _requests!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView _limits! _requests!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView _limits! _requests!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits x) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?limits x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests x) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?requests x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) )))
(assert (forall ((_when_deleted! core!option.Option.) (_when_scaled! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _when_deleted!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _when_scaled!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView _when_deleted! _when_scaled!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView _when_deleted! _when_scaled!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_deleted x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/?when_deleted x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_deleted x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_deleted (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_deleted (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_scaled x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/?when_scaled x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_scaled x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_scaled (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_scaled (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconciler.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) )))
(assert (forall ((_reconcile_step! rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) (_latest_config_map_rv_opt! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _latest_config_map_rv_opt!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState _reconcile_step! _latest_config_map_rv_opt!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState _reconcile_step! _latest_config_map_rv_opt!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/reconcile_step x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/?reconcile_step x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/reconcile_step x)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/?latest_config_map_rv_opt x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) )))
(assert (forall ((_metadata! rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_spec! rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (_status! core!option.Option.)) (! (=> (and (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. _spec!) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. _status!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView _metadata! _spec! _status!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView _metadata! _spec! _status!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?metadata x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?spec x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x))) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?status x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((_replicas! Int) (_image! Poly) (_persistence! rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (_rabbitmq_config! core!option.Option.) (_affinity! core!option.Option.) (_tolerations! core!option.Option.) (_labels! Poly) (_annotations! Poly) (_resources! core!option.Option.) (_pod_management_policy! Poly) (_persistent_volume_claim_retention_policy! core!option.Option.)) (! (=> (and (has_type _image! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. _persistence!) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (has_type (Poly%core!option.Option. _rabbitmq_config!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) (has_type (Poly%core!option.Option. _affinity!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (has_type (Poly%core!option.Option. _tolerations!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) (has_type _labels! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type _annotations! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _resources!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (has_type _pod_management_policy! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _persistent_volume_claim_retention_policy!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.))) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView _replicas! _image! _persistence! _rabbitmq_config! _affinity! _tolerations! _labels! _annotations! _resources! _pod_management_policy! _persistent_volume_claim_retention_policy!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView _replicas! _image! _persistence! _rabbitmq_config! _affinity! _tolerations! _labels! _annotations! _resources! _pod_management_policy! _persistent_volume_claim_retention_policy!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/replicas x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?replicas x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/replicas x)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?image x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?persistence x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?rabbitmq_config x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?affinity x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?tolerations x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/labels x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?labels x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/labels x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/labels (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/labels (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?annotations x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?resources x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?pod_management_policy x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?persistent_volume_claim_retention_policy x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) )))
(assert (forall ((_additional_config! core!option.Option.) (_advanced_config! core!option.Option.) (_env_config! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _additional_config!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _advanced_config!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _env_config!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView _additional_config! _advanced_config! _env_config!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView _additional_config! _advanced_config! _env_config!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/additional_config x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?additional_config x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/additional_config x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/additional_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/additional_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?advanced_config x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?env_config x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) )))
(assert (forall ((_storage_class_name! Poly) (_storage! Poly)) (! (=> (and (has_type _storage_class_name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _storage! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView _storage_class_name! _storage!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView _storage_class_name! _storage!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/?storage_class_name x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/?storage x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/0 x) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/?0 x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/0 x)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/1 x) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/?1 x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/1 x)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (%Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x) TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x) TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView. (Dcr Type) Bool)
(set-info :comment ";; Associated-Type-Impls")
(assert (= (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) $))
(assert (= (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.))
(assert (= (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) $))
(assert (= (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? (Dcr Type) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::metadata")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.metadata.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.metadata%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::kind")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? (Dcr Type) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::object_ref")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.object_ref.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.object_ref%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::spec")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.spec.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.spec%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::status")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.status.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.status%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_spec")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_spec")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_status")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_status")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::state_validation")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.state_validation.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.state_validation%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::transition_validation")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.transition_validation.? (Dcr Type Poly Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.transition_validation%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::well_formed")
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? (Poly) Bool)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::controller_owner_ref")
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::trusted::spec_types::random_encoded_string")
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.random_encoded_string.? (Poly) Poly)
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::default")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? Self%&. Self%&) Self%&) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::metadata")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.metadata.? Self%&. Self%& self!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.metadata.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::kind")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::object_ref")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.object_ref.? Self%&. Self%& self!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.object_ref.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::object_ref_is_well_formed")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.object_ref_is_well_formed. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.object_ref_is_well_formed. Self%&. Self%&) (forall ((o$ Poly)) (! (=> (has_type o$ Self%&) (= (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.object_ref.? Self%&. Self%& o$)) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.metadata.? Self%&. Self%& o$)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.metadata.? Self%&. Self%& o$))))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.object_ref.? Self%&. Self%& o$)) ))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.object_ref_is_well_formed. Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.spec.? Self%&. Self%& self!) (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec Self%&. Self%&))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.spec.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::status")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.status.? Self%&. Self%& self!) (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status Self%&. Self%&))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.status.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? Self%&. Self%& self!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal")
(assert (forall ((Self%&. Dcr) (Self%& Type) (obj! Poly)) (! (=> (has_type obj! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& obj!) (TYPE%core!result.Result. Self%&. Self%& $ TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& obj!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!) T&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::get_Ok_0")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Ok_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Ok_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Ok/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!)) ))))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_preserves_integrity")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_preserves_integrity. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_preserves_integrity. Self%&. Self%&) (forall ((o$ Poly)) (! (=> (has_type o$ Self%&) (and (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? Self%&. Self%& o$)))))) (= o$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? Self%&. Self%& o$))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? Self%&. Self%& o$)) ))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_preserves_integrity. Self%&. Self%&)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_preserves_metadata")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_preserves_metadata. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_preserves_metadata. Self%&. Self%&) (forall ((d$ Poly)) (! (=> (has_type d$ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& d$))))) (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. d$)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.metadata.? Self%&. Self%& (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& d$)))))))) :pattern ((is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& d$)))) ))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_preserves_metadata. Self%&. Self%&)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_preserves_kind")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_preserves_kind. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_preserves_kind. Self%&. Self%&) (forall ((d$ Poly)) (! (=> (has_type d$ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& d$))))) (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. d$)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&))))) :pattern ((is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& d$)))) ))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_preserves_kind. Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (s! Poly)) (! (=> (has_type s! (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec Self%&. Self%&)) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? Self%&. Self%& s!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? Self%&. Self%& s!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly)) (! (=> (has_type v! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? Self%&. Self%& v!) (TYPE%core!result.Result. (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec Self%&. Self%&) (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec Self%&. Self%&) $ TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? Self%&. Self%& v!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_status")
(assert (forall ((Self%&. Dcr) (Self%& Type) (s! Poly)) (! (=> (has_type s! (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status Self%&. Self%&)) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? Self%&. Self%& s!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? Self%&. Self%& s!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_status")
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly)) (! (=> (has_type v! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? Self%&. Self%& v!) (TYPE%core!result.Result. (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status Self%&. Self%&) (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status Self%&. Self%&) $ TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? Self%&. Self%& v!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_spec_preserves_integrity")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec_preserves_integrity. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec_preserves_integrity. Self%&. Self%&) (forall ((s$ Poly)) (! (=> (has_type s$ (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec Self%&. Self%&)) (and (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? Self%&. Self%& (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? Self%&. Self%& s$)))))) (= s$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? Self%&. Self%& (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? Self%&. Self%& s$))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? Self%&. Self%& s$)) ))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec_preserves_integrity. Self%&. Self%&)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_status_preserves_integrity")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status_preserves_integrity. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status_preserves_integrity. Self%&. Self%&) (forall ((s$ Poly)) (! (=> (has_type s$ (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status Self%&. Self%&)) (and (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? Self%&. Self%& (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? Self%&. Self%& s$)))))) (= s$ (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? Self%&. Self%& (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? Self%&. Self%& s$))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? Self%&. Self%& s$)) ))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status_preserves_integrity. Self%&. Self%&)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_result_determined_by_unmarshal_spec_and_status")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_result_determined_by_unmarshal_spec_and_status. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_result_determined_by_unmarshal_spec_and_status. Self%&. Self%&) (forall ((obj$ Poly)) (! (=> (has_type obj$ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (=> (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj$)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&))) (= (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& obj$))))) (and (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? Self%&. Self%& (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj$)))))))) (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? Self%&. Self%& (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj$)))))))))))) :pattern ((is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& obj$)))) ))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_result_determined_by_unmarshal_spec_and_status. Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::state_validation")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.state_validation.? Self%&. Self%& self!) BOOL)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.state_validation.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::transition_validation")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (old_obj! Poly)) (! (=> (and (has_type self! Self%&) (has_type old_obj! Self%&)) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.transition_validation.? Self%&. Self%& self! old_obj!) BOOL)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.transition_validation.? Self%&. Self%& self! old_obj!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::spec::resource::CustomResourceView::kind_is_custom_resource")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.CustomResourceView.kind_is_custom_resource. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.CustomResourceView.kind_is_custom_resource. Self%&. Self%&) (= (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&)) rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./CustomResourceKind)) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.spec.resource.CustomResourceView.kind_is_custom_resource. Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%2 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%6 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%8 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%9 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%10 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%12 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%13 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%14 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%15 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%17 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%18 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%19 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%20 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%21 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%22 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%23 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%26 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%27 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%28 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%29 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%30 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%31 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%32 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%33 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%35 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%36 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%37 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%38 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%41 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%43 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::kind")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.kind.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.kind.) (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./CustomResourceKind))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::controller_owner_ref")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.) (forall ((self! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (B true)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))))))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!))))))))))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::marshal")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.marshal.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.marshal.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!))))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::unmarshal")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.unmarshal.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.unmarshal.) (forall ((obj! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. obj!) (Poly%core!result.Result. (ite (not (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (core!result.Result./Ok (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)))) (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))) (%Poly%core!option.Option. (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. obj!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::random_encoded_string")
(assert (forall ((length! Poly)) (! (=> (has_type length! (UINT SZ)) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.random_encoded_string.? length!) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.random_encoded_string.? length!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::well_formed")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.) (forall ((self! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? self!) (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!))))))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))))))))))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.default.) (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (vstd!pervasive.arbitrary.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::metadata")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.metadata.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.metadata.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.metadata.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.metadata.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::object_ref")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.object_ref.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.object_ref.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.object_ref.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!))))))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.object_ref.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)) ))))
(set-info :comment ";; Function-Def rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::object_ref_is_well_formed")
(set-info :comment ";; controller_examples/rabbitmq_controller/trusted/spec_types.rs:79:11: 79:41 (#0)")
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::spec")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.spec.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.spec.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.spec.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!) (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.spec.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::status")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.status.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.status.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.status.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!) (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.status.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)) ))))
(set-info :comment ";; Function-Def rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::marshal_preserves_integrity")
(set-info :comment ";; controller_examples/rabbitmq_controller/trusted/spec_types.rs:110:11: 110:43 (#0)")
(set-info :comment ";; Function-Def rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::marshal_preserves_metadata")
(set-info :comment ";; controller_examples/rabbitmq_controller/trusted/spec_types.rs:115:11: 115:42 (#0)")
(set-info :comment ";; Function-Def rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::marshal_preserves_kind")
(set-info :comment ";; controller_examples/rabbitmq_controller/trusted/spec_types.rs:117:11: 117:38 (#0)")
(set-info :comment ";; Function-Def rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::unmarshal_result_determined_by_unmarshal_spec_and_status")
(set-info :comment ";; controller_examples/rabbitmq_controller/trusted/spec_types.rs:133:11: 133:72 (#0)")
(assert fuel_defaults)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(declare-const %%query%% Bool)
(assert (=> %%query%% (not (=> %%location_label%%0 (forall ((obj$$0 Poly)) (! (=> (has_type obj$$0 TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (=> (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj$$0)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.))) (= (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. obj$$0))))) (and (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj$$0)))))))) (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj$$0)))))))))))) :pattern ((is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. obj$$0)))) ))))))
(assert %%query%%)
(check-sat)
(exit)
