(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module fluent_controller::fluentbit_config::exec::resource::secret'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Ok_0. FuelId)
(declare-const fuel%vstd!std_specs.result.is_ok. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map_values. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%1.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%3.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%5.view. FuelId)
(declare-const fuel%vstd!view.impl&%11.view. FuelId)
(declare-const fuel%vstd!view.impl&%19.view. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.impl&%0.requirements. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.common.make_owner_references. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.get_request. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.make. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.update. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.state_after_create. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.state_after_update. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_key. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.update_secret. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%1.view. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.controller_owner_ref. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.default. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.kind. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.marshal. FuelId)
(declare-const fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.unmarshal. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%2.view. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%4.view. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%6.view. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%8.view. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%10.view. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%12.view. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%13.view. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.resource.empty_status. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_metadata. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_data. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.default. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.kind. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.marshal. FuelId)
(declare-const fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.unmarshal. FuelId)
(declare-const fuel%fluent_controller!reconciler.exec.resource_builder.resource_res_to_view. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.impl&%0.get_Ok_0. fuel%vstd!std_specs.result.is_ok. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq_lib.impl&%0.map_values. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!set.impl&%0.choose. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%1.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%3.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%5.view. fuel%vstd!view.impl&%11.view. fuel%vstd!view.impl&%19.view. fuel%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.impl&%0.requirements. fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.common.make_owner_references. fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.get_request. fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.make. fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.update. fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.state_after_create. fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.state_after_update. fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name. fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_key. fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret. fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.update_secret. fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%1.view. fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed. fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.controller_owner_ref. fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.default. fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.kind. fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.marshal. fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.unmarshal. fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%2.view. fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%4.view. fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%6.view. fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%8.view. fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%10.view. fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%12.view. fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%13.view. fuel%fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view. fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default. fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name. fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references. fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers. fuel%fluent_controller!kubernetes_api_objects.spec.resource.empty_status. fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_metadata. fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_data. fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.default. fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.kind. fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.marshal. fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.unmarshal. fuel%fluent_controller!reconciler.exec.resource_builder.resource_res_to_view.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec (Dcr Type) Dcr)
(declare-fun proj%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec (Dcr Type) Type)
(declare-fun proj%%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Status (Dcr Type) Dcr)
(declare-fun proj%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Status (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!alloc.Global. 0)
(declare-sort alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. 0)
(declare-sort fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. 0)
(declare-sort fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. 0)
(declare-sort fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. 0)
(declare-sort fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. 0)
(declare-sort fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. 0)
(declare-sort fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. 0)
(declare-sort fluent_controller!kubernetes_api_objects.exec.secret.Secret. 0)
(declare-sort fluent_controller!vstd_ext.string_map.StringMap. 0)
(declare-sort vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. 0)
(declare-sort vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. 0)
(declare-sort vstd!string.String. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. 0) (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. 0) (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. 0) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. 0) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. 0) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. 0) (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. 0) (fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource. 0) (fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind. 0) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. 0) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. 0) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. 0) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. 0) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. 0) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. 0) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. 0) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. 0) (fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. 0) (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. 0) (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. 0) (fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. 0) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. 0) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. 0) (fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. 0) (fluent_controller!kubernetes_api_objects.spec.common.Kind. 0) (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. 0) (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. 0) (fluent_controller!kubernetes_api_objects.spec.marshal.Value. 0) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. 0) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. 0) (fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. 0) (fluent_controller!kubernetes_api_objects.spec.secret.SecretView. 0) (fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder./SecretBuilder )) ((fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder./SecretBuilder )) ((fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState/?reconcile_step fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.))) ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState/?reconcile_step fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.))) ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/?metadata fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/?spec fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/?status core!option.Option.))) ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/?fluentbit_config Poly) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/?parsers_config Poly))) ((fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./Init ) (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./AfterKRequestStep (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./AfterKRequestStep/?0 fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind.) (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./AfterKRequestStep/?1 fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource.)) (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./Done ) (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./Error )) ((fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource./Secret )) ((fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind./Get ) (fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind./Create ) (fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind./Update )) ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/?0 fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/?0 fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/?0 fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/?0 fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/?0 fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/?0 fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.))) ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?api_resource fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?name vstd!string.String.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?namespace vstd!string.String.))) ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/?api_resource fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/?namespace vstd!string.String.))) ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?api_resource fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?namespace vstd!string.String.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?obj fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.))) ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?api_resource fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?name vstd!string.String.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?namespace vstd!string.String.))) ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?api_resource fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?name vstd!string.String.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?namespace vstd!string.String.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?obj fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.))) ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?api_resource fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?name vstd!string.String.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?namespace vstd!string.String.) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?obj fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.))) ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/?0 fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/?0 fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/?0 fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/?0 fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/?0 fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/?0 fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.))) ((fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest (fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/?key fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.))) ((fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/?kind fluent_controller!kubernetes_api_objects.spec.common.Kind.) (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/?namespace Poly))) ((fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/?namespace Poly) (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/?obj fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.))) ((fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest (fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/?key fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.))) ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?namespace Poly) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?name Poly) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?obj fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.))) ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?namespace Poly) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?name Poly) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?obj fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.))) ((fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView (fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/?kind fluent_controller!kubernetes_api_objects.spec.common.Kind.))) ((fluent_controller!kubernetes_api_objects.spec.common.Kind./ConfigMapKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./CustomResourceKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./DaemonSetKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./PersistentVolumeClaimKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./PodKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./RoleKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./RoleBindingKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./StatefulSetKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./ServiceKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./ServiceAccountKind ) (fluent_controller!kubernetes_api_objects.spec.common.Kind./SecretKind )) ((fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?kind fluent_controller!kubernetes_api_objects.spec.common.Kind.) (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?name Poly) (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?namespace Poly))) ((fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?kind fluent_controller!kubernetes_api_objects.spec.common.Kind.) (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?metadata fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?spec fluent_controller!kubernetes_api_objects.spec.marshal.Value.) (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?status fluent_controller!kubernetes_api_objects.spec.marshal.Value.))) ((fluent_controller!kubernetes_api_objects.spec.marshal.Value./Null ) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Bool (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Bool/?0 Bool)) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Nat (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Nat/?0 Int)) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Int (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Int/?0 Int)) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./String (fluent_controller!kubernetes_api_objects.spec.marshal.Value./String/?0 Poly)) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array/?0 vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap (fluent_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/?0 Poly)) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object/?0 vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.))) ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?name core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?namespace core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?resource_version core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?uid core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?labels core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?annotations core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?owner_references core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?finalizers core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?deletion_timestamp core!option.Option.))) ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?block_owner_deletion core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?controller core!option.Option.) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?kind fluent_controller!kubernetes_api_objects.spec.common.Kind.) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?name Poly) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?uid Int))) ((fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView./EmptyStatusView )) ((fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/?metadata fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/?data core!option.Option.))) ((fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError./MissingField ) (fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnexpectedType ) (fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError ) (fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError./ExecError )) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState/reconcile_step (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.) fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.)
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState/reconcile_step (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.) fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.)
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/spec (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/status (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) core!option.Option.)
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/fluentbit_config (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/parsers_config (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.) Poly)
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./AfterKRequestStep/0 (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.) fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind.)
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./AfterKRequestStep/1 (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.) fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/0 (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/0 (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/0 (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/0 (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/0 (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/0 (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/api_resource (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/name (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) vstd!string.String.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/namespace (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) vstd!string.String.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/api_resource (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/namespace (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) vstd!string.String.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/api_resource (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/namespace (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) vstd!string.String.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/obj (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/api_resource (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/name (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) vstd!string.String.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/namespace (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) vstd!string.String.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/api_resource (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/name (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) vstd!string.String.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/namespace (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) vstd!string.String.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/obj (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/api_resource (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/name (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) vstd!string.String.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/namespace (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) vstd!string.String.)
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/obj (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/0 (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/0 (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/0 (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/0 (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/0 (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/0 (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/key (fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.) fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/kind (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.) fluent_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/namespace (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/namespace (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/obj (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/key (fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.) fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/namespace (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/name (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/obj (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/namespace (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/name (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/obj (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind (fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.) fluent_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/kind (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.) fluent_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) fluent_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) fluent_controller!kubernetes_api_objects.spec.marshal.Value.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) fluent_controller!kubernetes_api_objects.spec.marshal.Value.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.marshal.Value./Bool/0 (fluent_controller!kubernetes_api_objects.spec.marshal.Value.) Bool)
(declare-fun fluent_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 (fluent_controller!kubernetes_api_objects.spec.marshal.Value.) Int)
(declare-fun fluent_controller!kubernetes_api_objects.spec.marshal.Value./Int/0 (fluent_controller!kubernetes_api_objects.spec.marshal.Value.) Int)
(declare-fun fluent_controller!kubernetes_api_objects.spec.marshal.Value./String/0 (fluent_controller!kubernetes_api_objects.spec.marshal.Value.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 (fluent_controller!kubernetes_api_objects.spec.marshal.Value.) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 (fluent_controller!kubernetes_api_objects.spec.marshal.Value.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 (fluent_controller!kubernetes_api_objects.spec.marshal.Value.) vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) core!option.Option.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) fluent_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Int)
(declare-fun fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/metadata (fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/data (fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) core!option.Option.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%alloc!alloc.Global. Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%vstd!string.String. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource. Type)
(declare-const TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.common.Kind. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. Type)
(declare-const TYPE%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. Type)
(declare-const TYPE%fluent_controller!vstd_ext.string_map.StringMap. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!alloc.Global. (alloc!alloc.Global.) Poly)
(declare-fun %Poly%alloc!alloc.Global. (Poly) alloc!alloc.Global.)
(declare-fun Poly%alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly) fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. (Poly) fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (Poly) fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly) fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (Poly) fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (Poly) fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (fluent_controller!kubernetes_api_objects.exec.secret.Secret.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly) fluent_controller!kubernetes_api_objects.exec.secret.Secret.)
(declare-fun Poly%fluent_controller!vstd_ext.string_map.StringMap. (fluent_controller!vstd_ext.string_map.StringMap.) Poly)
(declare-fun %Poly%fluent_controller!vstd_ext.string_map.StringMap. (Poly) fluent_controller!vstd_ext.string_map.StringMap.)
(declare-fun Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly) vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)
(declare-fun Poly%vstd!string.String. (vstd!string.String.) Poly)
(declare-fun %Poly%vstd!string.String. (Poly) vstd!string.String.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. (fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. (Poly) fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. (Poly) fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. (Poly) fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. (Poly) fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (Poly) fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (Poly) fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. (Poly) fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource. (fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource. (Poly) fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource.)
(declare-fun Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind. (fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind.) Poly)
(declare-fun %Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind. (Poly) fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (Poly) fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. (Poly) fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. (Poly) fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. (Poly) fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. (Poly) fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. (Poly) fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. (Poly) fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (Poly) fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. (Poly) fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. (Poly) fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (Poly) fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (Poly) fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (Poly) fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (Poly) fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly) fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.common.Kind.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (Poly) fluent_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly) fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (Poly) fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (Poly) fluent_controller!kubernetes_api_objects.spec.marshal.Value.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly) fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly) fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (Poly) fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (Poly) fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)
(declare-fun Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.) Poly)
(declare-fun %Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (Poly) fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x alloc!alloc.Global.)) (! (= x (%Poly%alloc!alloc.Global. (Poly%alloc!alloc.Global. x))) :pattern ((Poly%alloc!alloc.Global. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%alloc!alloc.Global.) (= x (Poly%alloc!alloc.Global. (%Poly%alloc!alloc.Global. x)))) :pattern ((has_type x TYPE%alloc!alloc.Global.)) )))
(assert (forall ((x alloc!alloc.Global.)) (! (has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.) :pattern ((has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.)) )))
(assert (forall ((x alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (= x (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.)) (! (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.) (= x (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.)) (! (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (%Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (%Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. x) TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. x) TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (%Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x) TYPE%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x) TYPE%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (Poly%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (%Poly%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x) TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x) TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.secret.Secret.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (%Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.secret.Secret.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. x) TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. x) TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret.)) )))
(assert (forall ((x fluent_controller!vstd_ext.string_map.StringMap.)) (! (= x (%Poly%fluent_controller!vstd_ext.string_map.StringMap. (Poly%fluent_controller!vstd_ext.string_map.StringMap. x))) :pattern ((Poly%fluent_controller!vstd_ext.string_map.StringMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!vstd_ext.string_map.StringMap.) (= x (Poly%fluent_controller!vstd_ext.string_map.StringMap. (%Poly%fluent_controller!vstd_ext.string_map.StringMap. x)))) :pattern ((has_type x TYPE%fluent_controller!vstd_ext.string_map.StringMap.)) )))
(assert (forall ((x fluent_controller!vstd_ext.string_map.StringMap.)) (! (has_type (Poly%fluent_controller!vstd_ext.string_map.StringMap. x) TYPE%fluent_controller!vstd_ext.string_map.StringMap.) :pattern ((has_type (Poly%fluent_controller!vstd_ext.string_map.StringMap. x) TYPE%fluent_controller!vstd_ext.string_map.StringMap.)) )))
(assert (forall ((x vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (= x (%Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. x))) :pattern ((Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (= x (Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (%Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)) (! (= x (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x))) :pattern ((Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (= x (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)) (! (has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((has_type (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) )))
(assert (forall ((x vstd!string.String.)) (! (= x (%Poly%vstd!string.String. (Poly%vstd!string.String. x))) :pattern ((Poly%vstd!string.String. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!string.String.) (= x (Poly%vstd!string.String. (%Poly%vstd!string.String. x)))) :pattern ((has_type x TYPE%vstd!string.String.)) )))
(assert (forall ((x vstd!string.String.)) (! (has_type (Poly%vstd!string.String. x) TYPE%vstd!string.String.) :pattern ((has_type (Poly%vstd!string.String. x) TYPE%vstd!string.String.)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))) )))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. (Poly%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder.) (= x (Poly%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. (%Poly%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder.)) (! (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder.) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. (Poly%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder.) (= x (Poly%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. (%Poly%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder.)) (! (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder.) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.) (= x (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.)) (! (= (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState/reconcile_step x) (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState/?reconcile_step x)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState/reconcile_step x)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.)) (! (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.) (= x (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.)) (! (= (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState/reconcile_step x) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState/?reconcile_step x)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState/reconcile_step x)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.)) (! (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (= x (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) )))
(assert (forall ((_metadata! fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_spec! fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.) (_status! core!option.Option.)) (! (=> (and (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. _spec!) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.) (has_type (Poly%core!option.Option. _status!) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView _metadata! _spec! _status!)) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView _metadata! _spec! _status!)) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) (! (= (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata x) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/?metadata x)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) (! (= (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/spec x) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/?spec x)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/spec (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. x))) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/spec (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) (! (= (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/status x) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/?status x)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/status x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (has_type (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/status (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. x))) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/status (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.) (= x (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)) )))
(assert (forall ((_fluentbit_config! Poly) (_parsers_config! Poly)) (! (=> (and (has_type _fluentbit_config! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _parsers_config! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView _fluentbit_config! _parsers_config!)) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView _fluentbit_config! _parsers_config!)) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/fluentbit_config x) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/?fluentbit_config x)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/fluentbit_config x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.) (has_type (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/fluentbit_config (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/fluentbit_config (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)) (! (= (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/parsers_config x) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/?parsers_config x)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/parsers_config x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.) (has_type (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/parsers_config (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/parsers_config (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. x)) (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.) (= x (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.)) (! (= (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./AfterKRequestStep/0 x) (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./AfterKRequestStep/?0 x)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./AfterKRequestStep/0 x)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.)) (! (= (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./AfterKRequestStep/1 x) (fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./AfterKRequestStep/?1 x)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./AfterKRequestStep/1 x)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.)) (! (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource.) (= x (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource. (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource.)) (! (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource.) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.SubResource.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind.)) (! (= x (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind. x))) :pattern ((Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind.) (= x (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind. (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind. x)))) :pattern ((has_type x TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind.)) )))
(assert (forall ((x fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind.)) (! (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind.) :pattern ((has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind. x) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.step.ActionKind.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/0 x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/0 x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/0 x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/0 x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/0 x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/0 x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/0 x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/0 x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/0 x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/0 x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/0 x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/0 x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/api_resource x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?api_resource x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/api_resource x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/name x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/name x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/namespace x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/namespace x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/api_resource x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/?api_resource x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/api_resource x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/namespace x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/namespace x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/api_resource x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?api_resource x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/api_resource x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/namespace x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/namespace x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/obj x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?obj x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/obj x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/api_resource x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?api_resource x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/api_resource x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/name x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/name x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/namespace x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/namespace x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/api_resource x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?api_resource x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/api_resource x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/name x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/name x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/namespace x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/namespace x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/obj x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?obj x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/obj x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/api_resource x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?api_resource x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/api_resource x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/name x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/name x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/namespace x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/namespace x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/obj x) (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?obj x)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/obj x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. x) TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) (! (=> (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. _0!) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/0 x) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) (! (=> (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. _0!) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/0 x) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) (! (=> (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. _0!) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/0 x) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) (! (=> (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. _0!) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/0 x) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (! (=> (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. _0!) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/0 x) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) (! (=> (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. _0!) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/0 x) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) )))
(assert (forall ((_key! fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (=> (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. _key!) TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest _key!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest _key!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/key x) (fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/?key x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/key (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/key (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) )))
(assert (forall ((_kind! fluent_controller!kubernetes_api_objects.spec.common.Kind.) (_namespace! Poly)) (! (=> (has_type _namespace! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest _kind! _namespace!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest _kind! _namespace!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/kind x) (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/?kind x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/kind x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/namespace x) (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.) (has_type (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) )))
(assert (forall ((_namespace! Poly) (_obj! fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (=> (and (has_type _namespace! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. _obj!) TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest _namespace! _obj!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest _namespace! _obj!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/namespace x) (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) (has_type (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/obj x) (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/?obj x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/obj x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/obj (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/obj (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) )))
(assert (forall ((_key! fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (=> (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. _key!) TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest _key!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest _key!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/key x) (fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/?key x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/key (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/key (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) )))
(assert (forall ((_namespace! Poly) (_name! Poly) (_obj! fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (=> (and (has_type _namespace! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. _obj!) TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest _namespace! _name! _obj!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest _namespace! _name! _obj!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/namespace x) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) (has_type (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/name x) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) (has_type (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/name (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/name (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/obj x) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?obj x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/obj x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/obj (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/obj (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) )))
(assert (forall ((_namespace! Poly) (_name! Poly) (_obj! fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (=> (and (has_type _namespace! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. _obj!) TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest _namespace! _name! _obj!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest _namespace! _name! _obj!)) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/namespace x) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) (has_type (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/name x) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) (has_type (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/name (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/name (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/obj x) (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?obj x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/obj x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/obj (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/obj (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (%Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind x) (fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/?kind x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.common.Kind.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.common.Kind.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.common.Kind.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.common.Kind.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. x) TYPE%fluent_controller!kubernetes_api_objects.spec.common.Kind.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. x) TYPE%fluent_controller!kubernetes_api_objects.spec.common.Kind.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (%Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((_kind! fluent_controller!kubernetes_api_objects.spec.common.Kind.) (_name! Poly) (_namespace! Poly)) (! (=> (and (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _namespace! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef _kind! _name! _namespace!)) TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef _kind! _name! _namespace!)) TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/kind x) (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?kind x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/kind x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name x) (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.) (has_type (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name (%Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name (%Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace x) (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.) (has_type (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((_kind! fluent_controller!kubernetes_api_objects.spec.common.Kind.) (_metadata! fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_spec! fluent_controller!kubernetes_api_objects.spec.marshal.Value.) (_status! fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (and (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. _spec!) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. _status!) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView _kind! _metadata! _spec! _status!)) TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView _kind! _metadata! _spec! _status!)) TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind x) (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?kind x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata x) (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?metadata x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec x) (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?spec x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status x) (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?status x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. fluent_controller!kubernetes_api_objects.spec.marshal.Value./Null) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.))
(assert (forall ((_0! Bool)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Bool _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Bool _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Bool/0 x) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Bool/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.marshal.Value./Bool/0 x)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Nat _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Nat _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 x) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Nat/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.) (<= 0 (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((_0! Int)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Int _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Int _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Int/0 x) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Int/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.marshal.Value./Int/0 x)) )))
(assert (forall ((_0! Poly)) (! (=> (has_type _0! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./String _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./String _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (fluent_controller!kubernetes_api_objects.spec.marshal.Value./String/0 x) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./String/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.marshal.Value./String/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (fluent_controller!kubernetes_api_objects.spec.marshal.Value./String/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.marshal.Value./String/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((_0! vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x)) )))
(assert (forall ((_0! Poly)) (! (=> (has_type _0! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (fluent_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 x) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (fluent_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((_0! vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object _0!)) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x) (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object/?0 x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x)) )))
(define-fun is-fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array_ ((c fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) Bool ((_ is fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array) c))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (is-fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array_ x) (height_lt (height (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x))) (height (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((height (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x)))) )))
(define-fun is-fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object_ ((c fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) Bool ((_ is fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object) c))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (is-fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object_ x) (height_lt (height (Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x))) (height (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((height (Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x)))) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (is-fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x)))) (height (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<nat./fluent_controller!kubernetes_api_objects.spec.marshal.Value.>. (fluent_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x))))) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((_name! core!option.Option.) (_namespace! core!option.Option.) (_resource_version! core!option.Option.) (_uid! core!option.Option.) (_labels! core!option.Option.) (_annotations! core!option.Option.) (_owner_references! core!option.Option.) (_finalizers! core!option.Option.) (_deletion_timestamp! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _namespace!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _resource_version!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _uid!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _labels!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _annotations!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _owner_references!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) (has_type (Poly%core!option.Option. _finalizers!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _deletion_timestamp!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView _name! _namespace! _resource_version! _uid! _labels! _annotations! _owner_references! _finalizers! _deletion_timestamp!)) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView _name! _namespace! _resource_version! _uid! _labels! _annotations! _owner_references! _finalizers! _deletion_timestamp!)) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?namespace x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?resource_version x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?uid x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?labels x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?annotations x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?owner_references x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?finalizers x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp x) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?deletion_timestamp x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((_block_owner_deletion! core!option.Option.) (_controller! core!option.Option.) (_kind! fluent_controller!kubernetes_api_objects.spec.common.Kind.) (_name! Poly) (_uid! Int)) (! (=> (and (has_type (Poly%core!option.Option. _block_owner_deletion!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _controller!) (TYPE%core!option.Option. $ BOOL)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView _block_owner_deletion! _controller! _kind! _name! _uid!)) TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView _block_owner_deletion! _controller! _kind! _name! _uid!)) TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion x) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?block_owner_deletion x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller x) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?controller x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind x) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?kind x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name x) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?name x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid x) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?uid x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid x)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (%Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x) TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) (= x (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) )))
(assert (forall ((_metadata! fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_data! core!option.Option.)) (! (=> (and (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. _data!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView _metadata! _data!)) TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView _metadata! _data!)) TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/metadata x) (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/?metadata x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/metadata (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. x))) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/metadata (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) (! (= (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/data x) (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/?data x)) :pattern ((fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/data x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/data (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/data (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. x)) (has_type x TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) (! (= x (%Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x))) :pattern ((Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.) (= x (Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (%Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x)))) :pattern ((has_type x TYPE%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) )))
(assert (forall ((x fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) (! (has_type (Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x) TYPE%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.) :pattern ((has_type (Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x) TYPE%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView. (Dcr Type) Bool)
(declare-fun tr_bound%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder. (Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%fluent_controller!reconciler.spec.resource_builder.ResourceBuilder. (Dcr Type Dcr Type Dcr Type) Bool)
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.))
(assert (= (proj%%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.))
(assert (= (proj%%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) $))
(assert (= (proj%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.))
(assert (= (proj%%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) $))
(assert (= (proj%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)))
(assert (= (proj%%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.))
(assert (= (proj%%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret.) TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.))
(assert (= (proj%%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) $))
(assert (= (proj%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) (TYPE%tuple%2. $ (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) $ TYPE%tuple%0.)))
(assert (= (proj%%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) $))
(assert (= (proj%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) TYPE%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::is_ok")
(declare-fun vstd!std_specs.result.is_ok.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map_values")
(declare-fun vstd!seq_lib.impl&%0.map_values.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::filter")
(declare-fun vstd!seq_lib.impl&%0.filter.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::string::impl&%0::view")
(declare-fun vstd!string.impl&%0.view.? (Poly) Poly)
(set-info :comment ";; Function-Decl vstd::string::impl&%0::is_ascii")
(declare-fun vstd!string.impl&%0.is_ascii.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::string::impl&%1::view")
(declare-fun vstd!string.impl&%1.view.? (Poly) Poly)
(set-info :comment ";; Function-Decl vstd::string::impl&%1::is_ascii")
(declare-fun vstd!string.impl&%1.is_ascii.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::fluent_controller::fluentbit_config::model::resource::common::make_owner_references")
(declare-fun fluent_controller!fluent_controller.fluentbit_config.model.resource.common.make_owner_references.? (Poly) vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)
(set-info :comment ";; Function-Decl fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::make_secret_name")
(declare-fun fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name.? (Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::make_secret_key")
(declare-fun fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_key.? (Poly) fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)
(set-info :comment ";; Function-Decl fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::make_secret")
(declare-fun fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret.? (Poly) fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)
(set-info :comment ";; Function-Decl fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::update_secret")
(declare-fun fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.update_secret.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)
(set-info :comment ";; Function-Decl fluent_controller::fluent_controller::fluentbit_config::trusted::exec_types::FluentBitConfigSpec::view")
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.view.? (Poly) fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)
(set-info :comment ";; Function-Decl fluent_controller::fluent_controller::fluentbit_config::trusted::spec_types::FluentBitConfigView::well_formed")
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed.? (Poly) Bool)
(set-info :comment ";; Function-Decl fluent_controller::fluent_controller::fluentbit_config::trusted::spec_types::FluentBitConfigView::controller_owner_ref")
(declare-fun fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.controller_owner_ref.? (Poly) fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::exec::api_method::opt_req_to_view")
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::exec::api_resource::ApiResource::view")
(declare-fun fluent_controller!kubernetes_api_objects.exec.api_resource.impl&%0.view.? (Poly) fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::view")
(declare-fun fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly) fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::exec::owner_reference::OwnerReference::view")
(declare-fun fluent_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? (Poly) fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::default")
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (Poly) fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_name")
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_owner_references")
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::unset_finalizers")
(declare-fun fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? (Poly) fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::default")
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? (Dcr Type) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.default%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::kind")
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? (Dcr Type) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal")
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? (Dcr Type Poly) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal")
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? (Dcr Type Poly) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_spec")
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? (Dcr Type Poly) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_spec")
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? (Dcr Type Poly) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_status")
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? (Dcr Type Poly) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_status")
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? (Dcr Type Poly) Poly)
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::resource::empty_status")
(declare-fun fluent_controller!kubernetes_api_objects.spec.resource.empty_status.? (Poly) fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::secret::SecretView::set_metadata")
(declare-fun fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_metadata.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)
(set-info :comment ";; Function-Decl fluent_controller::kubernetes_api_objects::spec::secret::SecretView::set_data")
(declare-fun fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_data.? (Poly Poly) fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)
(set-info :comment ";; Function-Decl fluent_controller::reconciler::exec::resource_builder::ResourceBuilder::requirements")
(declare-fun fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements%default%.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::reconciler::exec::resource_builder::resource_res_to_view")
(declare-fun fluent_controller!reconciler.exec.resource_builder.resource_res_to_view.? (Dcr Type Poly) core!result.Result.)
(set-info :comment ";; Function-Decl fluent_controller::reconciler::spec::resource_builder::ResourceBuilder::get_request")
(declare-fun fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::reconciler::spec::resource_builder::ResourceBuilder::make")
(declare-fun fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.make%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::reconciler::spec::resource_builder::ResourceBuilder::update")
(declare-fun fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.update%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::reconciler::spec::resource_builder::ResourceBuilder::state_after_create")
(declare-fun fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::reconciler::spec::resource_builder::ResourceBuilder::state_after_update")
(declare-fun fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl fluent_controller::vstd_ext::string_map::StringMap::view")
(declare-fun fluent_controller!vstd_ext.string_map.impl&%0.view.? (Poly) Poly)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::default")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? Self%&. Self%&) Self%&) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::kind")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&) TYPE%fluent_controller!kubernetes_api_objects.spec.common.Kind.) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? Self%&. Self%& self!) TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal")
(assert (forall ((Self%&. Dcr) (Self%& Type) (obj! Poly)) (! (=> (has_type obj! TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& obj!) (TYPE%core!result.Result. Self%&. Self%& $ TYPE%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& obj!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!) T&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::get_Ok_0")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Ok_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Ok_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Ok/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (s! Poly)) (! (=> (has_type s! (proj%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec Self%&. Self%&)) (has_type (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? Self%&. Self%& s!) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? Self%&. Self%& s!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly)) (! (=> (has_type v! TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? Self%&. Self%& v!) (TYPE%core!result.Result. (proj%%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec Self%&. Self%&) (proj%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec Self%&. Self%&) $ TYPE%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? Self%&. Self%& v!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_status")
(assert (forall ((Self%&. Dcr) (Self%& Type) (s! Poly)) (! (=> (has_type s! (proj%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Status Self%&. Self%&)) (has_type (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? Self%&. Self%& s!) TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? Self%&. Self%& s!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_status")
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly)) (! (=> (has_type v! TYPE%fluent_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? Self%&. Self%& v!) (TYPE%core!result.Result. (proj%%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Status Self%&. Self%&) (proj%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView./Status Self%&. Self%&) $ TYPE%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.))) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? Self%&. Self%& v!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::reconciler::spec::resource_builder::ResourceBuilder::get_request")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (cr! Poly)) (! (=> (has_type cr! K&) (has_type (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? Self%&. Self%& K&. K& T&. T& cr!) TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) :pattern ((fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? Self%&. Self%& K&. K& T&. T& cr!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::reconciler::spec::resource_builder::ResourceBuilder::make")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (cr! Poly) (state! Poly)) (! (=> (and (has_type cr! K&) (has_type state! T&)) (has_type (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? Self%&. Self%& K&. K& T&. T& cr! state!) (TYPE%core!result.Result. $ TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. $ TYPE%tuple%0.))) :pattern ((fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? Self%&. Self%& K&. K& T&. T& cr! state!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::reconciler::spec::resource_builder::ResourceBuilder::update")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (cr! Poly) (state! Poly) (obj! Poly)) (! (=> (and (has_type cr! K&) (has_type state! T&) (has_type obj! TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (has_type (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? Self%&. Self%& K&. K& T&. T& cr! state! obj!) (TYPE%core!result.Result. $ TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. $ TYPE%tuple%0.))) :pattern ((fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? Self%&. Self%& K&. K& T&. T& cr! state! obj!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::reconciler::spec::resource_builder::ResourceBuilder::state_after_create")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (cr! Poly) (obj! Poly) (state! Poly)) (! (=> (and (has_type cr! K&) (has_type obj! TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type state! T&)) (has_type (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? Self%&. Self%& K&. K& T&. T& cr! obj! state!) (TYPE%core!result.Result. $ (TYPE%tuple%2. T&. T& $ (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) $ TYPE%tuple%0.))) :pattern ((fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? Self%&. Self%& K&. K& T&. T& cr! obj! state!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::reconciler::spec::resource_builder::ResourceBuilder::state_after_update")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (cr! Poly) (obj! Poly) (state! Poly)) (! (=> (and (has_type cr! K&) (has_type obj! TYPE%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type state! T&)) (has_type (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? Self%&. Self%& K&. K& T&. T& cr! obj! state!) (TYPE%core!result.Result. $ (TYPE%tuple%2. T&. T& $ (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) $ TYPE%tuple%0.))) :pattern ((fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? Self%&. Self%& K&. K& T&. T& cr! obj! state!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::reconciler::exec::resource_builder::ResourceBuilder::requirements")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly)) (! (=> (has_type cr! (proj%vstd!view.View./V K&. K&)) (has_type (fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr!) BOOL)) :pattern ((fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr!)) )))
(set-info :comment ";; Function-Axioms vstd::string::impl&%1::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%vstd!string.String.) (has_type (vstd!string.impl&%1.view.? self!) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((vstd!string.impl&%1.view.? self!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::exec::api_method::KubeGetRequest::view")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%2.view.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%2.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. self!) (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest (%Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind (%Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (fluent_controller!kubernetes_api_objects.exec.api_resource.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/api_resource (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. self!))))))))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/name (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. self!)))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. self!)))))))))) :pattern ((vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. self!)) ))))
(set-info :comment ";; Function-Specs fluent_controller::reconciler::exec::resource_builder::ResourceBuilder::get_request")
(declare-fun req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly)) (! (= (req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr!) (=> %%global_location_label%%0 (%B (fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& (vstd!view.View.view.? K&. K& cr!))))) :pattern ((req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr!)) )))
(declare-fun ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (req! Poly)) (! (= (ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! req!) (and (has_type req! TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. req!) (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!))))) :pattern ((ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! req!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.))
(set-info :comment ";; Function-Axioms fluent_controller::reconciler::exec::resource_builder::resource_res_to_view")
(assert (fuel_bool_default fuel%fluent_controller!reconciler.exec.resource_builder.resource_res_to_view.))
(assert (=> (fuel_bool fuel%fluent_controller!reconciler.exec.resource_builder.resource_res_to_view.) (forall ((T&. Dcr) (T& Type) (res! Poly)) (! (= (fluent_controller!reconciler.exec.resource_builder.resource_res_to_view.? T&. T& res!) (ite (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!)) (let ((resource$ (core!result.Result./Ok/0 (%Poly%core!result.Result. res!)))) (core!result.Result./Ok (vstd!view.View.view.? T&. T& resource$))) (let ((err$ (%Poly%tuple%0. (core!result.Result./Err/0 (%Poly%core!result.Result. res!))))) (core!result.Result./Err (Poly%tuple%0. err$))))) :pattern ((fluent_controller!reconciler.exec.resource_builder.resource_res_to_view.? T&. T& res!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (res! Poly)) (! (=> (has_type res! (TYPE%core!result.Result. T&. T& $ TYPE%tuple%0.)) (has_type (Poly%core!result.Result. (fluent_controller!reconciler.exec.resource_builder.resource_res_to_view.? T&. T& res!)) (TYPE%core!result.Result. (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) $ TYPE%tuple%0.))) :pattern ((fluent_controller!reconciler.exec.resource_builder.resource_res_to_view.? T&. T& res!)) )))
(set-info :comment ";; Function-Specs fluent_controller::reconciler::exec::resource_builder::ResourceBuilder::make")
(declare-fun req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.make. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (state! Poly)) (! (= (req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.make. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state!) (=> %%global_location_label%%1 (%B (fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& (vstd!view.View.view.? K&. K& cr!))))) :pattern ((req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.make. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state!)) )))
(declare-fun ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.make. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (state! Poly) (res! Poly)) (! (= (ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.make. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! res!) (and (has_type res! (TYPE%core!result.Result. $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. $ TYPE%tuple%0.)) (= (fluent_controller!reconciler.exec.resource_builder.resource_res_to_view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. res!) (%Poly%core!result.Result. (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? T&. T& state!)))))) :pattern ((ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.make. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! res!)) )))
(set-info :comment ";; Function-Specs fluent_controller::reconciler::exec::resource_builder::ResourceBuilder::update")
(declare-fun req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.update. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (state! Poly) (obj! Poly)) (! (= (req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! obj!) (=> %%global_location_label%%2 (%B (fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& (vstd!view.View.view.? K&. K& cr!))))) :pattern ((req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! obj!)) )))
(declare-fun ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.update. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (state! Poly) (obj! Poly) (res! Poly)) (! (= (ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! obj! res!) (and (has_type res! (TYPE%core!result.Result. $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. $ TYPE%tuple%0.)) (= (fluent_controller!reconciler.exec.resource_builder.resource_res_to_view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. res!) (%Poly%core!result.Result. (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? T&. T& state!) (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!)))))) :pattern ((ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! obj! res!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::exec::api_method::KubeListRequest::view")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%4.view.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%4.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. self!) (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind (%Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (fluent_controller!kubernetes_api_objects.exec.api_resource.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/api_resource (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. self!))))))))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. self!))))))) :pattern ((vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. self!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::exec::api_method::KubeCreateRequest::view")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%6.view.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%6.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. self!) (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. self!)))) (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/obj (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. self!)))))))) :pattern ((vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. self!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::exec::api_method::KubeDeleteRequest::view")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%8.view.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%8.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. self!) (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest (%Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind (%Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (fluent_controller!kubernetes_api_objects.exec.api_resource.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/api_resource (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. self!))))))))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/name (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. self!)))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. self!)))))))))) :pattern ((vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. self!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::exec::api_method::KubeUpdateRequest::view")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%10.view.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. self!) (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. self!)))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/name (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. self!)))) (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/obj (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. self!)))))))) :pattern ((vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. self!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::exec::api_method::KubeUpdateStatusRequest::view")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%12.view.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. self!) (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/namespace (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. self!)))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/name (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. self!)))) (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/obj (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. self!)))))))) :pattern ((vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. self!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::exec::api_method::KubeAPIRequest::view")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%13.view.))
(define-fun is-fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest_ ((c fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) Bool ((_ is fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest) c))
(define-fun is-fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest_ ((c fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) Bool ((_ is fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest) c))
(define-fun is-fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest_ ((c fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) Bool ((_ is fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest) c))
(define-fun is-fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest_ ((c fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) Bool ((_ is fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest) c))
(define-fun is-fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest_ ((c fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) Bool ((_ is fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest) c))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.exec.api_method.impl&%13.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!) (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest. (ite (is-fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest_ (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) (let ((get_req$ (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. get_req$))))) (ite (is-fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest_ (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) (let ((list_req$ (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.ListRequest. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. list_req$))))) (ite (is-fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest_ (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) (let ((create_req$ (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. create_req$))))) (ite (is-fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest_ (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) (let ((delete_req$ (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. delete_req$))))) (ite (is-fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest_ (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) (let ((update_req$ (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. update_req$))))) (let ((update_status_req$ (fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/0 (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest (%Poly%fluent_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. update_status_req$)))))))))))) :pattern ((vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::exec::api_method::opt_req_to_view")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.) (forall ((req! Poly)) (! (= (fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? req!) (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. req!)) (let ((req$ (%Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (core!option.Option./Some/0 (%Poly%core!option.Option. req!))))) (core!option.Option./Some (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (Poly%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. req$)))) core!option.Option./None)) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? req!)) ))))
(assert (forall ((req! Poly)) (! (=> (has_type req! (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (has_type (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? req!)) (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.spec.api_method.APIRequest.))) :pattern ((fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? req!)) )))
(set-info :comment ";; Function-Specs fluent_controller::reconciler::exec::resource_builder::ResourceBuilder::state_after_create")
(declare-fun req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (obj! Poly) (state! Poly)) (! (= (req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state!) (=> %%global_location_label%%3 (%B (fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& (vstd!view.View.view.? K&. K& cr!))))) :pattern ((req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state!)) )))
(declare-fun ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (obj! Poly) (state! Poly) (res! Poly)) (! (= (ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state! res!) (and (has_type res! (TYPE%core!result.Result. $ (TYPE%tuple%2. T&. T& $ (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) $ TYPE%tuple%0.)) (= (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!))) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!) (vstd!view.View.view.? T&. T& state!)))))) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!)))) (= (tuple%2./tuple%2 (vstd!view.View.view.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. res!))))) (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. res!))))))) (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!) (vstd!view.View.view.? T&. T& state!))))))))) :pattern ((ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state! res!)) )))
(set-info :comment ";; Function-Specs fluent_controller::reconciler::exec::resource_builder::ResourceBuilder::state_after_update")
(declare-fun req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (obj! Poly) (state! Poly)) (! (= (req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state!) (=> %%global_location_label%%4 (%B (fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& (vstd!view.View.view.? K&. K& cr!))))) :pattern ((req%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state!)) )))
(declare-fun ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (obj! Poly) (state! Poly) (res! Poly)) (! (= (ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state! res!) (and (has_type res! (TYPE%core!result.Result. $ (TYPE%tuple%2. T&. T& $ (TYPE%core!option.Option. $ TYPE%fluent_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) $ TYPE%tuple%0.)) (= (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!))) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!) (vstd!view.View.view.? T&. T& state!)))))) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!)))) (= (tuple%2./tuple%2 (vstd!view.View.view.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. res!))))) (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. res!))))))) (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!) (vstd!view.View.view.? T&. T& state!))))))))) :pattern ((ens%fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state! res!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%5 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%6 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. option!))))))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)) )))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::is_ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.is_ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.is_ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! Poly)) (! (= (vstd!std_specs.result.is_ok.? T&. T& E&. E& result!) (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!))) :pattern ((vstd!std_specs.result.is_ok.? T&. T& E&. E& result!)) ))))
(set-info :comment ";; Function-Specs core::result::impl&%0::is_ok")
(declare-fun ens%core!result.impl&%0.is_ok. (Dcr Type Dcr Type core!result.Result. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.) (b! Bool)) (! (= (ens%core!result.impl&%0.is_ok. T&. T& E&. E& result! b!) (= b! (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. result!))))) :pattern ((ens%core!result.impl&%0.is_ok. T&. T& E&. E& result! b!)) )))
(set-info :comment ";; Function-Specs core::result::impl&%0::unwrap")
(declare-fun req%core!result.impl&%0.unwrap. (Dcr Type Dcr Type core!result.Result.) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.)) (! (= (req%core!result.impl&%0.unwrap. T&. T& E&. E& result!) (=> %%global_location_label%%7 (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) :pattern ((req%core!result.impl&%0.unwrap. T&. T& E&. E& result!)) )))
(declare-fun ens%core!result.impl&%0.unwrap. (Dcr Type Dcr Type core!result.Result. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.) (t! Poly)) (! (= (ens%core!result.impl&%0.unwrap. T&. T& E&. E& result! t!) (and (has_type t! T&) (= t! (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) :pattern ((ens%core!result.impl&%0.unwrap. T&. T& E&. E& result! t!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%8 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::axiom_spec_len")
(declare-fun ens%vstd!std_specs.vec.axiom_spec_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (= (ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!)) )))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%9 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%10 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%11 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%12 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%13 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%14 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%15 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%16 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%17 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%18 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%19 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%20 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%21 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%22 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%23 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%26 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%27 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%28 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%29 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%30 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%31 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%32 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%33 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%34 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::filter")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (has_type (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::filter_lemma_broadcast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. (Dcr Type Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))))) (and (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$))) )) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_lemma_broadcast")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))) (and (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$))) ))) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!))) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::filter_distributes_over_add_broacast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. (Dcr Type Poly Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) (Poly%fun%1. pred!)) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! (Poly%fun%1. pred!)) (vstd!seq_lib.impl&%0.filter.? A&. A& b! (Poly%fun%1. pred!))))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_distributes_over_add_broacast")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! pred!) (vstd!seq_lib.impl&%0.filter.? A&. A& b! pred!)))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%0 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::seq_to_set_is_finite_broadcast")
(declare-fun ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (= (ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite_broadcast")
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%35 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%36 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%37 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%38 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%43 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%44 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%45 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%46 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%47 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%48 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%49 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%50 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%51 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Axioms vstd::string::impl&%0::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! STRSLICE) (has_type (vstd!string.impl&%0.view.? self!) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((vstd!string.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Specs vstd::string::axiom_str_literal_is_ascii")
(declare-fun ens%vstd!string.axiom_str_literal_is_ascii. (StrSlice) Bool)
(assert (forall ((s! StrSlice)) (! (= (ens%vstd!string.axiom_str_literal_is_ascii. s!) (= (vstd!string.impl&%0.is_ascii.? (S s!)) (str%strslice_is_ascii s!))) :pattern ((ens%vstd!string.axiom_str_literal_is_ascii. s!)) )))
(set-info :comment ";; Broadcast vstd::string::axiom_str_literal_is_ascii")
(assert (forall ((s! Poly)) (! (=> (has_type s! STRSLICE) (= (vstd!string.impl&%0.is_ascii.? s!) (str%strslice_is_ascii (%S s!)))) :pattern ((vstd!string.impl&%0.is_ascii.? s!)) )))
(set-info :comment ";; Function-Specs vstd::string::axiom_str_literal_len")
(declare-fun ens%vstd!string.axiom_str_literal_len. (StrSlice) Bool)
(assert (forall ((s! StrSlice)) (! (= (ens%vstd!string.axiom_str_literal_len. s!) (= (vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? (S s!))) (str%strslice_len s!))) :pattern ((ens%vstd!string.axiom_str_literal_len. s!)) )))
(set-info :comment ";; Broadcast vstd::string::axiom_str_literal_len")
(assert (forall ((s! Poly)) (! (=> (has_type s! STRSLICE) (= (vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? s!)) (str%strslice_len (%S s!)))) :pattern ((vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? s!))) )))
(set-info :comment ";; Function-Specs vstd::string::axiom_str_literal_get_char")
(declare-fun ens%vstd!string.axiom_str_literal_get_char. (StrSlice Int) Bool)
(assert (forall ((s! StrSlice) (i! Int)) (! (= (ens%vstd!string.axiom_str_literal_get_char. s! i!) (= (%C (vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? (S s!)) (I i!))) (str%strslice_get_char s! i!))) :pattern ((ens%vstd!string.axiom_str_literal_get_char. s! i!)) )))
(set-info :comment ";; Broadcast vstd::string::axiom_str_literal_get_char")
(assert (forall ((s! Poly) (i! Poly)) (! (=> (and (has_type s! STRSLICE) (has_type i! INT)) (= (%C (vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? s!) i!)) (str%strslice_get_char (%S s!) (%I i!)))) :pattern ((vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? s!) i!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? self!)) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::exec::owner_reference::OwnerReference::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (fluent_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? self!)) TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((fluent_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map_values")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map_values.))
(declare-fun %%lambda%%1 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%0 %%hole%%3 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map_values.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%1 A&. A& self! (%Poly%fun%1. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%1. A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::vstd_ext::string_map::StringMap::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%fluent_controller!vstd_ext.string_map.StringMap.) (has_type (fluent_controller!vstd_ext.string_map.impl&%0.view.? self!) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((fluent_controller!vstd_ext.string_map.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Specs fluent_controller::fluent_controller::fluentbit_config::trusted::exec_types::FluentBitConfig::metadata")
(declare-fun ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%3.metadata. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((self! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (metadata! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%3.metadata. self! metadata!) (= (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. metadata!)) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. self!)))))) :pattern ((ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%3.metadata. self! metadata!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::trusted::exec_types::FluentBitConfigSpec::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.) (has_type (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.view.? self!)) TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.view.? self!)) )))
(set-info :comment ";; Function-Specs fluent_controller::fluent_controller::fluentbit_config::trusted::exec_types::FluentBitConfig::spec")
(declare-fun ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%3.spec. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.) Bool)
(assert (forall ((self! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (spec! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.)) (! (= (ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%3.spec. self! spec!) (= (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.view.? (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. spec!)) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/spec (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. self!)))))) :pattern ((ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%3.spec. self! spec!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::trusted::spec_types::FluentBitConfigView::kind")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.kind.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.kind.) (= (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. fluent_controller!kubernetes_api_objects.spec.common.Kind./CustomResourceKind))))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::trusted::spec_types::FluentBitConfigView::controller_owner_ref")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.controller_owner_ref.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.controller_owner_ref.) (forall ((self! Poly)) (! (= (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.controller_owner_ref.? self!) (fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (B true)))) (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. self!)))))))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. self!))))))))))) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::trusted::spec_types::FluentBitConfigView::marshal")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.marshal.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.marshal.) (forall ((self! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. self!) (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)) (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. self!)))) (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/spec (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. self!))))) (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (Poly%core!option.Option. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/status (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. self!)))))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. self!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::trusted::spec_types::FluentBitConfigView::unmarshal")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.unmarshal.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.unmarshal.) (forall ((obj! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. obj!) (Poly%core!result.Result. (ite (not (= (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)) (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.)))) (core!result.Result./Err (Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (core!result.Result./Ok (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)))) (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (core!result.Result./Ok/0 (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))) (%Poly%core!option.Option. (core!result.Result./Ok/0 (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))))))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. obj!)) ))))
(set-info :comment ";; Function-Specs fluent_controller::fluent_controller::fluentbit_config::trusted::exec_types::FluentBitConfigSpec::fluentbit_config")
(declare-fun ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.fluentbit_config. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. vstd!string.String.) Bool)
(assert (forall ((self! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.) (fluentbit_config! vstd!string.String.)) (! (= (ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.fluentbit_config. self! fluentbit_config!) (= (vstd!string.impl&%1.view.? (Poly%vstd!string.String. fluentbit_config!)) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/fluentbit_config (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.view.? (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. self!))))))) :pattern ((ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.fluentbit_config. self! fluentbit_config!)) )))
(set-info :comment ";; Function-Specs fluent_controller::fluent_controller::fluentbit_config::trusted::exec_types::FluentBitConfigSpec::parsers_config")
(declare-fun ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.parsers_config. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. vstd!string.String.) Bool)
(assert (forall ((self! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec.) (parsers_config! vstd!string.String.)) (! (= (ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.parsers_config. self! parsers_config!) (= (vstd!string.impl&%1.view.? (Poly%vstd!string.String. parsers_config!)) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/parsers_config (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.view.? (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigSpec. self!))))))) :pattern ((ens%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%5.parsers_config. self! parsers_config!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::default")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::resource::empty_status")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.resource.empty_status.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.resource.empty_status.) (forall ((no%param Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.resource.empty_status.? no%param) fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView./EmptyStatusView) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.empty_status.? no%param)) ))))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::default")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. (Int fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((no%param Int) (object_meta! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. no%param object_meta!) (= (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. object_meta!)) (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. no%param object_meta!)) )))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::name")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. (fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. core!option.Option.) Bool)
(assert (forall ((self! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (name! core!option.Option.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. self! name!) (and (has_type (Poly%core!option.Option. name!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. name!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. name!))))) (= (vstd!string.impl&%1.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. name!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)))))))))))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. self! name!)) )))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::namespace")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.namespace. (fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. core!option.Option.) Bool)
(assert (forall ((self! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (namespace! core!option.Option.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.namespace. self! namespace!) (and (has_type (Poly%core!option.Option. namespace!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. namespace!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. namespace!))))) (= (vstd!string.impl&%1.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. namespace!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)))))))))))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.namespace. self! namespace!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_name")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some name!))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!)) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!)) )))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::set_name")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_name. (fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. vstd!string.String.) Bool)
(assert (forall ((pre%self! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (name! vstd!string.String.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_name. pre%self! self! name!) (= (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!))))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_name. pre%self! self! name!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_owner_references")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.) (forall ((self! Poly) (owner_references! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some owner_references!))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!)) ))))
(assert (forall ((self! Poly) (owner_references! Poly)) (! (=> (and (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type owner_references! (TYPE%vstd!seq.Seq. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!)) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!)) )))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::set_owner_references")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_owner_references. (fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%2 () %%Function%%)
(assert (forall ((o$ Poly)) (! (= (%%apply%%0 %%lambda%%2 o$) (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (fluent_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? o$))) :pattern ((%%apply%%0 %%lambda%%2 o$)))))
(assert (forall ((pre%self! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (owner_references! alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_owner_references. pre%self! self! owner_references!) (= (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. owner_references!)) (Poly%fun%1. (mk_fun %%lambda%%2)))))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_owner_references. pre%self! self! owner_references!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::unset_finalizers")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.) (forall ((self! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? self!) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? self!)) TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? self!)) )))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::unset_finalizers")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.unset_finalizers. (fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((pre%self! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.unset_finalizers. pre%self! self!) (= (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!)))))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.unset_finalizers. pre%self! self!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::secret::SecretView::default")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.default.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.default.) (= (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::secret::Secret::default")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.default. (Int fluent_controller!kubernetes_api_objects.exec.secret.Secret.) Bool)
(assert (forall ((no%param Int) (secret! fluent_controller!kubernetes_api_objects.exec.secret.Secret.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.default. no%param secret!) (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. secret!)) (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.default. no%param secret!)) )))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::secret::Secret::metadata")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.metadata. (fluent_controller!kubernetes_api_objects.exec.secret.Secret. fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((self! fluent_controller!kubernetes_api_objects.exec.secret.Secret.) (metadata! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.metadata. self! metadata!) (= (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. metadata!)) (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/metadata (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. self!)))))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.metadata. self! metadata!)) )))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::secret::Secret::data")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.data. (fluent_controller!kubernetes_api_objects.exec.secret.Secret. core!option.Option.) Bool)
(assert (forall ((self! fluent_controller!kubernetes_api_objects.exec.secret.Secret.) (data! core!option.Option.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.data. self! data!) (and (has_type (Poly%core!option.Option. data!) (TYPE%core!option.Option. $ TYPE%fluent_controller!vstd_ext.string_map.StringMap.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/data (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. self!)))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. data!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. data!))))) (= (fluent_controller!vstd_ext.string_map.impl&%0.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. data!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/data (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. self!))))))))))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.data. self! data!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::secret::SecretView::set_metadata")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_metadata.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_metadata.) (forall ((self! Poly) (metadata! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_metadata.? self! metadata!) (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. metadata!) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/data (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. self!)))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_metadata.? self! metadata!)) ))))
(assert (forall ((self! Poly) (metadata! Poly)) (! (=> (and (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) (has_type metadata! TYPE%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_metadata.? self! metadata!)) TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_metadata.? self! metadata!)) )))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::secret::Secret::set_metadata")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.set_metadata. (fluent_controller!kubernetes_api_objects.exec.secret.Secret. fluent_controller!kubernetes_api_objects.exec.secret.Secret. fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((pre%self! fluent_controller!kubernetes_api_objects.exec.secret.Secret.) (self! fluent_controller!kubernetes_api_objects.exec.secret.Secret.) (metadata! fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.set_metadata. pre%self! self! metadata!) (= (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. self!))) (fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_metadata.? (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. pre%self!)) (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. metadata!)))))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.set_metadata. pre%self! self! metadata!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::secret::SecretView::set_data")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_data.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_data.) (forall ((self! Poly) (data! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_data.? self! data!) (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/metadata (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some data!))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_data.? self! data!)) ))))
(assert (forall ((self! Poly) (data! Poly)) (! (=> (and (has_type self! TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) (has_type data! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_data.? self! data!)) TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) :pattern ((fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_data.? self! data!)) )))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::secret::Secret::set_data")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.set_data. (fluent_controller!kubernetes_api_objects.exec.secret.Secret. fluent_controller!kubernetes_api_objects.exec.secret.Secret. fluent_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((pre%self! fluent_controller!kubernetes_api_objects.exec.secret.Secret.) (self! fluent_controller!kubernetes_api_objects.exec.secret.Secret.) (data! fluent_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.set_data. pre%self! self! data!) (= (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. self!))) (fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_data.? (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. pre%self!)) (fluent_controller!vstd_ext.string_map.impl&%0.view.? (Poly%fluent_controller!vstd_ext.string_map.StringMap. data!))))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.set_data. pre%self! self! data!)) )))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::secret::Secret::clone")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.clone. (fluent_controller!kubernetes_api_objects.exec.secret.Secret. fluent_controller!kubernetes_api_objects.exec.secret.Secret.) Bool)
(assert (forall ((self! fluent_controller!kubernetes_api_objects.exec.secret.Secret.) (c! fluent_controller!kubernetes_api_objects.exec.secret.Secret.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.clone. self! c!) (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. c!)) (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. self!)))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.clone. self! c!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::secret::SecretView::kind")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.kind.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.kind.) (= (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) (Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. fluent_controller!kubernetes_api_objects.spec.common.Kind./SecretKind))))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::secret::Secret::api_resource")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.api_resource. (Int fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) Bool)
(assert (forall ((no%param Int) (res! fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.api_resource. no%param res!) (= (fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind (%Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly%fluent_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (fluent_controller!kubernetes_api_objects.exec.api_resource.impl&%0.view.? (Poly%fluent_controller!kubernetes_api_objects.exec.api_resource.ApiResource. res!))))) (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.api_resource. no%param res!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::secret::SecretView::marshal")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.marshal.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.marshal.) (forall ((self! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. self!) (Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/metadata (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. self!)))) (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (Poly%tuple%2. (tuple%2./tuple%2 (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/data (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. self!))) (Poly%tuple%0. tuple%0./tuple%0))))) (%Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (Poly%fluent_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (fluent_controller!kubernetes_api_objects.spec.resource.empty_status.? (I 0)))))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. self!)) ))))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::secret::Secret::marshal")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.marshal. (fluent_controller!kubernetes_api_objects.exec.secret.Secret. fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) Bool)
(assert (forall ((self! fluent_controller!kubernetes_api_objects.exec.secret.Secret.) (obj! fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.marshal. self! obj!) (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!)) (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. self!))))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.marshal. self! obj!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::kubernetes_api_objects::spec::secret::SecretView::unmarshal")
(assert (fuel_bool_default fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.unmarshal.))
(assert (=> (fuel_bool fuel%fluent_controller!kubernetes_api_objects.spec.secret.impl&%1.unmarshal.) (forall ((obj! Poly)) (! (= (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. obj!) (Poly%core!result.Result. (ite (not (= (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)) (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)))) (core!result.Result./Err (Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (core!result.Result./Ok (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)))) (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (Poly%fluent_controller!kubernetes_api_objects.spec.marshal.Value. (fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%fluent_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))))))))))) :pattern ((fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. obj!)) ))))
(set-info :comment ";; Function-Specs fluent_controller::kubernetes_api_objects::exec::secret::Secret::unmarshal")
(declare-fun ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.unmarshal. (fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. core!result.Result.) Bool)
(assert (forall ((obj! fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) (res! core!result.Result.)) (! (= (ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.unmarshal. obj! res!) (and (has_type (Poly%core!result.Result. res!) (TYPE%core!result.Result. $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. $ TYPE%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) (= (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. res!)))) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!))))))) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. res!))))) (= (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. res!)))) (core!result.Result./Ok/0 (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!))))))))) :pattern ((ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.unmarshal. obj! res!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Specs fluent_controller::vstd_ext::string_map::StringMap::insert")
(declare-fun ens%fluent_controller!vstd_ext.string_map.impl&%0.insert. (fluent_controller!vstd_ext.string_map.StringMap. fluent_controller!vstd_ext.string_map.StringMap. vstd!string.String. vstd!string.String. core!option.Option.) Bool)
(assert (forall ((pre%self! fluent_controller!vstd_ext.string_map.StringMap.) (self! fluent_controller!vstd_ext.string_map.StringMap.) (key! vstd!string.String.) (value! vstd!string.String.) (old_v! core!option.Option.)) (! (= (ens%fluent_controller!vstd_ext.string_map.impl&%0.insert. pre%self! self! key! value! old_v!) (and (has_type (Poly%core!option.Option. old_v!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (= (fluent_controller!vstd_ext.string_map.impl&%0.view.? (Poly%fluent_controller!vstd_ext.string_map.StringMap. self!)) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (fluent_controller!vstd_ext.string_map.impl&%0.view.? (Poly%fluent_controller!vstd_ext.string_map.StringMap. pre%self!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. key!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. value!)))) (= (vstd!set.impl&%0.contains.? $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.dom.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (fluent_controller!vstd_ext.string_map.impl&%0.view.? (Poly%fluent_controller!vstd_ext.string_map.StringMap. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. key!))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. old_v!)))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. old_v!))))) (= (vstd!string.impl&%1.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. old_v!)))) (vstd!map.impl&%0.index.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (fluent_controller!vstd_ext.string_map.impl&%0.view.? (Poly%fluent_controller!vstd_ext.string_map.StringMap. pre%self!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. key!))))))) :pattern ((ens%fluent_controller!vstd_ext.string_map.impl&%0.insert. pre%self! self! key! value! old_v!)) )))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%1::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%1.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%1.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (BOX A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (BOX A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (RC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (RC A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%3::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%3.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%3.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (ARC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (ARC A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%5::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%5.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%5.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%11::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%11.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%11.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%19::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%19.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%19.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::trusted::spec_types::FluentBitConfigView::well_formed")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed.) (forall ((self! Poly)) (! (= (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed.? self!) (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. self!)))))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. self!))))))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. self!)))))))))))) :pattern ((fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed.? self!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::exec::resource::secret::SecretBuilder::requirements")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.impl&%0.requirements.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.impl&%0.requirements.) (forall ((fbc! Poly)) (! (= (fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. fbc!) (B (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed.? fbc!))) :pattern ((fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. fbc!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::model::resource::common::make_owner_references")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.common.make_owner_references.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.common.make_owner_references.) (forall ((fbc! Poly)) (! (= (fluent_controller!fluent_controller.fluentbit_config.model.resource.common.make_owner_references.? fbc!) (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq.Seq.push.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!seq.Seq.empty.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (Poly%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.controller_owner_ref.? fbc!))))) :pattern ((fluent_controller!fluent_controller.fluentbit_config.model.resource.common.make_owner_references.? fbc!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::make_secret_name")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name.) (forall ((fbc! Poly)) (! (= (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name.? fbc!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. fbc!))))))))) :pattern ((fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name.? fbc!)) ))))
(assert (forall ((fbc! Poly)) (! (=> (has_type fbc! TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (has_type (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name.? fbc!) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name.? fbc!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::make_secret_key")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_key.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_key.) (forall ((fbc! Poly)) (! (= (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_key.? fbc!) (fluent_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef (%Poly%fluent_controller!kubernetes_api_objects.spec.common.Kind. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name.? fbc!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/metadata (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. fbc!)))))))))) :pattern ((fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_key.? fbc!)) ))))
(assert (forall ((fbc! Poly)) (! (=> (has_type fbc! TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_key.? fbc!)) TYPE%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef.)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_key.? fbc!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::SecretBuilder::get_request")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.get_request.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.get_request.) (forall ((fbc! Poly)) (! (= (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. fbc!) (Poly%fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest. (fluent_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest (%Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly%fluent_controller!kubernetes_api_objects.spec.common.ObjectRef. (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_key.? fbc!)))))) :pattern ((fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. fbc!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::make_secret")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret.) (forall ((fbc! Poly)) (! (= (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret.? fbc!) (fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_data.? (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!kubernetes_api_objects.spec.secret.impl&%0.set_metadata.? (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.) (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0))) (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name.? fbc!))) (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (fluent_controller!fluent_controller.fluentbit_config.model.resource.common.make_owner_references.? fbc!)))))) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)) (vstd!string.impl&%0.view.? (S (str%new_strlit 6599967009001563680856722959864523366751399058431316207317234863195154146717129675483697351052645134074600180731867309142595899222037821529370880134238561))) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/fluentbit_config (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/spec (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. fbc!)))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 727539943590536780087521359795506375764531001659519645157940582491652728664339791960038695118570344639772571520703149762648563317987769297732628771225407))) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/parsers_config (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/spec (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. fbc!)))))))) :pattern ((fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret.? fbc!)) ))))
(assert (forall ((fbc! Poly)) (! (=> (has_type fbc! TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret.? fbc!)) TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret.? fbc!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::SecretBuilder::make")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.make.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.make.) (forall ((fbc! Poly) (state! Poly)) (! (= (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. fbc! state!) (Poly%core!result.Result. (core!result.Result./Ok (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret.? fbc!)))))) :pattern ((fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. fbc! state!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::update_secret")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.update_secret.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.update_secret.) (forall ((fbc! Poly) (found_secret! Poly)) (! (= (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.update_secret.? fbc! found_secret!) (let ((made_secret$ (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret.? fbc!))) (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (let ((tmp%%$ (core!option.Option./Some (Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (fluent_controller!fluent_controller.fluentbit_config.model.resource.common.make_owner_references.? fbc!))))) (let ((tmp%%$1 core!option.Option./None)) (let ((tmp%%$2 (fluent_controller!kubernetes_api_objects.spec.secret.SecretView./SecretView/metadata (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. found_secret!)))) (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$2))))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$2))))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$2))))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$2))))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$2))))) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$2))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%Poly%core!option.Option. (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$2))))))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)) (vstd!string.impl&%0.view.? (S (str%new_strlit 6599967009001563680856722959864523366751399058431316207317234863195154146717129675483697351052645134074600180731867309142595899222037821529370880134238561))) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/fluentbit_config (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/spec (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. fbc!)))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 727539943590536780087521359795506375764531001659519645157940582491652728664339791960038695118570344639772571520703149762648563317987769297732628771225407))) (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView./FluentBitConfigSpecView/parsers_config (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView/spec (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. fbc!)))))))))))) :pattern ((fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.update_secret.? fbc! found_secret!)) ))))
(assert (forall ((fbc! Poly) (found_secret! Poly)) (! (=> (and (has_type fbc! TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (has_type found_secret! TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) (has_type (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.update_secret.? fbc! found_secret!)) TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView.)) :pattern ((fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.update_secret.? fbc! found_secret!)) )))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::SecretBuilder::update")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.update.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.update.) (forall ((fbc! Poly) (state! Poly) (obj! Poly)) (! (= (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. fbc! state! obj!) (Poly%core!result.Result. (let ((secret$ (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. obj!)))) (ite (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. secret$))))) (core!result.Result./Ok (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.update_secret.? fbc! (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. secret$))))))) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0)))))) :pattern ((fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. fbc! state! obj!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::SecretBuilder::state_after_create")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.state_after_create.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.state_after_create.) (forall ((fbc! Poly) (obj! Poly) (state! Poly)) (! (= (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. fbc! obj! state!) (Poly%core!result.Result. (let ((sts$ (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. obj!)))) (ite (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. sts$))))) (let ((state_prime$ (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./Done))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. state_prime$) (Poly%core!option.Option. core!option.Option./None))))) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0)))))) :pattern ((fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. fbc! obj! state!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::model::resource::secret::SecretBuilder::state_after_update")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.state_after_update.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.impl&%0.state_after_update.) (forall ((fbc! Poly) (obj! Poly) (state! Poly)) (! (= (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. fbc! obj! state!) (Poly%core!result.Result. (let ((sts$ (%Poly%core!result.Result. (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. obj!)))) (ite (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. sts$))))) (let ((state_prime$ (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./Done))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. state_prime$) (Poly%core!option.Option. core!option.Option./None))))) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0)))))) :pattern ((fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. fbc! obj! state!)) ))))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::trusted::spec_types::FluentBitConfigView::default")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.default.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%1.default.) (= (fluent_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.) (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView./FluentBitConfigView (%Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%fluent_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (fluent_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView. (vstd!pervasive.arbitrary.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigSpecView.)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%fluent_controller!kubernetes_api_objects.spec.resource.ResourceView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%fluent_controller!reconciler.spec.resource_builder.ResourceBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigView. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState.))
(set-info :comment ";; Function-Axioms fluent_controller::fluent_controller::fluentbit_config::trusted::exec_types::FluentBitConfigReconcileState::view")
(assert (fuel_bool_default fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%1.view.))
(assert (=> (fuel_bool fuel%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.impl&%1.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. self!) (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState. (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState/reconcile_step (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. self!))))))) :pattern ((vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&) :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Function-Specs fluent_controller::vstd_ext::string_map::StringMap::empty")
(declare-fun ens%fluent_controller!vstd_ext.string_map.impl&%0.empty. (Int fluent_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((no%param Int) (m! fluent_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%fluent_controller!vstd_ext.string_map.impl&%0.empty. no%param m!) (= (fluent_controller!vstd_ext.string_map.impl&%0.view.? (Poly%fluent_controller!vstd_ext.string_map.StringMap. m!)) (vstd!map.impl&%0.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((ens%fluent_controller!vstd_ext.string_map.impl&%0.empty. no%param m!)) )))
(set-info :comment ";; Function-Specs vstd::string::impl&%0::to_string")
(declare-fun ens%vstd!string.impl&%0.to_string. (StrSlice vstd!string.String.) Bool)
(assert (forall ((self! StrSlice) (ret! vstd!string.String.)) (! (= (ens%vstd!string.impl&%0.to_string. self! ret!) (and (= (vstd!string.impl&%0.view.? (S self!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. ret!))) (= (vstd!string.impl&%0.is_ascii.? (S self!)) (vstd!string.impl&%1.is_ascii.? (Poly%vstd!string.String. ret!))))) :pattern ((ens%vstd!string.impl&%0.to_string. self! ret!)) )))
(set-info :comment ";; Function-Specs fluent_controller::fluent_controller::fluentbit_config::exec::resource::secret::make_secret_name")
(declare-fun req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret_name. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((fbc! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.)) (! (= (req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret_name. fbc!) (=> %%global_location_label%%52 (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fbc!))))) :pattern ((req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret_name. fbc!)) )))
(declare-fun ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret_name. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. vstd!string.String.) Bool)
(assert (forall ((fbc! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (name! vstd!string.String.)) (! (= (ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret_name. fbc! name!) (= (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!)) (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret_name.? (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fbc!))))) :pattern ((ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret_name. fbc! name!)) )))
(set-info :comment ";; Function-Def fluent_controller::fluent_controller::fluentbit_config::exec::resource::secret::make_secret_name")
(set-info :comment ";; controller_examples/fluent_controller/fluentbit_config/exec/resource/secret.rs:93:1: 93:64 (#0)")
(set-info :comment ";; Function-Def fluent_controller::fluent_controller::fluentbit_config::exec::resource::secret::SecretBuilder::get_request")
(set-info :comment ";; controller_examples/fluent_controller/fluentbit_config/exec/resource/secret.rs:29:5: 29:60 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.))
(set-info :comment ";; Function-Specs fluent_controller::fluent_controller::fluentbit_config::exec::resource::common::make_owner_references")
(declare-fun req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.common.make_owner_references. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((fbc! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.)) (! (= (req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.common.make_owner_references. fbc!) (=> %%global_location_label%%53 (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fbc!))))) :pattern ((req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.common.make_owner_references. fbc!)) )))
(declare-fun ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.common.make_owner_references. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.) Bool)
(assert (forall ((fbc! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (owner_references! alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (= (ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.common.make_owner_references. fbc! owner_references!) (= (%Poly%vstd!seq.Seq<fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%fluent_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<fluent_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. owner_references!)) (Poly%fun%1. (mk_fun %%lambda%%2)))) (fluent_controller!fluent_controller.fluentbit_config.model.resource.common.make_owner_references.? (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fbc!))))) :pattern ((ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.common.make_owner_references. fbc! owner_references!)) )))
(set-info :comment ";; Function-Specs fluent_controller::fluent_controller::fluentbit_config::exec::resource::secret::make_secret")
(declare-fun req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((fbc! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.)) (! (= (req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret. fbc!) (=> %%global_location_label%%54 (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fbc!))))) :pattern ((req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret. fbc!)) )))
(declare-fun ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fluent_controller!kubernetes_api_objects.exec.secret.Secret.) Bool)
(assert (forall ((fbc! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (secret! fluent_controller!kubernetes_api_objects.exec.secret.Secret.)) (! (= (ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret. fbc! secret!) (= (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. secret!))) (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.make_secret.? (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fbc!))))) :pattern ((ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.make_secret. fbc! secret!)) )))
(set-info :comment ";; Function-Def fluent_controller::fluent_controller::fluentbit_config::exec::resource::secret::make_secret")
(set-info :comment ";; controller_examples/fluent_controller/fluentbit_config/exec/resource/secret.rs:100:1: 100:61 (#0)")
(set-info :comment ";; Function-Def fluent_controller::fluent_controller::fluentbit_config::exec::resource::secret::SecretBuilder::make")
(set-info :comment ";; controller_examples/fluent_controller/fluentbit_config/exec/resource/secret.rs:37:5: 37:103 (#0)")
(set-info :comment ";; Function-Specs fluent_controller::fluent_controller::fluentbit_config::exec::resource::secret::update_secret")
(declare-fun req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.update_secret. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fluent_controller!kubernetes_api_objects.exec.secret.Secret.) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((fbc! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (found_secret! fluent_controller!kubernetes_api_objects.exec.secret.Secret.)) (! (= (req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.update_secret. fbc! found_secret!) (=> %%global_location_label%%55 (fluent_controller!fluent_controller.fluentbit_config.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fbc!))))) :pattern ((req%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.update_secret. fbc! found_secret!)) )))
(declare-fun ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.update_secret. (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fluent_controller!kubernetes_api_objects.exec.secret.Secret. fluent_controller!kubernetes_api_objects.exec.secret.Secret.) Bool)
(assert (forall ((fbc! fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (found_secret! fluent_controller!kubernetes_api_objects.exec.secret.Secret.) (secret! fluent_controller!kubernetes_api_objects.exec.secret.Secret.)) (! (= (ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.update_secret. fbc! found_secret! secret!) (= (%Poly%fluent_controller!kubernetes_api_objects.spec.secret.SecretView. (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. secret!))) (fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.update_secret.? (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fbc!)) (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. (Poly%fluent_controller!kubernetes_api_objects.exec.secret.Secret. found_secret!))))) :pattern ((ens%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.update_secret. fbc! found_secret! secret!)) )))
(set-info :comment ";; Function-Def fluent_controller::fluent_controller::fluentbit_config::exec::resource::secret::update_secret")
(set-info :comment ";; controller_examples/fluent_controller/fluentbit_config/exec/resource/secret.rs:77:1: 77:85 (#0)")
(set-info :comment ";; Function-Def fluent_controller::fluent_controller::fluentbit_config::exec::resource::secret::SecretBuilder::update")
(set-info :comment ";; controller_examples/fluent_controller/fluentbit_config/exec/resource/secret.rs:41:5: 41:125 (#0)")
(set-info :comment ";; Function-Def fluent_controller::fluent_controller::fluentbit_config::exec::resource::secret::SecretBuilder::state_after_create")
(set-info :comment ";; controller_examples/fluent_controller/fluentbit_config/exec/resource/secret.rs:50:5: 50:184 (#0)")
(declare-const %return! Poly)
(declare-const fbc! Poly)
(declare-const obj! Poly)
(declare-const state! Poly)
(declare-const tmp%1 Bool)
(declare-const secret@ core!result.Result.)
(assert fuel_defaults)
(assert (has_type fbc! TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.))
(assert (has_type obj! TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.))
(assert (has_type state! TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.))
(assert (%B (fluent_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.exec.resource.secret.SecretBuilder. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fbc!))))
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%1 Bool)
(declare-const %%query%% Bool)
(assert (=> %%query%% (not (=> (ens%fluent_controller!kubernetes_api_objects.exec.secret.impl&%1.unmarshal. (%Poly%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!) secret@) (=> (ens%core!result.impl&%0.is_ok. $ TYPE%fluent_controller!kubernetes_api_objects.exec.secret.Secret. $ TYPE%fluent_controller!kubernetes_api_objects.error.ParseDynamicObjectError. secret@ tmp%1) (=> (= %return! (Poly%core!result.Result. (ite tmp%1 (let ((state_prime$ (fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState./FluentBitConfigReconcileState (%Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep. fluent_controller!fluent_controller.fluentbit_config.trusted.step.FluentBitConfigReconcileStep./Done))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (Poly%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. state_prime$) (Poly%core!option.Option. core!option.Option./None))))) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0))))) (and (=> %%location_label%%0 (= (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. %return!))) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. (proj%%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (proj%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (proj%%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.) (proj%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.) (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fbc!) (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!) (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. state!))))))) (=> %%location_label%%1 (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. %return!)))) (= (tuple%2./tuple%2 (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. %return!))))) (Poly%core!option.Option. (fluent_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. %return!))))))) (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (fluent_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.model.resource.secret.SecretBuilder. (proj%%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (proj%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig.) (proj%%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.) (proj%vstd!view.View./V $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState.) (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfig. fbc!) (vstd!view.View.view.? $ TYPE%fluent_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!) (vstd!view.View.view.? $ TYPE%fluent_controller!fluent_controller.fluentbit_config.trusted.exec_types.FluentBitConfigReconcileState. state!)))))))))))))))
(assert %%query%%)
(check-sat)
(exit)
