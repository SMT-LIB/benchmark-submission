(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module marshalling::SeqMarshalling_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_vec_index_decreases. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%0.deepv. FuelId)
(declare-const fuel%lib!marshalling.Marshalling_v.impl&%0.deepv. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.sets. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.appends. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len. FuelId)
(declare-const fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.valid. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.i. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.all. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.agree_beyond_slice. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%2.view. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.vec.impl&%0.spec_index. fuel%vstd!std_specs.vec.axiom_spec_len. fuel%vstd!std_specs.vec.axiom_vec_index_decreases. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%24.view. fuel%lib!marshalling.IntegerMarshalling_v.impl&%0.deepv. fuel%lib!marshalling.Marshalling_v.impl&%0.deepv. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.sets. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.appends. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len. fuel%lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len. fuel%lib!marshalling.Slice_v.impl&%0.wf. fuel%lib!marshalling.Slice_v.impl&%0.valid. fuel%lib!marshalling.Slice_v.impl&%0.i. fuel%lib!marshalling.Slice_v.impl&%0.all. fuel%lib!marshalling.Slice_v.impl&%0.agree_beyond_slice. fuel%lib!marshalling.Slice_v.impl&%2.view. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (and (fuel_bool_default fuel%vstd!std_specs.vec.axiom_spec_len.) (fuel_bool_default fuel%vstd!std_specs.vec.axiom_vec_index_decreases.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt (Dcr Type) Dcr)
(declare-fun proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt (Dcr Type) Type)
(declare-fun proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt (Dcr Type) Dcr)
(declare-fun proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!vec.Vec<u8./allocator_global%.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!marshalling.Slice_v.SpecSlice. 0) (lib!marshalling.Slice_v.Slice. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!marshalling.Slice_v.SpecSlice./SpecSlice (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?start Int) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?end Int))) ((lib!marshalling.Slice_v.Slice./Slice (lib!marshalling.Slice_v.Slice./Slice/?start Int) (lib!marshalling.Slice_v.Slice./Slice/?end Int))) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (lib!marshalling.Slice_v.SpecSlice.) Int)
(declare-fun lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (lib!marshalling.Slice_v.SpecSlice.) Int)
(declare-fun lib!marshalling.Slice_v.Slice./Slice/start (lib!marshalling.Slice_v.Slice.) Int)
(declare-fun lib!marshalling.Slice_v.Slice./Slice/end (lib!marshalling.Slice_v.Slice.) Int)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%lib!marshalling.Slice_v.SpecSlice. Type)
(declare-const TYPE%lib!marshalling.Slice_v.Slice. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!vec.Vec<u8./allocator_global%.>. (alloc!vec.Vec<u8./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!marshalling.Slice_v.SpecSlice. (lib!marshalling.Slice_v.SpecSlice.) Poly)
(declare-fun %Poly%lib!marshalling.Slice_v.SpecSlice. (Poly) lib!marshalling.Slice_v.SpecSlice.)
(declare-fun Poly%lib!marshalling.Slice_v.Slice. (lib!marshalling.Slice_v.Slice.) Poly)
(declare-fun %Poly%lib!marshalling.Slice_v.Slice. (Poly) lib!marshalling.Slice_v.Slice.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly%alloc!vec.Vec<u8./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u8./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u8./allocator_global%.>. (%Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (= x (%Poly%lib!marshalling.Slice_v.SpecSlice. (Poly%lib!marshalling.Slice_v.SpecSlice. x))) :pattern ((Poly%lib!marshalling.Slice_v.SpecSlice. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.SpecSlice.) (= x (Poly%lib!marshalling.Slice_v.SpecSlice. (%Poly%lib!marshalling.Slice_v.SpecSlice. x)))) :pattern ((has_type x TYPE%lib!marshalling.Slice_v.SpecSlice.)) )))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (= (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start x) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?start x)) :pattern ((lib!marshalling.Slice_v.SpecSlice./SpecSlice/start x)) )))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (= (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end x) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?end x)) :pattern ((lib!marshalling.Slice_v.SpecSlice./SpecSlice/end x)) )))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (has_type (Poly%lib!marshalling.Slice_v.SpecSlice. x) TYPE%lib!marshalling.Slice_v.SpecSlice.) :pattern ((has_type (Poly%lib!marshalling.Slice_v.SpecSlice. x) TYPE%lib!marshalling.Slice_v.SpecSlice.)) )))
(assert (forall ((x lib!marshalling.Slice_v.Slice.)) (! (= x (%Poly%lib!marshalling.Slice_v.Slice. (Poly%lib!marshalling.Slice_v.Slice. x))) :pattern ((Poly%lib!marshalling.Slice_v.Slice. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.Slice.) (= x (Poly%lib!marshalling.Slice_v.Slice. (%Poly%lib!marshalling.Slice_v.Slice. x)))) :pattern ((has_type x TYPE%lib!marshalling.Slice_v.Slice.)) )))
(assert (forall ((_start! Int) (_end! Int)) (! (=> (and (uInv SZ _start!) (uInv SZ _end!)) (has_type (Poly%lib!marshalling.Slice_v.Slice. (lib!marshalling.Slice_v.Slice./Slice _start! _end!)) TYPE%lib!marshalling.Slice_v.Slice.)) :pattern ((has_type (Poly%lib!marshalling.Slice_v.Slice. (lib!marshalling.Slice_v.Slice./Slice _start! _end!)) TYPE%lib!marshalling.Slice_v.Slice.)) )))
(assert (forall ((x lib!marshalling.Slice_v.Slice.)) (! (= (lib!marshalling.Slice_v.Slice./Slice/start x) (lib!marshalling.Slice_v.Slice./Slice/?start x)) :pattern ((lib!marshalling.Slice_v.Slice./Slice/start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.Slice.) (uInv SZ (lib!marshalling.Slice_v.Slice./Slice/start (%Poly%lib!marshalling.Slice_v.Slice. x)))) :pattern ((lib!marshalling.Slice_v.Slice./Slice/start (%Poly%lib!marshalling.Slice_v.Slice. x)) (has_type x TYPE%lib!marshalling.Slice_v.Slice.)) )))
(assert (forall ((x lib!marshalling.Slice_v.Slice.)) (! (= (lib!marshalling.Slice_v.Slice./Slice/end x) (lib!marshalling.Slice_v.Slice./Slice/?end x)) :pattern ((lib!marshalling.Slice_v.Slice./Slice/end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.Slice.) (uInv SZ (lib!marshalling.Slice_v.Slice./Slice/end (%Poly%lib!marshalling.Slice_v.Slice. x)))) :pattern ((lib!marshalling.Slice_v.Slice./Slice/end (%Poly%lib!marshalling.Slice_v.Slice. x)) (has_type x TYPE%lib!marshalling.Slice_v.Slice.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.SeqMarshalling_v.SeqMarshal. (Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.Marshalling_v.Deepview. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!marshalling.SeqMarshalling_v.SeqMarshal. Self%&. Self%&) (tr_bound%lib!marshalling.Marshalling_v.Deepview. (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./Elt Self%&. Self%&) (proj%%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&) (proj%lib!marshalling.SeqMarshalling_v.SeqMarshal./DVElt Self%&. Self%&))) :pattern ((tr_bound%lib!marshalling.SeqMarshalling_v.SeqMarshal. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (DV&. Dcr) (DV& Type)) (! true :pattern ((tr_bound%lib!marshalling.Marshalling_v.Deepview. Self%&. Self%& DV&. DV&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ TYPE%lib!marshalling.Slice_v.Slice.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%lib!marshalling.Slice_v.Slice.) TYPE%lib!marshalling.Slice_v.SpecSlice.))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Deepview::deepv")
(declare-fun lib!marshalling.Marshalling_v.Deepview.deepv.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Deepview.deepv%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::seq_valid")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? (Dcr Type Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::lengthable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::length")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.length%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::valid")
(declare-fun lib!marshalling.Slice_v.impl&%0.valid.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::i")
(declare-fun lib!marshalling.Slice_v.impl&%0.i.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::gettable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::get")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get.? (Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get%default%.? (Dcr Type Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::all")
(declare-fun lib!marshalling.Slice_v.impl&%0.all.? (Dcr Type Poly) lib!marshalling.Slice_v.SpecSlice.)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::get_data")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get_data%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::elt_parsable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::get_elt")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.get_elt%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::wf")
(declare-fun lib!marshalling.Slice_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::elt_marshallable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_marshallable%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::settable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.settable.? (Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.settable%default%.? (Dcr Type Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::preserves_entry")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry.? (Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.preserves_entry%default%.? (Dcr Type Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::sets")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.sets.? (Dcr Type Poly Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.sets%default%.? (Dcr Type Poly Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::agree_beyond_slice")
(declare-fun lib!marshalling.Slice_v.impl&%0.agree_beyond_slice.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::resizable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.resizable%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::resizes")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes.? (Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.resizes%default%.? (Dcr Type Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::well_formed")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.well_formed%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::appendable")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.appendable%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::appends")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.appends.? (Dcr Type Poly Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.appends%default%.? (Dcr Type Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::gettable_to_len")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.gettable_to_len%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::elt_parsable_to_len")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.elt_parsable_to_len%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::parsable_to_len")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.parsable_to_len%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::SeqMarshalling_v::SeqMarshal::parse_to_len")
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!marshalling.SeqMarshalling_v.SeqMarshal.parse_to_len%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Deepview::deepv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (DV&. Dcr) (DV& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshalling.Marshalling_v.Deepview.deepv.? Self%&. Self%& DV&. DV& self!) DV&)) :pattern ((lib!marshalling.Marshalling_v.Deepview.deepv.? Self%&. Self%& DV&. DV& self!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::seq_valid")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::lengthable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable. Self%&. Self%& self! data!) (=> %%global_location_label%%1 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable. Self%&. Self%& self! data!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::lengthable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! data!) BOOL)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! data!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::length")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.length. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.length. Self%&. Self%& self! data!) (and (=> %%global_location_label%%2 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%3 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.length. Self%&. Self%& self! data!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::SeqMarshalling_v::SeqMarshal::length")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! data!) INT)) :pattern ((lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! data!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::valid")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.valid.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.valid.) (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.valid.? T&. T& self! data!) (let ((tmp%%$ (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)))) (let ((tmp%%$1 (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)))) (and (and (<= 0 tmp%%$) (<= tmp%%$ tmp%%$1)) (<= tmp%%$1 (vstd!seq.Seq.len.? T&. T& data!)))))) :pattern ((lib!marshalling.Slice_v.impl&%0.valid.? T&. T& self! data!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::Slice::view")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%2.view.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%2.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. self!) (Poly%lib!marshalling.Slice_v.SpecSlice. (lib!marshalling.Slice_v.SpecSlice./SpecSlice (%I (I (lib!marshalling.Slice_v.Slice./Slice/start (%Poly%lib!marshalling.Slice_v.Slice. self!)))) (%I (I (lib!marshalling.Slice_v.Slice./Slice/end (%Poly%lib!marshalling.Slice_v.Slice. self!))))))) :pattern ((vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%4 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::Slice_v::SpecSlice::i")
(declare-fun req%lib!marshalling.Slice_v.impl&%0.i. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.Slice_v.impl&%0.i. T&. T& self! data!) (=> %%global_location_label%%5 (lib!marshalling.Slice_v.impl&%0.valid.? T&. T& self! data!))) :pattern ((req%lib!marshalling.Slice_v.impl&%0.i. T&. T& self! data!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::i")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.i.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.i.) (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!) (vstd!seq.Seq.subrange.? T&. T& data! (I (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!))) (I (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (%Poly%lib!marshalling.Slice_v.SpecSlice. self!))))) :pattern ((lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! TYPE%lib!marshalling.Slice_v.SpecSlice.) (has_type data! (TYPE%vstd!seq.Seq. T&. T&))) (has_type (lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%6 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::try_length")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. Self%&. Self%& self! dslice! data!) (and (=> %%global_location_label%%7 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%8 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. Self%&. Self%& self! dslice! data!)) )))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (out! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. Self%&. Self%& self! dslice! data! out!) (and (has_type out! (TYPE%core!option.Option. $ (UINT SZ))) (= (is-core!option.Option./Some_ (%Poly%core!option.Option. out!)) (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. out!)) (= (core!option.Option./Some/0 (%Poly%core!option.Option. out!)) (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. Self%&. Self%& self! dslice! data! out!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!)) ))))
(set-info :comment ";; Function-Specs core::option::impl&%0::is_some")
(declare-fun ens%core!option.impl&%0.is_some. (Dcr Type core!option.Option. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (b! Bool)) (! (= (ens%core!option.impl&%0.is_some. T&. T& option! b!) (= b! (is-core!option.Option./Some_ option!))) :pattern ((ens%core!option.impl&%0.is_some. T&. T& option! b!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_lengthable")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. Self%&. Self%& self! dslice! data!) (and (=> %%global_location_label%%9 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%10 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. Self%&. Self%& self! dslice! data!)) )))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (l! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. Self%&. Self%& self! dslice! data! l!) (and (has_type l! BOOL) (= l! (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_lengthable. Self%&. Self%& self! dslice! data! l!)) )))
(set-info :comment ";; Function-Def lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_lengthable")
(set-info :comment ";; marshalling/SeqMarshalling_v.rs:48:10: 48:79 (#0)")
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%11 (is-core!option.Option./Some_ option!))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)) )))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_length")
(declare-fun req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly)) (! (= (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. Self%&. Self%& self! dslice! data!) (and (=> %%global_location_label%%12 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!))) (=> %%global_location_label%%13 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))) (=> %%global_location_label%%14 (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))))) :pattern ((req%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. Self%&. Self%& self! dslice! data!)) )))
(declare-fun ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (dslice! Poly) (data! Poly) (len! Poly)) (! (= (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. Self%&. Self%& self! dslice! data! len!) (and (has_type len! (UINT SZ)) (= len! (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.exec_length. Self%&. Self%& self! dslice! data! len!)) )))
(set-info :comment ";; Function-Def lib::marshalling::SeqMarshalling_v::SeqMarshal::exec_length")
(set-info :comment ";; marshalling/SeqMarshalling_v.rs:58:10: 58:78 (#0)")
(declare-const Self%&. Dcr)
(declare-const Self%& Type)
(declare-const len! Poly)
(declare-const self! Poly)
(declare-const dslice! Poly)
(declare-const data! Poly)
(declare-const tmp%1 Poly)
(declare-const tmp%2 Poly)
(assert fuel_defaults)
(assert (has_type self! Self%&))
(assert (has_type dslice! TYPE%lib!marshalling.Slice_v.Slice.))
(assert (has_type data! (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))
(assert (tr_bound%lib!marshalling.SeqMarshalling_v.SeqMarshal. Self%&. Self%&))
(assert (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.seq_valid.? Self%&. Self%& self!)))
(assert (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))
(assert (%B (lib!marshalling.SeqMarshalling_v.SeqMarshal.lengthable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%2 Bool)
(assert (not (and (=> %%location_label%%0 (req%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. Self%&. Self%& self! dslice! data!)) (=> (ens%lib!marshalling.SeqMarshalling_v.SeqMarshal.try_length. Self%&. Self%& self! dslice! data! tmp%1) (and (=> %%location_label%%1 (req%core!option.impl&%0.unwrap. $ (UINT SZ) (%Poly%core!option.Option. tmp%1))) (=> (ens%core!option.impl&%0.unwrap. $ (UINT SZ) (%Poly%core!option.Option. tmp%1) tmp%2) (=> (= len! tmp%2) (=> %%location_label%%2 (= len! (lib!marshalling.SeqMarshalling_v.SeqMarshal.length.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. dslice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))))))))))
(check-sat)
(exit)
