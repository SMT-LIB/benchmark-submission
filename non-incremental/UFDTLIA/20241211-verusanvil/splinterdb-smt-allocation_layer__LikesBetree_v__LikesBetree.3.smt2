(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module allocation_layer::LikesBetree_v::LikesBetree'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.submap_of. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.restrict. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.agrees. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.insert. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.remove. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.choose. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.contains. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.dom. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_empty. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_singleton. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_singleton_different. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_add. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_sub. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_ext_equal. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_ext_equal_deep. FuelId)
(declare-const fuel%vstd!multiset.axiom_len_empty. FuelId)
(declare-const fuel%vstd!multiset.axiom_len_singleton. FuelId)
(declare-const fuel%vstd!multiset.axiom_len_add. FuelId)
(declare-const fuel%vstd!multiset.axiom_len_sub. FuelId)
(declare-const fuel%vstd!multiset.axiom_count_le_len. FuelId)
(declare-const fuel%vstd!multiset.axiom_choose_count. FuelId)
(declare-const fuel%vstd!multiset.axiom_multiset_always_finite. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.no_duplicates. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.insert. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.remove. FuelId)
(declare-const fuel%vstd!seq_lib.seq_to_set_is_finite. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!set.impl&%0.disjoint. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_choose_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_choose_len. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.to_multiset. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.query. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.put. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.freeze_as. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush_memtable. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_grow. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_split. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_compact. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_noop. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.initialize. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next_by. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.strong_step. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_2. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_6. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_4. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_3. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_likes_noop_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_2. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_3. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_4. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_2. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_3. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_4. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_5. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_2. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_3. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_4. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_5. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_6. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_likes_noop. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_likes_noop_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush_memtable. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_grow. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_split. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_2. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_3. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_4. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_2. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_3. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_4. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_5. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_compact. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_1. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_2. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_3. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_4. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_5. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_6. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_noop. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_initialize_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_initialize_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_linked_lbl. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_Label_linked_lbl. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize_enabled. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_by. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong_by. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init_by. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.inv. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. FuelId)
(declare-const fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. FuelId)
(declare-const fuel%lib!allocation_layer.Likes_v.no_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%0.likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.root_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. FuelId)
(declare-const fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%0.repr. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%0.valid_buffers. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%0.is_sub_disk. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%0.agrees_with. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%0.modify_disk. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%1.query. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%1.query_from. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%1.queryable_contains. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%1.key_in_buffer. FuelId)
(declare-const fuel%lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.slice. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.dup. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.update. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left. FuelId)
(declare-const fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.contains. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.query. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.insert_ref. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.i. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.query_internal. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.empty. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.insert. FuelId)
(declare-const fuel%lib!betree.Buffer_v.total_keys. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%0.arrow_end. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%0.arrow_start. FuelId)
(declare-const fuel%lib!betree.Domain_v.total_domain. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!betree.Domain_v.impl&%1.contains. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.valid_child_index. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.occupied_child_index. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.my_domain. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.child_domain. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.flushed_ofs. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.is_leaf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.is_index. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.can_split_leaf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.split_leaf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.can_split_index. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.split_index. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.empty_root. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.key_in_domain. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.child_ptr. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%0.make_offset_map. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.entries_wf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.child_linked. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.get. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.agrees_with. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.is_sub_disk. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.valid_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.is_fresh. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%1.modify_disk. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%2.no_duplicates. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%2.repr. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%3.no_duplicates. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%3.repr. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%4.i. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%4.compact_key_value. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.wf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.has_root. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.root. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.valid_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.acyclic. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.the_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.finite_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.child_at_idx. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.child_for_key. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.get_rank. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.child_count. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.grow. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.can_split_parent. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.split_parent. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.can_flush. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.flush_buffers. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.flush. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.no_dangling_buffer_ptr. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.is_fresh. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.valid_view. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.push_memtable. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%5.valid_path_replacement. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%6.i_buffer. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_range. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%6.can_compact. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%6.compact. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%7.wf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%8.structure. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%8.node. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%8.result_at. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%8.result. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%8.child_linked_at. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%9.all_lines_wf. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%9.result_linked_at. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%9.valid. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%9.valid_for. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%10.subpath. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%10.valid. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%10.target. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%10.addrs_on_path. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%10.can_substitute. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%10.substitute. FuelId)
(declare-const fuel%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. FuelId)
(declare-const fuel%lib!betree.LinkedSeq_v.impl&%0.empty. FuelId)
(declare-const fuel%lib!betree.LinkedSeq_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.LinkedSeq_v.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!betree.LinkedSeq_v.impl&%0.contains. FuelId)
(declare-const fuel%lib!betree.LinkedSeq_v.impl&%0.slice. FuelId)
(declare-const fuel%lib!betree.LinkedSeq_v.impl&%0.extend. FuelId)
(declare-const fuel%lib!betree.LinkedSeq_v.impl&%0.update_subrange. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%0.i. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%0.query. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%0.apply_put. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%0.apply_puts. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%1.empty_memtable. FuelId)
(declare-const fuel%lib!betree.Memtable_v.impl&%1.drain. FuelId)
(declare-const fuel%lib!betree.OffsetMap_v.impl&%0.is_total. FuelId)
(declare-const fuel%lib!betree.OffsetMap_v.impl&%0.decrement. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.domain_to_pivots. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.num_ranges. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.update. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.subrange. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.can_insert. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.insert. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.bounded_key. FuelId)
(declare-const fuel%lib!betree.PivotTable_v.impl&%0.route. FuelId)
(declare-const fuel%lib!betree.SplitRequest_v.impl&%1.get_child_idx. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%0.arrow_e. FuelId)
(declare-const fuel%lib!spec.KeyType_t.to_key. FuelId)
(declare-const fuel%lib!spec.KeyType_t.to_element. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.lt. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.min_elem. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%2.largest_lte. FuelId)
(declare-const fuel%lib!spec.Messages_t.default_value. FuelId)
(declare-const fuel%lib!spec.Messages_t.nop_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.combine_deltas. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.apply_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.merge. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.submap_of. fuel%vstd!map_lib.impl&%0.spec_le. fuel%vstd!map_lib.impl&%0.restrict. fuel%vstd!map_lib.impl&%0.agrees. fuel%vstd!multiset.impl&%0.insert. fuel%vstd!multiset.impl&%0.remove. fuel%vstd!multiset.impl&%0.subset_of. fuel%vstd!multiset.impl&%0.spec_le. fuel%vstd!multiset.impl&%0.choose. fuel%vstd!multiset.impl&%0.contains. fuel%vstd!multiset.impl&%0.dom. fuel%vstd!multiset.axiom_multiset_empty. fuel%vstd!multiset.axiom_multiset_singleton. fuel%vstd!multiset.axiom_multiset_singleton_different. fuel%vstd!multiset.axiom_multiset_add. fuel%vstd!multiset.axiom_multiset_sub. fuel%vstd!multiset.axiom_multiset_ext_equal. fuel%vstd!multiset.axiom_multiset_ext_equal_deep. fuel%vstd!multiset.axiom_len_empty. fuel%vstd!multiset.axiom_len_singleton. fuel%vstd!multiset.axiom_len_add. fuel%vstd!multiset.axiom_len_sub. fuel%vstd!multiset.axiom_count_le_len. fuel%vstd!multiset.axiom_choose_count. fuel%vstd!multiset.axiom_multiset_always_finite. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.no_duplicates. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.impl&%0.insert. fuel%vstd!seq_lib.impl&%0.remove. fuel%vstd!seq_lib.seq_to_set_is_finite. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_le. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.impl&%0.choose. fuel%vstd!set.impl&%0.disjoint. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_choose_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!set.axiom_set_choose_len. fuel%vstd!set_lib.impl&%0.to_multiset. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.query. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.put. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.freeze_as. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush_memtable. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_grow. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_split. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_compact. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_noop. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.initialize. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next_by. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step. fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.strong_step. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_2. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_6. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_4. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_3. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_likes_noop_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_1. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_1. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_1. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_2. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_3. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_4. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_1. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_2. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_3. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_4. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_5. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_1. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_2. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_3. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_4. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_5. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_6. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_likes_noop. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_likes_noop_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush_memtable. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_1. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_grow. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_1. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_split. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_1. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_2. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_3. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_4. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_1. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_2. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_3. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_4. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_5. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_compact. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_1. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_2. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_3. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_4. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_5. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_6. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_noop. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_dummy_to_use_type_params. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_initialize_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_initialize. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_initialize_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_dummy_to_use_type_params. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_linked_lbl. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_Label_linked_lbl. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_strong. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_enabled. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_strong. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_enabled. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_strong. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_enabled. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_strong. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_enabled. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_strong. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_enabled. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_strong. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_enabled. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_strong. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_enabled. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize_enabled. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_by. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong_by. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init_by. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.inv. fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh. fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains. fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly. fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow. fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to. fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. fuel%lib!allocation_layer.Likes_v.no_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%0.likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.root_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. fuel%lib!betree.BufferDisk_v.impl&%0.repr. fuel%lib!betree.BufferDisk_v.impl&%0.valid_buffers. fuel%lib!betree.BufferDisk_v.impl&%0.is_sub_disk. fuel%lib!betree.BufferDisk_v.impl&%0.agrees_with. fuel%lib!betree.BufferDisk_v.impl&%0.modify_disk. fuel%lib!betree.BufferDisk_v.impl&%1.query. fuel%lib!betree.BufferDisk_v.impl&%1.query_from. fuel%lib!betree.BufferDisk_v.impl&%1.queryable_contains. fuel%lib!betree.BufferDisk_v.impl&%1.key_in_buffer. fuel%lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered. fuel%lib!betree.BufferOffsets_v.impl&%0.len. fuel%lib!betree.BufferOffsets_v.impl&%0.slice. fuel%lib!betree.BufferOffsets_v.impl&%0.dup. fuel%lib!betree.BufferOffsets_v.impl&%0.update. fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte. fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte. fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left. fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. fuel%lib!betree.Buffer_v.impl&%0.contains. fuel%lib!betree.Buffer_v.impl&%0.query. fuel%lib!betree.Buffer_v.impl&%0.insert_ref. fuel%lib!betree.Buffer_v.impl&%0.is_empty. fuel%lib!betree.Buffer_v.impl&%0.i. fuel%lib!betree.Buffer_v.impl&%1.query_internal. fuel%lib!betree.Buffer_v.impl&%1.empty. fuel%lib!betree.Buffer_v.impl&%1.insert. fuel%lib!betree.Buffer_v.total_keys. fuel%lib!betree.Domain_v.impl&%0.arrow_end. fuel%lib!betree.Domain_v.impl&%0.arrow_start. fuel%lib!betree.Domain_v.total_domain. fuel%lib!betree.Domain_v.impl&%1.wf. fuel%lib!betree.Domain_v.impl&%1.contains. fuel%lib!betree.LinkedBetree_v.impl&%0.wf. fuel%lib!betree.LinkedBetree_v.impl&%0.valid_child_index. fuel%lib!betree.LinkedBetree_v.impl&%0.occupied_child_index. fuel%lib!betree.LinkedBetree_v.impl&%0.my_domain. fuel%lib!betree.LinkedBetree_v.impl&%0.child_domain. fuel%lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq. fuel%lib!betree.LinkedBetree_v.impl&%0.flushed_ofs. fuel%lib!betree.LinkedBetree_v.impl&%0.is_leaf. fuel%lib!betree.LinkedBetree_v.impl&%0.is_index. fuel%lib!betree.LinkedBetree_v.impl&%0.can_split_leaf. fuel%lib!betree.LinkedBetree_v.impl&%0.split_leaf. fuel%lib!betree.LinkedBetree_v.impl&%0.can_split_index. fuel%lib!betree.LinkedBetree_v.impl&%0.split_index. fuel%lib!betree.LinkedBetree_v.impl&%0.empty_root. fuel%lib!betree.LinkedBetree_v.impl&%0.key_in_domain. fuel%lib!betree.LinkedBetree_v.impl&%0.child_ptr. fuel%lib!betree.LinkedBetree_v.impl&%0.make_offset_map. fuel%lib!betree.LinkedBetree_v.impl&%1.entries_wf. fuel%lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr. fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs. fuel%lib!betree.LinkedBetree_v.impl&%1.child_linked. fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children. fuel%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs. fuel%lib!betree.LinkedBetree_v.impl&%1.wf. fuel%lib!betree.LinkedBetree_v.impl&%1.get. fuel%lib!betree.LinkedBetree_v.impl&%1.agrees_with. fuel%lib!betree.LinkedBetree_v.impl&%1.is_sub_disk. fuel%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank. fuel%lib!betree.LinkedBetree_v.impl&%1.valid_ranking. fuel%lib!betree.LinkedBetree_v.impl&%1.is_fresh. fuel%lib!betree.LinkedBetree_v.impl&%1.modify_disk. fuel%lib!betree.LinkedBetree_v.impl&%2.no_duplicates. fuel%lib!betree.LinkedBetree_v.impl&%2.repr. fuel%lib!betree.LinkedBetree_v.impl&%3.no_duplicates. fuel%lib!betree.LinkedBetree_v.impl&%3.repr. fuel%lib!betree.LinkedBetree_v.impl&%4.i. fuel%lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain. fuel%lib!betree.LinkedBetree_v.impl&%4.compact_key_value. fuel%lib!betree.LinkedBetree_v.impl&%5.wf. fuel%lib!betree.LinkedBetree_v.impl&%5.has_root. fuel%lib!betree.LinkedBetree_v.impl&%5.root. fuel%lib!betree.LinkedBetree_v.impl&%5.valid_ranking. fuel%lib!betree.LinkedBetree_v.impl&%5.acyclic. fuel%lib!betree.LinkedBetree_v.impl&%5.the_ranking. fuel%lib!betree.LinkedBetree_v.impl&%5.finite_ranking. fuel%lib!betree.LinkedBetree_v.impl&%5.child_at_idx. fuel%lib!betree.LinkedBetree_v.impl&%5.child_for_key. fuel%lib!betree.LinkedBetree_v.impl&%5.get_rank. fuel%lib!betree.LinkedBetree_v.impl&%5.child_count. fuel%lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable. fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs. fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer. fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs. fuel%lib!betree.LinkedBetree_v.impl&%5.grow. fuel%lib!betree.LinkedBetree_v.impl&%5.can_split_parent. fuel%lib!betree.LinkedBetree_v.impl&%5.split_parent. fuel%lib!betree.LinkedBetree_v.impl&%5.can_flush. fuel%lib!betree.LinkedBetree_v.impl&%5.flush_buffers. fuel%lib!betree.LinkedBetree_v.impl&%5.flush. fuel%lib!betree.LinkedBetree_v.impl&%5.no_dangling_buffer_ptr. fuel%lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv. fuel%lib!betree.LinkedBetree_v.impl&%5.is_fresh. fuel%lib!betree.LinkedBetree_v.impl&%5.valid_view. fuel%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree. fuel%lib!betree.LinkedBetree_v.impl&%5.push_memtable. fuel%lib!betree.LinkedBetree_v.impl&%5.valid_path_replacement. fuel%lib!betree.LinkedBetree_v.impl&%6.i_buffer. fuel%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain. fuel%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_range. fuel%lib!betree.LinkedBetree_v.impl&%6.can_compact. fuel%lib!betree.LinkedBetree_v.impl&%6.compact. fuel%lib!betree.LinkedBetree_v.impl&%7.wf. fuel%lib!betree.LinkedBetree_v.impl&%8.structure. fuel%lib!betree.LinkedBetree_v.impl&%8.node. fuel%lib!betree.LinkedBetree_v.impl&%8.result_at. fuel%lib!betree.LinkedBetree_v.impl&%8.result. fuel%lib!betree.LinkedBetree_v.impl&%8.child_linked_at. fuel%lib!betree.LinkedBetree_v.impl&%9.all_lines_wf. fuel%lib!betree.LinkedBetree_v.impl&%9.result_linked_at. fuel%lib!betree.LinkedBetree_v.impl&%9.valid. fuel%lib!betree.LinkedBetree_v.impl&%9.valid_for. fuel%lib!betree.LinkedBetree_v.impl&%10.subpath. fuel%lib!betree.LinkedBetree_v.impl&%10.valid. fuel%lib!betree.LinkedBetree_v.impl&%10.target. fuel%lib!betree.LinkedBetree_v.impl&%10.addrs_on_path. fuel%lib!betree.LinkedBetree_v.impl&%10.can_substitute. fuel%lib!betree.LinkedBetree_v.impl&%10.substitute. fuel%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. fuel%lib!betree.LinkedSeq_v.impl&%0.empty. fuel%lib!betree.LinkedSeq_v.impl&%0.len. fuel%lib!betree.LinkedSeq_v.impl&%0.spec_index. fuel%lib!betree.LinkedSeq_v.impl&%0.contains. fuel%lib!betree.LinkedSeq_v.impl&%0.slice. fuel%lib!betree.LinkedSeq_v.impl&%0.extend. fuel%lib!betree.LinkedSeq_v.impl&%0.update_subrange. fuel%lib!betree.Memtable_v.impl&%0.i. fuel%lib!betree.Memtable_v.impl&%0.query. fuel%lib!betree.Memtable_v.impl&%0.is_empty. fuel%lib!betree.Memtable_v.impl&%0.apply_put. fuel%lib!betree.Memtable_v.impl&%0.apply_puts. fuel%lib!betree.Memtable_v.impl&%1.empty_memtable. fuel%lib!betree.Memtable_v.impl&%1.drain. fuel%lib!betree.OffsetMap_v.impl&%0.is_total. fuel%lib!betree.OffsetMap_v.impl&%0.decrement. fuel%lib!betree.PivotTable_v.domain_to_pivots. fuel%lib!betree.PivotTable_v.impl&%0.num_ranges. fuel%lib!betree.PivotTable_v.impl&%0.wf. fuel%lib!betree.PivotTable_v.impl&%0.len. fuel%lib!betree.PivotTable_v.impl&%0.spec_index. fuel%lib!betree.PivotTable_v.impl&%0.update. fuel%lib!betree.PivotTable_v.impl&%0.subrange. fuel%lib!betree.PivotTable_v.impl&%0.can_insert. fuel%lib!betree.PivotTable_v.impl&%0.insert. fuel%lib!betree.PivotTable_v.impl&%0.bounded_key. fuel%lib!betree.PivotTable_v.impl&%0.route. fuel%lib!betree.SplitRequest_v.impl&%1.get_child_idx. fuel%lib!spec.KeyType_t.impl&%0.arrow_e. fuel%lib!spec.KeyType_t.to_key. fuel%lib!spec.KeyType_t.to_element. fuel%lib!spec.KeyType_t.impl&%1.lte. fuel%lib!spec.KeyType_t.impl&%2.lte. fuel%lib!spec.KeyType_t.impl&%2.lt. fuel%lib!spec.KeyType_t.impl&%2.min_elem. fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted. fuel%lib!spec.KeyType_t.impl&%2.largest_lte. fuel%lib!spec.Messages_t.default_value. fuel%lib!spec.Messages_t.nop_delta. fuel%lib!spec.Messages_t.impl&%1.combine_deltas. fuel%lib!spec.Messages_t.impl&%1.apply_delta. fuel%lib!spec.Messages_t.impl&%1.merge. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (and (fuel_bool_default fuel%vstd!multiset.axiom_multiset_empty.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_singleton.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_singleton_different.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_add.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_sub.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_ext_equal.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_ext_equal_deep.) (fuel_bool_default fuel%vstd!multiset.axiom_len_empty.) (fuel_bool_default fuel%vstd!multiset.axiom_len_singleton.) (fuel_bool_default fuel%vstd!multiset.axiom_len_add.) (fuel_bool_default fuel%vstd!multiset.axiom_len_sub.) (fuel_bool_default fuel%vstd!multiset.axiom_count_le_len.) (fuel_bool_default fuel%vstd!multiset.axiom_choose_count.) (fuel_bool_default fuel%vstd!multiset.axiom_multiset_always_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (fuel_bool_default fuel%vstd!seq_lib.seq_to_set_is_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_choose_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.) (fuel_bool_default fuel%vstd!set.axiom_set_choose_len.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. 0)
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. 0)
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. 0)
(declare-sort vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. 0)
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. 0)
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. 0)
(declare-sort vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.KeyType_t.Element.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort vstd!set.Set<lib!spec.KeyType_t.Key.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!betree.LinkedBetree_v.LinkedBetreeVars.State. 0) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. 0) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. 0) (lib!allocation_layer.LikesBetree_v.LikesBetree.State. 0) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step. 0) (lib!allocation_layer.LikesBetree_v.LikesBetree.Config. 0) (lib!allocation_layer.LikesBetree_v.LikesBetree.Label. 0) (lib!abstract_system.MsgHistory_v.KeyedMessage. 0) (lib!abstract_system.MsgHistory_v.MsgHistory. 0) (lib!abstract_system.StampedMap_v.Stamped. 0) (lib!betree.BufferDisk_v.BufferDisk. 0) (lib!betree.BufferOffsets_v.BufferOffsets. 0) (lib!betree.Buffer_v.SimpleBuffer. 0) (lib!betree.Domain_v.Domain. 0) (lib!betree.LinkedBetree_v.BetreeNode. 0) (lib!betree.LinkedBetree_v.DiskView. 0) (lib!betree.LinkedBetree_v.TwoAddrs. 0) (lib!betree.LinkedBetree_v.SplitAddrs. 0) (lib!betree.LinkedBetree_v.LinkedBetree. 0) (lib!betree.LinkedBetree_v.QueryReceiptLine. 0) (lib!betree.LinkedBetree_v.QueryReceipt. 0) (lib!betree.LinkedBetree_v.Path. 0) (lib!betree.LinkedSeq_v.LinkedSeq. 0) (lib!betree.Memtable_v.Memtable. 0) (lib!betree.OffsetMap_v.OffsetMap. 0) (lib!betree.PivotTable_v.PivotTable. 0) (lib!betree.SplitRequest_v.SplitRequest. 0) (lib!spec.AsyncDisk_t.Address. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.KeyType_t.Element. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/?memtable lib!betree.Memtable_v.Memtable.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/?linked lib!betree.LinkedBetree_v.LinkedBetree.))) ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query/?0 lib!betree.LinkedBetree_v.QueryReceipt.)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./put ) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./freeze_as ) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/?0 lib!betree.Memtable_v.Memtable.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/?1 lib!betree.LinkedBetree_v.LinkedBetree.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/?2 lib!betree.LinkedBetree_v.TwoAddrs.)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow/?0 lib!spec.AsyncDisk_t.Address.)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/?0 lib!betree.LinkedBetree_v.LinkedBetree.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/?1 lib!betree.LinkedBetree_v.Path.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/?2 lib!betree.SplitRequest_v.SplitRequest.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/?3 lib!betree.LinkedBetree_v.SplitAddrs.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/?4 vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?0 lib!betree.LinkedBetree_v.LinkedBetree.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?1 lib!betree.LinkedBetree_v.Path.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?2 Int) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?3 Int) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?4 lib!betree.LinkedBetree_v.TwoAddrs.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?5 vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?0 lib!betree.LinkedBetree_v.LinkedBetree.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?1 lib!betree.LinkedBetree_v.Path.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?2 Int) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?3 Int) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?4 Poly) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?5 lib!betree.LinkedBetree_v.TwoAddrs.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?6 vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_noop ) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params/?0 lib!betree.LinkedBetree_v.LinkedBetreeVars.State.))) ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/?end_lsn Int) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/?key lib!spec.KeyType_t.Key.) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/?value lib!spec.Messages_t.Value.)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put/?puts lib!abstract_system.MsgHistory_v.MsgHistory.)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs/?stamped_betree lib!abstract_system.StampedMap_v.Stamped.)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Internal )) ((lib!allocation_layer.LikesBetree_v.LikesBetree.State./State (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/?betree lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/?betree_likes vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/?buffer_likes vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.))) ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop/?0 lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/?0 lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/?1 lib!betree.LinkedBetree_v.TwoAddrs.)) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/?0 lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/?1 lib!spec.AsyncDisk_t.Address.)) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/?0 lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/?1 lib!betree.LinkedBetree_v.Path.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/?2 lib!betree.SplitRequest_v.SplitRequest.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/?3 lib!betree.LinkedBetree_v.SplitAddrs.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/?4 vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?0 lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?1 lib!betree.LinkedBetree_v.Path.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?2 Int) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?3 Int) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?4 lib!betree.LinkedBetree_v.TwoAddrs.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?5 vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?0 lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?1 lib!betree.LinkedBetree_v.Path.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?2 Int) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?3 Int) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?4 lib!betree.Buffer_v.SimpleBuffer.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?5 lib!betree.LinkedBetree_v.TwoAddrs.) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?6 vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_noop ) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params/?0 lib!allocation_layer.LikesBetree_v.LikesBetree.State.))) ((lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize/?0 lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params/?0 lib!allocation_layer.LikesBetree_v.LikesBetree.State.))) ((lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/?linked_lbl lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.))) ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key lib!spec.KeyType_t.Key.) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message lib!spec.Messages_t.Message.))) ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start Int) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end Int))) ((lib!abstract_system.StampedMap_v.Stamped./Stamped (lib!abstract_system.StampedMap_v.Stamped./Stamped/?value Poly) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?seq_end Int))) ((lib!betree.BufferDisk_v.BufferDisk./BufferDisk (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/?entries Poly))) ((lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/?offsets vstd!seq.Seq<nat.>.))) ((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.))) ((lib!betree.Domain_v.Domain./EmptyDomain ) (lib!betree.Domain_v.Domain./Domain (lib!betree.Domain_v.Domain./Domain/?start lib!spec.KeyType_t.Element.) (lib!betree.Domain_v.Domain./Domain/?end lib!spec.KeyType_t.Element.))) ((lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?buffers lib!betree.LinkedSeq_v.LinkedSeq.) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?pivots lib!betree.PivotTable_v.PivotTable.) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?children vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?flushed lib!betree.BufferOffsets_v.BufferOffsets.))) ((lib!betree.LinkedBetree_v.DiskView./DiskView (lib!betree.LinkedBetree_v.DiskView./DiskView/?entries vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.))) ((lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/?addr1 lib!spec.AsyncDisk_t.Address.) (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/?addr2 lib!spec.AsyncDisk_t.Address.))) ((lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/?left lib!spec.AsyncDisk_t.Address.) (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/?right lib!spec.AsyncDisk_t.Address.) (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/?parent lib!spec.AsyncDisk_t.Address.))) ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?root core!option.Option.) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?dv lib!betree.LinkedBetree_v.DiskView.) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?buffer_dv lib!betree.BufferDisk_v.BufferDisk.))) ((lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/?linked lib!betree.LinkedBetree_v.LinkedBetree.) (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/?result lib!spec.Messages_t.Message.))) ((lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/?key lib!spec.KeyType_t.Key.) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/?linked lib!betree.LinkedBetree_v.LinkedBetree.) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/?lines Poly))) ((lib!betree.LinkedBetree_v.Path./Path (lib!betree.LinkedBetree_v.Path./Path/?linked lib!betree.LinkedBetree_v.LinkedBetree.) (lib!betree.LinkedBetree_v.Path./Path/?key lib!spec.KeyType_t.Key.) (lib!betree.LinkedBetree_v.Path./Path/?depth Int))) ((lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/?addrs vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.))) ((lib!betree.Memtable_v.Memtable./Memtable (lib!betree.Memtable_v.Memtable./Memtable/?buffer Poly) (lib!betree.Memtable_v.Memtable./Memtable/?seq_end Int))) ((lib!betree.OffsetMap_v.OffsetMap./OffsetMap (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/?offsets vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.))) ((lib!betree.PivotTable_v.PivotTable./PivotTable (lib!betree.PivotTable_v.PivotTable./PivotTable/?pivots vstd!seq.Seq<lib!spec.KeyType_t.Element.>.))) ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?child_idx Int) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?split_key lib!spec.KeyType_t.Key.)) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_idx Int) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_pivot_idx Int))) ((lib!spec.AsyncDisk_t.Address./Address (lib!spec.AsyncDisk_t.Address./Address/?au Int) (lib!spec.AsyncDisk_t.Address./Address/?page Int))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.KeyType_t.Element./Max ) (lib!spec.KeyType_t.Element./Elem (lib!spec.KeyType_t.Element./Elem/?e Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) lib!betree.Memtable_v.Memtable.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query/0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.QueryReceipt.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.Memtable_v.Memtable.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/1 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/2 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.TwoAddrs.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow/0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/1 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.Path.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/2 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.SplitRequest_v.SplitRequest.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/3 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.SplitAddrs.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/4 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/1 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.Path.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/2 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) Int)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/3 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) Int)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/4 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.TwoAddrs.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/5 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/1 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.Path.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/2 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) Int)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/3 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) Int)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/4 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) Poly)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/5 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.TwoAddrs.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/6 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params/0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/end_lsn (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) Int)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/key (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/value (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) lib!spec.Messages_t.Value.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put/puts (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs/stamped_betree (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (lib!allocation_layer.LikesBetree_v.LikesBetree.State.) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (lib!allocation_layer.LikesBetree_v.LikesBetree.State.) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (lib!allocation_layer.LikesBetree_v.LikesBetree.State.) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop/0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/1 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.TwoAddrs.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/1 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/1 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.Path.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/2 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.SplitRequest_v.SplitRequest.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/3 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.SplitAddrs.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/4 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/1 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.Path.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/2 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) Int)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/3 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) Int)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/4 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.TwoAddrs.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/5 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/1 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.Path.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/2 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) Int)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/3 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) Int)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/4 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/5 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!betree.LinkedBetree_v.TwoAddrs.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/6 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params/0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) lib!allocation_layer.LikesBetree_v.LikesBetree.State.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize/0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Config.) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params/0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Config.) lib!allocation_layer.LikesBetree_v.LikesBetree.State.)
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.KeyType_t.Key.)
(declare-fun lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (lib!abstract_system.MsgHistory_v.KeyedMessage.) lib!spec.Messages_t.Message.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (lib!abstract_system.MsgHistory_v.MsgHistory.) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (lib!abstract_system.MsgHistory_v.MsgHistory.) Int)
(declare-fun lib!abstract_system.StampedMap_v.Stamped./Stamped/value (lib!abstract_system.StampedMap_v.Stamped.) Poly)
(declare-fun lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (lib!abstract_system.StampedMap_v.Stamped.) Int)
(declare-fun lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (lib!betree.BufferDisk_v.BufferDisk.) Poly)
(declare-fun lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (lib!betree.BufferOffsets_v.BufferOffsets.) vstd!seq.Seq<nat.>.)
(declare-fun lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (lib!betree.Buffer_v.SimpleBuffer.) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun lib!betree.Domain_v.Domain./Domain/start (lib!betree.Domain_v.Domain.) lib!spec.KeyType_t.Element.)
(declare-fun lib!betree.Domain_v.Domain./Domain/end (lib!betree.Domain_v.Domain.) lib!spec.KeyType_t.Element.)
(declare-fun lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (lib!betree.LinkedBetree_v.BetreeNode.) lib!betree.LinkedSeq_v.LinkedSeq.)
(declare-fun lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (lib!betree.LinkedBetree_v.BetreeNode.) lib!betree.PivotTable_v.PivotTable.)
(declare-fun lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (lib!betree.LinkedBetree_v.BetreeNode.) vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.)
(declare-fun lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (lib!betree.LinkedBetree_v.BetreeNode.) lib!betree.BufferOffsets_v.BufferOffsets.)
(declare-fun lib!betree.LinkedBetree_v.DiskView./DiskView/entries (lib!betree.LinkedBetree_v.DiskView.) vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.)
(declare-fun lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (lib!betree.LinkedBetree_v.TwoAddrs.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (lib!betree.LinkedBetree_v.TwoAddrs.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left (lib!betree.LinkedBetree_v.SplitAddrs.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right (lib!betree.LinkedBetree_v.SplitAddrs.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent (lib!betree.LinkedBetree_v.SplitAddrs.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (lib!betree.LinkedBetree_v.LinkedBetree.) core!option.Option.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (lib!betree.LinkedBetree_v.LinkedBetree.) lib!betree.LinkedBetree_v.DiskView.)
(declare-fun lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (lib!betree.LinkedBetree_v.LinkedBetree.) lib!betree.BufferDisk_v.BufferDisk.)
(declare-fun lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (lib!betree.LinkedBetree_v.QueryReceiptLine.) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/result (lib!betree.LinkedBetree_v.QueryReceiptLine.) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key (lib!betree.LinkedBetree_v.QueryReceipt.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked (lib!betree.LinkedBetree_v.QueryReceipt.) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (lib!betree.LinkedBetree_v.QueryReceipt.) Poly)
(declare-fun lib!betree.LinkedBetree_v.Path./Path/linked (lib!betree.LinkedBetree_v.Path.) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun lib!betree.LinkedBetree_v.Path./Path/key (lib!betree.LinkedBetree_v.Path.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.LinkedBetree_v.Path./Path/depth (lib!betree.LinkedBetree_v.Path.) Int)
(declare-fun lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (lib!betree.LinkedSeq_v.LinkedSeq.) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.Memtable_v.Memtable./Memtable/buffer (lib!betree.Memtable_v.Memtable.) Poly)
(declare-fun lib!betree.Memtable_v.Memtable./Memtable/seq_end (lib!betree.Memtable_v.Memtable.) Int)
(declare-fun lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (lib!betree.OffsetMap_v.OffsetMap.) vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)
(declare-fun lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (lib!betree.PivotTable_v.PivotTable.) vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (lib!betree.SplitRequest_v.SplitRequest.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (lib!betree.SplitRequest_v.SplitRequest.) Int)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/au (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/page (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.KeyType_t.Element./Elem/e (lib!spec.KeyType_t.Element.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!multiset.Multiset. (Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Dcr Type) Type)
(declare-fun TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (Dcr Type) Type)
(declare-const TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. Type)
(declare-const TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State. Type)
(declare-const TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. Type)
(declare-const TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. Type)
(declare-const TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. Type)
(declare-const TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. Type)
(declare-fun TYPE%lib!abstract_system.StampedMap_v.Stamped. (Dcr Type) Type)
(declare-fun TYPE%lib!betree.BufferDisk_v.BufferDisk. (Dcr Type) Type)
(declare-const TYPE%lib!betree.BufferOffsets_v.BufferOffsets. Type)
(declare-const TYPE%lib!betree.Buffer_v.SimpleBuffer. Type)
(declare-const TYPE%lib!betree.Domain_v.Domain. Type)
(declare-const TYPE%lib!betree.LinkedBetree_v.BetreeNode. Type)
(declare-const TYPE%lib!betree.LinkedBetree_v.DiskView. Type)
(declare-const TYPE%lib!betree.LinkedBetree_v.TwoAddrs. Type)
(declare-const TYPE%lib!betree.LinkedBetree_v.SplitAddrs. Type)
(declare-fun TYPE%lib!betree.LinkedBetree_v.LinkedBetree. (Dcr Type) Type)
(declare-fun TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. (Dcr Type) Type)
(declare-fun TYPE%lib!betree.LinkedBetree_v.QueryReceipt. (Dcr Type) Type)
(declare-fun TYPE%lib!betree.LinkedBetree_v.Path. (Dcr Type) Type)
(declare-const TYPE%lib!betree.LinkedSeq_v.LinkedSeq. Type)
(declare-fun TYPE%lib!betree.Memtable_v.Memtable. (Dcr Type) Type)
(declare-const TYPE%lib!betree.OffsetMap_v.OffsetMap. Type)
(declare-const TYPE%lib!betree.PivotTable_v.PivotTable. Type)
(declare-const TYPE%lib!betree.SplitRequest_v.SplitRequest. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.Address. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.KeyType_t.Element. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly) vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (Poly) vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq.Seq<lib!spec.KeyType_t.Element.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.Set<lib!spec.KeyType_t.Key.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-fun Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)
(declare-fun Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)
(declare-fun Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State.) Poly)
(declare-fun %Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly) lib!allocation_layer.LikesBetree_v.LikesBetree.State.)
(declare-fun Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) Poly)
(declare-fun %Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (Poly) lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)
(declare-fun Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. (lib!allocation_layer.LikesBetree_v.LikesBetree.Config.) Poly)
(declare-fun %Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. (Poly) lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)
(declare-fun Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) Poly)
(declare-fun %Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. (Poly) lib!allocation_layer.LikesBetree_v.LikesBetree.Label.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly) lib!abstract_system.MsgHistory_v.KeyedMessage.)
(declare-fun Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory.) Poly)
(declare-fun %Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(declare-fun Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped.) Poly)
(declare-fun %Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly) lib!abstract_system.StampedMap_v.Stamped.)
(declare-fun Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.BufferDisk_v.BufferDisk.) Poly)
(declare-fun %Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly) lib!betree.BufferDisk_v.BufferDisk.)
(declare-fun Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.BufferOffsets.) Poly)
(declare-fun %Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(declare-fun Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.SimpleBuffer.) Poly)
(declare-fun %Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain.) Poly)
(declare-fun %Poly%lib!betree.Domain_v.Domain. (Poly) lib!betree.Domain_v.Domain.)
(declare-fun Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.BetreeNode.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly) lib!betree.LinkedBetree_v.BetreeNode.)
(declare-fun Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.DiskView.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.DiskView. (Poly) lib!betree.LinkedBetree_v.DiskView.)
(declare-fun Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!betree.LinkedBetree_v.TwoAddrs.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.TwoAddrs. (Poly) lib!betree.LinkedBetree_v.TwoAddrs.)
(declare-fun Poly%lib!betree.LinkedBetree_v.SplitAddrs. (lib!betree.LinkedBetree_v.SplitAddrs.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.SplitAddrs. (Poly) lib!betree.LinkedBetree_v.SplitAddrs.)
(declare-fun Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetree.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (lib!betree.LinkedBetree_v.QueryReceiptLine.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (Poly) lib!betree.LinkedBetree_v.QueryReceiptLine.)
(declare-fun Poly%lib!betree.LinkedBetree_v.QueryReceipt. (lib!betree.LinkedBetree_v.QueryReceipt.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.QueryReceipt. (Poly) lib!betree.LinkedBetree_v.QueryReceipt.)
(declare-fun Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.Path.) Poly)
(declare-fun %Poly%lib!betree.LinkedBetree_v.Path. (Poly) lib!betree.LinkedBetree_v.Path.)
(declare-fun Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.LinkedSeq.) Poly)
(declare-fun %Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly) lib!betree.LinkedSeq_v.LinkedSeq.)
(declare-fun Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable.) Poly)
(declare-fun %Poly%lib!betree.Memtable_v.Memtable. (Poly) lib!betree.Memtable_v.Memtable.)
(declare-fun Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.OffsetMap_v.OffsetMap.) Poly)
(declare-fun %Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly) lib!betree.OffsetMap_v.OffsetMap.)
(declare-fun Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.PivotTable.) Poly)
(declare-fun %Poly%lib!betree.PivotTable_v.PivotTable. (Poly) lib!betree.PivotTable_v.PivotTable.)
(declare-fun Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest.) Poly)
(declare-fun %Poly%lib!betree.SplitRequest_v.SplitRequest. (Poly) lib!betree.SplitRequest_v.SplitRequest.)
(declare-fun Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.Address. (Poly) lib!spec.AsyncDisk_t.Address.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Element. (Poly) lib!spec.KeyType_t.Element.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (= x (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode.)) (= x (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.)) (! (= x (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. x))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (= x (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)))) )))
(assert (forall ((x vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) (= x (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Element.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) (= x (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. T&. T&)) (= x (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. x)))) :pattern ((has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_memtable! lib!betree.Memtable_v.Memtable.) (_linked! lib!betree.LinkedBetree_v.LinkedBetree.)) (! (=> (and (has_type (Poly%lib!betree.Memtable_v.Memtable. _memtable!) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. _linked!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State _memtable! _linked!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State _memtable! _linked!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/?memtable x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. T&. T&)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. x))) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/?linked x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. T&. T&))) )))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State) c))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State_ x) (height_lt (height (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. x)))) :pattern ((height (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable x)))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked x)))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (= x (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! lib!betree.LinkedBetree_v.QueryReceipt.)) (! (=> (has_type (Poly%lib!betree.LinkedBetree_v.QueryReceipt. _0!) (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query _0!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query _0!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query/0 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query/?0 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.QueryReceipt. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./put) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./put) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./freeze_as) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./freeze_as) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! lib!betree.Memtable_v.Memtable.) (_1! lib!betree.LinkedBetree_v.LinkedBetree.) (_2! lib!betree.LinkedBetree_v.TwoAddrs.)) (! (=> (and (has_type (Poly%lib!betree.Memtable_v.Memtable. _0!) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. _1!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. _2!) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable _0! _1! _2!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable _0! _1! _2!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/0 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/?0 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/1 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/?1 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/1 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/2 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/?2 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/2 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! lib!spec.AsyncDisk_t.Address.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _0!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow _0!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow _0!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow/0 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow/?0 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! lib!betree.LinkedBetree_v.LinkedBetree.) (_1! lib!betree.LinkedBetree_v.Path.) (_2! lib!betree.SplitRequest_v.SplitRequest.) (_3! lib!betree.LinkedBetree_v.SplitAddrs.) (_4! vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (=> (and (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. _0!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.Path. _1!) (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. _2!) TYPE%lib!betree.SplitRequest_v.SplitRequest.) (has_type (Poly%lib!betree.LinkedBetree_v.SplitAddrs. _3!) TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split _0! _1! _2! _3! _4!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split _0! _1! _2! _3! _4!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/0 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/?0 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/1 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/?1 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/1 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/2 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/?2 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/2 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/3 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/?3 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/3 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.SplitAddrs. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/4 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/?4 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/4 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! lib!betree.LinkedBetree_v.LinkedBetree.) (_1! lib!betree.LinkedBetree_v.Path.) (_2! Int) (_3! Int) (_4! lib!betree.LinkedBetree_v.TwoAddrs.) (_5! vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (=> (and (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. _0!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.Path. _1!) (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (<= 0 _2!) (<= 0 _3!) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. _4!) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush _0! _1! _2! _3! _4! _5!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush _0! _1! _2! _3! _4! _5!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/0 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?0 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/1 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?1 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/1 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/2 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?2 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/2 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (<= 0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/3 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?3 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/3 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (<= 0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/4 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?4 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/4 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/5 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/?5 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/5 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! lib!betree.LinkedBetree_v.LinkedBetree.) (_1! lib!betree.LinkedBetree_v.Path.) (_2! Int) (_3! Int) (_4! Poly) (_5! lib!betree.LinkedBetree_v.TwoAddrs.) (_6! vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (=> (and (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. _0!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.Path. _1!) (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (<= 0 _2!) (<= 0 _3!) (has_type _4! T&) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. _5!) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact _0! _1! _2! _3! _4! _5! _6!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact _0! _1! _2! _3! _4! _5! _6!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/0 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?0 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/1 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?1 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/1 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/2 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?2 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/2 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (<= 0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/3 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?3 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/3 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (<= 0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/4 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?4 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/4 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) T&)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/5 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?5 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/5 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/5 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/5 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/6 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/?6 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/6 x)) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_noop) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_noop) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (! (=> (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. _0!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params _0!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params _0!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params/0 x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) )))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query) c))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.QueryReceipt. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query/0 x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.QueryReceipt. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query/0 x)))) )))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable) c))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable_ x) (height_lt (height (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/0 x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((height (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/0 x)))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/1 x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/1 x)))) )))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split) c))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/0 x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/0 x)))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/1 x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/1 x)))) )))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush) c))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/0 x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/0 x)))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/1 x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/1 x)))) )))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact) c))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/0 x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/0 x)))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/1 x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/1 x)))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact_ x) (height_lt (height (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/4 x)) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((height (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/4 x))) )))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params) c))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params/0 x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./dummy_to_use_type_params/0 x)))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) (= x (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) )))
(assert (forall ((_end_lsn! Int) (_key! lib!spec.KeyType_t.Key.) (_value! lib!spec.Messages_t.Value.)) (! (=> (and (<= 0 _end_lsn!) (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query _end_lsn! _key! _value!)) TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query _end_lsn! _key! _value!)) TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/end_lsn x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/?end_lsn x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/end_lsn x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) (<= 0 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/end_lsn (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x)))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/end_lsn (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x)) (has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/key x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/?key x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/key (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/key (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x)) (has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/value x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/?value x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/value (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/value (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x)) (has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) )))
(assert (forall ((_puts! lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (=> (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. _puts!) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put _puts!)) TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put _puts!)) TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put/puts x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put/?puts x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put/puts x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put/puts (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x))) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put/puts (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x)) (has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) )))
(assert (forall ((_stamped_betree! lib!abstract_system.StampedMap_v.Stamped.)) (! (=> (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. _stamped_betree!) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs _stamped_betree!)) TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs _stamped_betree!)) TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs/stamped_betree x) (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs/?stamped_betree x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs/stamped_betree x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs/stamped_betree (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x))) (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs/stamped_betree (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. x)) (has_type x TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) )))
(assert (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Internal) TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) (! (= x (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. x))) :pattern ((Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (= x (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. x)))) :pattern ((has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) )))
(assert (forall ((_betree! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (_betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) (_buffer_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (=> (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. _betree!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State _betree! _betree_likes! _buffer_likes!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State _betree! _betree_likes! _buffer_likes!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree x) (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/?betree x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes x) (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/?betree_likes x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes x)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes x) (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/?buffer_likes x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes x)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= x (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) :pattern ((Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (= x (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)))) :pattern ((has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((_0! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (! (=> (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. _0!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop _0!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop _0!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop/0 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop/?0 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((_0! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (_1! lib!betree.LinkedBetree_v.TwoAddrs.)) (! (=> (and (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. _0!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. _1!) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable _0! _1!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable _0! _1!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/0 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/?0 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/1 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/?1 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((_0! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (_1! lib!spec.AsyncDisk_t.Address.)) (! (=> (and (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. _0!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!spec.AsyncDisk_t.Address. _1!) TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow _0! _1!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow _0! _1!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/0 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/?0 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/1 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/?1 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((_0! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (_1! lib!betree.LinkedBetree_v.Path.) (_2! lib!betree.SplitRequest_v.SplitRequest.) (_3! lib!betree.LinkedBetree_v.SplitAddrs.) (_4! vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (=> (and (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. _0!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!betree.LinkedBetree_v.Path. _1!) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. _2!) TYPE%lib!betree.SplitRequest_v.SplitRequest.) (has_type (Poly%lib!betree.LinkedBetree_v.SplitAddrs. _3!) TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split _0! _1! _2! _3! _4!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split _0! _1! _2! _3! _4!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/0 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/?0 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/1 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/?1 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/2 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/?2 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/3 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/?3 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/3 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.SplitAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/4 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/?4 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/4 x)) )))
(assert (forall ((_0! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (_1! lib!betree.LinkedBetree_v.Path.) (_2! Int) (_3! Int) (_4! lib!betree.LinkedBetree_v.TwoAddrs.) (_5! vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (=> (and (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. _0!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!betree.LinkedBetree_v.Path. _1!) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (<= 0 _2!) (<= 0 _3!) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. _4!) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush _0! _1! _2! _3! _4! _5!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush _0! _1! _2! _3! _4! _5!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/0 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?0 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/1 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?1 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/2 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?2 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/3 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?3 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/3 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/4 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?4 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/4 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/5 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/?5 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/5 x)) )))
(assert (forall ((_0! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (_1! lib!betree.LinkedBetree_v.Path.) (_2! Int) (_3! Int) (_4! lib!betree.Buffer_v.SimpleBuffer.) (_5! lib!betree.LinkedBetree_v.TwoAddrs.) (_6! vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)) (! (=> (and (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. _0!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!betree.LinkedBetree_v.Path. _1!) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (<= 0 _2!) (<= 0 _3!) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. _5!) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact _0! _1! _2! _3! _4! _5! _6!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact _0! _1! _2! _3! _4! _5! _6!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/0 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?0 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/1 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?1 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/2 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?2 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/3 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?3 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/3 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/4 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?4 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/4 x)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/5 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?5 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/5 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/5 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/5 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/6 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/?6 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/6 x)) )))
(assert (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_noop) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.))
(assert (forall ((_0! lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) (! (=> (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. _0!) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params _0!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params _0!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params/0 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x))) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) (! (= x (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. x))) :pattern ((Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.) (= x (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. x)))) :pattern ((has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) )))
(assert (forall ((_0! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (! (=> (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. _0!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize _0!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize _0!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize/0 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize/?0 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) )))
(assert (forall ((_0! lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) (! (=> (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. _0!) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params _0!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params _0!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params/0 x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. x))) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Label.)) (! (= x (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. x))) :pattern ((Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) (= x (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. x)))) :pattern ((has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Label.)) )))
(assert (forall ((_linked_lbl! lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) (! (=> (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. _linked_lbl!) TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label _linked_lbl!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Label.)) :pattern ((has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label _linked_lbl!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Label.)) )))
(assert (forall ((x lib!allocation_layer.LikesBetree_v.LikesBetree.Label.)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl x) (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/?linked_lbl x)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. x))) TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. x)) (has_type x TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Label.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (= x (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_message! lib!spec.Messages_t.Message.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Message. _message!) TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage _key! _message!)) TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?key x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.KeyedMessage.)) (! (= (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x) (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/?message x)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= x (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) :pattern ((Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (= x (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((_msgs! vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>.) (_seq_start! Int) (_seq_end! Int)) (! (=> (and (<= 0 _seq_start!) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory _msgs! _seq_start! _seq_end!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?msgs x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs x)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_start x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((x lib!abstract_system.MsgHistory_v.MsgHistory.)) (! (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/?seq_end x)) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (<= 0 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)))) :pattern ((lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type y TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (ext_eq deep (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x))) (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y))) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. x)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. y)))) (ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) :pattern ((ext_eq deep TYPE%lib!abstract_system.MsgHistory_v.MsgHistory. x y)) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= x (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. x))) :pattern ((Poly%lib!abstract_system.StampedMap_v.Stamped. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (= x (Poly%lib!abstract_system.StampedMap_v.Stamped. (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_value! Poly) (_seq_end! Int)) (! (=> (and (has_type _value! T&) (<= 0 _seq_end!)) (has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped./Stamped _value! _seq_end!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) :pattern ((has_type (Poly%lib!abstract_system.StampedMap_v.Stamped. (lib!abstract_system.StampedMap_v.Stamped./Stamped _value! _seq_end!)) (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?value x)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/value x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (has_type (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) T&)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end x) (lib!abstract_system.StampedMap_v.Stamped./Stamped/?seq_end x)) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&)) (<= 0 (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. x)) (has_type x (TYPE%lib!abstract_system.StampedMap_v.Stamped. T&. T&))) )))
(define-fun is-lib!abstract_system.StampedMap_v.Stamped./Stamped_ ((c lib!abstract_system.StampedMap_v.Stamped.)) Bool ((_ is lib!abstract_system.StampedMap_v.Stamped./Stamped) c))
(assert (forall ((x lib!abstract_system.StampedMap_v.Stamped.)) (! (=> (is-lib!abstract_system.StampedMap_v.Stamped./Stamped_ x) (height_lt (height (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x)) (height (Poly%lib!abstract_system.StampedMap_v.Stamped. x)))) :pattern ((height (lib!abstract_system.StampedMap_v.Stamped./Stamped/value x))) )))
(assert (forall ((x lib!betree.BufferDisk_v.BufferDisk.)) (! (= x (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. x))) :pattern ((Poly%lib!betree.BufferDisk_v.BufferDisk. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (= x (Poly%lib!betree.BufferDisk_v.BufferDisk. (%Poly%lib!betree.BufferDisk_v.BufferDisk. x)))) :pattern ((has_type x (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_entries! Poly)) (! (=> (has_type _entries! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T&)) (has_type (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.BufferDisk_v.BufferDisk./BufferDisk _entries!)) (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) :pattern ((has_type (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.BufferDisk_v.BufferDisk./BufferDisk _entries!)) (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) )))
(assert (forall ((x lib!betree.BufferDisk_v.BufferDisk.)) (! (= (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries x) (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/?entries x)) :pattern ((lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (has_type (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. x)) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T&))) :pattern ((lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. x)) (has_type x (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) )))
(define-fun is-lib!betree.BufferDisk_v.BufferDisk./BufferDisk_ ((c lib!betree.BufferDisk_v.BufferDisk.)) Bool ((_ is lib!betree.BufferDisk_v.BufferDisk./BufferDisk) c))
(assert (forall ((x lib!betree.BufferDisk_v.BufferDisk.)) (! (=> (is-lib!betree.BufferDisk_v.BufferDisk./BufferDisk_ x) (height_lt (height (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries x)) (height (Poly%lib!betree.BufferDisk_v.BufferDisk. x)))) :pattern ((height (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries x))) )))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (has_type y (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T&) (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. x)) (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. y)))) (ext_eq deep (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&) x y)) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (= x (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x))) :pattern ((Poly%lib!betree.BufferOffsets_v.BufferOffsets. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (= x (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. x)))) :pattern ((has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.)) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (= (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets x) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/?offsets x)) :pattern ((lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets x)) )))
(assert (forall ((x lib!betree.BufferOffsets_v.BufferOffsets.)) (! (has_type (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x) TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) :pattern ((has_type (Poly%lib!betree.BufferOffsets_v.BufferOffsets. x) TYPE%lib!betree.BufferOffsets_v.BufferOffsets.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (has_type y TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (ext_eq deep (TYPE%vstd!seq.Seq. $ NAT) (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. x))) (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. y))))) (ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. x y)) :pattern ((ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. x y)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= x (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. x))) :pattern ((Poly%lib!betree.Buffer_v.SimpleBuffer. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (= x (Poly%lib!betree.Buffer_v.SimpleBuffer. (%Poly%lib!betree.Buffer_v.SimpleBuffer. x)))) :pattern ((has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map x)) :pattern ((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.) :pattern ((has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type y TYPE%lib!betree.Buffer_v.SimpleBuffer.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. x))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. y))))) (ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) :pattern ((ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= x (%Poly%lib!betree.Domain_v.Domain. (Poly%lib!betree.Domain_v.Domain. x))) :pattern ((Poly%lib!betree.Domain_v.Domain. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (= x (Poly%lib!betree.Domain_v.Domain. (%Poly%lib!betree.Domain_v.Domain. x)))) :pattern ((has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (has_type (Poly%lib!betree.Domain_v.Domain. lib!betree.Domain_v.Domain./EmptyDomain) TYPE%lib!betree.Domain_v.Domain.))
(assert (forall ((_start! lib!spec.KeyType_t.Element.) (_end! lib!spec.KeyType_t.Element.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Element. _start!) TYPE%lib!spec.KeyType_t.Element.) (has_type (Poly%lib!spec.KeyType_t.Element. _end!) TYPE%lib!spec.KeyType_t.Element.)) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain./Domain _start! _end!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.Domain./Domain _start! _end!)) TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= (lib!betree.Domain_v.Domain./Domain/start x) (lib!betree.Domain_v.Domain./Domain/?start x)) :pattern ((lib!betree.Domain_v.Domain./Domain/start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. x))) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. x)) (has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.Domain_v.Domain.)) (! (= (lib!betree.Domain_v.Domain./Domain/end x) (lib!betree.Domain_v.Domain./Domain/?end x)) :pattern ((lib!betree.Domain_v.Domain./Domain/end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. x))) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. x)) (has_type x TYPE%lib!betree.Domain_v.Domain.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.BetreeNode. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (= x (Poly%lib!betree.LinkedBetree_v.BetreeNode. (%Poly%lib!betree.LinkedBetree_v.BetreeNode. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBetree_v.BetreeNode.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers x) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?buffers x)) :pattern ((lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots x) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?pivots x)) :pattern ((lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children x) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?children x)) :pattern ((lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed x) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/?flushed x)) :pattern ((lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.BetreeNode.)) (! (has_type (Poly%lib!betree.LinkedBetree_v.BetreeNode. x) TYPE%lib!betree.LinkedBetree_v.BetreeNode.) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.BetreeNode. x) TYPE%lib!betree.LinkedBetree_v.BetreeNode.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (has_type y TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (ext_eq deep TYPE%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. x))) (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. y)))) (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. x)) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. y))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. x))) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. y)))) (ext_eq deep TYPE%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. x))) (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. y))))) (ext_eq deep TYPE%lib!betree.LinkedBetree_v.BetreeNode. x y)) :pattern ((ext_eq deep TYPE%lib!betree.LinkedBetree_v.BetreeNode. x y)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.DiskView.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.DiskView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.DiskView.) (= x (Poly%lib!betree.LinkedBetree_v.DiskView. (%Poly%lib!betree.LinkedBetree_v.DiskView. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBetree_v.DiskView.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.DiskView.)) (! (= (lib!betree.LinkedBetree_v.DiskView./DiskView/entries x) (lib!betree.LinkedBetree_v.DiskView./DiskView/?entries x)) :pattern ((lib!betree.LinkedBetree_v.DiskView./DiskView/entries x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.DiskView.)) (! (has_type (Poly%lib!betree.LinkedBetree_v.DiskView. x) TYPE%lib!betree.LinkedBetree_v.DiskView.) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.DiskView. x) TYPE%lib!betree.LinkedBetree_v.DiskView.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.TwoAddrs.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.TwoAddrs. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.TwoAddrs. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.TwoAddrs.) (= x (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) )))
(assert (forall ((_addr1! lib!spec.AsyncDisk_t.Address.) (_addr2! lib!spec.AsyncDisk_t.Address.)) (! (=> (and (has_type (Poly%lib!spec.AsyncDisk_t.Address. _addr1!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. _addr2!) TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs _addr1! _addr2!)) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs _addr1! _addr2!)) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.TwoAddrs.)) (! (= (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 x) (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/?addr1 x)) :pattern ((lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.TwoAddrs.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. x)) (has_type x TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.TwoAddrs.)) (! (= (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 x) (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/?addr2 x)) :pattern ((lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.TwoAddrs.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. x)) (has_type x TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.SplitAddrs.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. (Poly%lib!betree.LinkedBetree_v.SplitAddrs. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.SplitAddrs. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.SplitAddrs.) (= x (Poly%lib!betree.LinkedBetree_v.SplitAddrs. (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) )))
(assert (forall ((_left! lib!spec.AsyncDisk_t.Address.) (_right! lib!spec.AsyncDisk_t.Address.) (_parent! lib!spec.AsyncDisk_t.Address.)) (! (=> (and (has_type (Poly%lib!spec.AsyncDisk_t.Address. _left!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. _right!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. _parent!) TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type (Poly%lib!betree.LinkedBetree_v.SplitAddrs. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs _left! _right! _parent!)) TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.SplitAddrs. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs _left! _right! _parent!)) TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.SplitAddrs.)) (! (= (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left x) (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/?left x)) :pattern ((lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.SplitAddrs.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. x)) (has_type x TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.SplitAddrs.)) (! (= (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right x) (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/?right x)) :pattern ((lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.SplitAddrs.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. x)) (has_type x TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.SplitAddrs.)) (! (= (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent x) (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/?parent x)) :pattern ((lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedBetree_v.SplitAddrs.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. x)) (has_type x TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.LinkedBetree. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (= x (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. x)))) :pattern ((has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_root! core!option.Option.) (_dv! lib!betree.LinkedBetree_v.DiskView.) (_buffer_dv! lib!betree.BufferDisk_v.BufferDisk.)) (! (=> (and (has_type (Poly%core!option.Option. _root!) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type (Poly%lib!betree.BufferDisk_v.BufferDisk. _buffer_dv!) (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree _root! _dv! _buffer_dv!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree _root! _dv! _buffer_dv!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root x) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?root x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. x))) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv x) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?dv x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv x)) )))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv x) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/?buffer_dv x)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. x))) (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) )))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree_ ((c lib!betree.LinkedBetree_v.LinkedBetree.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree) c))
(assert (forall ((x lib!betree.LinkedBetree_v.LinkedBetree.)) (! (=> (is-lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree_ x) (height_lt (height (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv x))) (height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. x)))) :pattern ((height (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv x)))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.QueryReceiptLine.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&)) (= x (Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. x)))) :pattern ((has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_linked! lib!betree.LinkedBetree_v.LinkedBetree.) (_result! lib!spec.Messages_t.Message.)) (! (=> (and (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. _linked!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%lib!spec.Messages_t.Message. _result!) TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine _linked! _result!)) (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine _linked! _result!)) (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.QueryReceiptLine.)) (! (= (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked x) (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/?linked x)) :pattern ((lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.QueryReceiptLine.)) (! (= (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/result x) (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/?result x)) :pattern ((lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/result x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&))) )))
(define-fun is-lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine_ ((c lib!betree.LinkedBetree_v.QueryReceiptLine.)) Bool ((_ is lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine) c))
(assert (forall ((x lib!betree.LinkedBetree_v.QueryReceiptLine.)) (! (=> (is-lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked x))) (height (Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked x)))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.QueryReceipt.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. (Poly%lib!betree.LinkedBetree_v.QueryReceipt. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.QueryReceipt. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&)) (= x (Poly%lib!betree.LinkedBetree_v.QueryReceipt. (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. x)))) :pattern ((has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_key! lib!spec.KeyType_t.Key.) (_linked! lib!betree.LinkedBetree_v.LinkedBetree.) (_lines! Poly)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. _linked!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type _lines! (TYPE%vstd!seq.Seq. $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&)))) (has_type (Poly%lib!betree.LinkedBetree_v.QueryReceipt. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt _key! _linked! _lines!)) (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.QueryReceipt. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt _key! _linked! _lines!)) (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.QueryReceipt.)) (! (= (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key x) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/?key x)) :pattern ((lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&)) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.QueryReceipt.)) (! (= (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked x) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/?linked x)) :pattern ((lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.QueryReceipt.)) (! (= (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines x) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/?lines x)) :pattern ((lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&)) (has_type (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. x)) (TYPE%vstd!seq.Seq. $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&)))) :pattern ((lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&))) )))
(define-fun is-lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt_ ((c lib!betree.LinkedBetree_v.QueryReceipt.)) Bool ((_ is lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt) c))
(assert (forall ((x lib!betree.LinkedBetree_v.QueryReceipt.)) (! (=> (is-lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked x))) (height (Poly%lib!betree.LinkedBetree_v.QueryReceipt. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked x)))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.QueryReceipt.)) (! (=> (is-lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt_ x) (height_lt (height (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines x)) (height (Poly%lib!betree.LinkedBetree_v.QueryReceipt. x)))) :pattern ((height (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines x))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.Path.)) (! (= x (%Poly%lib!betree.LinkedBetree_v.Path. (Poly%lib!betree.LinkedBetree_v.Path. x))) :pattern ((Poly%lib!betree.LinkedBetree_v.Path. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (= x (Poly%lib!betree.LinkedBetree_v.Path. (%Poly%lib!betree.LinkedBetree_v.Path. x)))) :pattern ((has_type x (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_linked! lib!betree.LinkedBetree_v.LinkedBetree.) (_key! lib!spec.KeyType_t.Key.) (_depth! Int)) (! (=> (and (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. _linked!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (<= 0 _depth!)) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.Path./Path _linked! _key! _depth!)) (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&))) :pattern ((has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.Path./Path _linked! _key! _depth!)) (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.Path.)) (! (= (lib!betree.LinkedBetree_v.Path./Path/linked x) (lib!betree.LinkedBetree_v.Path./Path/?linked x)) :pattern ((lib!betree.LinkedBetree_v.Path./Path/linked x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. x))) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.Path.)) (! (= (lib!betree.LinkedBetree_v.Path./Path/key x) (lib!betree.LinkedBetree_v.Path./Path/?key x)) :pattern ((lib!betree.LinkedBetree_v.Path./Path/key x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.Path./Path/key (%Poly%lib!betree.LinkedBetree_v.Path. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.LinkedBetree_v.Path./Path/key (%Poly%lib!betree.LinkedBetree_v.Path. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&))) )))
(assert (forall ((x lib!betree.LinkedBetree_v.Path.)) (! (= (lib!betree.LinkedBetree_v.Path./Path/depth x) (lib!betree.LinkedBetree_v.Path./Path/?depth x)) :pattern ((lib!betree.LinkedBetree_v.Path./Path/depth x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (<= 0 (lib!betree.LinkedBetree_v.Path./Path/depth (%Poly%lib!betree.LinkedBetree_v.Path. x)))) :pattern ((lib!betree.LinkedBetree_v.Path./Path/depth (%Poly%lib!betree.LinkedBetree_v.Path. x)) (has_type x (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&))) )))
(define-fun is-lib!betree.LinkedBetree_v.Path./Path_ ((c lib!betree.LinkedBetree_v.Path.)) Bool ((_ is lib!betree.LinkedBetree_v.Path./Path) c))
(assert (forall ((x lib!betree.LinkedBetree_v.Path.)) (! (=> (is-lib!betree.LinkedBetree_v.Path./Path_ x) (height_lt (height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked x))) (height (Poly%lib!betree.LinkedBetree_v.Path. x)))) :pattern ((height (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked x)))) )))
(assert (forall ((x lib!betree.LinkedSeq_v.LinkedSeq.)) (! (= x (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. x))) :pattern ((Poly%lib!betree.LinkedSeq_v.LinkedSeq. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (= x (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. x)))) :pattern ((has_type x TYPE%lib!betree.LinkedSeq_v.LinkedSeq.)) )))
(assert (forall ((x lib!betree.LinkedSeq_v.LinkedSeq.)) (! (= (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs x) (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/?addrs x)) :pattern ((lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs x)) )))
(assert (forall ((x lib!betree.LinkedSeq_v.LinkedSeq.)) (! (has_type (Poly%lib!betree.LinkedSeq_v.LinkedSeq. x) TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) :pattern ((has_type (Poly%lib!betree.LinkedSeq_v.LinkedSeq. x) TYPE%lib!betree.LinkedSeq_v.LinkedSeq.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (has_type y TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. x))) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. y))))) (ext_eq deep TYPE%lib!betree.LinkedSeq_v.LinkedSeq. x y)) :pattern ((ext_eq deep TYPE%lib!betree.LinkedSeq_v.LinkedSeq. x y)) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= x (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. x))) :pattern ((Poly%lib!betree.Memtable_v.Memtable. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (= x (Poly%lib!betree.Memtable_v.Memtable. (%Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_buffer! Poly) (_seq_end! Int)) (! (=> (and (has_type _buffer! T&) (<= 0 _seq_end!)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable./Memtable _buffer! _seq_end!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) :pattern ((has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.Memtable./Memtable _buffer! _seq_end!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= (lib!betree.Memtable_v.Memtable./Memtable/buffer x) (lib!betree.Memtable_v.Memtable./Memtable/?buffer x)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/buffer x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) T&)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (= (lib!betree.Memtable_v.Memtable./Memtable/seq_end x) (lib!betree.Memtable_v.Memtable./Memtable/?seq_end x)) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/seq_end x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (<= 0 (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)) (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) )))
(define-fun is-lib!betree.Memtable_v.Memtable./Memtable_ ((c lib!betree.Memtable_v.Memtable.)) Bool ((_ is lib!betree.Memtable_v.Memtable./Memtable) c))
(assert (forall ((x lib!betree.Memtable_v.Memtable.)) (! (=> (is-lib!betree.Memtable_v.Memtable./Memtable_ x) (height_lt (height (lib!betree.Memtable_v.Memtable./Memtable/buffer x)) (height (Poly%lib!betree.Memtable_v.Memtable. x)))) :pattern ((height (lib!betree.Memtable_v.Memtable./Memtable/buffer x))) )))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type y (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (ext_eq deep T& (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. x)) (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. y))) (= (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. x)) (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. y)))) (ext_eq deep (TYPE%lib!betree.Memtable_v.Memtable. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%lib!betree.Memtable_v.Memtable. T&. T&) x y)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (= x (%Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly%lib!betree.OffsetMap_v.OffsetMap. x))) :pattern ((Poly%lib!betree.OffsetMap_v.OffsetMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.) (= x (Poly%lib!betree.OffsetMap_v.OffsetMap. (%Poly%lib!betree.OffsetMap_v.OffsetMap. x)))) :pattern ((has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (= (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets x) (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/?offsets x)) :pattern ((lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets x)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (has_type (Poly%lib!betree.OffsetMap_v.OffsetMap. x) TYPE%lib!betree.OffsetMap_v.OffsetMap.) :pattern ((has_type (Poly%lib!betree.OffsetMap_v.OffsetMap. x) TYPE%lib!betree.OffsetMap_v.OffsetMap.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.) (has_type y TYPE%lib!betree.OffsetMap_v.OffsetMap.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. x))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. y))))) (ext_eq deep TYPE%lib!betree.OffsetMap_v.OffsetMap. x y)) :pattern ((ext_eq deep TYPE%lib!betree.OffsetMap_v.OffsetMap. x y)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (= x (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. x))) :pattern ((Poly%lib!betree.PivotTable_v.PivotTable. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotTable_v.PivotTable.) (= x (Poly%lib!betree.PivotTable_v.PivotTable. (%Poly%lib!betree.PivotTable_v.PivotTable. x)))) :pattern ((has_type x TYPE%lib!betree.PivotTable_v.PivotTable.)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (= (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots x) (lib!betree.PivotTable_v.PivotTable./PivotTable/?pivots x)) :pattern ((lib!betree.PivotTable_v.PivotTable./PivotTable/pivots x)) )))
(assert (forall ((x lib!betree.PivotTable_v.PivotTable.)) (! (has_type (Poly%lib!betree.PivotTable_v.PivotTable. x) TYPE%lib!betree.PivotTable_v.PivotTable.) :pattern ((has_type (Poly%lib!betree.PivotTable_v.PivotTable. x) TYPE%lib!betree.PivotTable_v.PivotTable.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= x (%Poly%lib!betree.SplitRequest_v.SplitRequest. (Poly%lib!betree.SplitRequest_v.SplitRequest. x))) :pattern ((Poly%lib!betree.SplitRequest_v.SplitRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (= x (Poly%lib!betree.SplitRequest_v.SplitRequest. (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((_child_idx! Int) (_split_key! lib!spec.KeyType_t.Key.)) (! (=> (and (<= 0 _child_idx!) (has_type (Poly%lib!spec.KeyType_t.Key. _split_key!) TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf _child_idx! _split_key!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf _child_idx! _split_key!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?child_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key x) (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/?split_key x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((_child_idx! Int) (_child_pivot_idx! Int)) (! (=> (and (<= 0 _child_idx!) (<= 0 _child_pivot_idx!)) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitIndex _child_idx! _child_pivot_idx!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!betree.SplitRequest_v.SplitRequest./SplitIndex _child_idx! _child_pivot_idx!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!betree.SplitRequest_v.SplitRequest.)) (! (= (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx x) (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/?child_pivot_idx x)) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)))) :pattern ((lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. x)) (has_type x TYPE%lib!betree.SplitRequest_v.SplitRequest.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.Address. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (= x (Poly%lib!spec.AsyncDisk_t.Address. (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((_au! Int) (_page! Int)) (! (=> (and (<= 0 _au!) (<= 0 _page!)) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/au x) (lib!spec.AsyncDisk_t.Address./Address/?au x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/page x) (lib!spec.AsyncDisk_t.Address./Address/?page x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Element.)) (! (= x (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. x))) :pattern ((Poly%lib!spec.KeyType_t.Element. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Element.) (= x (Poly%lib!spec.KeyType_t.Element. (%Poly%lib!spec.KeyType_t.Element. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (has_type (Poly%lib!spec.KeyType_t.Element. lib!spec.KeyType_t.Element./Max) TYPE%lib!spec.KeyType_t.Element.))
(assert (forall ((_e! Int)) (! (=> (uInv 64 _e!) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element./Elem _e!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.Element./Elem _e!)) TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (forall ((x lib!spec.KeyType_t.Element.)) (! (= (lib!spec.KeyType_t.Element./Elem/e x) (lib!spec.KeyType_t.Element./Elem/?e x)) :pattern ((lib!spec.KeyType_t.Element./Elem/e x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Element.) (uInv 64 (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. x)))) :pattern ((lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. x)) (has_type x TYPE%lib!spec.KeyType_t.Element.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)) )))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)) )) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)) )))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))) )))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!betree.LinkedBetree_v.Addrs. (Dcr Type) Bool)
(declare-fun tr_bound%lib!betree.Buffer_v.Buffer. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!betree.LinkedBetree_v.Addrs. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!betree.Buffer_v.Buffer. Self%&. Self%&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::count")
(declare-fun vstd!multiset.impl&%0.count.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::len")
(declare-fun vstd!multiset.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::empty")
(declare-fun vstd!multiset.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::singleton")
(declare-fun vstd!multiset.impl&%0.singleton.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::add")
(declare-fun vstd!multiset.impl&%0.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::sub")
(declare-fun vstd!multiset.impl&%0.sub.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::subset_of")
(declare-fun vstd!multiset.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::choose")
(declare-fun vstd!multiset.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::dom")
(declare-fun vstd!multiset.impl&%0.dom.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_multiset")
(declare-fun vstd!seq_lib.impl&%0.to_multiset.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::insert")
(declare-fun vstd!multiset.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::remove")
(declare-fun vstd!seq_lib.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::remove")
(declare-fun vstd!multiset.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::disjoint")
(declare-fun vstd!set.impl&%0.disjoint.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_le")
(declare-fun vstd!set.impl&%0.spec_le.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::restrict")
(declare-fun vstd!map_lib.impl&%0.restrict.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::default_value")
(declare-fun lib!spec.Messages_t.default_value.? (Poly) lib!spec.Messages_t.Value.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::contains")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::contains_exactly")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::wf")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_follow")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::can_discard_to")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? (Poly Poly) lib!abstract_system.MsgHistory_v.MsgHistory.)
(set-info :comment ";; Function-Decl lib::abstract_system::MsgHistory_v::MsgHistory::is_empty")
(declare-fun lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::submap_of")
(declare-fun vstd!map_lib.impl&%0.submap_of.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::spec_le")
(declare-fun vstd!map_lib.impl&%0.spec_le.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq::Seq::last")
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::num_ranges")
(declare-fun lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Key::lte")
(declare-fun lib!spec.KeyType_t.impl&%1.lte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::arrow_e")
(declare-fun lib!spec.KeyType_t.impl&%0.arrow_e.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::to_key")
(declare-fun lib!spec.KeyType_t.to_key.? (Poly) lib!spec.KeyType_t.Key.)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::lte")
(declare-fun lib!spec.KeyType_t.impl&%2.lte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::lt")
(declare-fun lib!spec.KeyType_t.impl&%2.lt.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::is_strictly_sorted")
(declare-fun lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::wf")
(declare-fun lib!betree.PivotTable_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::to_element")
(declare-fun lib!spec.KeyType_t.to_element.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::bounded_key")
(declare-fun lib!betree.PivotTable_v.impl&%0.bounded_key.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::largest_lte")
(declare-fun lib!spec.KeyType_t.impl&%2.largest_lte.? (Poly Poly) Int)
(declare-fun lib!spec.KeyType_t.impl&%2.rec%largest_lte.? (Poly Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::route")
(declare-fun lib!betree.PivotTable_v.impl&%0.route.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::Buffer::contains")
(declare-fun lib!betree.Buffer_v.Buffer.contains.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.contains%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::Buffer::query")
(declare-fun lib!betree.Buffer_v.Buffer.query.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.query%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::Buffer::insert_ref")
(declare-fun lib!betree.Buffer_v.Buffer.insert_ref.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.insert_ref%default%.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::Buffer::is_empty")
(declare-fun lib!betree.Buffer_v.Buffer.is_empty.? (Dcr Type Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.is_empty%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::Buffer::i")
(declare-fun lib!betree.Buffer_v.Buffer.i.? (Dcr Type Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.i%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::nop_delta")
(declare-fun lib!spec.Messages_t.nop_delta.? (Poly) lib!spec.Messages_t.Delta.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::query_internal")
(declare-fun lib!betree.Buffer_v.impl&%1.query_internal.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::insert")
(declare-fun lib!betree.Buffer_v.impl&%1.insert.? (Poly Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::SimpleBuffer::empty")
(declare-fun lib!betree.Buffer_v.impl&%1.empty.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::combine_deltas")
(declare-fun lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly Poly) lib!spec.Messages_t.Delta.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::apply_delta")
(declare-fun lib!spec.Messages_t.impl&%1.apply_delta.? (Poly Poly) lib!spec.Messages_t.Value.)
(set-info :comment ";; Function-Decl lib::spec::Messages_t::Message::merge")
(declare-fun lib!spec.Messages_t.impl&%1.merge.? (Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::query")
(declare-fun lib!betree.Memtable_v.impl&%0.query.? (Dcr Type Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::apply_put")
(declare-fun lib!betree.Memtable_v.impl&%0.apply_put.? (Dcr Type Poly Poly) lib!betree.Memtable_v.Memtable.)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::apply_puts")
(declare-fun lib!betree.Memtable_v.impl&%0.apply_puts.? (Dcr Type Poly Poly) lib!betree.Memtable_v.Memtable.)
(declare-fun lib!betree.Memtable_v.impl&%0.rec%apply_puts.? (Dcr Type Poly Poly Fuel) lib!betree.Memtable_v.Memtable.)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::is_empty")
(declare-fun lib!betree.Memtable_v.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::empty_memtable")
(declare-fun lib!betree.Memtable_v.impl&%1.empty_memtable.? (Poly) lib!betree.Memtable_v.Memtable.)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::drain")
(declare-fun lib!betree.Memtable_v.impl&%1.drain.? (Poly) lib!betree.Memtable_v.Memtable.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::arrow_start")
(declare-fun lib!betree.Domain_v.impl&%0.arrow_start.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::arrow_end")
(declare-fun lib!betree.Domain_v.impl&%0.arrow_end.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::wf")
(declare-fun lib!betree.Domain_v.impl&%1.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::domain_to_pivots")
(declare-fun lib!betree.PivotTable_v.domain_to_pivots.? (Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::spec::KeyType_t::Element::min_elem")
(declare-fun lib!spec.KeyType_t.impl&%2.min_elem.? (Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::total_domain")
(declare-fun lib!betree.Domain_v.total_domain.? (Poly) lib!betree.Domain_v.Domain.)
(set-info :comment ";; Function-Decl lib::betree::Domain_v::Domain::contains")
(declare-fun lib!betree.Domain_v.impl&%1.contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::len")
(declare-fun lib!betree.PivotTable_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::update")
(declare-fun lib!betree.PivotTable_v.impl&%0.update.? (Poly Poly Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::can_insert")
(declare-fun lib!betree.PivotTable_v.impl&%0.can_insert.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::insert")
(declare-fun vstd!seq_lib.impl&%0.insert.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::insert")
(declare-fun lib!betree.PivotTable_v.impl&%0.insert.? (Poly Poly Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::subrange")
(declare-fun lib!betree.PivotTable_v.impl&%0.subrange.? (Poly Poly Poly) lib!betree.PivotTable_v.PivotTable.)
(set-info :comment ";; Function-Decl lib::betree::Buffer_v::total_keys")
(declare-fun lib!betree.Buffer_v.total_keys.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::len")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::all_lte")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.all_lte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedSeq_v::LinkedSeq::len")
(declare-fun lib!betree.LinkedSeq_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::wf")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::entries_wf")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.entries_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::valid_child_index")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::is_nondangling_ptr")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::node_has_nondangling_child_ptrs")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::PivotTable_v::PivotTable::spec_index")
(declare-fun lib!betree.PivotTable_v.impl&%0.spec_index.? (Poly Poly) lib!spec.KeyType_t.Element.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::my_domain")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.my_domain.? (Poly) lib!betree.Domain_v.Domain.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::child_domain")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.child_domain.? (Poly Poly) lib!betree.Domain_v.Domain.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::child_linked")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.child_linked.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::node_has_linked_children")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::healthy_child_ptrs")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::wf")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::wf")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::has_root")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.has_root.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::QueryReceipt::structure")
(declare-fun lib!betree.LinkedBetree_v.impl&%8.structure.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::QueryReceiptLine::wf")
(declare-fun lib!betree.LinkedBetree_v.impl&%7.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::node_children_respects_rank")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::valid_ranking")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.valid_ranking.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::valid_ranking")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::acyclic")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.acyclic.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::repr")
(declare-fun lib!betree.BufferDisk_v.impl&%0.repr.? (Dcr Type Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::valid_buffers")
(declare-fun lib!betree.BufferDisk_v.impl&%0.valid_buffers.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::get")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.get.? (Poly Poly) lib!betree.LinkedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::root")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.root.? (Dcr Type Poly) lib!betree.LinkedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::QueryReceipt::node")
(declare-fun lib!betree.LinkedBetree_v.impl&%8.node.? (Dcr Type Poly Poly) lib!betree.LinkedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::key_in_domain")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::QueryReceipt::all_lines_wf")
(declare-fun lib!betree.LinkedBetree_v.impl&%9.all_lines_wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::child_ptr")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.child_ptr.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::QueryReceipt::child_linked_at")
(declare-fun lib!betree.LinkedBetree_v.impl&%8.child_linked_at.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::flushed_ofs")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::query")
(declare-fun lib!betree.BufferDisk_v.impl&%1.query.? (Dcr Type Poly Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::LinkedSeq_v::LinkedSeq::spec_index")
(declare-fun lib!betree.LinkedSeq_v.impl&%0.spec_index.? (Poly Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::query_from")
(declare-fun lib!betree.BufferDisk_v.impl&%1.query_from.? (Dcr Type Poly Poly Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.BufferDisk_v.impl&%1.rec%query_from.? (Dcr Type Poly Poly Poly Poly Fuel) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::QueryReceipt::result_at")
(declare-fun lib!betree.LinkedBetree_v.impl&%8.result_at.? (Dcr Type Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::QueryReceipt::result_linked_at")
(declare-fun lib!betree.LinkedBetree_v.impl&%9.result_linked_at.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::QueryReceipt::valid")
(declare-fun lib!betree.LinkedBetree_v.impl&%9.valid.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::QueryReceipt::valid_for")
(declare-fun lib!betree.LinkedBetree_v.impl&%9.valid_for.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::QueryReceipt::result")
(declare-fun lib!betree.LinkedBetree_v.impl&%8.result.? (Dcr Type Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::query")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.query.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::put")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.put.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::i")
(declare-fun lib!betree.LinkedBetree_v.impl&%4.i.? (Dcr Type Poly) lib!betree.BufferDisk_v.BufferDisk.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::i_buffer")
(declare-fun lib!betree.LinkedBetree_v.impl&%6.i_buffer.? (Dcr Type Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::freeze_as")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.freeze_as.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::Addrs::no_duplicates")
(declare-fun lib!betree.LinkedBetree_v.Addrs.no_duplicates.? (Dcr Type Poly) Poly)
(declare-fun lib!betree.LinkedBetree_v.Addrs.no_duplicates%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::Addrs::repr")
(declare-fun lib!betree.LinkedBetree_v.Addrs.repr.? (Dcr Type Poly) Poly)
(declare-fun lib!betree.LinkedBetree_v.Addrs.repr%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::Memtable_v::Memtable::i")
(declare-fun lib!betree.Memtable_v.impl&%0.i.? (Dcr Type Poly) lib!betree.Memtable_v.Memtable.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::is_fresh")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.is_fresh.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::is_fresh")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.is_fresh.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedSeq_v::LinkedSeq::extend")
(declare-fun lib!betree.LinkedSeq_v.impl&%0.extend.? (Poly Poly) lib!betree.LinkedSeq_v.LinkedSeq.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::extend_buffer_seq")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq.? (Poly Poly) lib!betree.LinkedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::LinkedSeq_v::LinkedSeq::empty")
(declare-fun lib!betree.LinkedSeq_v.impl&%0.empty.? (Poly) lib!betree.LinkedSeq_v.LinkedSeq.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::empty_root")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.empty_root.? (Poly) lib!betree.LinkedBetree_v.BetreeNode.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::modify_disk")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly Poly Poly) lib!betree.LinkedBetree_v.DiskView.)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::modify_disk")
(declare-fun lib!betree.BufferDisk_v.impl&%0.modify_disk.? (Dcr Type Poly Poly Poly) lib!betree.BufferDisk_v.BufferDisk.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::push_memtable")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.push_memtable.? (Dcr Type Poly Poly Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::is_sub_disk")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::agrees")
(declare-fun vstd!map_lib.impl&%0.agrees.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::agrees_with")
(declare-fun lib!betree.BufferDisk_v.impl&%0.agrees_with.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::valid_view")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.valid_view.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_flush_memtable")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush_memtable.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::grow")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.grow.? (Dcr Type Poly Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_grow")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_grow.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::SplitRequest_v::SplitRequest::get_child_idx")
(declare-fun lib!betree.SplitRequest_v.impl&%1.get_child_idx.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::child_at_idx")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? (Dcr Type Poly Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::is_leaf")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.is_leaf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::can_split_leaf")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.can_split_leaf.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::is_index")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.is_index.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::can_split_index")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.can_split_index.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::can_split_parent")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.can_split_parent.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::child_for_key")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.child_for_key.? (Dcr Type Poly Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::Path::subpath")
(declare-fun lib!betree.LinkedBetree_v.impl&%10.subpath.? (Dcr Type Poly) lib!betree.LinkedBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::Path::valid")
(declare-fun lib!betree.LinkedBetree_v.impl&%10.valid.? (Dcr Type Poly) Bool)
(declare-fun lib!betree.LinkedBetree_v.impl&%10.rec%valid.? (Dcr Type Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::Path::target")
(declare-fun lib!betree.LinkedBetree_v.impl&%10.target.? (Dcr Type Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun lib!betree.LinkedBetree_v.impl&%10.rec%target.? (Dcr Type Poly Fuel) lib!betree.LinkedBetree_v.LinkedBetree.)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::no_duplicates")
(declare-fun vstd!seq_lib.impl&%0.no_duplicates.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::valid_path_replacement")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.valid_path_replacement.? (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::is_sub_disk")
(declare-fun lib!betree.BufferDisk_v.impl&%0.is_sub_disk.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::Path::can_substitute")
(declare-fun lib!betree.LinkedBetree_v.impl&%10.can_substitute.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::Path::substitute")
(declare-fun lib!betree.LinkedBetree_v.impl&%10.substitute.? (Dcr Type Poly Poly Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-fun lib!betree.LinkedBetree_v.impl&%10.rec%substitute.? (Dcr Type Poly Poly Poly Fuel) lib!betree.LinkedBetree_v.LinkedBetree.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::split_leaf")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.split_leaf.? (Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::dup")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.dup.? (Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::slice")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.slice.? (Poly Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::split_index")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.split_index.? (Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::split_parent")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.split_parent.? (Dcr Type Poly Poly Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_split")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_split.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::occupied_child_index")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.occupied_child_index.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::all_gte")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.all_gte.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::update")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.update.? (Poly Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::can_flush")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.can_flush.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedSeq_v::LinkedSeq::slice")
(declare-fun lib!betree.LinkedSeq_v.impl&%0.slice.? (Poly Poly Poly) lib!betree.LinkedSeq_v.LinkedSeq.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::flush_buffers")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.flush_buffers.? (Dcr Type Poly Poly Poly) lib!betree.LinkedSeq_v.LinkedSeq.)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::shift_left")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.shift_left.? (Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::flush")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.flush.? (Dcr Type Poly Poly Poly Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_flush")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::OffsetMap_v::OffsetMap::decrement")
(declare-fun lib!betree.OffsetMap_v.impl&%0.decrement.? (Poly Poly) lib!betree.OffsetMap_v.OffsetMap.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::BetreeNode::make_offset_map")
(declare-fun lib!betree.LinkedBetree_v.impl&%0.make_offset_map.? (Poly) lib!betree.OffsetMap_v.OffsetMap.)
(set-info :comment ";; Function-Decl lib::betree::OffsetMap_v::OffsetMap::is_total")
(declare-fun lib!betree.OffsetMap_v.impl&%0.is_total.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::queryable_contains")
(declare-fun lib!betree.BufferDisk_v.impl&%1.queryable_contains.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::key_in_buffer")
(declare-fun lib!betree.BufferDisk_v.impl&%1.key_in_buffer.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::key_in_buffer_filtered")
(declare-fun lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::valid_compact_key_domain")
(declare-fun lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::compact_buffer_valid_domain")
(declare-fun lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::BufferDisk_v::BufferDisk::compact_key_value")
(declare-fun lib!betree.LinkedBetree_v.impl&%4.compact_key_value.? (Dcr Type Poly Poly Poly Poly Poly) lib!spec.Messages_t.Message.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::compact_buffer_valid_range")
(declare-fun lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_range.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::can_compact")
(declare-fun lib!betree.LinkedBetree_v.impl&%6.can_compact.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedSeq_v::LinkedSeq::update_subrange")
(declare-fun lib!betree.LinkedSeq_v.impl&%0.update_subrange.? (Poly Poly Poly Poly) lib!betree.LinkedSeq_v.LinkedSeq.)
(set-info :comment ";; Function-Decl lib::betree::BufferOffsets_v::BufferOffsets::adjust_compact")
(declare-fun lib!betree.BufferOffsets_v.impl&%0.adjust_compact.? (Poly Poly Poly) lib!betree.BufferOffsets_v.BufferOffsets.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::compact")
(declare-fun lib!betree.LinkedBetree_v.impl&%6.compact.? (Dcr Type Poly Poly Poly Poly Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_compact")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_compact.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_noop")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_noop.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::next_by")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next_by.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::next")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::get_rank")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.get_rank.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::child_count")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.child_count.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::can_recurse_for_reachable")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs_using_ranking_recur")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.? (Dcr Type Poly Poly Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? (Dcr Type Poly Poly Poly Fuel) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs_using_ranking")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? (Dcr Type Poly Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? (Dcr Type Poly Poly Fuel) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::the_ranking")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.the_ranking.? (Dcr Type Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? (Dcr Type Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedSeq_v::LinkedSeq::contains")
(declare-fun lib!betree.LinkedSeq_v.impl&%0.contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::reachable_buffer")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::reachable_buffer_addrs")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? (Dcr Type Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::no_dangling_buffer_ptr")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.no_dangling_buffer_ptr.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::valid_buffer_dv")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::initialize")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.initialize.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Label::arrow_linked_lbl")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_linked_lbl.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::likes_noop")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::is_fresh")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::Likes_v::no_likes")
(declare-fun lib!allocation_layer.Likes_v.no_likes.? (Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::root_likes")
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? (Dcr Type Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_memtable")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_grow")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::to_multiset")
(declare-fun vstd!set_lib.impl&%0.to_multiset.? (Dcr Type Poly) Poly)
(declare-fun vstd!set_lib.impl&%0.rec%to_multiset.? (Dcr Type Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::Path::addrs_on_path")
(declare-fun lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.? (Dcr Type Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!betree.LinkedBetree_v.impl&%10.rec%addrs_on_path.? (Dcr Type Poly Fuel) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_split")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split.? (Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_compact")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_noop")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::next_by")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_by.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::next")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::children_likes")
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? (Dcr Type Poly Poly Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? (Dcr Type Poly Poly Poly Fuel) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::tree_likes")
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? (Dcr Type Poly Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? (Dcr Type Poly Poly Fuel) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedSeq_v::LinkedSeq::likes")
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%0.likes.? (Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::buffer_likes")
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? (Dcr Type Poly Poly) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? (Dcr Type Poly Poly Fuel) vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::transitive_likes")
(declare-fun lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? (Dcr Type Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::initialize")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::init_by")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init_by.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::init")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::inv")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::inv")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::spec_le")
(declare-fun vstd!multiset.impl&%0.spec_le.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::contains")
(declare-fun vstd!multiset.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::post_step")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step.? (Dcr Type Poly Poly) lib!betree.LinkedBetree_v.LinkedBetree.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::same_tight_tree")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetreeVars::State::strong_step")
(declare-fun lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.strong_step.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_2")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_6")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_6.? (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_4")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_4.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_3")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_likes_noop_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_likes_noop_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_memtable_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_memtable_1")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_1.? (Poly) lib!betree.LinkedBetree_v.TwoAddrs.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_grow_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_grow_1")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_1.? (Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_split_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_split_1")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_1.? (Poly) lib!betree.LinkedBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_split_2")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_2.? (Poly) lib!betree.SplitRequest_v.SplitRequest.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_split_3")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_3.? (Poly) lib!betree.LinkedBetree_v.SplitAddrs.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_split_4")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_4.? (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_1")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_1.? (Poly) lib!betree.LinkedBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_2")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_3")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_4")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_4.? (Poly) lib!betree.LinkedBetree_v.TwoAddrs.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_5")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_5.? (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_1")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_1.? (Poly) lib!betree.LinkedBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_2")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_3")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_4")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_4.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_5")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_5.? (Poly) lib!betree.LinkedBetree_v.TwoAddrs.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_6")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_6.? (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_dummy_to_use_type_params_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_dummy_to_use_type_params_0.? (Poly) lib!allocation_layer.LikesBetree_v.LikesBetree.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_likes_noop")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_likes_noop.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_likes_noop_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_likes_noop_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_flush_memtable")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush_memtable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_memtable_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_memtable_1")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_1.? (Poly) lib!betree.LinkedBetree_v.TwoAddrs.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_grow")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_grow.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_grow_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_grow_1")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_1.? (Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_split")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_split.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_split_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_split_1")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_1.? (Poly) lib!betree.LinkedBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_split_2")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_2.? (Poly) lib!betree.SplitRequest_v.SplitRequest.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_split_3")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_3.? (Poly) lib!betree.LinkedBetree_v.SplitAddrs.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_split_4")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_4.? (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_flush")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_1")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_1.? (Poly) lib!betree.LinkedBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_2")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_3")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_4")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_4.? (Poly) lib!betree.LinkedBetree_v.TwoAddrs.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_5")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_5.? (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_compact")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_compact.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_1")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_1.? (Poly) lib!betree.LinkedBetree_v.Path.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_2")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_3")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_4")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_4.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_5")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_5.? (Poly) lib!betree.LinkedBetree_v.TwoAddrs.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_6")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_6.? (Poly) vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_noop")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_noop.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_dummy_to_use_type_params")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_dummy_to_use_type_params_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_dummy_to_use_type_params_0.? (Poly) lib!allocation_layer.LikesBetree_v.LikesBetree.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Config::arrow_initialize_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_initialize_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Config::arrow_dummy_to_use_type_params_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_dummy_to_use_type_params_0.? (Poly) lib!allocation_layer.LikesBetree_v.LikesBetree.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Config::is_initialize")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_initialize.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Config::get_initialize_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_initialize_0.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Config::is_dummy_to_use_type_params")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Config::get_dummy_to_use_type_params_0")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_dummy_to_use_type_params_0.? (Poly) lib!allocation_layer.LikesBetree_v.LikesBetree.State.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::Label::arrow_Label_linked_lbl")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_Label_linked_lbl.? (Poly) lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::likes_noop_strong")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::likes_noop_enabled")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_memtable_strong")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_strong.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_memtable_enabled")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_enabled.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_grow_strong")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_strong.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_grow_enabled")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_enabled.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_split_strong")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_strong.? (Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_split_enabled")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_enabled.? (Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_strong")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_strong.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_enabled")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_enabled.? (Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_compact_strong")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_strong.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_compact_enabled")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_enabled.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_noop_strong")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_noop_enabled")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::initialize_enabled")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::next_strong_by")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong_by.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::next_strong")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::LikesBetree_v::LikesBetree::State::invariant")
(declare-fun lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::DiskView::agrees_with")
(declare-fun lib!betree.LinkedBetree_v.impl&%1.agrees_with.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::finite_ranking")
(declare-fun lib!betree.LinkedBetree_v.impl&%5.finite_ranking.? (Dcr Type Poly) vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(set-info :comment ";; Function-Decl lib::betree::LinkedBetree_v::LinkedBetree::exists_child_subtree_contains_addr")
(declare-fun lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%1 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%2 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) )))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!)) ))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!))) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::count")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type value! V&)) (<= 0 (vstd!multiset.impl&%0.count.? V&. V& self! value!))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& self! value!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::len")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (<= 0 (vstd!multiset.impl&%0.len.? V&. V& self!))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::empty")
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (vstd!multiset.impl&%0.empty.? V&. V&) (TYPE%vstd!multiset.Multiset. V&. V&)) :pattern ((vstd!multiset.impl&%0.empty.? V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::singleton")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (has_type (vstd!multiset.impl&%0.singleton.? V&. V& v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.singleton.? V&. V& v!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::add")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (has_type (vstd!multiset.impl&%0.add.? V&. V& self! m2!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.add.? V&. V& self! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::sub")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (has_type (vstd!multiset.impl&%0.sub.? V&. V& self! m2!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.sub.? V&. V& self! m2!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_empty")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_empty.) (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!) 0)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_singleton")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_singleton.) (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) v!) 1)) :pattern ((vstd!multiset.impl&%0.singleton.? V&. V& v!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_singleton_different")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_singleton_different.) (forall ((V&. Dcr) (V& Type) (v! Poly) (w! Poly)) (! (=> (and (has_type v! V&) (has_type w! V&)) (=> (not (= v! w!)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!) 0))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_add")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_add.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!) (nClip (Add (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!))))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_sub")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_sub.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!) v!) (ite (>= (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) (Sub (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) 0))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!) v!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_ext_equal")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_ext_equal.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (forall ((v$ Poly)) (! (=> (has_type v$ V&) (= (vstd!multiset.impl&%0.count.? V&. V& m1! v$) (vstd!multiset.impl&%0.count.? V&. V& m2! v$))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m1! v$)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m2! v$)) )))) :pattern ((ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_ext_equal_deep.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!))) :pattern ((ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_empty")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_len_empty.) (forall ((V&. Dcr) (V& Type)) (! (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&)) 0) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&))) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_singleton")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_len_singleton.) (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!)) 1)) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!))) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_add")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_len_add.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!)) (nClip (Add (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!))))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!))) ))))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.subset_of.) (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!multiset.impl&%0.subset_of.? V&. V& self! m2!) (forall ((v$ Poly)) (! (=> (has_type v$ V&) (<= (vstd!multiset.impl&%0.count.? V&. V& self! v$) (vstd!multiset.impl&%0.count.? V&. V& m2! v$))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& self! v$)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m2! v$)) ))) :pattern ((vstd!multiset.impl&%0.subset_of.? V&. V& self! m2!)) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_sub")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_len_sub.) (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (=> (vstd!multiset.impl&%0.subset_of.? V&. V& m2! m1!) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!)) (Sub (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!))))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!))) ))))
(set-info :comment ";; Broadcast vstd::multiset::axiom_count_le_len")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_count_le_len.) (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (=> (and (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (<= (vstd!multiset.impl&%0.count.? V&. V& m! v!) (vstd!multiset.impl&%0.len.? V&. V& m!))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m! v!) (vstd!multiset.impl&%0.len.? V&. V& m!)) ))))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Int Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Int) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly)) (! (=> (exists ((v$ Poly)) (! (and (has_type v$ %%hole%%0) (> (vstd!multiset.impl&%0.count.? %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%4)) :pattern ((vstd!multiset.impl&%0.count.? %%hole%%5 %%hole%%6 %%hole%%7 v$)) )) (exists ((v$ Poly)) (! (and (and (has_type v$ %%hole%%0) (> (vstd!multiset.impl&%0.count.? %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%4)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) v$)) :pattern ((vstd!multiset.impl&%0.count.? %%hole%%5 %%hole%%6 %%hole%%7 v$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7)))))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.choose.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!multiset.impl&%0.choose.? V&. V& self!) (as_type (%%choose%%0 V& V&. V& self! 0 V&. V& self!) V&)) :pattern ((vstd!multiset.impl&%0.choose.? V&. V& self!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type (vstd!multiset.impl&%0.choose.? V&. V& self!) V&)) :pattern ((vstd!multiset.impl&%0.choose.? V&. V& self!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_choose_count")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_choose_count.) (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (=> (not (= (vstd!multiset.impl&%0.len.? V&. V& m!) 0)) (> (vstd!multiset.impl&%0.count.? V&. V& m! (vstd!multiset.impl&%0.choose.? V&. V& m!)) 0))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& m!) (vstd!multiset.impl&%0.count.? V&. V& m! (vstd!multiset.impl&%0.choose.? V&. V& m!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::dom")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.dom.))
(declare-fun %%lambda%%1 (Dcr Type Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Int) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$) (B (> (vstd!multiset.impl&%0.count.? %%hole%%0 %%hole%%1 %%hole%%2 v$) %%hole%%3))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$)))))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.dom.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!multiset.impl&%0.dom.? V&. V& self!) (vstd!set.impl&%0.new.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%1 V&. V& self! 0))))) :pattern ((vstd!multiset.impl&%0.dom.? V&. V& self!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type (vstd!multiset.impl&%0.dom.? V&. V& self!) (TYPE%vstd!set.Set. V&. V&))) :pattern ((vstd!multiset.impl&%0.dom.? V&. V& self!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_always_finite")
(assert (=> (fuel_bool fuel%vstd!multiset.axiom_multiset_always_finite.) (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (vstd!set.impl&%0.finite.? V&. V& (vstd!multiset.impl&%0.dom.? V&. V& m!))) :pattern ((vstd!set.impl&%0.finite.? V&. V& (vstd!multiset.impl&%0.dom.? V&. V& m!))) ))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%7 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::push_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_multiset")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!) (TYPE%vstd!multiset.Multiset. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::insert")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.insert.) (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (= (vstd!multiset.impl&%0.insert.? V&. V& self! v!) (vstd!multiset.impl&%0.add.? V&. V& self! (vstd!multiset.impl&%0.singleton.? V&. V& v!))) :pattern ((vstd!multiset.impl&%0.insert.? V&. V& self! v!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (has_type (vstd!multiset.impl&%0.insert.? V&. V& self! v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.insert.? V&. V& self! v!)) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::remove")
(declare-fun req%vstd!seq_lib.impl&%0.remove. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!) (=> %%global_location_label%%8 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::remove")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.remove.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.remove.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) (vstd!seq.Seq.subrange.? A&. A& self! (I (Add (%I i!) 1)) (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::remove")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.remove.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.remove.) (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (= (vstd!multiset.impl&%0.remove.? V&. V& self! v!) (vstd!multiset.impl&%0.sub.? V&. V& self! (vstd!multiset.impl&%0.singleton.? V&. V& v!))) :pattern ((vstd!multiset.impl&%0.remove.? V&. V& self! v!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (has_type (vstd!multiset.impl&%0.remove.? V&. V& self! v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.remove.? V&. V& self! v!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::to_multiset_ensures")
(declare-fun ens%vstd!seq_lib.impl&%0.to_multiset_ensures. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (ens%vstd!seq_lib.impl&%0.to_multiset_ensures. A&. A& self!) (and (forall ((a$ Poly)) (! (=> (has_type a$ A&) (ext_eq false (TYPE%vstd!multiset.Multiset. A&. A&) (vstd!seq_lib.impl&%0.to_multiset.? A&. A& (vstd!seq.Seq.push.? A&. A& self! a$)) (vstd!multiset.impl&%0.insert.? A&. A& (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!) a$))) :pattern ((vstd!seq_lib.impl&%0.to_multiset.? A&. A& (vstd!seq.Seq.push.? A&. A& self! a$))) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (ext_eq false (TYPE%vstd!multiset.Multiset. A&. A&) (vstd!seq_lib.impl&%0.to_multiset.? A&. A& (vstd!seq_lib.impl&%0.remove.? A&. A& self! i$)) (vstd!multiset.impl&%0.remove.? A&. A& (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! i$))))) :pattern ((vstd!seq_lib.impl&%0.to_multiset.? A&. A& (vstd!seq_lib.impl&%0.remove.? A&. A& self! i$))) )) (= (vstd!seq.Seq.len.? A&. A& self!) (vstd!multiset.impl&%0.len.? A&. A& (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!))) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! a$) (> (vstd!multiset.impl&%0.count.? A&. A& (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!) a$) 0))) :pattern ((vstd!multiset.impl&%0.count.? A&. A& (vstd!seq_lib.impl&%0.to_multiset.? A&. A& self!) a$)) )))) :pattern ((ens%vstd!seq_lib.impl&%0.to_multiset_ensures. A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%2 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%2 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite")
(assert (=> (fuel_bool fuel%vstd!seq_lib.seq_to_set_is_finite.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%1 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%1 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_choose_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_choose_len.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::disjoint")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.disjoint.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.disjoint.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.disjoint.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (not (vstd!set.impl&%0.contains.? A&. A& s2! a$)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.disjoint.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_le")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_le.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_le.? A&. A& self! s2!) (vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_le.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::restrict")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.restrict.))
(declare-fun %%lambda%%3 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%4 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.restrict.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%3 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%4 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::default_value")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.default_value.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.default_value.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.default_value.? no%param) (lib!spec.Messages_t.Value./Value (%I (I 0)))) :pattern ((lib!spec.Messages_t.default_value.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.default_value.? no%param)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.default_value.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::contains")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (< (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::contains_exactly")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.) (forall ((self! Poly) (lsns! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!) (forall ((lsn$ Poly)) (! (=> (has_type lsn$ NAT) (= (vstd!set.impl&%0.contains.? $ NAT lsns! lsn$) (lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT lsns! lsn$)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains.? self! lsn$)) ))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! lsns!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::wf")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))) (lib!abstract_system.MsgHistory_v.impl&%0.contains_exactly.? self! (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_follow")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_follow.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? self! lsn!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::can_discard_to")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!) (and (<= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)) (<= (%I lsn!) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!))))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!)) ))))
(set-info :comment ";; Function-Specs lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(declare-fun req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. (Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((self! Poly) (lsn! Poly)) (! (= (req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. self! lsn!) (=> %%global_location_label%%9 (lib!abstract_system.MsgHistory_v.impl&%0.can_discard_to.? self! lsn!))) :pattern ((req%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent. self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::discard_recent")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.))
(declare-fun %%lambda%%5 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1) k$) (B (and (<= %%hole%%0 (%I k$)) (< (%I k$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1) k$)))))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.) (forall ((self! Poly) (lsn! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!) (let ((keepMap$ (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.) (Poly%fun%1. (mk_fun (%%lambda%%5 (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (%I lsn!)))) (Poly%fun%1. (mk_fun (%%lambda%%4 $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))))))))) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory (%Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. keepMap$)) (%I (I (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) (%I lsn!)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) ))))
(assert (forall ((self! Poly) (lsn! Poly)) (! (=> (and (has_type self! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (has_type lsn! NAT)) (has_type (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? self! lsn!)) )))
(set-info :comment ";; Function-Axioms lib::abstract_system::MsgHistory_v::MsgHistory::is_empty")
(assert (fuel_bool_default fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!abstract_system.MsgHistory_v.impl&%0.is_empty.) (forall ((self! Poly)) (! (= (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!) (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)) (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. self!)))) :pattern ((lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? self!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::submap_of")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.submap_of.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.submap_of.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$)) ))) :pattern ((vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::spec_le")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.spec_le.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.spec_le.? K&. K& V&. V& self! m2!) (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!)) :pattern ((vstd!map_lib.impl&%0.spec_le.? K&. K& V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::last")
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%10 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::last")
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::num_ranges")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.num_ranges.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.num_ranges.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!)))) 1)) :pattern ((lib!betree.PivotTable_v.impl&%0.num_ranges.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Key::lte")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.lte.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.lte.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%1.lte.? a! b!) (<= (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. a!)) (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. b!)))) :pattern ((lib!spec.KeyType_t.impl&%1.lte.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::arrow_e")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%0.arrow_e.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%0.arrow_e.) (forall ((self! Poly)) (! (= (lib!spec.KeyType_t.impl&%0.arrow_e.? self!) (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. self!))) :pattern ((lib!spec.KeyType_t.impl&%0.arrow_e.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.KeyType_t.Element.) (uInv 64 (lib!spec.KeyType_t.impl&%0.arrow_e.? self!))) :pattern ((lib!spec.KeyType_t.impl&%0.arrow_e.? self!)) )))
(set-info :comment ";; Function-Specs lib::spec::KeyType_t::to_key")
(declare-fun req%lib!spec.KeyType_t.to_key. (Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(define-fun is-lib!spec.KeyType_t.Element./Elem_ ((c lib!spec.KeyType_t.Element.)) Bool ((_ is lib!spec.KeyType_t.Element./Elem) c))
(assert (forall ((elem! Poly)) (! (= (req%lib!spec.KeyType_t.to_key. elem!) (=> %%global_location_label%%11 (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. elem!)))) :pattern ((req%lib!spec.KeyType_t.to_key. elem!)) )))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::to_key")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.to_key.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.to_key.) (forall ((elem! Poly)) (! (= (lib!spec.KeyType_t.to_key.? elem!) (lib!spec.KeyType_t.Key./Key (%I (I (lib!spec.KeyType_t.Element./Elem/e (%Poly%lib!spec.KeyType_t.Element. elem!)))))) :pattern ((lib!spec.KeyType_t.to_key.? elem!)) ))))
(assert (forall ((elem! Poly)) (! (=> (has_type elem! TYPE%lib!spec.KeyType_t.Element.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? elem!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!spec.KeyType_t.to_key.? elem!)) )))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::lte")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.lte.))
(define-fun is-lib!spec.KeyType_t.Element./Max_ ((c lib!spec.KeyType_t.Element.)) Bool ((_ is lib!spec.KeyType_t.Element./Max) c))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.lte.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.lte.? a! b!) (or (is-lib!spec.KeyType_t.Element./Max_ (%Poly%lib!spec.KeyType_t.Element. b!)) (and (and (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. a!)) (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. b!))) (lib!spec.KeyType_t.impl&%1.lte.? (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? a!)) (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.to_key.? b!)))))) :pattern ((lib!spec.KeyType_t.impl&%2.lte.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::lt")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.lt.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.lt.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.lt.? a! b!) (and (lib!spec.KeyType_t.impl&%2.lte.? a! b!) (not (= a! b!)))) :pattern ((lib!spec.KeyType_t.impl&%2.lt.? a! b!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::is_strictly_sorted")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.is_strictly_sorted.) (forall ((run! Poly)) (! (= (lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? run!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. run!))) (lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! j$)))) :pattern ((lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! j$))) ))) :pattern ((lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? run!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::wf")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.wf.? self!) (and (and (> (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!) 0) (lib!spec.KeyType_t.impl&%2.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!betree.PivotTable_v.impl&%0.num_ranges.? self!))) (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i$)) )))) :pattern ((lib!betree.PivotTable_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::to_element")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.to_element.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.to_element.) (forall ((key! Poly)) (! (= (lib!spec.KeyType_t.to_element.? key!) (lib!spec.KeyType_t.Element./Elem (%I (I (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. key!)))))) :pattern ((lib!spec.KeyType_t.to_element.? key!)) ))))
(assert (forall ((key! Poly)) (! (=> (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!spec.KeyType_t.to_element.? key!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::bounded_key")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.bounded_key. (Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.bounded_key. self! key!) (=> %%global_location_label%%12 (lib!betree.PivotTable_v.impl&%0.wf.? self!))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.bounded_key. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::bounded_key")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.bounded_key.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.bounded_key.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!) (and (lib!spec.KeyType_t.impl&%2.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I 0)) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!))) (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))))))) :pattern ((lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::largest_lte")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.largest_lte.))
(declare-const fuel_nat%lib!spec.KeyType_t.impl&%2.largest_lte. Fuel)
(assert (forall ((run! Poly) (needle! Poly) (fuel% Fuel)) (! (= (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! fuel%) (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! zero)) :pattern ((lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! fuel%)) )))
(assert (forall ((run! Poly) (needle! Poly) (fuel% Fuel)) (! (=> (and (has_type run! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) (has_type needle! TYPE%lib!spec.KeyType_t.Element.)) (= (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! (succ fuel%)) (ite (or (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. run!) 0) (lib!spec.KeyType_t.impl&%2.lt.? needle! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. run! (I 0)))) (Sub 0 1) (Add 1 (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Element. run! (I 1) (I (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. run!))) needle! fuel%))))) :pattern ((lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.largest_lte.) (forall ((run! Poly) (needle! Poly)) (! (=> (and (has_type run! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Element.)) (has_type needle! TYPE%lib!spec.KeyType_t.Element.)) (= (lib!spec.KeyType_t.impl&%2.largest_lte.? run! needle!) (lib!spec.KeyType_t.impl&%2.rec%largest_lte.? run! needle! (succ fuel_nat%lib!spec.KeyType_t.impl&%2.largest_lte.)))) :pattern ((lib!spec.KeyType_t.impl&%2.largest_lte.? run! needle!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::route")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.route. (Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.route. self! key!) (and (=> %%global_location_label%%13 (lib!betree.PivotTable_v.impl&%0.wf.? self!)) (=> %%global_location_label%%14 (lib!betree.PivotTable_v.impl&%0.bounded_key.? self! key!)))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.route. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::route")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.route.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.route.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.route.? self! key!) (lib!spec.KeyType_t.impl&%2.largest_lte.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.route.? self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::Buffer::contains")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! Self%&) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (lib!betree.Buffer_v.Buffer.contains.? Self%&. Self%& self! key!) BOOL)) :pattern ((lib!betree.Buffer_v.Buffer.contains.? Self%&. Self%& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::Buffer::query")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! Self%&) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::Buffer::insert_ref")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (key! Poly) (msg! Poly)) (! (=> (and (has_type self! Self%&) (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type msg! TYPE%lib!spec.Messages_t.Message.)) (has_type (lib!betree.Buffer_v.Buffer.insert_ref.? Self%&. Self%& self! key! msg!) Self%&)) :pattern ((lib!betree.Buffer_v.Buffer.insert_ref.? Self%&. Self%& self! key! msg!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::Buffer::is_empty")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!betree.Buffer_v.Buffer.is_empty.? Self%&. Self%& self!) BOOL)) :pattern ((lib!betree.Buffer_v.Buffer.is_empty.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::Buffer::i")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!betree.Buffer_v.Buffer.i.? Self%&. Self%& self!) TYPE%lib!betree.Buffer_v.SimpleBuffer.)) :pattern ((lib!betree.Buffer_v.Buffer.i.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::nop_delta")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.nop_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.nop_delta.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.nop_delta.? no%param) (lib!spec.Messages_t.Delta./Delta (%I (I 0)))) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? no%param)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::query_internal")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.query_internal.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.query_internal.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) key!) (%Poly%lib!spec.Messages_t.Message. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) key!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))))) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::insert")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.insert.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.insert.) (forall ((self! Poly) (key! Poly) (msg! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.insert.? self! key! msg!) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) key! msg!)))) :pattern ((lib!betree.Buffer_v.impl&%1.insert.? self! key! msg!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::empty")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.empty.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.empty.) (forall ((no%param Poly)) (! (= (lib!betree.Buffer_v.impl&%1.empty.? no%param) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)))) :pattern ((lib!betree.Buffer_v.impl&%1.empty.? no%param)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::query")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.query.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.query.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!) (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!))) :pattern ((lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::combine_deltas")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.combine_deltas.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.combine_deltas.) (forall ((new! Poly) (old! Poly)) (! (= (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!) (%Poly%lib!spec.Messages_t.Delta. (ite (= (%Poly%lib!spec.Messages_t.Delta. new!) (lib!spec.Messages_t.nop_delta.? (I 0))) old! (ite (= (%Poly%lib!spec.Messages_t.Delta. old!) (lib!spec.Messages_t.nop_delta.? (I 0))) new! new!)))) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) ))))
(assert (forall ((new! Poly) (old! Poly)) (! (=> (and (has_type new! TYPE%lib!spec.Messages_t.Delta.) (has_type old! TYPE%lib!spec.Messages_t.Delta.)) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::apply_delta")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.apply_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.apply_delta.) (forall ((delta! Poly) (value! Poly)) (! (= (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!) (%Poly%lib!spec.Messages_t.Value. value!)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) ))))
(assert (forall ((delta! Poly) (value! Poly)) (! (=> (and (has_type delta! TYPE%lib!spec.Messages_t.Delta.) (has_type value! TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) )))
(set-info :comment ";; Function-Axioms lib::spec::Messages_t::Message::merge")
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.merge.))
(define-fun is-lib!spec.Messages_t.Message./Define_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Define) c))
(define-fun is-lib!spec.Messages_t.Message./Update_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Update) c))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.merge.) (forall ((self! Poly) (new! Poly)) (! (= (lib!spec.Messages_t.impl&%1.merge.? self! new!) (let ((tmp%%$ (tuple%2./tuple%2 self! new!))) (ite (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Define_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. new_value$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((old_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((new_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly%lib!spec.Messages_t.Delta. new_delta$) (Poly%lib!spec.Messages_t.Delta. old_delta$))))))) (let ((value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? (Poly%lib!spec.Messages_t.Delta. delta$) (Poly%lib!spec.Messages_t.Value. value$))))))))))) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) ))))
(assert (forall ((self! Poly) (new! Poly)) (! (=> (and (has_type self! TYPE%lib!spec.Messages_t.Message.) (has_type new! TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.impl&%1.merge.? self! new!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::contains")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.contains.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.contains.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.Buffer.contains.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!) (B (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) key!))) :pattern ((lib!betree.Buffer_v.Buffer.contains.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::insert_ref")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.insert_ref.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.insert_ref.) (forall ((self! Poly) (key! Poly) (msg! Poly)) (! (= (lib!betree.Buffer_v.Buffer.insert_ref.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key! msg!) (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.insert.? self! key! msg!))) :pattern ((lib!betree.Buffer_v.Buffer.insert_ref.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key! msg!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::is_empty")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.is_empty.) (forall ((self! Poly)) (! (= (lib!betree.Buffer_v.Buffer.is_empty.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self!) (B (= (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!) (lib!betree.Buffer_v.impl&%1.empty.? (I 0))))) :pattern ((lib!betree.Buffer_v.Buffer.is_empty.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::SimpleBuffer::i")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.i.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.i.) (forall ((self! Poly)) (! (= (lib!betree.Buffer_v.Buffer.i.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self!) self!) :pattern ((lib!betree.Buffer_v.Buffer.i.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!betree.Buffer_v.Buffer. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::query")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%0.query.))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%0.query.) (forall ((T&. Dcr) (T& Type) (self! Poly) (key! Poly)) (! (= (lib!betree.Memtable_v.impl&%0.query.? T&. T& self! key!) (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? T&. T& (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. self!)) key!))) :pattern ((lib!betree.Memtable_v.impl&%0.query.? T&. T& self! key!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.Memtable_v.impl&%0.query.? T&. T& self! key!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Memtable_v.impl&%0.query.? T&. T& self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::apply_put")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%0.apply_put.))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%0.apply_put.) (forall ((T&. Dcr) (T& Type) (self! Poly) (km! Poly)) (! (= (lib!betree.Memtable_v.impl&%0.apply_put.? T&. T& self! km!) (let ((msg$ (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. (lib!betree.Memtable_v.impl&%0.query.? T&. T& self! (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. km!))))) (Poly%lib!spec.Messages_t.Message. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/message (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. km!)))))) (lib!betree.Memtable_v.Memtable./Memtable (lib!betree.Buffer_v.Buffer.insert_ref.? T&. T& (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. self!)) (Poly%lib!spec.KeyType_t.Key. (lib!abstract_system.MsgHistory_v.KeyedMessage./KeyedMessage/key (%Poly%lib!abstract_system.MsgHistory_v.KeyedMessage. km!))) (Poly%lib!spec.Messages_t.Message. msg$)) (%I (I (nClip (Add (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. self!)) 1))))))) :pattern ((lib!betree.Memtable_v.impl&%0.apply_put.? T&. T& self! km!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (km! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type km! TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage.)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%0.apply_put.? T&. T& self! km!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) :pattern ((lib!betree.Memtable_v.impl&%0.apply_put.? T&. T& self! km!)) )))
(set-info :comment ";; Function-Specs lib::betree::Memtable_v::Memtable::apply_puts")
(declare-fun req%lib!betree.Memtable_v.impl&%0.apply_puts. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (puts! Poly)) (! (= (req%lib!betree.Memtable_v.impl&%0.apply_puts. T&. T& self! puts!) (and (=> %%global_location_label%%15 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? puts!)) (=> %%global_location_label%%16 (lib!abstract_system.MsgHistory_v.impl&%0.can_follow.? puts! (I (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. self!))))) (=> %%global_location_label%%17 (lib!abstract_system.MsgHistory_v.impl&%0.wf.? puts!)))) :pattern ((req%lib!betree.Memtable_v.impl&%0.apply_puts. T&. T& self! puts!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::apply_puts")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%0.apply_puts.))
(declare-const fuel_nat%lib!betree.Memtable_v.impl&%0.apply_puts. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (puts! Poly) (fuel% Fuel)) (! (= (lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! fuel%) (lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! zero)) :pattern ((lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (puts! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!betree.Buffer_v.Buffer. T&. T&) (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type puts! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? puts!)) (= (lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! (succ fuel%)) (ite (lib!abstract_system.MsgHistory_v.impl&%0.is_empty.? puts!) (%Poly%lib!betree.Memtable_v.Memtable. self!) (let ((last_lsn$ (nClip (Sub (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_end (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts!)) 1)))) (lib!betree.Memtable_v.impl&%0.apply_put.? T&. T& (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (lib!abstract_system.MsgHistory_v.impl&%0.discard_recent.? puts! (I last_lsn$))) fuel%)) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!abstract_system.MsgHistory_v.KeyedMessage. (Poly%vstd!map.Map<nat./lib!abstract_system.MsgHistory_v.KeyedMessage.>. (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/msgs (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts!))) (I last_lsn$))))))) :pattern ((lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%0.apply_puts.) (forall ((T&. Dcr) (T& Type) (self! Poly) (puts! Poly)) (! (=> (and (tr_bound%lib!betree.Buffer_v.Buffer. T&. T&) (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type puts! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.) (lib!abstract_system.MsgHistory_v.impl&%0.wf.? puts!)) (= (lib!betree.Memtable_v.impl&%0.apply_puts.? T&. T& self! puts!) (lib!betree.Memtable_v.impl&%0.rec%apply_puts.? T&. T& self! puts! (succ fuel_nat%lib!betree.Memtable_v.impl&%0.apply_puts.)))) :pattern ((lib!betree.Memtable_v.impl&%0.apply_puts.? T&. T& self! puts!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (puts! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type puts! TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%0.apply_puts.? T&. T& self! puts!)) (TYPE%lib!betree.Memtable_v.Memtable. T&. T&))) :pattern ((lib!betree.Memtable_v.impl&%0.apply_puts.? T&. T& self! puts!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::is_empty")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%0.is_empty.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.Memtable_v.impl&%0.is_empty.? T&. T& self!) (%B (lib!betree.Buffer_v.Buffer.is_empty.? T&. T& (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. self!))))) :pattern ((lib!betree.Memtable_v.impl&%0.is_empty.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::empty_memtable")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%1.empty_memtable.))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%1.empty_memtable.) (forall ((lsn! Poly)) (! (= (lib!betree.Memtable_v.impl&%1.empty_memtable.? lsn!) (lib!betree.Memtable_v.Memtable./Memtable (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.empty.? (I 0))) (%I lsn!))) :pattern ((lib!betree.Memtable_v.impl&%1.empty_memtable.? lsn!)) ))))
(assert (forall ((lsn! Poly)) (! (=> (has_type lsn! NAT) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%1.empty_memtable.? lsn!)) (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!betree.Memtable_v.impl&%1.empty_memtable.? lsn!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::drain")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%1.drain.))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%1.drain.) (forall ((self! Poly)) (! (= (lib!betree.Memtable_v.impl&%1.drain.? self!) (lib!betree.Memtable_v.impl&%1.empty_memtable.? (I (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. self!))))) :pattern ((lib!betree.Memtable_v.impl&%1.drain.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%1.drain.? self!)) (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!betree.Memtable_v.impl&%1.drain.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::arrow_start")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%0.arrow_start.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%0.arrow_start.) (forall ((self! Poly)) (! (= (lib!betree.Domain_v.impl&%0.arrow_start.? self!) (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!))) :pattern ((lib!betree.Domain_v.impl&%0.arrow_start.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.impl&%0.arrow_start.? self!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.impl&%0.arrow_start.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::arrow_end")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%0.arrow_end.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%0.arrow_end.) (forall ((self! Poly)) (! (= (lib!betree.Domain_v.impl&%0.arrow_end.? self!) (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. self!))) :pattern ((lib!betree.Domain_v.impl&%0.arrow_end.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.Domain_v.Domain.) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.impl&%0.arrow_end.? self!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.Domain_v.impl&%0.arrow_end.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::wf")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%1.wf.))
(define-fun is-lib!betree.Domain_v.Domain./Domain_ ((c lib!betree.Domain_v.Domain.)) Bool ((_ is lib!betree.Domain_v.Domain./Domain) c))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!betree.Domain_v.impl&%1.wf.? self!) (=> (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. self!)) (and (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!))) (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. self!)))) (is-lib!spec.KeyType_t.Element./Elem_ (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!)))))) :pattern ((lib!betree.Domain_v.impl&%1.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::domain_to_pivots")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.domain_to_pivots.))
(declare-fun %%array%%0 (Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly)) (! (let ((%%x%% (%%array%%0 %%hole%%0 %%hole%%1))) (and (= (%%apply%%1 %%x%% 0) %%hole%%0) (= (%%apply%%1 %%x%% 1) %%hole%%1))) :pattern ((%%array%%0 %%hole%%0 %%hole%%1)) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.domain_to_pivots.) (forall ((domain! Poly)) (! (= (lib!betree.PivotTable_v.domain_to_pivots.? domain!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!view.View.view.? $ (ARRAY $ TYPE%lib!spec.KeyType_t.Element. $ (CONST_INT 2)) (array_new $ TYPE%lib!spec.KeyType_t.Element. 2 (%%array%%0 (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. domain!))) (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. domain!))))))))) :pattern ((lib!betree.PivotTable_v.domain_to_pivots.? domain!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::KeyType_t::Element::min_elem")
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%2.min_elem.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%2.min_elem.) (forall ((no%param Poly)) (! (= (lib!spec.KeyType_t.impl&%2.min_elem.? no%param) (lib!spec.KeyType_t.Element./Elem (%I (I 0)))) :pattern ((lib!spec.KeyType_t.impl&%2.min_elem.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.impl&%2.min_elem.? no%param)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!spec.KeyType_t.impl&%2.min_elem.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::total_domain")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.total_domain.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.total_domain.) (forall ((no%param Poly)) (! (= (lib!betree.Domain_v.total_domain.? no%param) (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.impl&%2.min_elem.? (I 0)))) (%Poly%lib!spec.KeyType_t.Element. (Poly%lib!spec.KeyType_t.Element. lib!spec.KeyType_t.Element./Max)))) :pattern ((lib!betree.Domain_v.total_domain.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.total_domain.? no%param)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((lib!betree.Domain_v.total_domain.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::betree::Domain_v::Domain::contains")
(assert (fuel_bool_default fuel%lib!betree.Domain_v.impl&%1.contains.))
(assert (=> (fuel_bool fuel%lib!betree.Domain_v.impl&%1.contains.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Domain_v.impl&%1.contains.? self! key!) (and (and (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. self!)) (lib!spec.KeyType_t.impl&%2.lte.? (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. self!))) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)))) (lib!spec.KeyType_t.impl&%2.lt.? (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? key!)) (Poly%lib!spec.KeyType_t.Element. (lib!betree.Domain_v.Domain./Domain/end (%Poly%lib!betree.Domain_v.Domain. self!)))))) :pattern ((lib!betree.Domain_v.impl&%1.contains.? self! key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::len")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))))) :pattern ((lib!betree.PivotTable_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotTable_v.PivotTable.) (<= 0 (lib!betree.PivotTable_v.impl&%0.len.? self!))) :pattern ((lib!betree.PivotTable_v.impl&%0.len.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::update")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.update. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.update. self! i! element!) (=> %%global_location_label%%18 (and (<= 0 (%I i!)) (< (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.update. self! i! element!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::update")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.update.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.update.) (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.update.? self! i! element!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq.Seq.update.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i! element!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.update.? self! i! element!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::can_insert")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.can_insert.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.can_insert.) (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.can_insert.? self! i! element!) (and (and (and (and (and (lib!betree.PivotTable_v.impl&%0.wf.? self!) (is-lib!spec.KeyType_t.Element./Elem_ (%Poly%lib!spec.KeyType_t.Element. element!))) (and (<= 0 (%I i!)) (<= (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!)))) (=> (= (%I i!) 0) (lib!spec.KeyType_t.impl&%2.lt.? element! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I 0))))) (=> (= (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!)) (lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!)))) element!))) (=> (and (< 0 (%I i!)) (< (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!))) (and (lib!spec.KeyType_t.impl&%2.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) (I (Sub (%I i!) 1))) element!) (lib!spec.KeyType_t.impl&%2.lt.? element! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i!)))))) :pattern ((lib!betree.PivotTable_v.impl&%0.can_insert.? self! i! element!)) ))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::insert")
(declare-fun req%vstd!seq_lib.impl&%0.insert. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!) (=> %%global_location_label%%19 (and (<= 0 (%I i!)) (<= (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::insert")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.insert.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) a!) (vstd!seq.Seq.subrange.? A&. A& self! i! (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::insert")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.insert. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.insert. self! i! element!) (=> %%global_location_label%%20 (lib!betree.PivotTable_v.impl&%0.can_insert.? self! i! element!))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.insert. self! i! element!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::insert")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.insert.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.insert.) (forall ((self! Poly) (i! Poly) (element! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.insert.? self! i! element!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i! element!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.insert.? self! i! element!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::subrange")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.subrange. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.subrange. self! start! end!) (=> %%global_location_label%%21 (and (and (<= 0 (%I start!)) (<= (%I start!) (%I end!))) (<= (%I end!) (lib!betree.PivotTable_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.subrange. self! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::subrange")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.subrange.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.subrange.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.subrange.? self! start! end!) (lib!betree.PivotTable_v.PivotTable./PivotTable (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) start! end!)))) :pattern ((lib!betree.PivotTable_v.impl&%0.subrange.? self! start! end!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Buffer_v::total_keys")
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.total_keys.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.total_keys.) (forall ((keys! Poly)) (! (= (lib!betree.Buffer_v.total_keys.? keys!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. keys! k$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. keys! k$)) ))) :pattern ((lib!betree.Buffer_v.total_keys.? keys!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::len")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.BufferOffsets_v.BufferOffsets.) (<= 0 (lib!betree.BufferOffsets_v.impl&%0.len.? self!))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.len.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::all_lte")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.all_lte.) (forall ((self! Poly) (target! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.all_lte.? self! target!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))) (<= (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) (%I target!)))) :pattern ((vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) ))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.all_lte.? self! target!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedSeq_v::LinkedSeq::len")
(assert (fuel_bool_default fuel%lib!betree.LinkedSeq_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedSeq_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.LinkedSeq_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. self!))))) :pattern ((lib!betree.LinkedSeq_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (<= 0 (lib!betree.LinkedSeq_v.impl&%0.len.? self!))) :pattern ((lib!betree.LinkedSeq_v.impl&%0.len.? self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::wf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.wf.? self!) (and (and (and (lib!betree.PivotTable_v.impl&%0.wf.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (lib!betree.BufferOffsets_v.impl&%0.len.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) (lib!betree.BufferOffsets_v.impl&%0.all_lte.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I (lib!betree.LinkedSeq_v.impl&%0.len.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::entries_wf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.entries_wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.entries_wf.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$) (lib!betree.LinkedBetree_v.impl&%0.wf.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) addr$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::valid_child_index")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.valid_child_index.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.valid_child_index.) (forall ((self! Poly) (child_idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? self! child_idx!) (< (%I child_idx!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? self! child_idx!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::is_nondangling_ptr")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? self! ptr!) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. ptr!)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. ptr!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? self! ptr!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::DiskView::node_has_nondangling_child_ptrs")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs. (Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((self! Poly) (node! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs. self! node!) (and (=> %%global_location_label%%22 (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!)) (=> %%global_location_label%%23 (lib!betree.LinkedBetree_v.impl&%0.wf.? node!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs. self! node!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::node_has_nondangling_child_ptrs")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.) (forall ((self! Poly) (node! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? self! node!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? node! i$) (lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? self! (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. node!))) i$)))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? node! i$)) ))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? self! node!)) ))))
(set-info :comment ";; Function-Specs lib::betree::PivotTable_v::PivotTable::spec_index")
(declare-fun req%lib!betree.PivotTable_v.impl&%0.spec_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PivotTable_v.impl&%0.spec_index. self! i!) (=> %%global_location_label%%24 (and (<= 0 (%I i!)) (< (%I i!) (lib!betree.PivotTable_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.PivotTable_v.impl&%0.spec_index. self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::PivotTable_v::PivotTable::spec_index")
(assert (fuel_bool_default fuel%lib!betree.PivotTable_v.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!betree.PivotTable_v.impl&%0.spec_index.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PivotTable_v.impl&%0.spec_index.? self! i!) (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. self!))) i!))) :pattern ((lib!betree.PivotTable_v.impl&%0.spec_index.? self! i!)) ))))
(assert (forall ((self! Poly) (i! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotTable_v.PivotTable.) (has_type i! INT)) (has_type (Poly%lib!spec.KeyType_t.Element. (lib!betree.PivotTable_v.impl&%0.spec_index.? self! i!)) TYPE%lib!spec.KeyType_t.Element.)) :pattern ((lib!betree.PivotTable_v.impl&%0.spec_index.? self! i!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::BetreeNode::my_domain")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.my_domain. (Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.my_domain. self!) (=> %%global_location_label%%25 (lib!betree.LinkedBetree_v.impl&%0.wf.? self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.my_domain. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::my_domain")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.my_domain.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.my_domain.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.my_domain.? self!) (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) (I 0))) (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.my_domain.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.LinkedBetree_v.impl&%0.my_domain.? self!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((lib!betree.LinkedBetree_v.impl&%0.my_domain.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::BetreeNode::child_domain")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.child_domain. (Poly Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((self! Poly) (child_idx! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.child_domain. self! child_idx!) (and (=> %%global_location_label%%26 (lib!betree.LinkedBetree_v.impl&%0.wf.? self!)) (=> %%global_location_label%%27 (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? self! child_idx!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.child_domain. self! child_idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::child_domain")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.child_domain.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.child_domain.) (forall ((self! Poly) (child_idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.child_domain.? self! child_idx!) (lib!betree.Domain_v.Domain./Domain (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) child_idx!)) (%Poly%lib!spec.KeyType_t.Element. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) (I (Add (%I child_idx!) 1)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.child_domain.? self! child_idx!)) ))))
(assert (forall ((self! Poly) (child_idx! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (has_type child_idx! NAT)) (has_type (Poly%lib!betree.Domain_v.Domain. (lib!betree.LinkedBetree_v.impl&%0.child_domain.? self! child_idx!)) TYPE%lib!betree.Domain_v.Domain.)) :pattern ((lib!betree.LinkedBetree_v.impl&%0.child_domain.? self! child_idx!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::DiskView::child_linked")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.child_linked. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((self! Poly) (node! Poly) (idx! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.child_linked. self! node! idx!) (and (=> %%global_location_label%%28 (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!)) (=> %%global_location_label%%29 (lib!betree.LinkedBetree_v.impl&%0.wf.? node!)) (=> %%global_location_label%%30 (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? node! idx!)) (=> %%global_location_label%%31 (lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? self! node!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.child_linked. self! node! idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::child_linked")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.child_linked.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.child_linked.) (forall ((self! Poly) (node! Poly) (idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.child_linked.? self! node! idx!) (let ((child_ptr$ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. node!))) idx!)))) (=> (is-core!option.Option./Some_ child_ptr$) (= (lib!betree.LinkedBetree_v.impl&%0.my_domain.? (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. child_ptr$))))) (lib!betree.LinkedBetree_v.impl&%0.child_domain.? node! idx!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.child_linked.? self! node! idx!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::DiskView::node_has_linked_children")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children. (Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((self! Poly) (node! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children. self! node!) (and (=> %%global_location_label%%32 (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!)) (=> %%global_location_label%%33 (lib!betree.LinkedBetree_v.impl&%0.wf.? node!)) (=> %%global_location_label%%34 (lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? self! node!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children. self! node!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::node_has_linked_children")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.) (forall ((self! Poly) (node! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.? self! node!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? node! i$) (lib!betree.LinkedBetree_v.impl&%1.child_linked.? self! node! i$))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? node! i$)) ))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.? self! node!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::DiskView::healthy_child_ptrs")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs. (Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs. self!) (=> %%global_location_label%%35 (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::healthy_child_ptrs")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$) (and (lib!betree.LinkedBetree_v.impl&%1.node_has_nondangling_child_ptrs.? self! (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) addr$)) (lib!betree.LinkedBetree_v.impl&%1.node_has_linked_children.? self! (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) addr$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$)) ))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::wf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.wf.? self!) (and (and (lib!betree.LinkedBetree_v.impl&%1.entries_wf.? self!) (lib!betree.LinkedBetree_v.impl&%1.healthy_child_ptrs.? self!)) (vstd!set.impl&%0.finite.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::wf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (and (lib!betree.LinkedBetree_v.impl&%1.wf.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::has_root")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.has_root.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.has_root.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (and (is-core!option.Option./Some_ (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::QueryReceipt::structure")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%8.structure.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%8.structure.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%8.structure.? T&. T& self!) (and (and (and (and (and (and (< 0 (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))) (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))))) (= (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) (I 0)))) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))) (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i$)))))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i$))))))) ))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))) (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i$)))))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i$))))))) ))) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (= (=> (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))) (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i$)))))) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))) 1)))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i$)))))) ))) (= (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.last.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.default_value.? (I 0)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%8.structure.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::QueryReceiptLine::wf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%7.wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%7.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%7.wf.? T&. T& self!) (is-lib!spec.Messages_t.Message./Define_ (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. self!)))) :pattern ((lib!betree.LinkedBetree_v.impl&%7.wf.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::DiskView::node_children_respects_rank")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((self! Poly) (ranking! Poly) (addr! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank. self! ranking! addr!) (and (=> %%global_location_label%%36 (lib!betree.LinkedBetree_v.impl&%1.wf.? self!)) (=> %%global_location_label%%37 (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr!)) (=> %%global_location_label%%38 (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) addr!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank. self! ranking! addr!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::node_children_respects_rank")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.) (forall ((self! Poly) (ranking! Poly) (addr! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.? self! ranking! addr!) (let ((node$ (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) addr!)))) (forall ((idx$ Poly)) (! (=> (has_type idx$ NAT) (=> (and (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$) idx$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$)))) idx$)))) (let ((child_addr$ (%Poly%lib!spec.AsyncDisk_t.Address. (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$)))) idx$)))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) (Poly%lib!spec.AsyncDisk_t.Address. child_addr$)) (< (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! (Poly%lib!spec.AsyncDisk_t.Address. child_addr$))) (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! addr!))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$) idx$)) )))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.? self! ranking! addr!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::valid_ranking")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.valid_ranking.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.valid_ranking.) (forall ((self! Poly) (ranking! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.valid_ranking.? self! ranking!) (and (lib!betree.LinkedBetree_v.impl&%1.wf.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) addr$)) (lib!betree.LinkedBetree_v.impl&%1.node_children_respects_rank.? self! ranking! addr$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addr$)) )))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.valid_ranking.? self! ranking!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::valid_ranking")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.valid_ranking.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.valid_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!) (and (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%1.valid_ranking.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) ranking!)) (=> (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::acyclic")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.acyclic.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.acyclic.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!) (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (exists ((ranking$ Poly)) (! (and (has_type ranking$ (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking$)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking$)) )))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::repr")
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%0.repr.))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%0.repr.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.BufferDisk_v.impl&%0.repr.? T&. T& self!) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T& (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. self!))))) :pattern ((lib!betree.BufferDisk_v.impl&%0.repr.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::valid_buffers")
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%0.valid_buffers.))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%0.valid_buffers.) (forall ((T&. Dcr) (T& Type) (self! Poly) (buffers! Poly)) (! (= (lib!betree.BufferDisk_v.impl&%0.valid_buffers.? T&. T& self! buffers!) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. buffers!)))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.BufferDisk_v.impl&%0.repr.? T&. T& self!)))) :pattern ((lib!betree.BufferDisk_v.impl&%0.valid_buffers.? T&. T& self! buffers!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::DiskView::get")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.get. (Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((self! Poly) (ptr! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.get. self! ptr!) (and (=> %%global_location_label%%39 (lib!betree.LinkedBetree_v.impl&%1.is_nondangling_ptr.? self! ptr!)) (=> %%global_location_label%%40 (is-core!option.Option./Some_ (%Poly%core!option.Option. ptr!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.get. self! ptr!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::get")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.get.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.get.) (forall ((self! Poly) (ptr! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.get.? self! ptr!) (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. ptr!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.get.? self! ptr!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::root")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.root. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.root. T&. T& self!) (=> %%global_location_label%%41 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.root. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::root")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.root.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.root.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%1.get.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::QueryReceipt::node")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%8.node. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%8.node. T&. T& self! i!) (and (=> %%global_location_label%%42 (lib!betree.LinkedBetree_v.impl&%8.structure.? T&. T& self!)) (=> %%global_location_label%%43 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))) 1)))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%8.node. T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::QueryReceipt::node")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%8.node.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%8.node.) (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%8.node.? T&. T& self! i!) (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%8.node.? T&. T& self! i!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::key_in_domain")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.key_in_domain.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.key_in_domain.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? self! key!) (and (lib!betree.LinkedBetree_v.impl&%0.wf.? self!) (lib!betree.PivotTable_v.impl&%0.bounded_key.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) key!))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? self! key!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::QueryReceipt::all_lines_wf")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%9.all_lines_wf. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%9.all_lines_wf. T&. T& self!) (=> %%global_location_label%%44 (lib!betree.LinkedBetree_v.impl&%8.structure.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%9.all_lines_wf. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::QueryReceipt::all_lines_wf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%9.all_lines_wf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%9.all_lines_wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%9.all_lines_wf.? T&. T& self!) (and (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))))) (lib!betree.LinkedBetree_v.impl&%7.wf.? T&. T& (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i$)))) :pattern ((lib!betree.LinkedBetree_v.impl&%7.wf.? T&. T& (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i$))) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))))) (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i$))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i$)))))) ))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))) 1))) (lib!betree.BufferDisk_v.impl&%0.valid_buffers.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))))) (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%8.node.? T&. T& self! i$)))))))) :pattern ((lib!betree.BufferDisk_v.impl&%0.valid_buffers.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))))) (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%8.node.? T&. T& self! i$))))))) ))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))) 1))) (lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%8.node.? T&. T& self! i$)) (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%8.node.? T&. T& self! i$)) (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))))) )))) :pattern ((lib!betree.LinkedBetree_v.impl&%9.all_lines_wf.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::BetreeNode::child_ptr")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.child_ptr. (Poly Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.child_ptr. self! key!) (=> %%global_location_label%%45 (lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? self! key!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.child_ptr. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::child_ptr")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.child_ptr.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.child_ptr.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.child_ptr.? self! key!) (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) key!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.child_ptr.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%core!option.Option. (lib!betree.LinkedBetree_v.impl&%0.child_ptr.? self! key!)) (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.child_ptr.? self! key!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::QueryReceipt::child_linked_at")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%8.child_linked_at. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%8.child_linked_at. T&. T& self! i!) (and (=> %%global_location_label%%46 (lib!betree.LinkedBetree_v.impl&%8.structure.? T&. T& self!)) (=> %%global_location_label%%47 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))) 1)))) (=> %%global_location_label%%48 (lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%8.node.? T&. T& self! i!)) (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%8.child_linked_at. T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::QueryReceipt::child_linked_at")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%8.child_linked_at.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%8.child_linked_at.) (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%8.child_linked_at.? T&. T& self! i!) (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) (I (Add (%I i!) 1)))))))) (lib!betree.LinkedBetree_v.impl&%0.child_ptr.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%8.node.? T&. T& self! i!)) (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%8.child_linked_at.? T&. T& self! i!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::BetreeNode::flushed_ofs")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.flushed_ofs. (Poly Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.flushed_ofs. self! key!) (=> %%global_location_label%%49 (lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? self! key!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.flushed_ofs. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::flushed_ofs")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.? self! key!) (%I (let ((r$ (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) key!))) (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) (I r$))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (<= 0 (lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.? self! key!))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.? self! key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::query")
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%1.query.))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%1.query.) (forall ((T&. Dcr) (T& Type) (self! Poly) (addr! Poly) (k! Poly)) (! (= (lib!betree.BufferDisk_v.impl&%1.query.? T&. T& self! addr! k!) (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? T&. T& (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T& (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. self!)) addr!) k!))) :pattern ((lib!betree.BufferDisk_v.impl&%1.query.? T&. T& self! addr! k!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (addr! Poly) (k! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (has_type addr! TYPE%lib!spec.AsyncDisk_t.Address.) (has_type k! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferDisk_v.impl&%1.query.? T&. T& self! addr! k!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.BufferDisk_v.impl&%1.query.? T&. T& self! addr! k!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedSeq_v::LinkedSeq::spec_index")
(declare-fun req%lib!betree.LinkedSeq_v.impl&%0.spec_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.LinkedSeq_v.impl&%0.spec_index. self! i!) (=> %%global_location_label%%50 (and (<= 0 (%I i!)) (< (%I i!) (lib!betree.LinkedSeq_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.LinkedSeq_v.impl&%0.spec_index. self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedSeq_v::LinkedSeq::spec_index")
(assert (fuel_bool_default fuel%lib!betree.LinkedSeq_v.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedSeq_v.impl&%0.spec_index.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.LinkedSeq_v.impl&%0.spec_index.? self! i!) (%Poly%lib!spec.AsyncDisk_t.Address. (vstd!seq.Seq.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. self!))) i!))) :pattern ((lib!betree.LinkedSeq_v.impl&%0.spec_index.? self! i!)) ))))
(assert (forall ((self! Poly) (i! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (has_type i! INT)) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedSeq_v.impl&%0.spec_index.? self! i!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!betree.LinkedSeq_v.impl&%0.spec_index.? self! i!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferDisk_v::BufferDisk::query_from")
(declare-fun req%lib!betree.BufferDisk_v.impl&%1.query_from. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (buffers! Poly) (k! Poly) (start! Poly)) (! (= (req%lib!betree.BufferDisk_v.impl&%1.query_from. T&. T& self! buffers! k! start!) (and (=> %%global_location_label%%51 (lib!betree.BufferDisk_v.impl&%0.valid_buffers.? T&. T& self! buffers!)) (=> %%global_location_label%%52 (and (<= 0 (%I start!)) (<= (%I start!) (lib!betree.LinkedSeq_v.impl&%0.len.? buffers!)))) (=> %%global_location_label%%53 (<= (%I start!) (lib!betree.LinkedSeq_v.impl&%0.len.? buffers!))))) :pattern ((req%lib!betree.BufferDisk_v.impl&%1.query_from. T&. T& self! buffers! k! start!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::query_from")
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%1.query_from.))
(declare-const fuel_nat%lib!betree.BufferDisk_v.impl&%1.query_from. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (buffers! Poly) (k! Poly) (start! Poly) (fuel% Fuel)) (! (= (lib!betree.BufferDisk_v.impl&%1.rec%query_from.? T&. T& self! buffers! k! start! fuel%) (lib!betree.BufferDisk_v.impl&%1.rec%query_from.? T&. T& self! buffers! k! start! zero)) :pattern ((lib!betree.BufferDisk_v.impl&%1.rec%query_from.? T&. T& self! buffers! k! start! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (buffers! Poly) (k! Poly) (start! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!betree.Buffer_v.Buffer. T&. T&) (has_type self! (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (has_type buffers! TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (has_type k! TYPE%lib!spec.KeyType_t.Key.) (has_type start! INT) (<= (%I start!) (lib!betree.LinkedSeq_v.impl&%0.len.? buffers!))) (= (lib!betree.BufferDisk_v.impl&%1.rec%query_from.? T&. T& self! buffers! k! start! (succ fuel%)) (ite (= (%I start!) (lib!betree.LinkedSeq_v.impl&%0.len.? buffers!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))) (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferDisk_v.impl&%1.query.? T&. T& self! (vstd!seq.Seq.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. buffers!))) start!) k!)) (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferDisk_v.impl&%1.rec%query_from.? T&. T& self! buffers! k! (I (Add (%I start!) 1)) fuel%)))))) :pattern ((lib!betree.BufferDisk_v.impl&%1.rec%query_from.? T&. T& self! buffers! k! start! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%1.query_from.) (forall ((T&. Dcr) (T& Type) (self! Poly) (buffers! Poly) (k! Poly) (start! Poly)) (! (=> (and (tr_bound%lib!betree.Buffer_v.Buffer. T&. T&) (has_type self! (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (has_type buffers! TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (has_type k! TYPE%lib!spec.KeyType_t.Key.) (has_type start! INT) (<= (%I start!) (lib!betree.LinkedSeq_v.impl&%0.len.? buffers!))) (= (lib!betree.BufferDisk_v.impl&%1.query_from.? T&. T& self! buffers! k! start!) (lib!betree.BufferDisk_v.impl&%1.rec%query_from.? T&. T& self! buffers! k! start! (succ fuel_nat%lib!betree.BufferDisk_v.impl&%1.query_from.)))) :pattern ((lib!betree.BufferDisk_v.impl&%1.query_from.? T&. T& self! buffers! k! start!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (buffers! Poly) (k! Poly) (start! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (has_type buffers! TYPE%lib!betree.LinkedSeq_v.LinkedSeq.) (has_type k! TYPE%lib!spec.KeyType_t.Key.) (has_type start! INT)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferDisk_v.impl&%1.query_from.? T&. T& self! buffers! k! start!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.BufferDisk_v.impl&%1.query_from.? T&. T& self! buffers! k! start!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::QueryReceipt::result_at")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%8.result_at. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%8.result_at. T&. T& self! i!) (=> %%global_location_label%%54 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%8.result_at. T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::QueryReceipt::result_at")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%8.result_at.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%8.result_at.) (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%8.result_at.? T&. T& self! i!) (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i!)))) :pattern ((lib!betree.LinkedBetree_v.impl&%8.result_at.? T&. T& self! i!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&)) (has_type i! INT)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.LinkedBetree_v.impl&%8.result_at.? T&. T& self! i!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.LinkedBetree_v.impl&%8.result_at.? T&. T& self! i!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::QueryReceipt::result_linked_at")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%9.result_linked_at. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%9.result_linked_at. T&. T& self! i!) (and (=> %%global_location_label%%55 (lib!betree.LinkedBetree_v.impl&%8.structure.? T&. T& self!)) (=> %%global_location_label%%56 (lib!betree.LinkedBetree_v.impl&%9.all_lines_wf.? T&. T& self!)) (=> %%global_location_label%%57 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))) 1)))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%9.result_linked_at. T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::QueryReceipt::result_linked_at")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%9.result_linked_at.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%9.result_linked_at.) (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%9.result_linked_at.? T&. T& self! i!) (let ((start$ (lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%8.node.? T&. T& self! i!)) (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))))) (let ((msg$ (lib!betree.BufferDisk_v.impl&%1.query_from.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)))))) (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%8.node.? T&. T& self! i!))))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))) (I start$)))) (= (lib!betree.LinkedBetree_v.QueryReceiptLine./QueryReceiptLine/result (%Poly%lib!betree.LinkedBetree_v.QueryReceiptLine. (vstd!seq.Seq.index.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) i!))) (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. (lib!betree.LinkedBetree_v.impl&%8.result_at.? T&. T& self! (I (Add (%I i!) 1)))) (Poly%lib!spec.Messages_t.Message. msg$)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%9.result_linked_at.? T&. T& self! i!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::QueryReceipt::valid")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%9.valid.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%9.valid.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%9.valid.? T&. T& self!) (and (and (and (lib!betree.LinkedBetree_v.impl&%8.structure.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%9.all_lines_wf.? T&. T& self!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))) 1))) (lib!betree.LinkedBetree_v.impl&%8.child_linked_at.? T&. T& self! i$))) :pattern ((lib!betree.LinkedBetree_v.impl&%8.child_linked_at.? T&. T& self! i$)) ))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ (TYPE%lib!betree.LinkedBetree_v.QueryReceiptLine. T&. T&) (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/lines (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!))) 1))) (lib!betree.LinkedBetree_v.impl&%9.result_linked_at.? T&. T& self! i$))) :pattern ((lib!betree.LinkedBetree_v.impl&%9.result_linked_at.? T&. T& self! i$)) )))) :pattern ((lib!betree.LinkedBetree_v.impl&%9.valid.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::QueryReceipt::valid_for")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%9.valid_for.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%9.valid_for.) (forall ((T&. Dcr) (T& Type) (self! Poly) (linked! Poly) (key! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%9.valid_for.? T&. T& self! linked! key!) (and (and (lib!betree.LinkedBetree_v.impl&%9.valid.? T&. T& self!) (= (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/linked (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. linked!))) (= (lib!betree.LinkedBetree_v.QueryReceipt./QueryReceipt/key (%Poly%lib!betree.LinkedBetree_v.QueryReceipt. self!)) (%Poly%lib!spec.KeyType_t.Key. key!)))) :pattern ((lib!betree.LinkedBetree_v.impl&%9.valid_for.? T&. T& self! linked! key!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::QueryReceipt::result")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%8.result. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%8.result. T&. T& self!) (=> %%global_location_label%%58 (lib!betree.LinkedBetree_v.impl&%8.structure.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%8.result. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::QueryReceipt::result")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%8.result.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%8.result.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%8.result.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%8.result_at.? T&. T& self! (I 0))) :pattern ((lib!betree.LinkedBetree_v.impl&%8.result.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.QueryReceipt. T&. T&)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.LinkedBetree_v.impl&%8.result.? T&. T& self!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.LinkedBetree_v.impl&%8.result.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::query")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.query.))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query) c))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.query.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (lbl! Poly) (receipt! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.query.? T&. T& pre! post! lbl! receipt!) (let ((update_tmp_memtable$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (let ((update_tmp_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lbl!))) (and (and (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query_ tmp_for_match_0$) (let ((end_lsn$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/end_lsn (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. tmp_for_match_0$))))) (let ((key$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/key (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. tmp_for_match_0$))))) (let ((value$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/value (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query_ tmp_for_match_0$) (let ((end_lsn$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/end_lsn (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. tmp_for_match_0$))))) (let ((key$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/key (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. tmp_for_match_0$))))) (let ((value$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query/value (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. tmp_for_match_0$))))) (tuple%3./tuple%3 (I end_lsn$) (Poly%lib!spec.KeyType_t.Key. key$) (Poly%lib!spec.Messages_t.Value. value$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ NAT $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Value.)))))) (let ((end_lsn$ (%I (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((key$ (%Poly%lib!spec.KeyType_t.Key. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((value$ (%Poly%lib!spec.Messages_t.Value. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (and (= end_lsn$ (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))))) (and (lib!betree.LinkedBetree_v.impl&%9.valid_for.? T&. T& receipt! (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!))) (Poly%lib!spec.KeyType_t.Key. key$)) (= (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. value$))) (lib!spec.Messages_t.impl&%1.merge.? (Poly%lib!spec.Messages_t.Message. (lib!betree.LinkedBetree_v.impl&%8.result.? T&. T& receipt!)) (Poly%lib!spec.Messages_t.Message. (lib!betree.Memtable_v.impl&%0.query.? T&. T& (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!))) (Poly%lib!spec.KeyType_t.Key. key$))))))))))))) (and (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_linked$) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.query.? T&. T& pre! post! lbl! receipt!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::put")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.put.))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put) c))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.put.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.put.? T&. T& pre! post! lbl!) (let ((update_tmp_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lbl!))) (and (and (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put_ tmp_for_match_0$) (let ((puts$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put/puts (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. tmp_for_match_0$))))) true)) (let ((puts$ (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put_ tmp_for_match_0$) (let ((puts$2 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put/puts (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. tmp_for_match_0$))))) puts$2) (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (vstd!pervasive.arbitrary.? $ TYPE%lib!abstract_system.MsgHistory_v.MsgHistory.))))) (and (lib!abstract_system.MsgHistory_v.impl&%0.wf.? (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts$)) (and (= (lib!abstract_system.MsgHistory_v.MsgHistory./MsgHistory/seq_start (%Poly%lib!abstract_system.MsgHistory_v.MsgHistory. (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts$))) (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))))) (let ((update_tmp_memtable$ (lib!betree.Memtable_v.impl&%0.apply_puts.? T&. T& (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!))) (Poly%lib!abstract_system.MsgHistory_v.MsgHistory. puts$)))) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_memtable$))))))) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_linked$)))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.put.? T&. T& pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::i")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%4.i.))
(declare-fun %%lambda%%6 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2) k$) (B (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2) k$)))))
(declare-fun %%lambda%%7 (Dcr Type Dcr Type Poly Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Dcr) (%%hole%%6 Type) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) k$) (lib!betree.Buffer_v.Buffer.i.? %%hole%%5 %%hole%%6 (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%4.i.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%4.i.? T&. T& self!) (let ((entries$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. $ (TYPE%fun%1. $ TYPE%lib!spec.AsyncDisk_t.Address. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.) (Poly%fun%1. (mk_fun (%%lambda%%6 $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T& (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. self!)))))) (Poly%fun%1. (mk_fun (%%lambda%%7 $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T& (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. self!)) T&. T&))))))) (lib!betree.BufferDisk_v.BufferDisk./BufferDisk (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.Buffer_v.SimpleBuffer.>. entries$)))) :pattern ((lib!betree.LinkedBetree_v.impl&%4.i.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (has_type (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.impl&%4.i.? T&. T& self!)) (TYPE%lib!betree.BufferDisk_v.BufferDisk. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!betree.LinkedBetree_v.impl&%4.i.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::i_buffer")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%6.i_buffer.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%6.i_buffer.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%6.i_buffer.? T&. T& self!) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.impl&%4.i.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%6.i_buffer.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%6.i_buffer.? T&. T& self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!betree.LinkedBetree_v.impl&%6.i_buffer.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::freeze_as")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.freeze_as.))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs) c))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.freeze_as.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.freeze_as.? T&. T& pre! post! lbl!) (let ((update_tmp_memtable$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (let ((update_tmp_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (and (let ((tmp_for_match_0$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lbl!))) (and (and (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs_ tmp_for_match_0$) (let ((stamped_betree$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs/stamped_betree (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. tmp_for_match_0$))))) true)) (let ((stamped_betree$ (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs_ tmp_for_match_0$) (let ((stamped_betree$2 (lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs/stamped_betree (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. tmp_for_match_0$))))) stamped_betree$2) (%Poly%lib!abstract_system.StampedMap_v.Stamped. (vstd!pervasive.arbitrary.? $ (TYPE%lib!abstract_system.StampedMap_v.Stamped. $ (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))))))) (and (lib!betree.Memtable_v.impl&%0.is_empty.? T&. T& (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (and (= (lib!abstract_system.StampedMap_v.Stamped./Stamped/seq_end (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_betree$))) (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))))) (= (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!abstract_system.StampedMap_v.Stamped./Stamped/value (%Poly%lib!abstract_system.StampedMap_v.Stamped. (Poly%lib!abstract_system.StampedMap_v.Stamped. stamped_betree$)))) (lib!betree.LinkedBetree_v.impl&%6.i_buffer.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))))))))) (and (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_linked$) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.freeze_as.? T&. T& pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::Addrs::no_duplicates")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!betree.LinkedBetree_v.Addrs.no_duplicates.? Self%&. Self%& self!) BOOL)) :pattern ((lib!betree.LinkedBetree_v.Addrs.no_duplicates.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::Addrs::repr")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!betree.LinkedBetree_v.Addrs.repr.? Self%&. Self%& self!) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!betree.LinkedBetree_v.Addrs.repr.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::TwoAddrs::no_duplicates")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%2.no_duplicates.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%2.no_duplicates.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.Addrs.no_duplicates.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. self!) (B (not (= (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. self!)) (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. self!)))))) :pattern ((lib!betree.LinkedBetree_v.Addrs.no_duplicates.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::Memtable_v::Memtable::i")
(assert (fuel_bool_default fuel%lib!betree.Memtable_v.impl&%0.i.))
(assert (=> (fuel_bool fuel%lib!betree.Memtable_v.impl&%0.i.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.Memtable_v.impl&%0.i.? T&. T& self!) (lib!betree.Memtable_v.Memtable./Memtable (lib!betree.Buffer_v.Buffer.i.? T&. T& (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. self!))) (%I (I (lib!betree.Memtable_v.Memtable./Memtable/seq_end (%Poly%lib!betree.Memtable_v.Memtable. self!)))))) :pattern ((lib!betree.Memtable_v.impl&%0.i.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%0.i.? T&. T& self!)) (TYPE%lib!betree.Memtable_v.Memtable. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!betree.Memtable_v.impl&%0.i.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::is_fresh")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.is_fresh.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.is_fresh.) (forall ((self! Poly) (addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.is_fresh.? self! addrs!) (vstd!set.impl&%0.disjoint.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!)))) addrs!)) :pattern ((lib!betree.LinkedBetree_v.impl&%1.is_fresh.? self! addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::is_fresh")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.is_fresh.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.is_fresh.) (forall ((T&. Dcr) (T& Type) (self! Poly) (addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& self! addrs!) (and (lib!betree.LinkedBetree_v.impl&%1.is_fresh.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) addrs!) (vstd!set.impl&%0.disjoint.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.BufferDisk_v.impl&%0.repr.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))) addrs!))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& self! addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::TwoAddrs::repr")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%2.repr.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%2.repr.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. self!) (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. self!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. self!))))) :pattern ((lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedSeq_v::LinkedSeq::extend")
(assert (fuel_bool_default fuel%lib!betree.LinkedSeq_v.impl&%0.extend.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedSeq_v.impl&%0.extend.) (forall ((self! Poly) (new_addrs! Poly)) (! (= (lib!betree.LinkedSeq_v.impl&%0.extend.? self! new_addrs!) (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (vstd!seq.Seq.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. self!))) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. new_addrs!))))))) :pattern ((lib!betree.LinkedSeq_v.impl&%0.extend.? self! new_addrs!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::BetreeNode::extend_buffer_seq")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq. (Poly Poly) Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((self! Poly) (buffers! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq. self! buffers!) (=> %%global_location_label%%59 (lib!betree.LinkedBetree_v.impl&%0.wf.? self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq. self! buffers!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::extend_buffer_seq")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq.) (forall ((self! Poly) (buffers! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq.? self! buffers!) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.impl&%0.extend.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) buffers!))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq.? self! buffers!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedSeq_v::LinkedSeq::empty")
(assert (fuel_bool_default fuel%lib!betree.LinkedSeq_v.impl&%0.empty.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedSeq_v.impl&%0.empty.) (forall ((no%param Poly)) (! (= (lib!betree.LinkedSeq_v.impl&%0.empty.? no%param) (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (vstd!seq.Seq.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.)))) :pattern ((lib!betree.LinkedSeq_v.impl&%0.empty.? no%param)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::BetreeNode::empty_root")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.empty_root. (Poly) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((domain! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.empty_root. domain!) (and (=> %%global_location_label%%60 (lib!betree.Domain_v.impl&%1.wf.? domain!)) (=> %%global_location_label%%61 (is-lib!betree.Domain_v.Domain./Domain_ (%Poly%lib!betree.Domain_v.Domain. domain!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.empty_root. domain!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::empty_root")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.empty_root.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.empty_root.) (forall ((domain! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.empty_root.? domain!) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.impl&%0.empty.? (I 0)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.domain_to_pivots.? domain!))) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (vstd!seq.Seq.push.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (vstd!seq.Seq.empty.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (Poly%core!option.Option. core!option.Option./None))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.push.? $ NAT (vstd!seq.Seq.empty.? $ NAT) (I 0)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.empty_root.? domain!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::modify_disk")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.modify_disk.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.modify_disk.) (forall ((self! Poly) (addr! Poly) (node! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? self! addr! node!) (lib!betree.LinkedBetree_v.DiskView./DiskView (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) addr! node!)))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.modify_disk.? self! addr! node!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::modify_disk")
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%0.modify_disk.))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%0.modify_disk.) (forall ((T&. Dcr) (T& Type) (self! Poly) (addr! Poly) (buffer! Poly)) (! (= (lib!betree.BufferDisk_v.impl&%0.modify_disk.? T&. T& self! addr! buffer!) (lib!betree.BufferDisk_v.BufferDisk./BufferDisk (vstd!map.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T& (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. self!)) addr! buffer!))) :pattern ((lib!betree.BufferDisk_v.impl&%0.modify_disk.? T&. T& self! addr! buffer!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (addr! Poly) (buffer! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (has_type addr! TYPE%lib!spec.AsyncDisk_t.Address.) (has_type buffer! T&)) (has_type (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.BufferDisk_v.impl&%0.modify_disk.? T&. T& self! addr! buffer!)) (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&))) :pattern ((lib!betree.BufferDisk_v.impl&%0.modify_disk.? T&. T& self! addr! buffer!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::push_memtable")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.push_memtable. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (memtable! Poly) (new_addrs! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.push_memtable. T&. T& self! memtable! new_addrs!) (and (=> %%global_location_label%%62 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!)) (=> %%global_location_label%%63 (%B (lib!betree.LinkedBetree_v.Addrs.no_duplicates.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))) (=> %%global_location_label%%64 (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& self! (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.push_memtable. T&. T& self! memtable! new_addrs!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::push_memtable")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.push_memtable.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.push_memtable.) (forall ((T&. Dcr) (T& Type) (self! Poly) (memtable! Poly) (new_addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.push_memtable.? T&. T& self! memtable! new_addrs!) (let ((memtable_buffer$ (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (vstd!seq.Seq.push.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!seq.Seq.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))))))) (let ((new_root$ (ite (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) (Poly%lib!betree.LinkedSeq_v.LinkedSeq. memtable_buffer$)) (lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%0.empty_root.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.total_domain.? (I 0))))) (Poly%lib!betree.LinkedSeq_v.LinkedSeq. memtable_buffer$))))) (let ((new_dv$ (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_root$)))) (let ((new_buffer_dv$ (lib!betree.BufferDisk_v.impl&%0.modify_disk.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))) (lib!betree.Memtable_v.Memtable./Memtable/buffer (%Poly%lib!betree.Memtable_v.Memtable. memtable!))))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))))) (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. new_dv$)) (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. new_buffer_dv$)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.push_memtable.? T&. T& self! memtable! new_addrs!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (memtable! Poly) (new_addrs! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type memtable! (TYPE%lib!betree.Memtable_v.Memtable. T&. T&)) (has_type new_addrs! TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.push_memtable.? T&. T& self! memtable! new_addrs!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.push_memtable.? T&. T& self! memtable! new_addrs!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::is_sub_disk")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.) (forall ((self! Poly) (big! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? self! big!) (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. big!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? self! big!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::agrees")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.agrees.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.agrees.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.agrees.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))) :pattern ((vstd!map_lib.impl&%0.agrees.? K&. K& V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::agrees_with")
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%0.agrees_with.))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%0.agrees_with.) (forall ((T&. Dcr) (T& Type) (self! Poly) (bigger! Poly)) (! (= (lib!betree.BufferDisk_v.impl&%0.agrees_with.? T&. T& self! bigger!) (vstd!map_lib.impl&%0.agrees.? $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T& (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. self!)) (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. bigger!)))) :pattern ((lib!betree.BufferDisk_v.impl&%0.agrees_with.? T&. T& self! bigger!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::valid_view")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.valid_view.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.valid_view.) (forall ((T&. Dcr) (T& Type) (self! Poly) (other! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.valid_view.? T&. T& self! other!) (and (and (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& other!) (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))) (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))) (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))) (lib!betree.BufferDisk_v.impl&%0.agrees_with.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))) (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_view.? T&. T& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_flush_memtable")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush_memtable.))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Internal_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Internal) c))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush_memtable.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (lbl! Poly) (new_memtable! Poly) (new_linked! Poly) (new_addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush_memtable.? T&. T& pre! post! lbl! new_memtable! new_linked! new_addrs!) (and (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Internal_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lbl!)) (and (%B (lib!betree.LinkedBetree_v.Addrs.no_duplicates.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)) (and (= (lib!betree.Memtable_v.impl&%0.i.? T&. T& new_memtable!) (lib!betree.Memtable_v.impl&%1.drain.? (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.Memtable_v.impl&%0.i.? T&. T& (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!))))))) (let ((pushed$ (lib!betree.LinkedBetree_v.impl&%5.push_memtable.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!))) (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!))) new_addrs!))) (and (lib!betree.LinkedBetree_v.impl&%5.valid_view.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. pushed$) new_linked!) (let ((update_tmp_memtable$ (%Poly%lib!betree.Memtable_v.Memtable. new_memtable!))) (let ((update_tmp_linked$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked!))) (and (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_linked$) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_memtable$)))))))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush_memtable.? T&. T& pre! post! lbl! new_memtable! new_linked! new_addrs!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::grow")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.grow. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (new_root_addr! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.grow. T&. T& self! new_root_addr!) (=> %%global_location_label%%65 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.grow. T&. T& self! new_root_addr!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::grow")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.grow.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.grow.) (forall ((T&. Dcr) (T& Type) (self! Poly) (new_root_addr! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.grow.? T&. T& self! new_root_addr!) (let ((new_root$ (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.impl&%0.empty.? (I 0)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.domain_to_pivots.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.Domain_v.total_domain.? (I 0)))))) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (vstd!seq.Seq.push.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (vstd!seq.Seq.empty.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.push.? $ NAT (vstd!seq.Seq.empty.? $ NAT) (I 0))))))))) (let ((new_dv$ (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) new_root_addr! (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_root$)))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some new_root_addr!))) (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. new_dv$)) (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.grow.? T&. T& self! new_root_addr!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (new_root_addr! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type new_root_addr! TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.grow.? T&. T& self! new_root_addr!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.grow.? T&. T& self! new_root_addr!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_grow")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_grow.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_grow.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (lbl! Poly) (new_root_addr! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_grow.? T&. T& pre! post! lbl! new_root_addr!) (let ((update_tmp_memtable$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (and (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Internal_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lbl!)) (let ((update_tmp_linked$ (lib!betree.LinkedBetree_v.impl&%5.grow.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!))) new_root_addr!))) (and (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_linked$) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_grow.? T&. T& pre! post! lbl! new_root_addr!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::SplitRequest_v::SplitRequest::get_child_idx")
(assert (fuel_bool_default fuel%lib!betree.SplitRequest_v.impl&%1.get_child_idx.))
(define-fun is-lib!betree.SplitRequest_v.SplitRequest./SplitLeaf_ ((c lib!betree.SplitRequest_v.SplitRequest.)) Bool ((_ is lib!betree.SplitRequest_v.SplitRequest./SplitLeaf) c))
(assert (=> (fuel_bool fuel%lib!betree.SplitRequest_v.impl&%1.get_child_idx.) (forall ((self! Poly)) (! (= (lib!betree.SplitRequest_v.impl&%1.get_child_idx.? self!) (ite (is-lib!betree.SplitRequest_v.SplitRequest./SplitLeaf_ (%Poly%lib!betree.SplitRequest_v.SplitRequest. self!)) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. self!)))) child_idx$) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. self!)))) child_idx$))) :pattern ((lib!betree.SplitRequest_v.impl&%1.get_child_idx.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.SplitRequest_v.SplitRequest.) (<= 0 (lib!betree.SplitRequest_v.impl&%1.get_child_idx.? self!))) :pattern ((lib!betree.SplitRequest_v.impl&%1.get_child_idx.? self!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::child_at_idx")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.child_at_idx. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.child_at_idx. T&. T& self! idx!) (and (=> %%global_location_label%%66 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!)) (=> %%global_location_label%%67 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (=> %%global_location_label%%68 (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) idx!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.child_at_idx. T&. T& self! idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::child_at_idx")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.child_at_idx.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.child_at_idx.) (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! idx!) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))) idx!)) (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! idx!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type idx! NAT)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! idx!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::is_leaf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.is_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.is_leaf.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.is_leaf.? self!) (and (and (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) 1) (is-core!option.Option./None_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I 0))))) (= (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))))) (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.push.? $ NAT (vstd!seq.Seq.empty.? $ NAT) (I 0)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.is_leaf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::can_split_leaf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.can_split_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.can_split_leaf.) (forall ((self! Poly) (split_key! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.can_split_leaf.? self! split_key!) (and (and (and (lib!betree.LinkedBetree_v.impl&%0.wf.? self!) (lib!betree.LinkedBetree_v.impl&%0.is_leaf.? self!)) (lib!betree.Domain_v.impl&%1.contains.? (Poly%lib!betree.Domain_v.Domain. (lib!betree.LinkedBetree_v.impl&%0.my_domain.? self!)) split_key!)) (not (= (lib!betree.Domain_v.Domain./Domain/start (%Poly%lib!betree.Domain_v.Domain. (Poly%lib!betree.Domain_v.Domain. (lib!betree.LinkedBetree_v.impl&%0.my_domain.? self!)))) (lib!spec.KeyType_t.to_element.? split_key!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.can_split_leaf.? self! split_key!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::is_index")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.is_index.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.is_index.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.is_index.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? self! i$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) i$))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? self! i$)) ))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.is_index.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::can_split_index")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.can_split_index.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.can_split_index.) (forall ((self! Poly) (pivot_idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.can_split_index.? self! pivot_idx!) (and (and (lib!betree.LinkedBetree_v.impl&%0.wf.? self!) (lib!betree.LinkedBetree_v.impl&%0.is_index.? self!)) (and (< 0 (%I pivot_idx!)) (< (%I pivot_idx!) (lib!betree.PivotTable_v.impl&%0.num_ranges.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.can_split_index.? self! pivot_idx!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::can_split_parent")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.can_split_parent.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.can_split_parent.) (forall ((T&. Dcr) (T& Type) (self! Poly) (request! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.can_split_parent.? T&. T& self! request!) (and (and (and (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) (I (lib!betree.SplitRequest_v.impl&%1.get_child_idx.? request!)))) (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! (I (lib!betree.SplitRequest_v.impl&%1.get_child_idx.? request!)))))) (ite (is-lib!betree.SplitRequest_v.SplitRequest./SplitLeaf_ (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((split_key$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (lib!betree.LinkedBetree_v.impl&%0.can_split_leaf.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! (I child_idx$))))) (Poly%lib!spec.KeyType_t.Key. split_key$)))) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((child_pivot_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (lib!betree.LinkedBetree_v.impl&%0.can_split_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! (I child_idx$))))) (I child_pivot_idx$))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.can_split_parent.? T&. T& self! request!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::child_for_key")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.child_for_key. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (k! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.child_for_key. T&. T& self! k!) (and (=> %%global_location_label%%69 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (=> %%global_location_label%%70 (lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) k!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.child_for_key. T&. T& self! k!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::child_for_key")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.child_for_key.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.child_for_key.) (forall ((T&. Dcr) (T& Type) (self! Poly) (k! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.child_for_key.? T&. T& self! k!) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.impl&%0.child_ptr.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) k!))) (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.child_for_key.? T&. T& self! k!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (k! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type k! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_for_key.? T&. T& self! k!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.child_for_key.? T&. T& self! k!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::Path::subpath")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%10.subpath. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%10.subpath. T&. T& self!) (and (=> %%global_location_label%%71 (< 0 (lib!betree.LinkedBetree_v.Path./Path/depth (%Poly%lib!betree.LinkedBetree_v.Path. self!)))) (=> %%global_location_label%%72 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!))))) (=> %%global_location_label%%73 (lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!))))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.Path./Path/key (%Poly%lib!betree.LinkedBetree_v.Path. self!))))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%10.subpath. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::Path::subpath")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%10.subpath.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%10.subpath.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%10.subpath.? T&. T& self!) (lib!betree.LinkedBetree_v.Path./Path (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_for_key.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.Path./Path/key (%Poly%lib!betree.LinkedBetree_v.Path. self!)))))) (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.Path./Path/key (%Poly%lib!betree.LinkedBetree_v.Path. self!)))) (%I (I (nClip (Sub (lib!betree.LinkedBetree_v.Path./Path/depth (%Poly%lib!betree.LinkedBetree_v.Path. self!)) 1)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.subpath.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.impl&%10.subpath.? T&. T& self!)) (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.subpath.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::Path::valid")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%10.valid.))
(declare-const fuel_nat%lib!betree.LinkedBetree_v.impl&%10.valid. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (fuel% Fuel)) (! (= (lib!betree.LinkedBetree_v.impl&%10.rec%valid.? T&. T& self! fuel%) (lib!betree.LinkedBetree_v.impl&%10.rec%valid.? T&. T& self! zero)) :pattern ((lib!betree.LinkedBetree_v.impl&%10.rec%valid.? T&. T& self! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (fuel% Fuel)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (= (lib!betree.LinkedBetree_v.impl&%10.rec%valid.? T&. T& self! (succ fuel%)) (and (and (and (and (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!)))) (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!))))) (lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!))))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.Path./Path/key (%Poly%lib!betree.LinkedBetree_v.Path. self!))))) (=> (< 0 (lib!betree.LinkedBetree_v.Path./Path/depth (%Poly%lib!betree.LinkedBetree_v.Path. self!))) (lib!betree.LinkedBetree_v.impl&%0.is_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!)))))))) (=> (< 0 (lib!betree.LinkedBetree_v.Path./Path/depth (%Poly%lib!betree.LinkedBetree_v.Path. self!))) (lib!betree.LinkedBetree_v.impl&%10.rec%valid.? T&. T& (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.impl&%10.subpath.? T&. T& self!)) fuel%))))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.rec%valid.? T&. T& self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%10.valid.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (= (lib!betree.LinkedBetree_v.impl&%10.valid.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%10.rec%valid.? T&. T& self! (succ fuel_nat%lib!betree.LinkedBetree_v.impl&%10.valid.)))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.valid.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::Path::target")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%10.target. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%74 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%10.target. T&. T& self!) (=> %%global_location_label%%74 (lib!betree.LinkedBetree_v.impl&%10.valid.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%10.target. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::Path::target")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%10.target.))
(declare-const fuel_nat%lib!betree.LinkedBetree_v.impl&%10.target. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (fuel% Fuel)) (! (= (lib!betree.LinkedBetree_v.impl&%10.rec%target.? T&. T& self! fuel%) (lib!betree.LinkedBetree_v.impl&%10.rec%target.? T&. T& self! zero)) :pattern ((lib!betree.LinkedBetree_v.impl&%10.rec%target.? T&. T& self! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (fuel% Fuel)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (= (lib!betree.LinkedBetree_v.impl&%10.rec%target.? T&. T& self! (succ fuel%)) (ite (= (lib!betree.LinkedBetree_v.Path./Path/depth (%Poly%lib!betree.LinkedBetree_v.Path. self!)) 0) (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!)) (lib!betree.LinkedBetree_v.impl&%10.rec%target.? T&. T& (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.impl&%10.subpath.? T&. T& self!)) fuel%)))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.rec%target.? T&. T& self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%10.target.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (= (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%10.rec%target.? T&. T& self! (succ fuel_nat%lib!betree.LinkedBetree_v.impl&%10.target.)))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::SplitAddrs::no_duplicates")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%3.no_duplicates.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%3.no_duplicates.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.Addrs.no_duplicates.? $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs. self!) (B (and (and (not (= (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. self!)) (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. self!)))) (not (= (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. self!)) (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. self!))))) (not (= (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. self!)) (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. self!))))))) :pattern ((lib!betree.LinkedBetree_v.Addrs.no_duplicates.? $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs. self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::SplitAddrs::repr")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%3.repr.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%3.repr.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs. self!) (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. self!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. self!)))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. self!))))) :pattern ((lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs. self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!betree.LinkedBetree_v.Addrs. $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs.))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::no_duplicates")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.no_duplicates.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.no_duplicates.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$)) ))) :pattern ((vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::valid_path_replacement")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.valid_path_replacement.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.valid_path_replacement.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (path! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.valid_path_replacement.? T&. T& A&. A& self! path! new_addrs! path_addrs!) (and (and (and (and (and (lib!betree.LinkedBetree_v.impl&%10.valid.? T&. T& path!) (vstd!seq_lib.impl&%0.no_duplicates.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!)) (= (lib!betree.LinkedBetree_v.Path./Path/depth (%Poly%lib!betree.LinkedBetree_v.Path. path!)) (vstd!seq.Seq.len.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))) (%B (lib!betree.LinkedBetree_v.Addrs.no_duplicates.? A&. A& new_addrs!))) (vstd!set.impl&%0.disjoint.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? A&. A& new_addrs!) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))) (= (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. path!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_path_replacement.? T&. T& A&. A& self! path! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::is_sub_disk")
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%0.is_sub_disk.))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%0.is_sub_disk.) (forall ((T&. Dcr) (T& Type) (self! Poly) (bigger! Poly)) (! (= (lib!betree.BufferDisk_v.impl&%0.is_sub_disk.? T&. T& self! bigger!) (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T& (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. self!)) (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. bigger!)))) :pattern ((lib!betree.BufferDisk_v.impl&%0.is_sub_disk.? T&. T& self! bigger!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::Path::can_substitute")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%10.can_substitute.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%10.can_substitute.) (forall ((T&. Dcr) (T& Type) (self! Poly) (replacement! Poly) (path_addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%10.can_substitute.? T&. T& self! replacement! path_addrs!) (and (and (and (and (and (and (and (lib!betree.LinkedBetree_v.impl&%10.valid.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& self!)))) (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& replacement!)) (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& replacement!)) (= (lib!betree.LinkedBetree_v.impl&%0.my_domain.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& replacement!))) (lib!betree.LinkedBetree_v.impl&%0.my_domain.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& self!))))))) (= (lib!betree.LinkedBetree_v.Path./Path/depth (%Poly%lib!betree.LinkedBetree_v.Path. self!)) (vstd!seq.Seq.len.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))) (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!)))))) (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. replacement!))))) (lib!betree.BufferDisk_v.impl&%0.is_sub_disk.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!)))))) (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. replacement!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.can_substitute.? T&. T& self! replacement! path_addrs!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::Path::substitute")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%10.substitute. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%75 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (replacement! Poly) (path_addrs! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%10.substitute. T&. T& self! replacement! path_addrs!) (=> %%global_location_label%%75 (lib!betree.LinkedBetree_v.impl&%10.can_substitute.? T&. T& self! replacement! path_addrs!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%10.substitute. T&. T& self! replacement! path_addrs!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::Path::substitute")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%10.substitute.))
(declare-const fuel_nat%lib!betree.LinkedBetree_v.impl&%10.substitute. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (replacement! Poly) (path_addrs! Poly) (fuel% Fuel)) (! (= (lib!betree.LinkedBetree_v.impl&%10.rec%substitute.? T&. T& self! replacement! path_addrs! fuel%) (lib!betree.LinkedBetree_v.impl&%10.rec%substitute.? T&. T& self! replacement! path_addrs! zero)) :pattern ((lib!betree.LinkedBetree_v.impl&%10.rec%substitute.? T&. T& self! replacement! path_addrs! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (replacement! Poly) (path_addrs! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (has_type replacement! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type path_addrs! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (= (lib!betree.LinkedBetree_v.impl&%10.rec%substitute.? T&. T& self! replacement! path_addrs! (succ fuel%)) (ite (= (lib!betree.LinkedBetree_v.Path./Path/depth (%Poly%lib!betree.LinkedBetree_v.Path. self!)) 0) (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. replacement!) (let ((node$ (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!)))))) (let ((subtree$ (lib!betree.LinkedBetree_v.impl&%10.rec%substitute.? T&. T& (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.impl&%10.subpath.? T&. T& self!)) replacement! (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs! (I 1) (I (vstd!seq.Seq.len.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))) fuel%))) (let ((new_children$ (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (vstd!seq.Seq.update.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$)))) (I (lib!betree.PivotTable_v.impl&%0.route.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$)))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.LinkedBetree_v.Path./Path/key (%Poly%lib!betree.LinkedBetree_v.Path. self!))))) (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. subtree$)))))))) (let ((new_node$ (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$))))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$))))) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. new_children$)) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. node$)))))))) (let ((new_dv$ (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. subtree$)))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs! (I 0)) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_node$)))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (vstd!seq.Seq.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs! (I 0))))) (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. new_dv$)) (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. replacement!))))))))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.rec%substitute.? T&. T& self! replacement! path_addrs! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%10.substitute.) (forall ((T&. Dcr) (T& Type) (self! Poly) (replacement! Poly) (path_addrs! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (has_type replacement! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type path_addrs! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (= (lib!betree.LinkedBetree_v.impl&%10.substitute.? T&. T& self! replacement! path_addrs!) (lib!betree.LinkedBetree_v.impl&%10.rec%substitute.? T&. T& self! replacement! path_addrs! (succ fuel_nat%lib!betree.LinkedBetree_v.impl&%10.substitute.)))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.substitute.? T&. T& self! replacement! path_addrs!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (replacement! Poly) (path_addrs! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (has_type replacement! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type path_addrs! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.substitute.? T&. T& self! replacement! path_addrs!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.substitute.? T&. T& self! replacement! path_addrs!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::BetreeNode::split_leaf")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.split_leaf. (Poly Poly) Bool)
(declare-const %%global_location_label%%76 Bool)
(assert (forall ((self! Poly) (split_key! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.split_leaf. self! split_key!) (=> %%global_location_label%%76 (lib!betree.LinkedBetree_v.impl&%0.can_split_leaf.? self! split_key!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.split_leaf. self! split_key!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::split_leaf")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.split_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.split_leaf.) (forall ((self! Poly) (split_key! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.split_leaf.? self! split_key!) (let ((new_left$ (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.update.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I 1) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? split_key!))))) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))))))) (let ((new_right$ (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.update.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I 0) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? split_key!))))) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))))))) (tuple%2./tuple%2 (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_left$) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_right$))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.split_leaf.? self! split_key!)) ))))
(assert (forall ((self! Poly) (split_key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (has_type split_key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%tuple%2. (lib!betree.LinkedBetree_v.impl&%0.split_leaf.? self! split_key!)) (TYPE%tuple%2. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode.))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.split_leaf.? self! split_key!)) )))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::dup")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.dup. (Poly Poly) Bool)
(declare-const %%global_location_label%%77 Bool)
(assert (forall ((self! Poly) (idx! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.dup. self! idx!) (=> %%global_location_label%%77 (and (<= 0 (%I idx!)) (< (%I idx!) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.dup. self! idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::dup")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.dup.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.dup.) (forall ((self! Poly) (idx! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.dup.? self! idx!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq_lib.impl&%0.insert.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) idx! (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) idx!))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.dup.? self! idx!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::slice")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.slice. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%78 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.slice. self! start! end!) (=> %%global_location_label%%78 (and (and (<= 0 (%I start!)) (<= (%I start!) (%I end!))) (<= (%I end!) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.slice. self! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::slice")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.slice.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.slice.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.slice.? self! start! end!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.subrange.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) start! end!)))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.slice.? self! start! end!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::BetreeNode::split_index")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.split_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%79 Bool)
(assert (forall ((self! Poly) (pivot_idx! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.split_index. self! pivot_idx!) (=> %%global_location_label%%79 (lib!betree.LinkedBetree_v.impl&%0.can_split_index.? self! pivot_idx!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.split_index. self! pivot_idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::split_index")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.split_index.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.split_index.) (forall ((self! Poly) (pivot_idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.split_index.? self! pivot_idx!) (let ((idx$ (%I pivot_idx!))) (let ((new_left$ (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.subrange.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I 0) (I (Add idx$ 1))))) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (vstd!seq.Seq.subrange.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I 0) (I idx$))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.slice.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I 0) (I idx$))))))) (let ((new_right$ (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.PivotTable_v.impl&%0.subrange.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I idx$) (I (lib!betree.PivotTable_v.impl&%0.len.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!)))))))) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (vstd!seq.Seq.subrange.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I idx$) (I (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))))))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.slice.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) (I idx$) (I (lib!betree.BufferOffsets_v.impl&%0.len.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))))))))))) (tuple%2./tuple%2 (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_left$) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_right$)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.split_index.? self! pivot_idx!)) ))))
(assert (forall ((self! Poly) (pivot_idx! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (has_type pivot_idx! NAT)) (has_type (Poly%tuple%2. (lib!betree.LinkedBetree_v.impl&%0.split_index.? self! pivot_idx!)) (TYPE%tuple%2. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode.))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.split_index.? self! pivot_idx!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::split_parent")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.split_parent. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%80 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (request! Poly) (new_addrs! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.split_parent. T&. T& self! request! new_addrs!) (=> %%global_location_label%%80 (lib!betree.LinkedBetree_v.impl&%5.can_split_parent.? T&. T& self! request!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.split_parent. T&. T& self! request! new_addrs!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::split_parent")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.split_parent.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.split_parent.) (forall ((T&. Dcr) (T& Type) (self! Poly) (request! Poly) (new_addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.split_parent.? T&. T& self! request! new_addrs!) (ite (is-lib!betree.SplitRequest_v.SplitRequest./SplitLeaf_ (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((split_key$ (lib!betree.SplitRequest_v.SplitRequest./SplitLeaf/split_key (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((tmp%%$ (lib!betree.LinkedBetree_v.impl&%0.split_leaf.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! (I child_idx$))))) (Poly%lib!spec.KeyType_t.Key. split_key$)))) (let ((new_left_child$ (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_right_child$ (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_children$ (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (vstd!seq_lib.impl&%0.insert.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (vstd!seq.Seq.update.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))) (I child_idx$) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!)))))) (I (Add child_idx$ 1)) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!))))))))) (let ((new_parent$ (let ((tmp%%$1 (lib!betree.PivotTable_v.impl&%0.insert.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))) (I (Add child_idx$ 1)) (Poly%lib!spec.KeyType_t.Element. (lib!spec.KeyType_t.to_element.? (Poly%lib!spec.KeyType_t.Key. split_key$)))))) (let ((tmp%%$2 (lib!betree.BufferOffsets_v.impl&%0.dup.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))) (I child_idx$)))) (let ((tmp%%$3 (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. tmp%%$3))))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. tmp%%$1)) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. new_children$)) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. tmp%%$2)))))))) (let ((new_dv$ (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_left_child$))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_right_child$))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_parent$)))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!)))))) (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. new_dv$)) (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))))))) (let ((child_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((child_pivot_idx$ (lib!betree.SplitRequest_v.SplitRequest./SplitIndex/child_pivot_idx (%Poly%lib!betree.SplitRequest_v.SplitRequest. request!)))) (let ((tmp%%$ (lib!betree.LinkedBetree_v.impl&%0.split_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! (I child_idx$))))) (I child_pivot_idx$)))) (let ((new_left_child$ (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_right_child$ (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_children$ (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (vstd!seq_lib.impl&%0.insert.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (vstd!seq.Seq.update.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))) (I child_idx$) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!)))))) (I (Add child_idx$ 1)) (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!))))))))) (let ((new_parent$ (let ((tmp%%$5 (lib!betree.PivotTable_v.impl&%0.insert.? (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))) (I (Add child_idx$ 1)) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Element. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Element.>. (lib!betree.PivotTable_v.PivotTable./PivotTable/pivots (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! (I child_idx$))))))))))) (I child_pivot_idx$))))) (let ((tmp%%$6 (lib!betree.BufferOffsets_v.impl&%0.dup.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))) (I child_idx$)))) (let ((tmp%%$7 (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. tmp%%$7))))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. tmp%%$5)) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. new_children$)) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. tmp%%$6)))))))) (let ((new_dv$ (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/left (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_left_child$))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/right (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_right_child$))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_parent$)))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.SplitAddrs./SplitAddrs/parent (%Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!)))))) (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. new_dv$)) (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.split_parent.? T&. T& self! request! new_addrs!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (request! Poly) (new_addrs! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type request! TYPE%lib!betree.SplitRequest_v.SplitRequest.) (has_type new_addrs! TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.split_parent.? T&. T& self! request! new_addrs!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.split_parent.? T&. T& self! request! new_addrs!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_split")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_split.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_split.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (lbl! Poly) (new_linked! Poly) (path! Poly) (request! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_split.? T&. T& pre! post! lbl! new_linked! path! request! new_addrs! path_addrs!) (let ((update_tmp_memtable$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (and (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Internal_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lbl!)) (and (lib!betree.LinkedBetree_v.impl&%5.can_split_parent.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& path!)) request!) (and (lib!betree.LinkedBetree_v.impl&%5.valid_path_replacement.? T&. T& $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!))) path! new_addrs! path_addrs!) (and (let ((splitted$ (lib!betree.LinkedBetree_v.impl&%10.substitute.? T&. T& path! (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.split_parent.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& path!)) request! new_addrs!)) path_addrs!))) (and (lib!betree.LinkedBetree_v.impl&%5.valid_view.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. splitted$) new_linked!) (let ((update_tmp_linked$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked!))) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_linked$)))) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_memtable$))))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_split.? T&. T& pre! post! lbl! new_linked! path! request! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::BetreeNode::occupied_child_index")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.occupied_child_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%81 Bool)
(assert (forall ((self! Poly) (child_idx! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.occupied_child_index. self! child_idx!) (=> %%global_location_label%%81 (lib!betree.LinkedBetree_v.impl&%0.wf.? self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.occupied_child_index. self! child_idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::occupied_child_index")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.occupied_child_index.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.occupied_child_index.) (forall ((self! Poly) (child_idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.occupied_child_index.? self! child_idx!) (and (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? self! child_idx!) (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))) child_idx!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.occupied_child_index.? self! child_idx!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::all_gte")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.all_gte.) (forall ((self! Poly) (target! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.all_gte.? self! target!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))) (>= (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) (%I target!)))) :pattern ((vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) i$)) ))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.all_gte.? self! target!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::update")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.update. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%82 Bool)
(assert (forall ((self! Poly) (idx! Poly) (value! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.update. self! idx! value!) (=> %%global_location_label%%82 (and (<= 0 (%I idx!)) (< (%I idx!) (lib!betree.BufferOffsets_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.update. self! idx! value!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::update")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.update.))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.update.) (forall ((self! Poly) (idx! Poly) (value! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.update.? self! idx! value!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.update.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) idx! value!)))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.update.? self! idx! value!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::can_flush")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.can_flush.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.can_flush.) (forall ((T&. Dcr) (T& Type) (self! Poly) (child_idx! Poly) (buffer_gc! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.can_flush.? T&. T& self! child_idx! buffer_gc!) (and (and (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (lib!betree.LinkedBetree_v.impl&%0.occupied_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) child_idx!)) (lib!betree.BufferOffsets_v.impl&%0.all_gte.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.update.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))) child_idx! (I (lib!betree.LinkedSeq_v.impl&%0.len.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))))) buffer_gc!))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.can_flush.? T&. T& self! child_idx! buffer_gc!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!betree.LinkedBetree_v.Addrs. $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs.))
(set-info :comment ";; Function-Specs lib::betree::LinkedSeq_v::LinkedSeq::slice")
(declare-fun req%lib!betree.LinkedSeq_v.impl&%0.slice. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%83 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.LinkedSeq_v.impl&%0.slice. self! start! end!) (=> %%global_location_label%%83 (and (and (<= 0 (%I start!)) (<= (%I start!) (%I end!))) (<= (%I end!) (lib!betree.LinkedSeq_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.LinkedSeq_v.impl&%0.slice. self! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedSeq_v::LinkedSeq::slice")
(assert (fuel_bool_default fuel%lib!betree.LinkedSeq_v.impl&%0.slice.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedSeq_v.impl&%0.slice.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.LinkedSeq_v.impl&%0.slice.? self! start! end!) (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. self!))) start! end!)))) :pattern ((lib!betree.LinkedSeq_v.impl&%0.slice.? self! start! end!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::flush_buffers")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.flush_buffers. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%84 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (child_idx! Poly) (buffer_gc! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.flush_buffers. T&. T& self! child_idx! buffer_gc!) (=> %%global_location_label%%84 (lib!betree.LinkedBetree_v.impl&%5.can_flush.? T&. T& self! child_idx! buffer_gc!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.flush_buffers. T&. T& self! child_idx! buffer_gc!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::flush_buffers")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.flush_buffers.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.flush_buffers.) (forall ((T&. Dcr) (T& Type) (self! Poly) (child_idx! Poly) (buffer_gc! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.flush_buffers.? T&. T& self! child_idx! buffer_gc!) (let ((root$ (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))) (let ((flush_upto$ (lib!betree.LinkedSeq_v.impl&%0.len.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. root$))))))) (let ((flushed_ofs$ (%I (vstd!seq.Seq.index.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. root$))))))) child_idx!)))) (let ((buffers_to_child$ (lib!betree.LinkedSeq_v.impl&%0.slice.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. root$)))) (I flushed_ofs$) (I flush_upto$)))) buffers_to_child$))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.flush_buffers.? T&. T& self! child_idx! buffer_gc!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::shift_left")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.shift_left. (Poly Poly) Bool)
(declare-const %%global_location_label%%85 Bool)
(assert (forall ((self! Poly) (target! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.shift_left. self! target!) (=> %%global_location_label%%85 (lib!betree.BufferOffsets_v.impl&%0.all_gte.? self! target!))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.shift_left. self! target!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::shift_left")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left.))
(declare-fun %%lambda%%8 (Dcr Type Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (I (nClip (Sub (%I (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)) %%hole%%3)))) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.shift_left.) (forall ((self! Poly) (target! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.shift_left.? self! target!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.new.? $ NAT $ (TYPE%fun%1. $ INT $ NAT) (I (lib!betree.BufferOffsets_v.impl&%0.len.? self!)) (Poly%fun%1. (mk_fun (%%lambda%%8 $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (%I target!)))))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.shift_left.? self! target!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::flush")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.flush. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%86 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (child_idx! Poly) (buffer_gc! Poly) (new_addrs! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.flush. T&. T& self! child_idx! buffer_gc! new_addrs!) (=> %%global_location_label%%86 (lib!betree.LinkedBetree_v.impl&%5.can_flush.? T&. T& self! child_idx! buffer_gc!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.flush. T&. T& self! child_idx! buffer_gc! new_addrs!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::flush")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.flush.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.flush.) (forall ((T&. Dcr) (T& Type) (self! Poly) (child_idx! Poly) (buffer_gc! Poly) (new_addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.flush.? T&. T& self! child_idx! buffer_gc! new_addrs!) (let ((root$ (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))) (let ((flush_upto$ (lib!betree.LinkedSeq_v.impl&%0.len.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. root$))))))) (let ((child$ (lib!betree.LinkedBetree_v.impl&%1.get.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (vstd!seq.Seq.index.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. root$)))) child_idx!)))) (let ((new_child$ (lib!betree.LinkedBetree_v.impl&%0.extend_buffer_seq.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. child$) (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.impl&%5.flush_buffers.? T&. T& self! child_idx! buffer_gc!))))) (let ((new_root$ (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.impl&%0.slice.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. root$)))) buffer_gc! (I flush_upto$)))) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. root$))))) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (vstd!seq.Seq.update.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. root$)))) child_idx! (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.shift_left.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.BufferOffsets_v.impl&%0.update.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. root$)))) child_idx! (I flush_upto$))) buffer_gc!)))))) (let ((new_dv$ (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_root$))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_child$)))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))))) (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. new_dv$)) (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.flush.? T&. T& self! child_idx! buffer_gc! new_addrs!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (child_idx! Poly) (buffer_gc! Poly) (new_addrs! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type child_idx! NAT) (has_type buffer_gc! NAT) (has_type new_addrs! TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.flush.? T&. T& self! child_idx! buffer_gc! new_addrs!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.flush.? T&. T& self! child_idx! buffer_gc! new_addrs!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_flush")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (lbl! Poly) (new_linked! Poly) (path! Poly) (child_idx! Poly) (buffer_gc! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush.? T&. T& pre! post! lbl! new_linked! path! child_idx! buffer_gc! new_addrs! path_addrs!) (let ((update_tmp_memtable$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (and (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Internal_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lbl!)) (and (lib!betree.LinkedBetree_v.impl&%5.can_flush.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& path!)) child_idx! buffer_gc!) (and (lib!betree.LinkedBetree_v.impl&%5.valid_path_replacement.? T&. T& $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!))) path! new_addrs! path_addrs!) (and (let ((flushed$ (lib!betree.LinkedBetree_v.impl&%10.substitute.? T&. T& path! (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.flush.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& path!)) child_idx! buffer_gc! new_addrs!)) path_addrs!))) (and (lib!betree.LinkedBetree_v.impl&%5.valid_view.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. flushed$) new_linked!) (let ((update_tmp_linked$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked!))) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_linked$)))) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_memtable$))))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush.? T&. T& pre! post! lbl! new_linked! path! child_idx! buffer_gc! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::OffsetMap_v::OffsetMap::decrement")
(assert (fuel_bool_default fuel%lib!betree.OffsetMap_v.impl&%0.decrement.))
(declare-fun %%lambda%%9 (Dcr Type Dcr Type Poly Int Dcr Type Dcr Type Poly Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Int) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Int) (%%hole%%12 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (I (ite (<= %%hole%%5 (%I (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$))) (nClip (Sub (%I (vstd!map.impl&%0.index.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 k$)) %%hole%%11)) %%hole%%12))) :pattern ((%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.OffsetMap_v.impl&%0.decrement.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.OffsetMap_v.impl&%0.decrement.? self! i!) (lib!betree.OffsetMap_v.OffsetMap./OffsetMap (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%6 $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!))))))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!))) (%I i!) $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!))) (%I i!) 0))))))) :pattern ((lib!betree.OffsetMap_v.impl&%0.decrement.? self! i!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::BetreeNode::make_offset_map")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%0.make_offset_map. (Poly) Bool)
(declare-const %%global_location_label%%87 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%0.make_offset_map. self!) (=> %%global_location_label%%87 (lib!betree.LinkedBetree_v.impl&%0.wf.? self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%0.make_offset_map. self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::BetreeNode::make_offset_map")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%0.make_offset_map.))
(declare-fun %%lambda%%10 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%10 %%hole%%0) k$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%10 %%hole%%0) k$)))))
(declare-fun %%lambda%%11 (Poly Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1 %%hole%%2) k$) (I (ite (lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? %%hole%%0 k$) (lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.? %%hole%%1 k$) %%hole%%2))) :pattern ((%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1 %%hole%%2) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%0.make_offset_map.) (forall ((self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%0.make_offset_map.? self!) (lib!betree.OffsetMap_v.OffsetMap./OffsetMap (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ NAT) (Poly%fun%1. (mk_fun (%%lambda%%10 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%11 self! self! (lib!betree.LinkedSeq_v.impl&%0.len.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. self!))))))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%0.make_offset_map.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::OffsetMap_v::OffsetMap::is_total")
(assert (fuel_bool_default fuel%lib!betree.OffsetMap_v.impl&%0.is_total.))
(assert (=> (fuel_bool fuel%lib!betree.OffsetMap_v.impl&%0.is_total.) (forall ((self! Poly)) (! (= (lib!betree.OffsetMap_v.impl&%0.is_total.? self!) (lib!betree.Buffer_v.total_keys.? (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!)))))) :pattern ((lib!betree.OffsetMap_v.impl&%0.is_total.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::queryable_contains")
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%1.queryable_contains.))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%1.queryable_contains.) (forall ((T&. Dcr) (T& Type) (self! Poly) (addr! Poly) (k! Poly)) (! (= (lib!betree.BufferDisk_v.impl&%1.queryable_contains.? T&. T& self! addr! k!) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T& (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. self!))) addr!) (%B (lib!betree.Buffer_v.Buffer.contains.? T&. T& (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. T&. T& (lib!betree.BufferDisk_v.BufferDisk./BufferDisk/entries (%Poly%lib!betree.BufferDisk_v.BufferDisk. self!)) addr!) k!)))) :pattern ((lib!betree.BufferDisk_v.impl&%1.queryable_contains.? T&. T& self! addr! k!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferDisk_v::BufferDisk::key_in_buffer")
(declare-fun req%lib!betree.BufferDisk_v.impl&%1.key_in_buffer. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%88 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (buffers! Poly) (from_idx! Poly) (k! Poly) (idx! Poly)) (! (= (req%lib!betree.BufferDisk_v.impl&%1.key_in_buffer. T&. T& self! buffers! from_idx! k! idx!) (=> %%global_location_label%%88 (<= 0 (%I from_idx!)))) :pattern ((req%lib!betree.BufferDisk_v.impl&%1.key_in_buffer. T&. T& self! buffers! from_idx! k! idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::key_in_buffer")
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%1.key_in_buffer.))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%1.key_in_buffer.) (forall ((T&. Dcr) (T& Type) (self! Poly) (buffers! Poly) (from_idx! Poly) (k! Poly) (idx! Poly)) (! (= (lib!betree.BufferDisk_v.impl&%1.key_in_buffer.? T&. T& self! buffers! from_idx! k! idx!) (and (and (<= (%I from_idx!) (%I idx!)) (< (%I idx!) (lib!betree.LinkedSeq_v.impl&%0.len.? buffers!))) (lib!betree.BufferDisk_v.impl&%1.queryable_contains.? T&. T& self! (vstd!seq.Seq.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. buffers!))) idx!) k!))) :pattern ((lib!betree.BufferDisk_v.impl&%1.key_in_buffer.? T&. T& self! buffers! from_idx! k! idx!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferDisk_v::BufferDisk::key_in_buffer_filtered")
(declare-fun req%lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered. (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (buffers! Poly) (offset_map! Poly) (from_idx! Poly) (k! Poly) (idx! Poly)) (! (= (req%lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered. T&. T& self! buffers! offset_map! from_idx! k! idx!) (and (=> %%global_location_label%%89 (<= 0 (%I from_idx!))) (=> %%global_location_label%%90 (lib!betree.OffsetMap_v.impl&%0.is_total.? offset_map!)))) :pattern ((req%lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered. T&. T& self! buffers! offset_map! from_idx! k! idx!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::key_in_buffer_filtered")
(assert (fuel_bool_default fuel%lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered.))
(assert (=> (fuel_bool fuel%lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered.) (forall ((T&. Dcr) (T& Type) (self! Poly) (buffers! Poly) (offset_map! Poly) (from_idx! Poly) (k! Poly) (idx! Poly)) (! (= (lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered.? T&. T& self! buffers! offset_map! from_idx! k! idx!) (and (lib!betree.BufferDisk_v.impl&%1.key_in_buffer.? T&. T& self! buffers! from_idx! k! idx!) (<= (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!))) k!)) (%I idx!)))) :pattern ((lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered.? T&. T& self! buffers! offset_map! from_idx! k! idx!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferDisk_v::BufferDisk::valid_compact_key_domain")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%91 Bool)
(declare-const %%global_location_label%%92 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (node! Poly) (start! Poly) (end! Poly) (k! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain. T&. T& self! node! start! end! k!) (and (=> %%global_location_label%%91 (lib!betree.LinkedBetree_v.impl&%0.wf.? node!)) (=> %%global_location_label%%92 (and (< (%I start!) (%I end!)) (<= (%I end!) (lib!betree.LinkedSeq_v.impl&%0.len.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. node!))))))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain. T&. T& self! node! start! end! k!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::valid_compact_key_domain")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain.) (forall ((T&. Dcr) (T& Type) (self! Poly) (node! Poly) (start! Poly) (end! Poly) (k! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain.? T&. T& self! node! start! end! k!) (let ((slice$ (lib!betree.LinkedSeq_v.impl&%0.slice.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. node!))) start! end!))) (let ((slice_ofs_map$ (lib!betree.OffsetMap_v.impl&%0.decrement.? (Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.LinkedBetree_v.impl&%0.make_offset_map.? node!)) start!))) (and (and (lib!betree.LinkedBetree_v.impl&%0.key_in_domain.? node! k!) (<= (lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.? node! k!) (%I end!))) (exists ((idx$ Poly)) (! (and (has_type idx$ INT) (lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered.? T&. T& self! (Poly%lib!betree.LinkedSeq_v.LinkedSeq. slice$) (Poly%lib!betree.OffsetMap_v.OffsetMap. slice_ofs_map$) (I 0) k! idx$)) :pattern ((lib!betree.BufferDisk_v.impl&%1.key_in_buffer_filtered.? T&. T& self! (Poly%lib!betree.LinkedSeq_v.LinkedSeq. slice$) (Poly%lib!betree.OffsetMap_v.OffsetMap. slice_ofs_map$) (I 0) k! idx$)) )))))) :pattern ((lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain.? T&. T& self! node! start! end! k!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::compact_buffer_valid_domain")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%93 Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain. T&. T& self! start! end! compacted_buffer!) (and (=> %%global_location_label%%93 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!)) (=> %%global_location_label%%94 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (=> %%global_location_label%%95 (and (< (%I start!) (%I end!)) (<= (%I end!) (lib!betree.LinkedSeq_v.impl&%0.len.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain. T&. T& self! start! end! compacted_buffer!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::compact_buffer_valid_domain")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain.) (forall ((T&. Dcr) (T& Type) (self! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain.? T&. T& self! start! end! compacted_buffer!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (= (%B (lib!betree.Buffer_v.Buffer.contains.? T&. T& compacted_buffer! k$)) (lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) start! end! k$))) :pattern ((lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) start! end! k$)) ))) :pattern ((lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain.? T&. T& self! start! end! compacted_buffer!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferDisk_v::BufferDisk::compact_key_value")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%4.compact_key_value. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(declare-const %%global_location_label%%98 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (node! Poly) (start! Poly) (end! Poly) (k! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%4.compact_key_value. T&. T& self! node! start! end! k!) (and (=> %%global_location_label%%96 (lib!betree.LinkedBetree_v.impl&%0.wf.? node!)) (=> %%global_location_label%%97 (and (< (%I start!) (%I end!)) (<= (%I end!) (lib!betree.LinkedSeq_v.impl&%0.len.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. node!))))))) (=> %%global_location_label%%98 (lib!betree.LinkedBetree_v.impl&%4.valid_compact_key_domain.? T&. T& self! node! start! end! k!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%4.compact_key_value. T&. T& self! node! start! end! k!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferDisk_v::BufferDisk::compact_key_value")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%4.compact_key_value.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%4.compact_key_value.) (forall ((T&. Dcr) (T& Type) (self! Poly) (node! Poly) (start! Poly) (end! Poly) (k! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%4.compact_key_value.? T&. T& self! node! start! end! k!) (let ((from$ (ite (<= (lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.? node! k!) (%I start!)) 0 (Sub (lib!betree.LinkedBetree_v.impl&%0.flushed_ofs.? node! k!) (%I start!))))) (lib!betree.BufferDisk_v.impl&%1.query_from.? T&. T& self! (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.impl&%0.slice.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. node!))) start! end!)) k! (I from$)))) :pattern ((lib!betree.LinkedBetree_v.impl&%4.compact_key_value.? T&. T& self! node! start! end! k!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (node! Poly) (start! Poly) (end! Poly) (k! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.BufferDisk_v.BufferDisk. T&. T&)) (has_type node! TYPE%lib!betree.LinkedBetree_v.BetreeNode.) (has_type start! NAT) (has_type end! NAT) (has_type k! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.LinkedBetree_v.impl&%4.compact_key_value.? T&. T& self! node! start! end! k!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.LinkedBetree_v.impl&%4.compact_key_value.? T&. T& self! node! start! end! k!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::compact_buffer_valid_range")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_range. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%99 Bool)
(declare-const %%global_location_label%%100 Bool)
(declare-const %%global_location_label%%101 Bool)
(declare-const %%global_location_label%%102 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_range. T&. T& self! start! end! compacted_buffer!) (and (=> %%global_location_label%%99 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!)) (=> %%global_location_label%%100 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (=> %%global_location_label%%101 (and (< (%I start!) (%I end!)) (<= (%I end!) (lib!betree.LinkedSeq_v.impl&%0.len.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))))) (=> %%global_location_label%%102 (lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain.? T&. T& self! start! end! compacted_buffer!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_range. T&. T& self! start! end! compacted_buffer!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::compact_buffer_valid_range")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_range.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_range.) (forall ((T&. Dcr) (T& Type) (self! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_range.? T&. T& self! start! end! compacted_buffer!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (=> (%B (lib!betree.Buffer_v.Buffer.contains.? T&. T& compacted_buffer! k$)) (= (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? T&. T& compacted_buffer! k$)) (lib!betree.LinkedBetree_v.impl&%4.compact_key_value.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) start! end! k$)))) :pattern ((lib!betree.Buffer_v.Buffer.query.? T&. T& compacted_buffer! k$)) ))) :pattern ((lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_range.? T&. T& self! start! end! compacted_buffer!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::can_compact")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%6.can_compact.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%6.can_compact.) (forall ((T&. Dcr) (T& Type) (self! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%6.can_compact.? T&. T& self! start! end! compacted_buffer!) (and (and (and (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (and (< (%I start!) (%I end!)) (<= (%I end!) (lib!betree.LinkedSeq_v.impl&%0.len.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))))) (lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_domain.? T&. T& self! start! end! compacted_buffer!)) (lib!betree.LinkedBetree_v.impl&%6.compact_buffer_valid_range.? T&. T& self! start! end! compacted_buffer!))) :pattern ((lib!betree.LinkedBetree_v.impl&%6.can_compact.? T&. T& self! start! end! compacted_buffer!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedSeq_v::LinkedSeq::update_subrange")
(declare-fun req%lib!betree.LinkedSeq_v.impl&%0.update_subrange. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%103 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly) (new_addr! Poly)) (! (= (req%lib!betree.LinkedSeq_v.impl&%0.update_subrange. self! start! end! new_addr!) (=> %%global_location_label%%103 (and (and (<= 0 (%I start!)) (< (%I start!) (%I end!))) (<= (%I end!) (lib!betree.LinkedSeq_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.LinkedSeq_v.impl&%0.update_subrange. self! start! end! new_addr!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedSeq_v::LinkedSeq::update_subrange")
(assert (fuel_bool_default fuel%lib!betree.LinkedSeq_v.impl&%0.update_subrange.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedSeq_v.impl&%0.update_subrange.) (forall ((self! Poly) (start! Poly) (end! Poly) (new_addr! Poly)) (! (= (lib!betree.LinkedSeq_v.impl&%0.update_subrange.? self! start! end! new_addr!) (let ((addrs$ (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (vstd!seq.Seq.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!seq.Seq.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. self!))) (I 0) start!) (vstd!seq.Seq.push.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!seq.Seq.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) new_addr!)) (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. self!))) end! (I (lib!betree.LinkedSeq_v.impl&%0.len.? self!))))))) (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq (%Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. addrs$))))) :pattern ((lib!betree.LinkedSeq_v.impl&%0.update_subrange.? self! start! end! new_addr!)) ))))
(set-info :comment ";; Function-Specs lib::betree::BufferOffsets_v::BufferOffsets::adjust_compact")
(declare-fun req%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%104 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. self! start! end!) (=> %%global_location_label%%104 (and (<= 0 (%I start!)) (< (%I start!) (%I end!))))) :pattern ((req%lib!betree.BufferOffsets_v.impl&%0.adjust_compact. self! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::betree::BufferOffsets_v::BufferOffsets::adjust_compact")
(assert (fuel_bool_default fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact.))
(declare-fun %%lambda%%12 (Dcr Type Poly Int Dcr Type Poly Dcr Type Poly Int Dcr Type Poly Int Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Int) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (%%hole%%10 Int) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Poly) (%%hole%%14 Int) (%%hole%%15 Int) (%%hole%%16 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16) i$) (I (ite (<= (%I (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)) %%hole%%3) (%I (vstd!seq.Seq.index.? %%hole%%4 %%hole%%5 %%hole%%6 i$)) (ite (< (%I (vstd!seq.Seq.index.? %%hole%%7 %%hole%%8 %%hole%%9 i$)) %%hole%%10) %%hole%%16 (nClip (Add (Sub (%I (vstd!seq.Seq.index.? %%hole%%11 %%hole%%12 %%hole%%13 i$)) %%hole%%14) %%hole%%15)))))) :pattern ((%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16) i$)))))
(assert (=> (fuel_bool fuel%lib!betree.BufferOffsets_v.impl&%0.adjust_compact.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.BufferOffsets_v.impl&%0.adjust_compact.? self! start! end!) (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.new.? $ NAT $ (TYPE%fun%1. $ INT $ NAT) (I (lib!betree.BufferOffsets_v.impl&%0.len.? self!)) (Poly%fun%1. (mk_fun (%%lambda%%12 $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (%I start!) $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (%I end!) $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!betree.BufferOffsets_v.BufferOffsets./BufferOffsets/offsets (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. self!))) (Sub (%I end!) (%I start!)) 1 (nClip (%I start!))))))))) :pattern ((lib!betree.BufferOffsets_v.impl&%0.adjust_compact.? self! start! end!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::compact")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%6.compact. (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%105 Bool)
(declare-const %%global_location_label%%106 Bool)
(declare-const %%global_location_label%%107 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly) (new_addrs! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%6.compact. T&. T& self! start! end! compacted_buffer! new_addrs!) (and (=> %%global_location_label%%105 (%B (lib!betree.LinkedBetree_v.Addrs.no_duplicates.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))) (=> %%global_location_label%%106 (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& self! (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))) (=> %%global_location_label%%107 (lib!betree.LinkedBetree_v.impl&%6.can_compact.? T&. T& self! start! end! compacted_buffer!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%6.compact. T&. T& self! start! end! compacted_buffer! new_addrs!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::compact")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%6.compact.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%6.compact.) (forall ((T&. Dcr) (T& Type) (self! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly) (new_addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%6.compact.? T&. T& self! start! end! compacted_buffer! new_addrs!) (let ((new_root$ (let ((tmp%%$ (lib!betree.LinkedSeq_v.impl&%0.update_subrange.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))) start! end! (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))))) (let ((tmp%%$1 (lib!betree.BufferOffsets_v.impl&%0.adjust_compact.? (Poly%lib!betree.BufferOffsets_v.BufferOffsets. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/flushed (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))) start! end!))) (let ((tmp%%$2 (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. tmp%%$)) (%Poly%lib!betree.PivotTable_v.PivotTable. (Poly%lib!betree.PivotTable_v.PivotTable. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/pivots (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. tmp%%$2))))) (%Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. tmp%%$2))))) (%Poly%lib!betree.BufferOffsets_v.BufferOffsets. (Poly%lib!betree.BufferOffsets_v.BufferOffsets. tmp%%$1)))))))) (let ((new_dv$ (lib!betree.LinkedBetree_v.impl&%1.modify_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))) (Poly%lib!betree.LinkedBetree_v.BetreeNode. new_root$)))) (let ((new_buffer_dv$ (lib!betree.BufferDisk_v.impl&%0.modify_disk.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))) compacted_buffer!))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))))) (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. new_dv$)) (%Poly%lib!betree.BufferDisk_v.BufferDisk. (Poly%lib!betree.BufferDisk_v.BufferDisk. new_buffer_dv$))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%6.compact.? T&. T& self! start! end! compacted_buffer! new_addrs!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly) (new_addrs! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type start! NAT) (has_type end! NAT) (has_type compacted_buffer! T&) (has_type new_addrs! TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%6.compact.? T&. T& self! start! end! compacted_buffer! new_addrs!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.impl&%6.compact.? T&. T& self! start! end! compacted_buffer! new_addrs!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_compact")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_compact.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_compact.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (lbl! Poly) (new_linked! Poly) (path! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_compact.? T&. T& pre! post! lbl! new_linked! path! start! end! compacted_buffer! new_addrs! path_addrs!) (let ((update_tmp_memtable$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (and (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Internal_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lbl!)) (and (lib!betree.LinkedBetree_v.impl&%6.can_compact.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& path!)) start! end! compacted_buffer!) (and (lib!betree.LinkedBetree_v.impl&%5.valid_path_replacement.? T&. T& $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!))) path! new_addrs! path_addrs!) (and (let ((compacted$ (lib!betree.LinkedBetree_v.impl&%10.substitute.? T&. T& path! (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%6.compact.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& path!)) start! end! compacted_buffer! new_addrs!)) path_addrs!))) (and (lib!betree.LinkedBetree_v.impl&%5.valid_view.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. compacted$) new_linked!) (let ((update_tmp_linked$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked!))) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_linked$)))) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_memtable$))))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_compact.? T&. T& pre! post! lbl! new_linked! path! start! end! compacted_buffer! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::internal_noop")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_noop.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_noop.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_noop.? T&. T& pre! post! lbl!) (let ((update_tmp_memtable$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (let ((update_tmp_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!)))) (and (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Internal_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lbl!)) (and (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_linked$) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_memtable$)))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_noop.? T&. T& pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::next_by")
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./put_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./put) c))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./freeze_as_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./freeze_as) c))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow) c))
(define-fun is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_noop_ ((c lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) Bool ((_ is lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_noop) c))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next_by.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next_by.? T&. T& pre! post! label! step!) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((receipt$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./query/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.query.? T&. T& pre! post! label! (Poly%lib!betree.LinkedBetree_v.QueryReceipt. receipt$))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./put_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.put.? T&. T& pre! post! label!) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./freeze_as_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.freeze_as.? T&. T& pre! post! label!) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_memtable$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush_memtable.? T&. T& pre! post! label! (Poly%lib!betree.Memtable_v.Memtable. new_memtable$) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked$) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$))))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_root_addr$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_grow.? T&. T& pre! post! label! (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr$))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((request$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_split.? T&. T& pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked$) (Poly%lib!betree.LinkedBetree_v.Path. path$) (Poly%lib!betree.SplitRequest_v.SplitRequest. request$) (Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$))))))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((child_idx$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((buffer_gc$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/5 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush.? T&. T& pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked$) (Poly%lib!betree.LinkedBetree_v.Path. path$) (I child_idx$) (I buffer_gc$) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$)))))))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((start$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((end$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((compacted_buffer$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/5 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/6 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_compact.? T&. T& pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked$) (Poly%lib!betree.LinkedBetree_v.Path. path$) (I start$) (I end$) compacted_buffer$ (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$))))))))) (and (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_noop_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_noop.? T&. T& pre! post! label!))))))))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next_by.? T&. T& pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::next")
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next.) (forall ((T&. Dcr) (T& Type) (pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next.? T&. T& pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&)) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next_by.? T&. T& pre! post! label! step$)) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next_by.? T&. T& pre! post! label! step$)) ))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next.? T&. T& pre! post! label!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::get_rank")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.get_rank. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%108 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.get_rank. T&. T& self! ranking!) (=> %%global_location_label%%108 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.get_rank. T&. T& self! ranking!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::get_rank")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.get_rank.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.get_rank.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!) (ite (and (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))) (nClip (Add (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT ranking! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))) 1)) 0)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) (<= 0 (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::child_count")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.child_count. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%109 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.child_count. T&. T& self!) (=> %%global_location_label%%109 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.child_count. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::child_count")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.child_count.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.child_count.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!) (ite (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)))))) 0)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (<= 0 (lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::can_recurse_for_reachable")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (child_idx! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!) (and (and (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!)) (<= (%I child_idx!) (lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!)))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs_using_ranking_recur")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%110 Bool)
(declare-const %%global_location_label%%111 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (child_idx! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. T&. T& self! ranking! child_idx!) (and (=> %%global_location_label%%110 (lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!)) (=> %%global_location_label%%111 (lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. T&. T& self! ranking! child_idx!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs_using_ranking")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%112 Bool)
(declare-const %%global_location_label%%113 Bool)
(declare-const %%global_location_label%%114 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. T&. T& self! ranking!) (and (=> %%global_location_label%%112 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!)) (=> %%global_location_label%%113 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!)) (=> %%global_location_label%%114 (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. T&. T& self! ranking!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs_using_ranking_recur")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.))
(declare-const fuel_nat%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (child_idx! Poly) (fuel% Fuel)) (! (= (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! fuel%) (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! zero)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (child_idx! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type child_idx! NAT) (lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!)) (= (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! (succ fuel%)) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (ite (= (%I child_idx!) (lib!betree.LinkedBetree_v.impl&%5.child_count.? T&. T& self!)) (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (let ((child_addrs$ (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! child_idx!)) ranking! fuel%))) (let ((right_subtree_addrs$ (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! (I (nClip (Add (%I child_idx!) 1))) fuel%))) (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. child_addrs$) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. right_subtree_addrs$)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (child_idx! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type child_idx! NAT) (lib!betree.LinkedBetree_v.impl&%5.can_recurse_for_reachable.? T&. T& self! ranking! child_idx!)) (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx!) (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx! (succ fuel_nat%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.)))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! child_idx!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs_using_ranking")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.))
(declare-const fuel_nat%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (fuel% Fuel)) (! (= (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! fuel%) (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! zero)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!))) (= (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! (succ fuel%)) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (ite (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (let ((sub_tree_addrs$ (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking_recur.? T&. T& self! ranking! (I 0) fuel%))) (let ((root_addr$ (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))) (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. root_addr$) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. sub_tree_addrs$)))) (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!))) (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! ranking!) (lib!betree.LinkedBetree_v.impl&%5.rec%reachable_betree_addrs_using_ranking.? T&. T& self! ranking! (succ (succ fuel_nat%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! ranking!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::the_ranking")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.the_ranking. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%115 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.the_ranking. T&. T& self!) (=> %%global_location_label%%115 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.the_ranking. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::the_ranking")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.the_ranking.))
(declare-fun %%choose%%2 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((ranking$1 Poly)) (! (and (has_type ranking$1 %%hole%%0) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? %%hole%%1 %%hole%%2 %%hole%%3 ranking$1)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? %%hole%%4 %%hole%%5 %%hole%%6 ranking$1)) )) (exists ((ranking$1 Poly)) (! (and (and (has_type ranking$1 %%hole%%0) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? %%hole%%1 %%hole%%2 %%hole%%3 ranking$1)) (= (%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) ranking$1)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? %%hole%%4 %%hole%%5 %%hole%%6 ranking$1))))) :pattern ((%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.the_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.the_ranking.? T&. T& self!) (let ((ranking$ (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (as_type (%%choose%%2 (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT) T&. T& self! T&. T& self!) (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))))) ranking$)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.the_ranking.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%116 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs. T&. T& self!) (=> %%global_location_label%%116 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (lib!betree.LinkedBetree_v.impl&%5.the_ranking.? T&. T& self!)))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedSeq_v::LinkedSeq::contains")
(assert (fuel_bool_default fuel%lib!betree.LinkedSeq_v.impl&%0.contains.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedSeq_v.impl&%0.contains.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!betree.LinkedSeq_v.impl&%0.contains.? self! addr!) (vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. self!))) addr!)) :pattern ((lib!betree.LinkedSeq_v.impl&%0.contains.? self! addr!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::reachable_buffer")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%117 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (addr! Poly) (buffer_addr! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer. T&. T& self! addr! buffer_addr!) (=> %%global_location_label%%117 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer. T&. T& self! addr! buffer_addr!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::reachable_buffer")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.) (forall ((T&. Dcr) (T& Type) (self! Poly) (addr! Poly) (buffer_addr! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.? T&. T& self! addr! buffer_addr!) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& self!)) addr!) (lib!betree.LinkedSeq_v.impl&%0.contains.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%1.get.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (Poly%core!option.Option. (core!option.Option./Some addr!))))))) buffer_addr!))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.? T&. T& self! addr! buffer_addr!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::reachable_buffer_addrs")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%118 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs. T&. T& self!) (=> %%global_location_label%%118 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::reachable_buffer_addrs")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.))
(declare-fun %%lambda%%13 (Dcr Type Poly Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (buffer_addr$ Poly)) (! (= (%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) buffer_addr$) (B (exists ((addr$ Poly)) (! (and (has_type addr$ %%hole%%3) (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.? %%hole%%4 %%hole%%5 %%hole%%6 addr$ buffer_addr$)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_buffer.? %%hole%%0 %%hole%%1 %%hole%%2 addr$ buffer_addr$)) )))) :pattern ((%%apply%%0 (%%lambda%%13 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) buffer_addr$)))))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& self!) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.impl&%0.new.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ TYPE%lib!spec.AsyncDisk_t.Address. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%13 T&. T& self! TYPE%lib!spec.AsyncDisk_t.Address. T&. T& self!)))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::no_dangling_buffer_ptr")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.no_dangling_buffer_ptr. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%119 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.no_dangling_buffer_ptr. T&. T& self!) (=> %%global_location_label%%119 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.no_dangling_buffer_ptr. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::no_dangling_buffer_ptr")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.no_dangling_buffer_ptr.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.no_dangling_buffer_ptr.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.no_dangling_buffer_ptr.? T&. T& self!) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& self!)) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.BufferDisk_v.impl&%0.repr.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.no_dangling_buffer_ptr.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::valid_buffer_dv")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%120 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv. T&. T& self!) (=> %%global_location_label%%120 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::valid_buffer_dv")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.no_dangling_buffer_ptr.? T&. T& self!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::initialize")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.initialize.) (forall ((T&. Dcr) (T& Type) (post! Poly) (v! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.initialize.? T&. T& post! v!) (and (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. v!)))) (and (lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. v!)))) (and (=> (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. v!)))) (= (lib!betree.LinkedBetree_v.impl&%0.my_domain.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. v!)))))) (lib!betree.Domain_v.total_domain.? (I 0)))) (and (lib!betree.Memtable_v.impl&%0.is_empty.? T&. T& (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. v!)))) (let ((update_tmp_memtable$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. v!)))) (let ((update_tmp_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. v!)))) (and (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_linked$) (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!)) update_tmp_memtable$))))))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.initialize.? T&. T& post! v!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Label::arrow_linked_lbl")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_linked_lbl.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_linked_lbl.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_linked_lbl.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_linked_lbl.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_linked_lbl.? self!)) TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_linked_lbl.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::likes_noop")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop.? pre! post! lbl! new_betree!) (let ((update_tmp_betree_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (let ((update_tmp_buffer_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (and (or (or (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query_ (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put_ (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))) (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs_ (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop.? pre! post! lbl! new_betree!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::is_fresh")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.) (forall ((self! Poly) (addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? self! addrs!) (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. self!)))))) addrs!)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? self! addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::Likes_v::no_likes")
(assert (fuel_bool_default fuel%lib!allocation_layer.Likes_v.no_likes.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.Likes_v.no_likes.) (forall ((no%param Poly)) (! (= (lib!allocation_layer.Likes_v.no_likes.? no%param) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.))) :pattern ((lib!allocation_layer.Likes_v.no_likes.? no%param)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::root_likes")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? T&. T& self!) (ite (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.singleton.? $ TYPE%lib!spec.AsyncDisk_t.Address. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))) (lib!allocation_layer.Likes_v.no_likes.? (I 0)))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_memtable")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly) (new_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable.? pre! post! lbl! new_betree! new_addrs!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush_memtable.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) new_addrs!) (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)) (let ((discard_betree$ (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))))))))) (let ((add_betree$ (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))))) (let ((new_betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. discard_betree$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. add_betree$))))) (let ((new_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))))) (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_betree_likes$)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))))))))))) (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_buffer_likes$)) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.BufferDisk_v.impl&%0.repr.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))))))))) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (let ((update_tmp_betree_likes$ new_betree_likes$)) (let ((update_tmp_buffer_likes$ new_buffer_likes$)) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$))))))))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable.? pre! post! lbl! new_betree! new_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_grow")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly) (new_root_addr! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow.? pre! post! lbl! new_betree! new_root_addr!) (let ((update_tmp_buffer_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_grow.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) new_root_addr!) (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) new_root_addr!)) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (let ((update_tmp_betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_root_addr!)))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow.? pre! post! lbl! new_betree! new_root_addr!)) ))))
(set-info :comment ";; Function-Specs vstd::set_lib::impl&%0::to_multiset")
(declare-fun req%vstd!set_lib.impl&%0.to_multiset. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%121 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!set_lib.impl&%0.to_multiset. A&. A& self!) (=> %%global_location_label%%121 (vstd!set.impl&%0.finite.? A&. A& self!))) :pattern ((req%vstd!set_lib.impl&%0.to_multiset. A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::to_multiset")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.to_multiset.))
(declare-const fuel_nat%vstd!set_lib.impl&%0.to_multiset. Fuel)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (fuel% Fuel)) (! (= (vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! fuel%) (vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! zero)) :pattern ((vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! fuel%)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& self!)) (= (vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! (succ fuel%)) (ite (= (vstd!set.impl&%0.len.? A&. A& self!) 0) (vstd!multiset.impl&%0.empty.? A&. A&) (vstd!multiset.impl&%0.add.? A&. A& (vstd!multiset.impl&%0.insert.? A&. A& (vstd!multiset.impl&%0.empty.? A&. A&) (vstd!set.impl&%0.choose.? A&. A& self!)) (vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& (vstd!set.impl&%0.remove.? A&. A& self! (vstd!set.impl&%0.choose.? A&. A& self!)) fuel%))))) :pattern ((vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.to_multiset.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& self!)) (= (vstd!set_lib.impl&%0.to_multiset.? A&. A& self!) (vstd!set_lib.impl&%0.rec%to_multiset.? A&. A& self! (succ fuel_nat%vstd!set_lib.impl&%0.to_multiset.)))) :pattern ((vstd!set_lib.impl&%0.to_multiset.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set_lib.impl&%0.to_multiset.? A&. A& self!) (TYPE%vstd!multiset.Multiset. A&. A&))) :pattern ((vstd!set_lib.impl&%0.to_multiset.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::Path::addrs_on_path")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%10.addrs_on_path. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%122 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%10.addrs_on_path. T&. T& self!) (=> %%global_location_label%%122 (lib!betree.LinkedBetree_v.impl&%10.valid.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%10.addrs_on_path. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::Path::addrs_on_path")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.))
(declare-const fuel_nat%lib!betree.LinkedBetree_v.impl&%10.addrs_on_path. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (fuel% Fuel)) (! (= (lib!betree.LinkedBetree_v.impl&%10.rec%addrs_on_path.? T&. T& self! fuel%) (lib!betree.LinkedBetree_v.impl&%10.rec%addrs_on_path.? T&. T& self! zero)) :pattern ((lib!betree.LinkedBetree_v.impl&%10.rec%addrs_on_path.? T&. T& self! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (fuel% Fuel)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (= (lib!betree.LinkedBetree_v.impl&%10.rec%addrs_on_path.? T&. T& self! (succ fuel%)) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (ite (= (lib!betree.LinkedBetree_v.Path./Path/depth (%Poly%lib!betree.LinkedBetree_v.Path. self!)) 0) (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!))))))))) (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%10.rec%addrs_on_path.? T&. T& (Poly%lib!betree.LinkedBetree_v.Path. (lib!betree.LinkedBetree_v.impl&%10.subpath.? T&. T& self!)) fuel%)) (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.Path./Path/linked (%Poly%lib!betree.LinkedBetree_v.Path. self!)))))))))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.rec%addrs_on_path.? T&. T& self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.Path. T&. T&)) (= (lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%10.rec%addrs_on_path.? T&. T& self! (succ fuel_nat%lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.)))) :pattern ((lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_split")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly) (path! Poly) (request! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split.? pre! post! lbl! new_betree! path! request! new_addrs! path_addrs!) (let ((update_tmp_buffer_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_split.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) path! request! new_addrs! path_addrs!) (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))) (and (let ((old_child$ (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!)) (I (lib!betree.SplitRequest_v.impl&%1.get_child_idx.? request!))))) (let ((old_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. old_child$))))))) (let ((new_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!) (vstd!set_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!)))))) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (let ((update_tmp_betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. old_tree_likes$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_tree_likes$))))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$))))))) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$)))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split.? pre! post! lbl! new_betree! path! request! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly) (path! Poly) (child_idx! Poly) (buffer_gc! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush.? pre! post! lbl! new_betree! path! child_idx! buffer_gc! new_addrs! path_addrs!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) path! child_idx! buffer_gc! new_addrs! path_addrs!) (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))) (let ((old_parent$ (lib!betree.LinkedBetree_v.impl&%10.target.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!))) (let ((old_child$ (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. old_parent$) child_idx!))) (let ((old_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. old_child$))))))) (let ((new_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!) (vstd!set_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))))) (let ((old_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.impl&%0.slice.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. old_parent$)))))) (I 0) buffer_gc!))))))))) (let ((new_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.impl&%5.flush_buffers.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. old_parent$) child_idx! buffer_gc!))))))))) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (let ((update_tmp_betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. old_tree_likes$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_tree_likes$))))) (let ((update_tmp_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. old_buffer_likes$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_buffer_likes$))))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$))))))))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush.? pre! post! lbl! new_betree! path! child_idx! buffer_gc! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_compact")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly) (path! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact.? pre! post! lbl! new_betree! path! start! end! compacted_buffer! new_addrs! path_addrs!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_compact.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) path! start! end! compacted_buffer! new_addrs! path_addrs!) (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))) (let ((old_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!set_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!)))))) (let ((new_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))))) (let ((old_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.impl&%0.slice.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!))))))) start! end!))))))))) (let ((new_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.singleton.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))))) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (let ((update_tmp_betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. old_tree_likes$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_tree_likes$))))) (let ((update_tmp_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. old_buffer_likes$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_buffer_likes$))))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$))))))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact.? pre! post! lbl! new_betree! path! start! end! compacted_buffer! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_noop")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop.? pre! post! lbl!) (let ((update_tmp_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (let ((update_tmp_betree_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (let ((update_tmp_buffer_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_noop.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$)))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::next_by")
(define-fun is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop_ ((c lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) Bool ((_ is lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop) c))
(define-fun is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable_ ((c lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) Bool ((_ is lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable) c))
(define-fun is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow_ ((c lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) Bool ((_ is lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow) c))
(define-fun is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split_ ((c lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) Bool ((_ is lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split) c))
(define-fun is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_ ((c lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) Bool ((_ is lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush) c))
(define-fun is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact_ ((c lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) Bool ((_ is lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact) c))
(define-fun is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_noop_ ((c lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) Bool ((_ is lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_noop) c))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_by.? pre! post! label! step!) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$))) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((new_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$)))) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((new_root_addr$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$) (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr$)))) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((request$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((new_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$) (Poly%lib!betree.LinkedBetree_v.Path. path$) (Poly%lib!betree.SplitRequest_v.SplitRequest. request$) (Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$))))))) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((child_idx$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((buffer_gc$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((new_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/5 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$) (Poly%lib!betree.LinkedBetree_v.Path. path$) (I child_idx$) (I buffer_gc$) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$)))))))) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((start$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((end$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((compacted_buffer$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((new_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/5 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/6 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$) (Poly%lib!betree.LinkedBetree_v.Path. path$) (I start$) (I end$) (Poly%lib!betree.Buffer_v.SimpleBuffer. compacted_buffer$) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$))))))))) (and (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_noop_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop.? pre! post! label!))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_by.? pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::next")
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_by.? pre! post! label! step$)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_by.? pre! post! label! step$)) ))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next.? pre! post! label!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::children_likes")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(declare-const %%global_location_label%%125 Bool)
(declare-const %%global_location_label%%126 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (start! Poly)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. T&. T& self! ranking! start!) (and (=> %%global_location_label%%123 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (=> %%global_location_label%%124 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!)) (=> %%global_location_label%%125 (<= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)))))))) (=> %%global_location_label%%126 (and (<= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))) (=> (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) start!) (< (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! start!)) ranking!) (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. T&. T& self! ranking! start!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::tree_likes")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%127 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. T&. T& self! ranking!) (=> %%global_location_label%%127 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. T&. T& self! ranking!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::children_likes")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.))
(declare-const fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (start! Poly) (fuel% Fuel)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! fuel%) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! zero)) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (start! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type start! NAT) (and (<= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))) (=> (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) start!) (< (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! start!)) ranking!) (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!))))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! (succ fuel%)) (ite (= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))) (lib!allocation_layer.Likes_v.no_likes.? (I 0)) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (let ((child_betree_likes$ (lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! start!)) ranking! fuel%))) (let ((other_betree_likes$ (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! (I (nClip (Add (%I start!) 1))) fuel%))) (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. child_betree_likes$) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. other_betree_likes$)))))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (start! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type start! NAT) (and (<= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!))))))) (=> (lib!betree.LinkedBetree_v.impl&%0.valid_child_index.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)) start!) (< (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? T&. T& self! start!)) ranking!) (lib!betree.LinkedBetree_v.impl&%5.get_rank.? T&. T& self! ranking!))))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! ranking! start!) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! start! (succ fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.)))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! ranking! start!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::tree_likes")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.))
(declare-const fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (fuel% Fuel)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! fuel%) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! zero)) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! (succ fuel%)) (ite (not (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!)) (lib!allocation_layer.Likes_v.no_likes.? (I 0)) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (let ((children_betree_likes$ (lib!allocation_layer.LikesBetree_v.impl&%1.rec%children_likes.? T&. T& self! ranking! (I 0) fuel%))) (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? T&. T& self!)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. children_betree_likes$))))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.) (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type ranking! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& self! ranking!) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%tree_likes.? T&. T& self! ranking! (succ (succ fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& self! ranking!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedSeq_v::LinkedSeq::likes")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%0.likes.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%0.likes.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%0.likes.? self!) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. self!)))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%0.likes.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::buffer_likes")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.))
(declare-const fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (betree_likes! Poly) (fuel% Fuel)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! fuel%) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! zero)) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! fuel%)) )))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (betree_likes! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type betree_likes! (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! (succ fuel%)) (ite (> (vstd!multiset.impl&%0.len.? $ TYPE%lib!spec.AsyncDisk_t.Address. betree_likes!) 0) (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (let ((addr$ (%Poly%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.choose.? $ TYPE%lib!spec.AsyncDisk_t.Address. betree_likes!)))) (let ((sub_buffer_likes$ (lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! (vstd!multiset.impl&%0.remove.? $ TYPE%lib!spec.AsyncDisk_t.Address. betree_likes! (Poly%lib!spec.AsyncDisk_t.Address. addr$)) fuel%))) (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%0.likes.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) (Poly%lib!spec.AsyncDisk_t.Address. addr$))))))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. sub_buffer_likes$))))) (lib!allocation_layer.Likes_v.no_likes.? (I 0))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.) (forall ((T&. Dcr) (T& Type) (self! Poly) (betree_likes! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type betree_likes! (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (= (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& self! betree_likes!) (lib!allocation_layer.LikesBetree_v.impl&%1.rec%buffer_likes.? T&. T& self! betree_likes! (succ fuel_nat%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.)))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& self! betree_likes!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::transitive_likes")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? T&. T& self!) (ite (not (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!)) (tuple%2./tuple%2 (vstd!pervasive.arbitrary.? $ (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (vstd!pervasive.arbitrary.? $ (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (let ((tree_likes$ (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& self! (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (lib!betree.LinkedBetree_v.impl&%5.the_ranking.? T&. T& self!))))) (tuple%2./tuple%2 (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. tree_likes$) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& self! (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. tree_likes$))))))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type (Poly%tuple%2. (lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? T&. T& self!)) (TYPE%tuple%2. $ (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) $ (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.)))) :pattern ((lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::initialize")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize.) (forall ((post! Poly) (betree! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize.? post! betree!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.initialize.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. betree! betree!) (let ((tmp%%$ (lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. betree!)))))) (let ((betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. betree!))) (let ((update_tmp_betree_likes$ betree_likes$)) (let ((update_tmp_buffer_likes$ buffer_likes$)) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$))))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize.? post! betree!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::init_by")
(define-fun is-lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize_ ((c lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) Bool ((_ is lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init_by.) (forall ((post! Poly) (step! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init_by.? post! step!) (and (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. step!)) (let ((betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize.? post! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. betree$))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init_by.? post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::init")
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init.) (forall ((post! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init.? post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init_by.? post! step$)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init_by.? post! step$)) ))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.init.? post!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::inv")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv.? T&. T& self!) (and (and (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!)))) (lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))))) (=> (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!)))) (= (lib!betree.LinkedBetree_v.impl&%0.my_domain.? (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!)))))) (lib!betree.Domain_v.total_domain.? (I 0)))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::inv")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.inv.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.inv.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.inv.? self!) (let ((tmp%%$ (lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. self!))))))))) (let ((betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. self!)))) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. self!)) betree_likes$)) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. self!)) buffer_likes$)))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.inv.? self!)) ))))
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesBetree_v::LikesBetree::State::lemma_msg_inv")
(declare-fun req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.lemma_msg_inv. (lib!allocation_layer.LikesBetree_v.LikesBetree.State.) Bool)
(assert (forall ((s! lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) (! (= (req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.lemma_msg_inv. s!) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.inv.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. s!))) :pattern ((req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.lemma_msg_inv. s!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.lemma_msg_inv. (lib!allocation_layer.LikesBetree_v.LikesBetree.State.) Bool)
(assert (forall ((s! lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.lemma_msg_inv. s!) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.inv.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. s!))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.lemma_msg_inv. s!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::spec_le")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.spec_le.) (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!multiset.impl&%0.spec_le.? V&. V& self! m2!) (vstd!multiset.impl&%0.subset_of.? V&. V& self! m2!)) :pattern ((vstd!multiset.impl&%0.spec_le.? V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.contains.) (forall ((V&. Dcr) (V& Type) (self! Poly) (v! Poly)) (! (= (vstd!multiset.impl&%0.contains.? V&. V& self! v!) (> (vstd!multiset.impl&%0.count.? V&. V& self! v!) 0)) :pattern ((vstd!multiset.impl&%0.contains.? V&. V& self! v!)) ))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%44::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::post_step")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step.) (forall ((T&. Dcr) (T& Type) (self! Poly) (step! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step.? T&. T& self! step!) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (lib!betree.LinkedBetree_v.impl&%5.push_memtable.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))) (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_root_addr$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (lib!betree.LinkedBetree_v.impl&%5.grow.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))) (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr$))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((path$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((request$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((split_parent$ (lib!betree.LinkedBetree_v.impl&%5.split_parent.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& (Poly%lib!betree.LinkedBetree_v.Path. path$))) (Poly%lib!betree.SplitRequest_v.SplitRequest. request$) (Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs$)))) (lib!betree.LinkedBetree_v.impl&%10.substitute.? T&. T& (Poly%lib!betree.LinkedBetree_v.Path. path$) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. split_parent$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$))))))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((path$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((child_idx$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((buffer_gc$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/5 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((flush_parent$ (lib!betree.LinkedBetree_v.impl&%5.flush.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& (Poly%lib!betree.LinkedBetree_v.Path. path$))) (I child_idx$) (I buffer_gc$) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$)))) (lib!betree.LinkedBetree_v.impl&%10.substitute.? T&. T& (Poly%lib!betree.LinkedBetree_v.Path. path$) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. flush_parent$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$)))))))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((path$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((start$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((end$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((compacted_buffer$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/5 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/6 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((compact_node$ (lib!betree.LinkedBetree_v.impl&%6.compact.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? T&. T& (Poly%lib!betree.LinkedBetree_v.Path. path$))) (I start$) (I end$) compacted_buffer$ (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$)))) (lib!betree.LinkedBetree_v.impl&%10.substitute.? T&. T& (Poly%lib!betree.LinkedBetree_v.Path. path$) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. compact_node$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$))))))))) (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!)))))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step.? T&. T& self! step!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (step! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. T&. T&)) (has_type step! (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. T&. T&))) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step.? T&. T& self! step!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step.? T&. T& self! step!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::same_tight_tree")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%128 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (other! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree. T&. T& self! other!) (=> %%global_location_label%%128 (lib!betree.LinkedBetree_v.impl&%5.valid_view.? T&. T& self! other!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree. T&. T& self! other!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::same_tight_tree")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.) (forall ((T&. Dcr) (T& Type) (self! Poly) (other! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.? T&. T& self! other!) (and (and (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& self!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))))))))) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& self!)) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.BufferDisk_v.impl&%0.repr.? T&. T& (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.? T&. T& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetreeVars::State::strong_step")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.strong_step.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.strong_step.) (forall ((T&. Dcr) (T& Type) (self! Poly) (step! Poly)) (! (= (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.strong_step.? T&. T& self! step!) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/1 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_memtable/2 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (and (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))) (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$))) (lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step.? T&. T& self! step!)) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked$))))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_root_addr$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))) (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr$)))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/3 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_split/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (and (and (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))) (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs. (Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs$))) (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$)))) (lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step.? T&. T& self! step!)) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked$)))))) (ite (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/4 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_flush/5 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (and (and (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))) (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$))) (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$)))) (lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step.? T&. T& self! step!)) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked$)))))) (=> (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact_ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)) (let ((new_linked$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/0 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((new_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/5 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (let ((path_addrs$ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_compact/6 (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!)))) (and (and (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))) (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$))) (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. self!))) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$)))) (lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.post_step.? T&. T& self! step!)) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. new_linked$)))))))))))) :pattern ((lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.strong_step.? T&. T& self! step!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_2")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_2.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_2.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_2.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_2.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_2.? self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_2.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_6")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_6.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_6.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_6.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/6 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_6.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_4")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_4.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_4.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_4.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_4.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_3")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_3.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_3.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_3.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_3.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_3.? self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_3.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_likes_noop_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_likes_noop_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_likes_noop_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_likes_noop_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_likes_noop_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_likes_noop_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_likes_noop_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_memtable_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_memtable_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_1.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_1.? self!)) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_memtable_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_grow_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_grow_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_1.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_1.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_grow_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_split_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_split_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_1.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_1.? self!)) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_split_2")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_2.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_2.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_2.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_2.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_2.? self!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_2.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_split_3")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_3.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_3.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_3.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_3.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.SplitAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_3.? self!)) TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_3.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_split_4")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_4.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_4.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_4.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_split_4.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_1.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_1.? self!)) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_2")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_2.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_2.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_2.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_2.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_2.? self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_2.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_3")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_3.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_3.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_3.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_3.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_3.? self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_3.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_4")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_4.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_4.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_4.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_4.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_4.? self!)) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_4.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_flush_5")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_5.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_5.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_5.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/5 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_flush_5.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_1.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_1.? self!)) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_2")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_2.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_2.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_2.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_2.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_2.? self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_2.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_3")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_3.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_3.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_3.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_3.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_3.? self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_3.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_4")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_4.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_4.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_4.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_4.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_5")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_5.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_5.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_5.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/5 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_5.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_5.? self!)) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_5.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_internal_compact_6")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_6.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_6.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_6.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/6 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_internal_compact_6.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_dummy_to_use_type_params_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_likes_noop")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_likes_noop.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_likes_noop.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_likes_noop.? self!) (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_likes_noop.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_likes_noop_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_likes_noop_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_likes_noop_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_likes_noop_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_likes_noop_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_likes_noop_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_likes_noop_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_flush_memtable")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush_memtable.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush_memtable.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush_memtable.? self!) (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush_memtable.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_memtable_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_memtable_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_1.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_1.? self!)) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_memtable_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_grow")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_grow.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_grow.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_grow.? self!) (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_grow.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_grow_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_grow_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_1.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_1.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_grow_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_split")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_split.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_split.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_split.? self!) (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_split.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_split_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_split_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_1.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_1.? self!)) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_split_2")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_2.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_2.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_2.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_2.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.SplitRequest_v.SplitRequest. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_2.? self!)) TYPE%lib!betree.SplitRequest_v.SplitRequest.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_2.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_split_3")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_3.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_3.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_3.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_3.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.SplitAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_3.? self!)) TYPE%lib!betree.LinkedBetree_v.SplitAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_3.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_split_4")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_4.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_4.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_4.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_split_4.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_flush")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush.? self!) (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_flush.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_1.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_1.? self!)) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_2")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_2.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_2.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_2.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_2.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_2.? self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_2.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_3")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_3.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_3.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_3.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_3.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_3.? self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_3.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_4")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_4.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_4.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_4.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_4.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_4.? self!)) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_4.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_flush_5")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_5.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_5.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_5.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/5 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_flush_5.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_compact")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_compact.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_compact.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_compact.? self!) (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_compact.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_1")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_1.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_1.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_1.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_1.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.Path. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_1.? self!)) (TYPE%lib!betree.LinkedBetree_v.Path. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_1.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_2")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_2.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_2.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_2.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_2.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_2.? self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_2.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_3")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_3.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_3.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_3.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_3.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (<= 0 (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_3.? self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_3.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_4")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_4.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_4.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_4.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_4.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_5")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_5.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_5.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_5.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/5 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_5.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!betree.LinkedBetree_v.TwoAddrs. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_5.? self!)) TYPE%lib!betree.LinkedBetree_v.TwoAddrs.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_5.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_internal_compact_6")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_6.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_6.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_6.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/6 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_internal_compact_6.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_internal_noop")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_noop.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_noop.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_noop.? self!) (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_noop_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_internal_noop.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_dummy_to_use_type_params.))
(define-fun is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params_ ((c lib!allocation_layer.LikesBetree_v.LikesBetree.Step.)) Bool ((_ is lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_dummy_to_use_type_params.? self!) (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.is_dummy_to_use_type_params.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Step::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_dummy_to_use_type_params_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%1.get_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Config::arrow_initialize_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_initialize_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_initialize_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_initialize_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_initialize_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_initialize_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_initialize_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Config::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_dummy_to_use_type_params_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Config::is_initialize")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_initialize.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_initialize.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_initialize.? self!) (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_initialize.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Config::get_initialize_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_initialize_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_initialize_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_initialize_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./initialize/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_initialize_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_initialize_0.? self!)) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_initialize_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Config::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_dummy_to_use_type_params.))
(define-fun is-lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params_ ((c lib!allocation_layer.LikesBetree_v.LikesBetree.Config.)) Bool ((_ is lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_dummy_to_use_type_params.? self!) (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.is_dummy_to_use_type_params.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Config::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_dummy_to_use_type_params_0.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Config./dummy_to_use_type_params/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Config. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_dummy_to_use_type_params_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Config.) (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%3.get_dummy_to_use_type_params_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::Label::arrow_Label_linked_lbl")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_Label_linked_lbl.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_Label_linked_lbl.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_Label_linked_lbl.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. self!))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_Label_linked_lbl.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_Label_linked_lbl.? self!)) TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%4.arrow_Label_linked_lbl.? self!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::likes_noop_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_strong.? pre! post! lbl! new_betree!) (let ((update_tmp_betree_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (let ((update_tmp_buffer_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (and (or (or (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query_ (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put_ (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))) (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs_ (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_strong.? pre! post! lbl! new_betree!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::likes_noop_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_enabled.) (forall ((pre! Poly) (lbl! Poly) (new_betree! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_enabled.? pre! lbl! new_betree!) (and (or (or (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Query_ (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./Put_ (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))) (is-lib!betree.LinkedBetree_v.LinkedBetreeVars.Label./FreezeAs_ (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_enabled.? pre! lbl! new_betree!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_memtable_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly) (new_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_strong.? pre! post! lbl! new_betree! new_addrs!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush_memtable.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) new_addrs!) (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)) (let ((discard_betree$ (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))))))))) (let ((add_betree$ (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))))) (let ((new_betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. discard_betree$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. add_betree$))))) (let ((new_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))))) (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_betree_likes$)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))))))))))) (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_buffer_likes$)) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.BufferDisk_v.impl&%0.repr.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))))))))) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (let ((update_tmp_betree_likes$ new_betree_likes$)) (let ((update_tmp_buffer_likes$ new_buffer_likes$)) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$))))))))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_strong.? pre! post! lbl! new_betree! new_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_memtable_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_enabled.) (forall ((pre! Poly) (lbl! Poly) (new_betree! Poly) (new_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_enabled.? pre! lbl! new_betree! new_addrs!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush_memtable.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.Memtable_v.Memtable. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/memtable (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) new_addrs!) (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)) (let ((discard_betree$ (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))))))))) (let ((add_betree$ (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))))) (let ((new_betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. discard_betree$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. add_betree$))))) (let ((new_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))))) (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_betree_likes$)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))))))))))) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_buffer_likes$)) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.BufferDisk_v.impl&%0.repr.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.BufferDisk_v.BufferDisk. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/buffer_dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))))))))))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_enabled.? pre! lbl! new_betree! new_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_grow_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly) (new_root_addr! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_strong.? pre! post! lbl! new_betree! new_root_addr!) (let ((update_tmp_buffer_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_grow.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) new_root_addr!) (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) new_root_addr!)) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (let ((update_tmp_betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_root_addr!)))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_strong.? pre! post! lbl! new_betree! new_root_addr!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_grow_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_enabled.) (forall ((pre! Poly) (lbl! Poly) (new_betree! Poly) (new_root_addr! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_enabled.? pre! lbl! new_betree! new_root_addr!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_grow.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) new_root_addr!) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) new_root_addr!)))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_enabled.? pre! lbl! new_betree! new_root_addr!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_split_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly) (path! Poly) (request! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_strong.? pre! post! lbl! new_betree! path! request! new_addrs! path_addrs!) (let ((update_tmp_buffer_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_split.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) path! request! new_addrs! path_addrs!) (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))) (and (let ((old_child$ (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!)) (I (lib!betree.SplitRequest_v.impl&%1.get_child_idx.? request!))))) (let ((old_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. old_child$))))))) (let ((new_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!) (vstd!set_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!)))))) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (let ((update_tmp_betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. old_tree_likes$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_tree_likes$))))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$))))))) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$)))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_strong.? pre! post! lbl! new_betree! path! request! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_split_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_enabled.) (forall ((pre! Poly) (lbl! Poly) (new_betree! Poly) (path! Poly) (request! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_enabled.? pre! lbl! new_betree! path! request! new_addrs! path_addrs!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_split.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) path! request! new_addrs! path_addrs!) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs!) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_enabled.? pre! lbl! new_betree! path! request! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly) (path! Poly) (child_idx! Poly) (buffer_gc! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_strong.? pre! post! lbl! new_betree! path! child_idx! buffer_gc! new_addrs! path_addrs!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) path! child_idx! buffer_gc! new_addrs! path_addrs!) (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))) (let ((old_parent$ (lib!betree.LinkedBetree_v.impl&%10.target.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!))) (let ((old_child$ (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. old_parent$) child_idx!))) (let ((old_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.root_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. old_child$))))))) (let ((new_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!) (vstd!set_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))))) (let ((old_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.impl&%0.slice.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. old_parent$)))))) (I 0) buffer_gc!))))))))) (let ((new_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.impl&%5.flush_buffers.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. old_parent$) child_idx! buffer_gc!))))))))) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (let ((update_tmp_betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. old_tree_likes$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_tree_likes$))))) (let ((update_tmp_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. old_buffer_likes$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_buffer_likes$))))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$))))))))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_strong.? pre! post! lbl! new_betree! path! child_idx! buffer_gc! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_enabled.) (forall ((pre! Poly) (lbl! Poly) (new_betree! Poly) (path! Poly) (child_idx! Poly) (buffer_gc! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_enabled.? pre! lbl! new_betree! path! child_idx! buffer_gc! new_addrs! path_addrs!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_flush.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) path! child_idx! buffer_gc! new_addrs! path_addrs!) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_enabled.? pre! lbl! new_betree! path! child_idx! buffer_gc! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_compact_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly) (new_betree! Poly) (path! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_strong.? pre! post! lbl! new_betree! path! start! end! compacted_buffer! new_addrs! path_addrs!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_compact.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) path! start! end! compacted_buffer! new_addrs! path_addrs!) (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))) (let ((old_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!set_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%10.addrs_on_path.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!)))))) (let ((new_tree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))))) (let ((old_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!seq_lib.impl&%0.to_multiset.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.impl&%0.slice.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%10.target.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. path!))))))) start! end!))))))))) (let ((new_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.singleton.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))))) (let ((update_tmp_betree$ (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) (let ((update_tmp_betree_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. old_tree_likes$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_tree_likes$))))) (let ((update_tmp_buffer_likes$ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.sub.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. old_buffer_likes$)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. new_buffer_likes$))))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$))))))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_strong.? pre! post! lbl! new_betree! path! start! end! compacted_buffer! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_compact_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_enabled.) (forall ((pre! Poly) (lbl! Poly) (new_betree! Poly) (path! Poly) (start! Poly) (end! Poly) (compacted_buffer! Poly) (new_addrs! Poly) (path_addrs! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_enabled.? pre! lbl! new_betree! path! start! end! compacted_buffer! new_addrs! path_addrs!) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_compact.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) new_betree! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))) path! start! end! compacted_buffer! new_addrs! path_addrs!) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.is_fresh.? pre! (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.AsyncDisk_t.Address. path_addrs!))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_enabled.? pre! lbl! new_betree! path! start! end! compacted_buffer! new_addrs! path_addrs!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_noop_strong")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_strong.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_strong.) (forall ((pre! Poly) (post! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_strong.? pre! post! lbl!) (let ((update_tmp_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (let ((update_tmp_betree_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (let ((update_tmp_buffer_likes$ (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (and (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_noop.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_buffer_likes$) (and (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree_likes$) (= (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)) update_tmp_betree$)))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_strong.? pre! post! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_noop_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_enabled.) (forall ((pre! Poly) (lbl! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_enabled.? pre! lbl!) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.internal_noop.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_enabled.? pre! lbl!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::initialize_enabled")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize_enabled.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize_enabled.) (forall ((betree! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize_enabled.? betree!) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.initialize.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. betree! betree!)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.initialize_enabled.? betree!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::next_strong_by")
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong_by.) (forall ((pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong_by.? pre! post! label! step!) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./likes_noop/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_strong.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$))) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((new_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_memtable/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_strong.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$)))) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((new_root_addr$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_grow/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_strong.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$) (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr$)))) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((request$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((new_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_split/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_split_strong.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$) (Poly%lib!betree.LinkedBetree_v.Path. path$) (Poly%lib!betree.SplitRequest_v.SplitRequest. request$) (Poly%lib!betree.LinkedBetree_v.SplitAddrs. new_addrs$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$))))))) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((child_idx$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((buffer_gc$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((new_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_flush/5 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_strong.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$) (Poly%lib!betree.LinkedBetree_v.Path. path$) (I child_idx$) (I buffer_gc$) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$)))))))) (ite (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (let ((new_betree$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/0 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/1 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((start$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/2 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((end$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/3 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((compacted_buffer$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/4 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((new_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/5 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (let ((path_addrs$ (lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_compact/6 (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)))) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_compact_strong.? pre! post! label! (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree$) (Poly%lib!betree.LinkedBetree_v.Path. path$) (I start$) (I end$) (Poly%lib!betree.Buffer_v.SimpleBuffer. compacted_buffer$) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs$) (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. path_addrs$))))))))) (and (is-lib!allocation_layer.LikesBetree_v.LikesBetree.Step./internal_noop_ (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Step. step!)) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_noop_strong.? pre! post! label!))))))))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong_by.? pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::next_strong")
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong.) (forall ((pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong.? pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Step.) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong_by.? pre! post! label! step$)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong_by.? pre! post! label! step$)) ))) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.next_strong.? pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::LikesBetree_v::LikesBetree::State::invariant")
(assert (fuel_bool_default fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.) (forall ((self! Poly)) (! (= (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.? self!) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.inv.? self!)) :pattern ((lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::DiskView::agrees_with")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%1.agrees_with.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%1.agrees_with.) (forall ((self! Poly) (other! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%1.agrees_with.? self! other!) (vstd!map_lib.impl&%0.agrees.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. self!))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. other!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%1.agrees_with.? self! other!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::finite_ranking")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%5.finite_ranking. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%129 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%5.finite_ranking. T&. T& self!) (=> %%global_location_label%%129 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& self!))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%5.finite_ranking. T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::betree::LinkedBetree_v::LinkedBetree::finite_ranking")
(assert (fuel_bool_default fuel%lib!betree.LinkedBetree_v.impl&%5.finite_ranking.))
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%5.finite_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!betree.LinkedBetree_v.impl&%5.finite_ranking.? T&. T& self!) (%Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (vstd!map_lib.impl&%0.restrict.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. (lib!betree.LinkedBetree_v.impl&%5.the_ranking.? T&. T& self!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.finite_ranking.? T&. T& self!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::exists_child_subtree_contains_addr")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%130 Bool)
(declare-const %%global_location_label%%131 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (ranking! Poly) (addr! Poly) (start! Poly)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr. T&. T& self! ranking! addr! start!) (and (=> %%global_location_label%%130 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!)) (=> %%global_location_label%%131 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! ranking!)))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr. T&. T& self! ranking! addr! start!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::push_memtable_new_ranking")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.push_memtable_new_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.Memtable_v.Memtable. lib!betree.LinkedBetree_v.TwoAddrs. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%132 Bool)
(declare-const %%global_location_label%%133 Bool)
(declare-const %%global_location_label%%134 Bool)
(declare-const %%global_location_label%%135 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (memtable! lib!betree.Memtable_v.Memtable.) (new_addrs! lib!betree.LinkedBetree_v.TwoAddrs.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.push_memtable_new_ranking. T&. T& self! memtable! new_addrs! ranking!) (and (=> %%global_location_label%%132 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%133 (%B (lib!betree.LinkedBetree_v.Addrs.no_duplicates.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))) (=> %%global_location_label%%134 (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))) (=> %%global_location_label%%135 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.push_memtable_new_ranking. T&. T& self! memtable! new_addrs! ranking!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.impl&%11.push_memtable_new_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.Memtable_v.Memtable. lib!betree.LinkedBetree_v.TwoAddrs. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (memtable! lib!betree.Memtable_v.Memtable.) (new_addrs! lib!betree.LinkedBetree_v.TwoAddrs.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (new_ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!betree.LinkedBetree_v.impl&%11.push_memtable_new_ranking. T&. T& self! memtable! new_addrs! ranking! new_ranking!) (and (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. new_ranking!)) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.push_memtable.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%lib!betree.Memtable_v.Memtable. memtable!) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. new_ranking!)) (= (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. new_ranking!)) (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr1 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))))))) :pattern ((ens%lib!betree.LinkedBetree_v.impl&%11.push_memtable_new_ranking. T&. T& self! memtable! new_addrs! ranking! new_ranking!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs_ignore_ranking")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%136 Bool)
(declare-const %%global_location_label%%137 Bool)
(declare-const %%global_location_label%%138 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. T&. T& self! r1! r2!) (and (=> %%global_location_label%%136 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%137 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!))) (=> %%global_location_label%%138 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. T&. T& self! r1! r2!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. T&. T& self! r1! r2!) (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!)) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!)))) :pattern ((ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking. T&. T& self! r1! r2!)) )))
(set-info :comment ";; Broadcast lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs_ignore_ranking")
(assert (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_ignore_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly) (r1! Poly) (r2! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type r1! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type r2! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) (=> (and (and (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!)) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r2!)))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r2!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r2!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r1!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r1!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r2!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& self! r2!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::reachable_betree_addrs_using_ranking_closed")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%139 Bool)
(declare-const %%global_location_label%%140 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. T&. T& self! ranking!) (and (=> %%global_location_label%%139 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%140 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. T&. T& self! ranking!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. T&. T& self! ranking!) (let ((reachable_addrs$ (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))) (and (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. reachable_addrs$) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))) (=> (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. reachable_addrs$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. reachable_addrs$) addr$) (not (= (core!option.Option./Some addr$) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) (lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) addr$ (I 0)))) :pattern ((lib!betree.LinkedBetree_v.impl&%11.exists_child_subtree_contains_addr.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) addr$ (I 0))) ))))) :pattern ((ens%lib!betree.LinkedBetree_v.impl&%11.reachable_betree_addrs_using_ranking_closed. T&. T& self! ranking!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::agreeable_disks_same_reachable_betree_addrs")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.agreeable_disks_same_reachable_betree_addrs. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%141 Bool)
(declare-const %%global_location_label%%142 Bool)
(declare-const %%global_location_label%%143 Bool)
(declare-const %%global_location_label%%144 Bool)
(declare-const %%global_location_label%%145 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.agreeable_disks_same_reachable_betree_addrs. T&. T& self! other! ranking!) (and (=> %%global_location_label%%141 (lib!betree.LinkedBetree_v.impl&%5.wf.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%142 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> %%global_location_label%%143 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> %%global_location_label%%144 (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))))) (=> %%global_location_label%%145 (lib!betree.LinkedBetree_v.impl&%1.agrees_with.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.agreeable_disks_same_reachable_betree_addrs. T&. T& self! other! ranking!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.impl&%11.agreeable_disks_same_reachable_betree_addrs. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!betree.LinkedBetree_v.impl&%11.agreeable_disks_same_reachable_betree_addrs. T&. T& self! other! ranking!) (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))) :pattern ((ens%lib!betree.LinkedBetree_v.impl&%11.agreeable_disks_same_reachable_betree_addrs. T&. T& self! other! ranking!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::same_reachable_betree_addrs_implies_same_buffer_addrs")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.same_reachable_betree_addrs_implies_same_buffer_addrs. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree.) Bool)
(declare-const %%global_location_label%%146 Bool)
(declare-const %%global_location_label%%147 Bool)
(declare-const %%global_location_label%%148 Bool)
(declare-const %%global_location_label%%149 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.same_reachable_betree_addrs_implies_same_buffer_addrs. T&. T& self! other!) (and (=> %%global_location_label%%146 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%147 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))) (=> %%global_location_label%%148 (lib!betree.LinkedBetree_v.impl&%1.agrees_with.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))))) (=> %%global_location_label%%149 (= (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.same_reachable_betree_addrs_implies_same_buffer_addrs. T&. T& self! other!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.impl&%11.same_reachable_betree_addrs_implies_same_buffer_addrs. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= (ens%lib!betree.LinkedBetree_v.impl&%11.same_reachable_betree_addrs_implies_same_buffer_addrs. T&. T& self! other!) (= (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)) (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))) :pattern ((ens%lib!betree.LinkedBetree_v.impl&%11.same_reachable_betree_addrs_implies_same_buffer_addrs. T&. T& self! other!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::push_memtable_ensures")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%11.push_memtable_ensures. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.Memtable_v.Memtable. lib!betree.LinkedBetree_v.TwoAddrs.) Bool)
(declare-const %%global_location_label%%150 Bool)
(declare-const %%global_location_label%%151 Bool)
(declare-const %%global_location_label%%152 Bool)
(declare-const %%global_location_label%%153 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (memtable! lib!betree.Memtable_v.Memtable.) (new_addrs! lib!betree.LinkedBetree_v.TwoAddrs.)) (! (= (req%lib!betree.LinkedBetree_v.impl&%11.push_memtable_ensures. T&. T& self! memtable! new_addrs!) (and (=> %%global_location_label%%150 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%151 (lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%152 (lib!betree.LinkedBetree_v.impl&%5.is_fresh.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (lib!betree.LinkedBetree_v.Addrs.repr.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))) (=> %%global_location_label%%153 (%B (lib!betree.LinkedBetree_v.Addrs.no_duplicates.? $ TYPE%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%11.push_memtable_ensures. T&. T& self! memtable! new_addrs!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.impl&%11.push_memtable_ensures. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.Memtable_v.Memtable. lib!betree.LinkedBetree_v.TwoAddrs.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (memtable! lib!betree.Memtable_v.Memtable.) (new_addrs! lib!betree.LinkedBetree_v.TwoAddrs.)) (! (= (ens%lib!betree.LinkedBetree_v.impl&%11.push_memtable_ensures. T&. T& self! memtable! new_addrs!) (and (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.push_memtable.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%lib!betree.Memtable_v.Memtable. memtable!) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))) (lib!betree.LinkedBetree_v.impl&%5.valid_buffer_dv.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.push_memtable.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%lib!betree.Memtable_v.Memtable. memtable!) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!)))) (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.impl&%5.push_memtable.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%lib!betree.Memtable_v.Memtable. memtable!) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))) (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%lib!spec.AsyncDisk_t.Address. (lib!betree.LinkedBetree_v.TwoAddrs./TwoAddrs/addr2 (%Poly%lib!betree.LinkedBetree_v.TwoAddrs. (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))))))) :pattern ((ens%lib!betree.LinkedBetree_v.impl&%11.push_memtable_ensures. T&. T& self! memtable! new_addrs!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::DiskView::subdisk_implies_ranking_validity")
(declare-fun req%lib!betree.LinkedBetree_v.impl&%1.subdisk_implies_ranking_validity. (lib!betree.LinkedBetree_v.DiskView. lib!betree.LinkedBetree_v.DiskView. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%154 Bool)
(declare-const %%global_location_label%%155 Bool)
(declare-const %%global_location_label%%156 Bool)
(assert (forall ((self! lib!betree.LinkedBetree_v.DiskView.) (big! lib!betree.LinkedBetree_v.DiskView.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!betree.LinkedBetree_v.impl&%1.subdisk_implies_ranking_validity. self! big! ranking!) (and (=> %%global_location_label%%154 (lib!betree.LinkedBetree_v.impl&%1.wf.? (Poly%lib!betree.LinkedBetree_v.DiskView. self!))) (=> %%global_location_label%%155 (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. self!) (Poly%lib!betree.LinkedBetree_v.DiskView. big!))) (=> %%global_location_label%%156 (lib!betree.LinkedBetree_v.impl&%1.valid_ranking.? (Poly%lib!betree.LinkedBetree_v.DiskView. big!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))))) :pattern ((req%lib!betree.LinkedBetree_v.impl&%1.subdisk_implies_ranking_validity. self! big! ranking!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.impl&%1.subdisk_implies_ranking_validity. (lib!betree.LinkedBetree_v.DiskView. lib!betree.LinkedBetree_v.DiskView. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((self! lib!betree.LinkedBetree_v.DiskView.) (big! lib!betree.LinkedBetree_v.DiskView.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!betree.LinkedBetree_v.impl&%1.subdisk_implies_ranking_validity. self! big! ranking!) (lib!betree.LinkedBetree_v.impl&%1.valid_ranking.? (Poly%lib!betree.LinkedBetree_v.DiskView. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) :pattern ((ens%lib!betree.LinkedBetree_v.impl&%1.subdisk_implies_ranking_validity. self! big! ranking!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetreeVars::State::inv_next_by")
(declare-fun req%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv_next_by. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetreeVars.State. lib!betree.LinkedBetree_v.LinkedBetreeVars.State. lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) Bool)
(declare-const %%global_location_label%%157 Bool)
(declare-const %%global_location_label%%158 Bool)
(declare-const %%global_location_label%%159 Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (post! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (lbl! lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) (step! lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (req%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv_next_by. T&. T& pre! post! lbl! step!) (and (=> %%global_location_label%%157 (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!))) (=> %%global_location_label%%158 (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.strong_step.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!))) (=> %%global_location_label%%159 (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next_by.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. pre!) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lbl!) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.Step. step!))))) :pattern ((req%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv_next_by. T&. T& pre! post! lbl! step!)) )))
(declare-fun ens%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv_next_by. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetreeVars.State. lib!betree.LinkedBetree_v.LinkedBetreeVars.State. lib!betree.LinkedBetree_v.LinkedBetreeVars.Label. lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (post! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (lbl! lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.) (step! lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)) (! (= (ens%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv_next_by. T&. T& pre! post! lbl! step!) (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. post!))) :pattern ((ens%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv_next_by. T&. T& pre! post! lbl! step!)) )))
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesBetree_v::LikesBetree::State::likes_noop_inductive")
(declare-fun req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_inductive. (lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) Bool)
(declare-const %%global_location_label%%160 Bool)
(assert (forall ((pre! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (post! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (lbl! lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) (new_betree! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (! (= (req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_inductive. pre! post! lbl! new_betree!) (=> %%global_location_label%%160 (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_strong.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!) (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!) (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_inductive. pre! post! lbl! new_betree!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_inductive. (lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) Bool)
(assert (forall ((pre! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (post! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (lbl! lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) (new_betree! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_inductive. pre! post! lbl! new_betree!) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.likes_noop_inductive. pre! post! lbl! new_betree!)) )))
(set-info :comment ";; Function-Def lib::allocation_layer::LikesBetree_v::LikesBetree::State::likes_noop_inductive")
(set-info :comment ";; allocation_layer/LikesBetree_v.rs:523:5: 523:114 (#0)")
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::tree_likes_ignore_ranking")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%161 Bool)
(declare-const %%global_location_label%%162 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. T&. T& self! r1! r2!) (and (=> %%global_location_label%%161 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!))) (=> %%global_location_label%%162 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. T&. T& self! r1! r2!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. T&. T& self! r1! r2!) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking. T&. T& self! r1! r2!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::children_likes_ignore_ranking")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(declare-const %%global_location_label%%163 Bool)
(declare-const %%global_location_label%%164 Bool)
(declare-const %%global_location_label%%165 Bool)
(declare-const %%global_location_label%%166 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (start! Int)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. T&. T& self! r1! r2! start!) (and (=> %%global_location_label%%163 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%164 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!))) (=> %%global_location_label%%165 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!))) (=> %%global_location_label%%166 (<= start! (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. T&. T& self! r1! r2! start!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (r1! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (r2! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (start! Int)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. T&. T& self! r1! r2! start!) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r1!) (I start!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. r2!) (I start!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking. T&. T& self! r1! r2! start!)) )))
(set-info :comment ";; Broadcast lib::betree::LinkedBetree_v::LinkedBetree::tree_likes_ignore_ranking")
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly) (r1! Poly) (r2! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type r1! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type r2! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT))) (=> (and (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& self! r1!)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& self! r2!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) ))))
(set-info :comment ";; Broadcast lib::betree::LinkedBetree_v::LinkedBetree::children_likes_ignore_ranking")
(assert (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.children_likes_ignore_ranking.) (forall ((T&. Dcr) (T& Type) (self! Poly) (r1! Poly) (r2! Poly) (start! Poly)) (! (=> (and (has_type self! (TYPE%lib!betree.LinkedBetree_v.LinkedBetree. T&. T&)) (has_type r1! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type r2! (TYPE%vstd!map.Map. $ TYPE%lib!spec.AsyncDisk_t.Address. $ NAT)) (has_type start! NAT)) (=> (and (and (and (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& self!) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!)) (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!)) (<= (%I start!) (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& self!)))))))) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! r1! start!)) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! r2! start!))))) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r1!) (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! r2! start!)) :pattern ((lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& self! r2!) (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& self! r1! start!)) ))))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::tree_likes_domain")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%167 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. T&. T& self! ranking!) (=> %%global_location_label%%167 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. T&. T& self! ranking!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. T&. T& self! ranking!) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.) (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs_using_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. T&. T& self! ranking!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::buffer_likes_additive")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Bool)
(declare-const %%global_location_label%%168 Bool)
(declare-const %%global_location_label%%169 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) (delta! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. T&. T& self! betree_likes! delta!) (and (=> %%global_location_label%%168 (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))))) (=> %%global_location_label%%169 (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. delta!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. T&. T& self! betree_likes! delta!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) (delta! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. T&. T& self! betree_likes! delta!) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. delta!)))) (vstd!multiset.impl&%0.add.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. delta!)))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. T&. T& self! betree_likes! delta!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::buffer_likes_domain")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Bool)
(declare-const %%global_location_label%%170 Bool)
(declare-const %%global_location_label%%171 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. T&. T& self! betree_likes!) (and (=> %%global_location_label%%170 (lib!betree.LinkedBetree_v.impl&%5.acyclic.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%171 (= (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!))) (lib!betree.LinkedBetree_v.impl&%5.reachable_betree_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. T&. T& self! betree_likes!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. T&. T& self! betree_likes!) (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.) (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!)))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!betree.LinkedBetree_v.impl&%5.reachable_buffer_addrs.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_domain. T&. T& self! betree_likes!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::subdisk_implies_same_children_likes")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(declare-const %%global_location_label%%172 Bool)
(declare-const %%global_location_label%%173 Bool)
(declare-const %%global_location_label%%174 Bool)
(declare-const %%global_location_label%%175 Bool)
(declare-const %%global_location_label%%176 Bool)
(declare-const %%global_location_label%%177 Bool)
(declare-const %%global_location_label%%178 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (start! Int)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. T&. T& self! other! ranking! start!) (and (=> %%global_location_label%%172 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (=> %%global_location_label%%173 (lib!betree.LinkedBetree_v.impl&%5.has_root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))) (=> %%global_location_label%%174 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> %%global_location_label%%175 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> %%global_location_label%%176 (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))))) (=> %%global_location_label%%177 (= (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))) (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))))))) (=> %%global_location_label%%178 (<= start! (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!seq.Seq<core!option.Option<lib!spec.AsyncDisk_t.Address.>.>. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/children (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. T&. T& self! other! ranking! start!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) (start! Int)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. T&. T& self! other! ranking! start!) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) (I start!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!) (I start!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_children_likes. T&. T& self! other! ranking! start!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::subdisk_implies_same_tree_likes")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(declare-const %%global_location_label%%179 Bool)
(declare-const %%global_location_label%%180 Bool)
(declare-const %%global_location_label%%181 Bool)
(declare-const %%global_location_label%%182 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. T&. T& self! other! ranking!) (and (=> %%global_location_label%%179 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> %%global_location_label%%180 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (=> %%global_location_label%%181 (= (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))) (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/root (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))))) (=> %%global_location_label%%182 (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. T&. T& self! other! ranking!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.) (ranking! vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. T&. T& self! other! ranking!) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. T&. T& self! other! ranking!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::subdisk_implies_same_buffer_likes")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_buffer_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Bool)
(declare-const %%global_location_label%%183 Bool)
(declare-const %%global_location_label%%184 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (big! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_buffer_likes. T&. T& self! big! betree_likes!) (and (=> %%global_location_label%%183 (lib!betree.LinkedBetree_v.impl&%1.is_sub_disk.? (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))) (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. big!)))))) (=> %%global_location_label%%184 (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_buffer_likes. T&. T& self! big! betree_likes!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_buffer_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (big! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_buffer_likes. T&. T& self! big! betree_likes!) (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. big!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_buffer_likes. T&. T& self! big! betree_likes!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::same_tight_tree_implies_same_transitive_likes")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.same_tight_tree_implies_same_transitive_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree.) Bool)
(declare-const %%global_location_label%%185 Bool)
(declare-const %%global_location_label%%186 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.same_tight_tree_implies_same_transitive_likes. T&. T& self! other!) (and (=> %%global_location_label%%185 (lib!betree.LinkedBetree_v.impl&%5.valid_view.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))) (=> %%global_location_label%%186 (lib!betree.LinkedBetree_v.impl&%5.same_tight_tree.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.same_tight_tree_implies_same_transitive_likes. T&. T& self! other!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.same_tight_tree_implies_same_transitive_likes. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. lib!betree.LinkedBetree_v.LinkedBetree.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (other! lib!betree.LinkedBetree_v.LinkedBetree.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.same_tight_tree_implies_same_transitive_likes. T&. T& self! other!) (= (lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)) (lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. other!)))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.same_tight_tree_implies_same_transitive_likes. T&. T& self! other!)) )))
(set-info :comment ";; Function-Specs lib::betree::LinkedBetree_v::LinkedBetree::tree_buffers_are_closed")
(declare-fun req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_buffers_are_closed. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. lib!spec.AsyncDisk_t.Address.) Bool)
(declare-const %%global_location_label%%187 Bool)
(declare-const %%global_location_label%%188 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) (addr! lib!spec.AsyncDisk_t.Address.)) (! (= (req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_buffers_are_closed. T&. T& self! betree_likes! addr!) (and (=> %%global_location_label%%187 (vstd!multiset.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!) (Poly%lib!spec.AsyncDisk_t.Address. addr!))) (=> %%global_location_label%%188 (vstd!set.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!)))))))))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_buffers_are_closed. T&. T& self! betree_likes! addr!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_buffers_are_closed. (Dcr Type lib!betree.LinkedBetree_v.LinkedBetree. vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. lib!spec.AsyncDisk_t.Address.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!betree.LinkedBetree_v.LinkedBetree.) (betree_likes! vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.) (addr! lib!spec.AsyncDisk_t.Address.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_buffers_are_closed. T&. T& self! betree_likes! addr!) (vstd!multiset.impl&%0.subset_of.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%0.likes.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ TYPE%lib!betree.LinkedBetree_v.BetreeNode. (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./lib!betree.LinkedBetree_v.BetreeNode.>. (lib!betree.LinkedBetree_v.DiskView./DiskView/entries (%Poly%lib!betree.LinkedBetree_v.DiskView. (Poly%lib!betree.LinkedBetree_v.DiskView. (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!))))))) (Poly%lib!spec.AsyncDisk_t.Address. addr!))))))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? T&. T& (Poly%lib!betree.LinkedBetree_v.LinkedBetree. self!) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes!))))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_buffers_are_closed. T&. T& self! betree_likes! addr!)) )))
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_memtable_inductive")
(declare-fun req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_inductive. (lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lib!betree.LinkedBetree_v.LinkedBetreeVars.State. lib!betree.LinkedBetree_v.TwoAddrs.) Bool)
(declare-const %%global_location_label%%189 Bool)
(assert (forall ((pre! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (post! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (lbl! lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) (new_betree! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (new_addrs! lib!betree.LinkedBetree_v.TwoAddrs.)) (! (= (req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_inductive. pre! post! lbl! new_betree! new_addrs!) (=> %%global_location_label%%189 (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_strong.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!) (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!) (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!) (Poly%lib!betree.LinkedBetree_v.TwoAddrs. new_addrs!))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_inductive. pre! post! lbl! new_betree! new_addrs!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_inductive. (lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lib!betree.LinkedBetree_v.LinkedBetreeVars.State. lib!betree.LinkedBetree_v.TwoAddrs.) Bool)
(assert (forall ((pre! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (post! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (lbl! lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) (new_betree! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (new_addrs! lib!betree.LinkedBetree_v.TwoAddrs.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_inductive. pre! post! lbl! new_betree! new_addrs!) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_flush_memtable_inductive. pre! post! lbl! new_betree! new_addrs!)) )))
(set-info :comment ";; Function-Def lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_flush_memtable_inductive")
(set-info :comment ";; allocation_layer/LikesBetree_v.rs:529:5: 529:148 (#0)")
(set-info :comment ";; Function-Specs lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_grow_inductive")
(declare-fun req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_inductive. (lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lib!betree.LinkedBetree_v.LinkedBetreeVars.State. lib!spec.AsyncDisk_t.Address.) Bool)
(declare-const %%global_location_label%%190 Bool)
(assert (forall ((pre! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (post! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (lbl! lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) (new_betree! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (new_root_addr! lib!spec.AsyncDisk_t.Address.)) (! (= (req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_inductive. pre! post! lbl! new_betree! new_root_addr!) (=> %%global_location_label%%190 (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_strong.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!) (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!) (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!) (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr!))))) :pattern ((req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_inductive. pre! post! lbl! new_betree! new_root_addr!)) )))
(declare-fun ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_inductive. (lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.State. lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lib!betree.LinkedBetree_v.LinkedBetreeVars.State. lib!spec.AsyncDisk_t.Address.) Bool)
(assert (forall ((pre! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (post! lib!allocation_layer.LikesBetree_v.LikesBetree.State.) (lbl! lib!allocation_layer.LikesBetree_v.LikesBetree.Label.) (new_betree! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.) (new_root_addr! lib!spec.AsyncDisk_t.Address.)) (! (= (ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_inductive. pre! post! lbl! new_betree! new_root_addr!) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!))) :pattern ((ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_inductive. pre! post! lbl! new_betree! new_root_addr!)) )))
(set-info :comment ";; Function-Def lib::allocation_layer::LikesBetree_v::LikesBetree::State::internal_grow_inductive")
(set-info :comment ";; allocation_layer/LikesBetree_v.rs:655:5: 655:141 (#0)")
(declare-const pre! lib!allocation_layer.LikesBetree_v.LikesBetree.State.)
(declare-const post! lib!allocation_layer.LikesBetree_v.LikesBetree.State.)
(declare-const lbl! lib!allocation_layer.LikesBetree_v.LikesBetree.Label.)
(declare-const new_betree! lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-const new_root_addr! lib!spec.AsyncDisk_t.Address.)
(declare-const tmp%1 lib!betree.LinkedBetree_v.LinkedBetreeVars.State.)
(declare-const tmp%2 lib!betree.LinkedBetree_v.LinkedBetreeVars.Label.)
(declare-const linked_step@ lib!betree.LinkedBetree_v.LinkedBetreeVars.Step.)
(declare-const tmp%3 Bool)
(declare-const tmp%4 lib!betree.LinkedBetree_v.DiskView.)
(declare-const tmp%5 lib!betree.LinkedBetree_v.DiskView.)
(declare-const tmp%6 Bool)
(declare-const tmp%7 lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-const tmp%8 Bool)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const tmp%12 Bool)
(declare-const tmp%13 Bool)
(declare-const tmp%14 Bool)
(declare-const tmp%15 lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-const tmp%16 lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-const tmp%17 Bool)
(declare-const tmp%18 vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>.)
(declare-const tmp%19 Bool)
(declare-const tmp%20 Bool)
(declare-const tmp%21 lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-const tmp%22 vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-const tmp%23 vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-const tmp%24 Bool)
(declare-const tmp%25 lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-const tmp%26 lib!betree.LinkedBetree_v.LinkedBetree.)
(declare-const tmp%27 vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-const tmp%28 Bool)
(declare-const tmp%%@ tuple%2.)
(declare-const betree_likes@ vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-const buffer_likes@ vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>.)
(declare-const ranking@ vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>.)
(declare-const child@ lib!betree.LinkedBetree_v.LinkedBetree.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.))
(assert (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.State.))
(assert (has_type (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!) TYPE%lib!allocation_layer.LikesBetree_v.LikesBetree.Label.))
(assert (has_type (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!) (TYPE%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)))
(assert (has_type (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr!) TYPE%lib!spec.AsyncDisk_t.Address.))
(assert (and (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)) (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.internal_grow_strong.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!) (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!) (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!) (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!) (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr!))))
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; could not show invariant `inv` on the `post` state")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%24 Bool)
(assert (not (=> (fuel_bool fuel%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.next_by.) (and (=> (= linked_step@ (lib!betree.LinkedBetree_v.LinkedBetreeVars.Step./internal_grow (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr!)))) (=> (= tmp%1 (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (=> (= tmp%2 (lib!allocation_layer.LikesBetree_v.LikesBetree.Label./Label/linked_lbl (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.Label. lbl!)))) (and (=> %%location_label%%0 (req%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv_next_by. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%1 new_betree! tmp%2 linked_step@)) (=> (ens%lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv_next_by. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%1 new_betree! tmp%2 linked_step@) (=> %%location_label%%1 (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))))))) (=> (lib!betree.LinkedBetree_v.LinkedBetreeVars.impl&%5.inv.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)) (=> (= tmp%%@ (lib!allocation_layer.LikesBetree_v.impl&%1.transitive_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))))) (=> (= betree_likes@ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (=> (= buffer_likes@ (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (=> (= ranking@ (lib!betree.LinkedBetree_v.impl&%5.finite_ranking.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))))) (=> (= child@ (lib!betree.LinkedBetree_v.impl&%5.child_at_idx.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (I 0))) (=> (fuel_bool fuel%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_ignore_ranking.) (=> (= tmp%3 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking@))) (and (=> %%location_label%%2 tmp%3) (=> tmp%3 (=> (= tmp%4 (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))))))))) (=> (= tmp%5 (lib!betree.LinkedBetree_v.LinkedBetree./LinkedBetree/dv (%Poly%lib!betree.LinkedBetree_v.LinkedBetree. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))))))) (and (=> %%location_label%%3 (req%lib!betree.LinkedBetree_v.impl&%1.subdisk_implies_ranking_validity. tmp%4 tmp%5 ranking@)) (=> (ens%lib!betree.LinkedBetree_v.impl&%1.subdisk_implies_ranking_validity. tmp%4 tmp%5 ranking@) (=> (= tmp%6 (lib!betree.LinkedBetree_v.impl&%5.valid_ranking.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))))))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking@))) (and (=> %%location_label%%4 tmp%6) (=> tmp%6 (=> (= tmp%7 (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))))))) (and (=> %%location_label%%5 (req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%7 child@ ranking@)) (=> (ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_tree_likes. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%7 child@ ranking@) (=> (= tmp%8 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. child@) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking@))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))))))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking@))))) (and (=> %%location_label%%6 tmp%8) (=> tmp%8 (=> (= tmp%9 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. child@) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking@))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))))) (and (=> %%location_label%%7 tmp%9) (=> tmp%9 (=> (= tmp%10 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking@) (I 1))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.Likes_v.no_likes.? (I 0))))) (and (=> %%location_label%%8 tmp%10) (=> tmp%10 (=> (= tmp%11 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.children_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking@) (I 0))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))))) (and (=> %%location_label%%9 tmp%11) (=> tmp%11 (=> (= tmp%12 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking@))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes@))) (and (=> %%location_label%%10 tmp%12) (=> tmp%12 (=> (= tmp%13 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (Poly%vstd!map.Map<lib!spec.AsyncDisk_t.Address./nat.>. ranking@))) (vstd!multiset.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr!)))) (and (=> %%location_label%%11 tmp%13) (=> tmp%13 (=> (= tmp%14 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. betree_likes@) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)))))) (and (=> %%location_label%%12 tmp%14) (=> tmp%14 (=> (= tmp%15 (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (and (=> %%location_label%%13 (req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%15 ranking@)) (=> (ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%15 ranking@) (=> (= tmp%16 (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))))))) (and (=> %%location_label%%14 (req%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%16 ranking@)) (=> (ens%lib!allocation_layer.LikesBetree_v.impl&%1.tree_likes_domain. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%16 ranking@) (and (=> (= tmp%17 (ext_eq false TYPE%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))))))))) (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedSeq_v.impl&%0.empty.? (I 0))))) (and (=> %%location_label%%15 tmp%17) (=> tmp%17 (=> (= tmp%18 (lib!betree.LinkedSeq_v.LinkedSeq./LinkedSeq/addrs (%Poly%lib!betree.LinkedSeq_v.LinkedSeq. (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))))))))))) (=> (ens%vstd!seq_lib.impl&%0.to_multiset_ensures. $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!seq.Seq<lib!spec.AsyncDisk_t.Address.>. tmp%18)) (=> (= tmp%19 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%0.likes.? (Poly%lib!betree.LinkedSeq_v.LinkedSeq. (lib!betree.LinkedBetree_v.BetreeNode./BetreeNode/buffers (%Poly%lib!betree.LinkedBetree_v.BetreeNode. (Poly%lib!betree.LinkedBetree_v.BetreeNode. (lib!betree.LinkedBetree_v.impl&%5.root.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!))))))))))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.Likes_v.no_likes.? (I 0))))) (and (=> %%location_label%%16 tmp%19) (=> tmp%19 (=> (= tmp%20 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (vstd!multiset.impl&%0.remove.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!multiset.impl&%0.singleton.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr!)) (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr!)))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.Likes_v.no_likes.? (I 0))))) (and (=> %%location_label%%17 tmp%20) (=> tmp%20 (=> %%location_label%%18 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (vstd!multiset.impl&%0.singleton.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr!)))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.Likes_v.no_likes.? (I 0)))))))))))))))) (=> (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (vstd!multiset.impl&%0.singleton.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr!)))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.Likes_v.no_likes.? (I 0)))) (=> (= tmp%21 (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (=> (= tmp%22 (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (=> (= tmp%23 (%Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (vstd!multiset.impl&%0.singleton.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. new_root_addr!)))) (and (=> %%location_label%%19 (req%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%21 tmp%22 tmp%23)) (=> (ens%lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes_additive. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%21 tmp%22 tmp%23) (=> (= tmp%24 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. buffer_likes@) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.impl&%1.buffer_likes.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.LinkedBetree_v.LinkedBetree. (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))))))) (and (=> %%location_label%%20 tmp%24) (=> tmp%24 (=> (= tmp%25 (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!))))))) (=> (= tmp%26 (lib!betree.LinkedBetree_v.LinkedBetreeVars.State./State/linked (%Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. (Poly%lib!betree.LinkedBetree_v.LinkedBetreeVars.State. new_betree!)))) (=> (= tmp%27 (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/betree_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. pre!)))) (and (=> %%location_label%%21 (req%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_buffer_likes. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%25 tmp%26 tmp%27)) (=> (ens%lib!allocation_layer.LikesBetree_v.impl&%1.subdisk_implies_same_buffer_likes. $ TYPE%lib!betree.Buffer_v.SimpleBuffer. tmp%25 tmp%26 tmp%27) (=> (= tmp%28 (ext_eq false (TYPE%vstd!multiset.Multiset. $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.LikesBetree_v.LikesBetree.State./State/buffer_likes (%Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!)))) (Poly%vstd!multiset.Multiset<lib!spec.AsyncDisk_t.Address.>. buffer_likes@))) (and (=> %%location_label%%22 tmp%28) (=> tmp%28 (and (=> %%location_label%%23 (req%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.lemma_msg_inv. post!)) (=> (ens%lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.lemma_msg_inv. post!) (=> %%location_label%%24 (lib!allocation_layer.LikesBetree_v.LikesBetree.impl&%5.invariant.? (Poly%lib!allocation_layer.LikesBetree_v.LikesBetree.State. post!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
