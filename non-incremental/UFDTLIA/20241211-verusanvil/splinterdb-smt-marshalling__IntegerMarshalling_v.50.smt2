(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module marshalling::IntegerMarshalling_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_vec_index_decreases. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%16.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%40.view. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%0.deepv. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%1.uniform_size. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.spec_from_le_bytes. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.spec_to_le_bytes. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.max. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%3.deepv. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%4.uniform_size. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.spec_from_le_bytes. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.spec_to_le_bytes. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.max. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%6.deepv. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%7.uniform_size. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.spec_from_le_bytes. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.spec_to_le_bytes. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.max. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%9.deepv. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%10.uniform_size. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.spec_from_le_bytes. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.spec_to_le_bytes. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.max. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.valid. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parsable. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.marshallable. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.spec_size. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parse. FuelId)
(declare-const fuel%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size. FuelId)
(declare-const fuel%lib!marshalling.Marshalling_v.impl&%0.deepv. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.valid. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.i. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%0.len. FuelId)
(declare-const fuel%lib!marshalling.Slice_v.impl&%2.view. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.vec.impl&%0.spec_index. fuel%vstd!std_specs.vec.axiom_spec_len. fuel%vstd!std_specs.vec.axiom_vec_index_decreases. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%16.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%40.view. fuel%lib!marshalling.IntegerMarshalling_v.impl&%0.deepv. fuel%lib!marshalling.IntegerMarshalling_v.impl&%1.uniform_size. fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.spec_from_le_bytes. fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.spec_to_le_bytes. fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.max. fuel%lib!marshalling.IntegerMarshalling_v.impl&%3.deepv. fuel%lib!marshalling.IntegerMarshalling_v.impl&%4.uniform_size. fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.spec_from_le_bytes. fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.spec_to_le_bytes. fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.max. fuel%lib!marshalling.IntegerMarshalling_v.impl&%6.deepv. fuel%lib!marshalling.IntegerMarshalling_v.impl&%7.uniform_size. fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.spec_from_le_bytes. fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.spec_to_le_bytes. fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.max. fuel%lib!marshalling.IntegerMarshalling_v.impl&%9.deepv. fuel%lib!marshalling.IntegerMarshalling_v.impl&%10.uniform_size. fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.spec_from_le_bytes. fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.spec_to_le_bytes. fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.max. fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.valid. fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parsable. fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.marshallable. fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.spec_size. fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parse. fuel%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size. fuel%lib!marshalling.Marshalling_v.impl&%0.deepv. fuel%lib!marshalling.Slice_v.impl&%0.wf. fuel%lib!marshalling.Slice_v.impl&%0.valid. fuel%lib!marshalling.Slice_v.impl&%0.i. fuel%lib!marshalling.Slice_v.impl&%0.len. fuel%lib!marshalling.Slice_v.impl&%2.view. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (and (fuel_bool_default fuel%vstd!std_specs.vec.axiom_spec_len.) (fuel_bool_default fuel%vstd!std_specs.vec.axiom_vec_index_decreases.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%lib!marshalling.Marshalling_v.Marshal./DV (Dcr Type) Dcr)
(declare-fun proj%lib!marshalling.Marshalling_v.Marshal./DV (Dcr Type) Type)
(declare-fun proj%%lib!marshalling.Marshalling_v.Marshal./U (Dcr Type) Dcr)
(declare-fun proj%lib!marshalling.Marshalling_v.Marshal./U (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!vec.Vec<u8./allocator_global%.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort slice%<u8.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!marker.PhantomData. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!marshalling.IntegerMarshalling_v.IntFormat. 0) (lib!marshalling.Slice_v.SpecSlice. 0) (lib!marshalling.Slice_v.Slice. 0) (tuple%0. 0) (tuple%1. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!marker.PhantomData./PhantomData )) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat (lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/?_p core!marker.PhantomData.))) ((lib!marshalling.Slice_v.SpecSlice./SpecSlice (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?start Int) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?end Int))) ((lib!marshalling.Slice_v.Slice./Slice (lib!marshalling.Slice_v.Slice./Slice/?start Int) (lib!marshalling.Slice_v.Slice./Slice/?end Int))) ((tuple%0./tuple%0 )) ((tuple%1./tuple%1 (tuple%1./tuple%1/?0 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/_p (lib!marshalling.IntegerMarshalling_v.IntFormat.) core!marker.PhantomData.)
(declare-fun lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (lib!marshalling.Slice_v.SpecSlice.) Int)
(declare-fun lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (lib!marshalling.Slice_v.SpecSlice.) Int)
(declare-fun lib!marshalling.Slice_v.Slice./Slice/start (lib!marshalling.Slice_v.Slice.) Int)
(declare-fun lib!marshalling.Slice_v.Slice./Slice/end (lib!marshalling.Slice_v.Slice.) Int)
(declare-fun tuple%1./tuple%1/0 (tuple%1.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!marker.PhantomData. (Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. (Dcr Type) Type)
(declare-const TYPE%lib!marshalling.Slice_v.SpecSlice. Type)
(declare-const TYPE%lib!marshalling.Slice_v.Slice. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%1. (Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%alloc!vec.Vec<u8./allocator_global%.>. (alloc!vec.Vec<u8./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%slice%<u8.>. (slice%<u8.>.) Poly)
(declare-fun %Poly%slice%<u8.>. (Poly) slice%<u8.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!marker.PhantomData. (core!marker.PhantomData.) Poly)
(declare-fun %Poly%core!marker.PhantomData. (Poly) core!marker.PhantomData.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (lib!marshalling.IntegerMarshalling_v.IntFormat.) Poly)
(declare-fun %Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (Poly) lib!marshalling.IntegerMarshalling_v.IntFormat.)
(declare-fun Poly%lib!marshalling.Slice_v.SpecSlice. (lib!marshalling.Slice_v.SpecSlice.) Poly)
(declare-fun %Poly%lib!marshalling.Slice_v.SpecSlice. (Poly) lib!marshalling.Slice_v.SpecSlice.)
(declare-fun Poly%lib!marshalling.Slice_v.Slice. (lib!marshalling.Slice_v.Slice.) Poly)
(declare-fun %Poly%lib!marshalling.Slice_v.Slice. (Poly) lib!marshalling.Slice_v.Slice.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%1. (tuple%1.) Poly)
(declare-fun %Poly%tuple%1. (Poly) tuple%1.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly%alloc!vec.Vec<u8./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u8./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u8./allocator_global%.>. (%Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x slice%<u8.>.)) (! (= x (%Poly%slice%<u8.>. (Poly%slice%<u8.>. x))) :pattern ((Poly%slice%<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (SLICE $ (UINT 8))) (= x (Poly%slice%<u8.>. (%Poly%slice%<u8.>. x)))) :pattern ((has_type x (SLICE $ (UINT 8)))) )))
(assert (forall ((x slice%<u8.>.)) (! (has_type (Poly%slice%<u8.>. x) (SLICE $ (UINT 8))) :pattern ((has_type (Poly%slice%<u8.>. x) (SLICE $ (UINT 8)))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x core!marker.PhantomData.)) (! (= x (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. x))) :pattern ((Poly%core!marker.PhantomData. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!marker.PhantomData. V&. V&)) (= x (Poly%core!marker.PhantomData. (%Poly%core!marker.PhantomData. x)))) :pattern ((has_type x (TYPE%core!marker.PhantomData. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (x core!marker.PhantomData.)) (! (has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&)) :pattern ((has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&))) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!marshalling.IntegerMarshalling_v.IntFormat.)) (! (= x (%Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x))) :pattern ((Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) (= x (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. (%Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x)))) :pattern ((has_type x (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) )))
(assert (forall ((x lib!marshalling.IntegerMarshalling_v.IntFormat.)) (! (= (lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/_p x) (lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/?_p x)) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/_p x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x lib!marshalling.IntegerMarshalling_v.IntFormat.)) (! (has_type (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x) (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) :pattern ((has_type (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x) (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) )))
(define-fun is-lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat_ ((c lib!marshalling.IntegerMarshalling_v.IntFormat.)) Bool ((_ is lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat) c))
(assert (forall ((x lib!marshalling.IntegerMarshalling_v.IntFormat.)) (! (=> (is-lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat_ x) (height_lt (height (Poly%core!marker.PhantomData. (lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/_p x))) (height (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. x)))) :pattern ((height (Poly%core!marker.PhantomData. (lib!marshalling.IntegerMarshalling_v.IntFormat./IntFormat/_p x)))) )))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (= x (%Poly%lib!marshalling.Slice_v.SpecSlice. (Poly%lib!marshalling.Slice_v.SpecSlice. x))) :pattern ((Poly%lib!marshalling.Slice_v.SpecSlice. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.SpecSlice.) (= x (Poly%lib!marshalling.Slice_v.SpecSlice. (%Poly%lib!marshalling.Slice_v.SpecSlice. x)))) :pattern ((has_type x TYPE%lib!marshalling.Slice_v.SpecSlice.)) )))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (= (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start x) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?start x)) :pattern ((lib!marshalling.Slice_v.SpecSlice./SpecSlice/start x)) )))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (= (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end x) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/?end x)) :pattern ((lib!marshalling.Slice_v.SpecSlice./SpecSlice/end x)) )))
(assert (forall ((x lib!marshalling.Slice_v.SpecSlice.)) (! (has_type (Poly%lib!marshalling.Slice_v.SpecSlice. x) TYPE%lib!marshalling.Slice_v.SpecSlice.) :pattern ((has_type (Poly%lib!marshalling.Slice_v.SpecSlice. x) TYPE%lib!marshalling.Slice_v.SpecSlice.)) )))
(assert (forall ((x lib!marshalling.Slice_v.Slice.)) (! (= x (%Poly%lib!marshalling.Slice_v.Slice. (Poly%lib!marshalling.Slice_v.Slice. x))) :pattern ((Poly%lib!marshalling.Slice_v.Slice. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.Slice.) (= x (Poly%lib!marshalling.Slice_v.Slice. (%Poly%lib!marshalling.Slice_v.Slice. x)))) :pattern ((has_type x TYPE%lib!marshalling.Slice_v.Slice.)) )))
(assert (forall ((_start! Int) (_end! Int)) (! (=> (and (uInv SZ _start!) (uInv SZ _end!)) (has_type (Poly%lib!marshalling.Slice_v.Slice. (lib!marshalling.Slice_v.Slice./Slice _start! _end!)) TYPE%lib!marshalling.Slice_v.Slice.)) :pattern ((has_type (Poly%lib!marshalling.Slice_v.Slice. (lib!marshalling.Slice_v.Slice./Slice _start! _end!)) TYPE%lib!marshalling.Slice_v.Slice.)) )))
(assert (forall ((x lib!marshalling.Slice_v.Slice.)) (! (= (lib!marshalling.Slice_v.Slice./Slice/start x) (lib!marshalling.Slice_v.Slice./Slice/?start x)) :pattern ((lib!marshalling.Slice_v.Slice./Slice/start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.Slice.) (uInv SZ (lib!marshalling.Slice_v.Slice./Slice/start (%Poly%lib!marshalling.Slice_v.Slice. x)))) :pattern ((lib!marshalling.Slice_v.Slice./Slice/start (%Poly%lib!marshalling.Slice_v.Slice. x)) (has_type x TYPE%lib!marshalling.Slice_v.Slice.)) )))
(assert (forall ((x lib!marshalling.Slice_v.Slice.)) (! (= (lib!marshalling.Slice_v.Slice./Slice/end x) (lib!marshalling.Slice_v.Slice./Slice/?end x)) :pattern ((lib!marshalling.Slice_v.Slice./Slice/end x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!marshalling.Slice_v.Slice.) (uInv SZ (lib!marshalling.Slice_v.Slice./Slice/end (%Poly%lib!marshalling.Slice_v.Slice. x)))) :pattern ((lib!marshalling.Slice_v.Slice./Slice/end (%Poly%lib!marshalling.Slice_v.Slice. x)) (has_type x TYPE%lib!marshalling.Slice_v.Slice.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%1.)) (! (= x (%Poly%tuple%1. (Poly%tuple%1. x))) :pattern ((Poly%tuple%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (= x (Poly%tuple%1. (%Poly%tuple%1. x)))) :pattern ((has_type x (TYPE%tuple%1. T%0&. T%0&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (_0! Poly)) (! (=> (has_type _0! T%0&) (has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) :pattern ((has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) )))
(assert (forall ((x tuple%1.)) (! (= (tuple%1./tuple%1/0 x) (tuple%1./tuple%1/?0 x)) :pattern ((tuple%1./tuple%1/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) T%0&)) :pattern ((tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (has_type x (TYPE%tuple%1. T%0&. T%0&))) )))
(define-fun is-tuple%1./tuple%1_ ((c tuple%1.)) Bool ((_ is tuple%1./tuple%1) c))
(assert (forall ((x tuple%1.)) (! (=> (is-tuple%1./tuple%1_ x) (height_lt (height (tuple%1./tuple%1/0 x)) (height (Poly%tuple%1. x)))) :pattern ((height (tuple%1./tuple%1/0 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type y (TYPE%tuple%1. T%0&. T%0&)) (ext_eq deep T%0& (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (tuple%1./tuple%1/0 (%Poly%tuple%1. y)))) (ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) :pattern ((ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) )))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)) )))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)) )) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)) )))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))) )))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%builtin!Integer. (Dcr Type) Bool)
(declare-fun tr_bound%builtin!SpecOrd. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.StaticallySized_v.StaticallySized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.UniformSized_v.UniformSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.Marshalling_v.Deepview. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.Marshalling_v.Marshal. (Dcr Type) Bool)
(declare-fun tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%builtin!Integer. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! true :pattern ((tr_bound%builtin!SpecOrd. Self%&. Self%& Rhs&. Rhs&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!marshalling.StaticallySized_v.StaticallySized. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!marshalling.UniformSized_v.UniformSized. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (DV&. Dcr) (DV& Type)) (! true :pattern ((tr_bound%lib!marshalling.Marshalling_v.Deepview. Self%&. Self%& DV&. DV&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!marshalling.Marshalling_v.Marshal. Self%&. Self%&) (tr_bound%lib!marshalling.Marshalling_v.Deepview. (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&))) :pattern ((tr_bound%lib!marshalling.Marshalling_v.Marshal. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. Self%&. Self%&) (and (tr_bound%lib!marshalling.Marshalling_v.Deepview. Self%&. Self%& $ INT) (tr_bound%builtin!Integer. Self%&. Self%&) (tr_bound%builtin!SpecOrd. Self%&. Self%& Self%&. Self%&) (tr_bound%lib!marshalling.StaticallySized_v.StaticallySized. Self%&. Self%&))) :pattern ((tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. Self%&. Self%&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 16)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 16)) (UINT 16)))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))) )))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) (TYPE%tuple%1. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%lib!marshalling.Slice_v.Slice.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%lib!marshalling.Slice_v.Slice.) TYPE%lib!marshalling.Slice_v.SpecSlice.))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) $) :pattern ((proj%%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) INT) :pattern ((proj%lib!marshalling.Marshalling_v.Marshal./DV $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) T&.) :pattern ((proj%%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&)) T&) :pattern ((proj%lib!marshalling.Marshalling_v.Marshal./U $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) )))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Deepview::deepv")
(declare-fun lib!marshalling.Marshalling_v.Deepview.deepv.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Deepview.deepv%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::valid")
(declare-fun lib!marshalling.Slice_v.impl&%0.valid.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::i")
(declare-fun lib!marshalling.Slice_v.impl&%0.i.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::wf")
(declare-fun lib!marshalling.Slice_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Marshal::valid")
(declare-fun lib!marshalling.Marshalling_v.Marshal.valid.? (Dcr Type Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Marshal.valid%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Marshal::parsable")
(declare-fun lib!marshalling.Marshalling_v.Marshal.parsable.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Marshal.parsable%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Marshal::parse")
(declare-fun lib!marshalling.Marshalling_v.Marshal.parse.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Marshal.parse%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Marshal::marshallable")
(declare-fun lib!marshalling.Marshalling_v.Marshal.marshallable.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Marshal.marshallable%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Marshalling_v::Marshal::spec_size")
(declare-fun lib!marshalling.Marshalling_v.Marshal.spec_size.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshalling.Marshalling_v.Marshal.spec_size%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::marshalling::StaticallySized_v::StaticallySized::uniform_size")
(declare-fun lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? (Dcr Type) Poly)
(declare-fun lib!marshalling.StaticallySized_v.StaticallySized.uniform_size%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::IntegerMarshalling_v::IntFormattable::spec_from_le_bytes")
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::IntegerMarshalling_v::IntFormattable::spec_to_le_bytes")
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::IntegerMarshalling_v::IntFormattable::max")
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? (Dcr Type) Poly)
(declare-fun lib!marshalling.IntegerMarshalling_v.IntFormattable.max%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::bytes::spec_u16_to_le_bytes")
(declare-fun vstd!bytes.spec_u16_to_le_bytes.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl vstd::bytes::spec_u16_from_le_bytes")
(declare-fun vstd!bytes.spec_u16_from_le_bytes.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::bytes::spec_u32_to_le_bytes")
(declare-fun vstd!bytes.spec_u32_to_le_bytes.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl vstd::bytes::spec_u32_from_le_bytes")
(declare-fun vstd!bytes.spec_u32_from_le_bytes.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::bytes::spec_u64_to_le_bytes")
(declare-fun vstd!bytes.spec_u64_to_le_bytes.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl vstd::bytes::spec_u64_from_le_bytes")
(declare-fun vstd!bytes.spec_u64_from_le_bytes.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::UniformSized_v::UniformSized::uniform_size")
(declare-fun lib!marshalling.UniformSized_v.UniformSized.uniform_size.? (Dcr Type Poly) Poly)
(declare-fun lib!marshalling.UniformSized_v.UniformSized.uniform_size%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::marshalling::Slice_v::SpecSlice::len")
(declare-fun lib!marshalling.Slice_v.impl&%0.len.? (Poly) Int)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Deepview::deepv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (DV&. Dcr) (DV& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshalling.Marshalling_v.Deepview.deepv.? Self%&. Self%& DV&. DV& self!) DV&)) :pattern ((lib!marshalling.Marshalling_v.Deepview.deepv.? Self%&. Self%& DV&. DV& self!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::valid")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.valid.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.valid.) (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.valid.? T&. T& self! data!) (let ((tmp%%$ (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)))) (let ((tmp%%$1 (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)))) (and (and (<= 0 tmp%%$) (<= tmp%%$ tmp%%$1)) (<= tmp%%$1 (vstd!seq.Seq.len.? T&. T& data!)))))) :pattern ((lib!marshalling.Slice_v.impl&%0.valid.? T&. T& self! data!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::Slice::view")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%2.view.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%2.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. self!) (Poly%lib!marshalling.Slice_v.SpecSlice. (lib!marshalling.Slice_v.SpecSlice./SpecSlice (%I (I (lib!marshalling.Slice_v.Slice./Slice/start (%Poly%lib!marshalling.Slice_v.Slice. self!)))) (%I (I (lib!marshalling.Slice_v.Slice./Slice/end (%Poly%lib!marshalling.Slice_v.Slice. self!))))))) :pattern ((vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%2 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::Slice_v::SpecSlice::i")
(declare-fun req%lib!marshalling.Slice_v.impl&%0.i. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.Slice_v.impl&%0.i. T&. T& self! data!) (=> %%global_location_label%%3 (lib!marshalling.Slice_v.impl&%0.valid.? T&. T& self! data!))) :pattern ((req%lib!marshalling.Slice_v.impl&%0.i. T&. T& self! data!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::i")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.i.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.i.) (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!) (vstd!seq.Seq.subrange.? T&. T& data! (I (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!))) (I (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (%Poly%lib!marshalling.Slice_v.SpecSlice. self!))))) :pattern ((lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! TYPE%lib!marshalling.Slice_v.SpecSlice.) (has_type data! (TYPE%vstd!seq.Seq. T&. T&))) (has_type (lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!marshalling.Slice_v.impl&%0.i.? T&. T& self! data!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%4 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::wf")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.wf.? self!) (<= (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)))) :pattern ((lib!marshalling.Slice_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%5 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%6 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Marshal::valid")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!) BOOL)) :pattern ((lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::parsable")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.parsable. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.parsable. Self%&. Self%& self! data!) (=> %%global_location_label%%7 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!)))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.parsable. Self%&. Self%& self! data!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Marshal::parsable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! data!) BOOL)) :pattern ((lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! data!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::parse")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.parse. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.parse. Self%&. Self%& self! data!) (and (=> %%global_location_label%%8 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%9 (%B (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! data!))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.parse. Self%&. Self%& self! data!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Marshal::parse")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (data! Poly)) (! (=> (and (has_type self! Self%&) (has_type data! (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type (lib!marshalling.Marshalling_v.Marshal.parse.? Self%&. Self%& self! data!) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&))) :pattern ((lib!marshalling.Marshalling_v.Marshal.parse.? Self%&. Self%& self! data!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::try_parse")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.try_parse. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.try_parse. Self%&. Self%& self! slice! data!) (and (=> %%global_location_label%%10 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%11 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.try_parse. Self%&. Self%& self! slice! data!)) )))
(declare-fun ens%lib!marshalling.Marshalling_v.Marshal.try_parse. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly) (ov! Poly)) (! (= (ens%lib!marshalling.Marshalling_v.Marshal.try_parse. Self%&. Self%& self! slice! data! ov!) (and (has_type ov! (TYPE%core!option.Option. (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&))) (= (%B (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))) (is-core!option.Option./Some_ (%Poly%core!option.Option. ov!))) (=> (%B (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))) (= (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (core!option.Option./Some/0 (%Poly%core!option.Option. ov!))) (lib!marshalling.Marshalling_v.Marshal.parse.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))))) :pattern ((ens%lib!marshalling.Marshalling_v.Marshal.try_parse. Self%&. Self%& self! slice! data! ov!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::exec_parsable")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.exec_parsable. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.exec_parsable. Self%&. Self%& self! slice! data!) (and (=> %%global_location_label%%12 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%13 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.exec_parsable. Self%&. Self%& self! slice! data!)) )))
(declare-fun ens%lib!marshalling.Marshalling_v.Marshal.exec_parsable. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly) (p! Poly)) (! (= (ens%lib!marshalling.Marshalling_v.Marshal.exec_parsable. Self%&. Self%& self! slice! data! p!) (and (has_type p! BOOL) (= p! (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.Marshalling_v.Marshal.exec_parsable. Self%&. Self%& self! slice! data! p!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::exec_parse")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.exec_parse. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.exec_parse. Self%&. Self%& self! slice! data!) (and (=> %%global_location_label%%14 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%15 (lib!marshalling.Slice_v.impl&%0.valid.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))) (=> %%global_location_label%%16 (%B (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!))))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.exec_parse. Self%&. Self%& self! slice! data!)) )))
(declare-fun ens%lib!marshalling.Marshalling_v.Marshal.exec_parse. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (slice! Poly) (data! Poly) (value! Poly)) (! (= (ens%lib!marshalling.Marshalling_v.Marshal.exec_parse. Self%&. Self%& self! slice! data! value!) (and (has_type value! (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&)) (= (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!) (lib!marshalling.Marshalling_v.Marshal.parse.? Self%&. Self%& self! (lib!marshalling.Slice_v.impl&%0.i.? $ (UINT 8) (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))))) :pattern ((ens%lib!marshalling.Marshalling_v.Marshal.exec_parse. Self%&. Self%& self! slice! data! value!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Marshal::marshallable")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly)) (! (=> (and (has_type self! Self%&) (has_type value! (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&))) (has_type (lib!marshalling.Marshalling_v.Marshal.marshallable.? Self%&. Self%& self! value!) BOOL)) :pattern ((lib!marshalling.Marshalling_v.Marshal.marshallable.? Self%&. Self%& self! value!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::spec_size")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.spec_size. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.spec_size. Self%&. Self%& self! value!) (and (=> %%global_location_label%%17 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%18 (%B (lib!marshalling.Marshalling_v.Marshal.marshallable.? Self%&. Self%& self! value!))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.spec_size. Self%&. Self%& self! value!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::Marshalling_v::Marshal::spec_size")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly)) (! (=> (and (has_type self! Self%&) (has_type value! (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&))) (has_type (lib!marshalling.Marshalling_v.Marshal.spec_size.? Self%&. Self%& self! value!) (UINT SZ))) :pattern ((lib!marshalling.Marshalling_v.Marshal.spec_size.? Self%&. Self%& self! value!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::exec_size")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.exec_size. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.exec_size. Self%&. Self%& self! value!) (and (=> %%global_location_label%%19 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%20 (%B (lib!marshalling.Marshalling_v.Marshal.marshallable.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!)))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.exec_size. Self%&. Self%& self! value!)) )))
(declare-fun ens%lib!marshalling.Marshalling_v.Marshal.exec_size. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly) (sz! Poly)) (! (= (ens%lib!marshalling.Marshalling_v.Marshal.exec_size. Self%&. Self%& self! value! sz!) (and (has_type sz! (UINT SZ)) (= sz! (lib!marshalling.Marshalling_v.Marshal.spec_size.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!))))) :pattern ((ens%lib!marshalling.Marshalling_v.Marshal.exec_size. Self%&. Self%& self! value! sz!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%0.spec_index.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!) i!))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!)) ))))
(set-info :comment ";; Function-Specs lib::marshalling::Marshalling_v::Marshal::exec_marshall")
(declare-fun req%lib!marshalling.Marshalling_v.Marshal.exec_marshall. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly) (pre%data! Poly) (start! Poly)) (! (= (req%lib!marshalling.Marshalling_v.Marshal.exec_marshall. Self%&. Self%& self! value! pre%data! start!) (and (=> %%global_location_label%%21 (%B (lib!marshalling.Marshalling_v.Marshal.valid.? Self%&. Self%& self!))) (=> %%global_location_label%%22 (%B (lib!marshalling.Marshalling_v.Marshal.marshallable.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!)))) (=> %%global_location_label%%23 (<= (Add (%I start!) (%I (lib!marshalling.Marshalling_v.Marshal.spec_size.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!)))) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL pre%data!))))) :pattern ((req%lib!marshalling.Marshalling_v.Marshal.exec_marshall. Self%&. Self%& self! value! pre%data! start!)) )))
(declare-fun ens%lib!marshalling.Marshalling_v.Marshal.exec_marshall. (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (value! Poly) (pre%data! Poly) (data! Poly) (start! Poly) (end! Poly)) (! (= (ens%lib!marshalling.Marshalling_v.Marshal.exec_marshall. Self%&. Self%& self! value! pre%data! data! start! end!) (and (has_type end! (UINT SZ)) (has_type data! (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= (%I end!) (Add (%I start!) (%I (lib!marshalling.Marshalling_v.Marshal.spec_size.? Self%&. Self%& self! (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!))))) (= (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL data!) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL pre%data!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I start!))) (= (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) i$) (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!) i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) i$)) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I end!) (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL data!))) (= (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) i$) (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!) i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) i$)) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!) i$)) )) (%B (lib!marshalling.Marshalling_v.Marshal.parsable.? Self%&. Self%& self! (vstd!seq.Seq.subrange.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) start! end!))) (= (lib!marshalling.Marshalling_v.Marshal.parse.? Self%&. Self%& self! (vstd!seq.Seq.subrange.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) start! end!)) (lib!marshalling.Marshalling_v.Deepview.deepv.? (proj%%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./U Self%&. Self%&) (proj%%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) (proj%lib!marshalling.Marshalling_v.Marshal./DV Self%&. Self%&) value!)))) :pattern ((ens%lib!marshalling.Marshalling_v.Marshal.exec_marshall. Self%&. Self%& self! value! pre%data! data! start! end!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::StaticallySized_v::StaticallySized::uniform_size")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? Self%&. Self%&) (UINT SZ)) :pattern ((lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Specs lib::marshalling::StaticallySized_v::StaticallySized::uniform_size_ensures")
(declare-fun ens%lib!marshalling.StaticallySized_v.StaticallySized.uniform_size_ensures. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%lib!marshalling.StaticallySized_v.StaticallySized.uniform_size_ensures. Self%&. Self%&) (< 0 (%I (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? Self%&. Self%&)))) :pattern ((ens%lib!marshalling.StaticallySized_v.StaticallySized.uniform_size_ensures. Self%&. Self%&)) )))
(set-info :comment ";; Function-Specs lib::marshalling::StaticallySized_v::StaticallySized::exec_uniform_size")
(declare-fun ens%lib!marshalling.StaticallySized_v.StaticallySized.exec_uniform_size. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (sz! Poly)) (! (= (ens%lib!marshalling.StaticallySized_v.StaticallySized.exec_uniform_size. Self%&. Self%& sz!) (and (has_type sz! (UINT SZ)) (= sz! (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? Self%&. Self%&)))) :pattern ((ens%lib!marshalling.StaticallySized_v.StaticallySized.exec_uniform_size. Self%&. Self%& sz!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormattable::spec_from_le_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? Self%&. Self%& s!) Self%&)) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? Self%&. Self%& s!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormattable::spec_to_le_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (x! Poly)) (! (=> (has_type x! Self%&) (has_type (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? Self%&. Self%& x!) (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? Self%&. Self%& x!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::to_le_bytes")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.to_le_bytes. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (x! Poly) (s! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.to_le_bytes. Self%&. Self%& x! s!) (and (has_type s! (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) s!) (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? Self%&. Self%& x!)) (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) s!)) (%I (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? Self%&. Self%&))))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.to_le_bytes. Self%&. Self%& x! s!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::from_le_bytes")
(declare-fun req%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_le_bytes. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (s! Poly)) (! (= (req%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_le_bytes. Self%&. Self%& s!) (=> %%global_location_label%%24 (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) s!)) (%I (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? Self%&. Self%&))))) :pattern ((req%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_le_bytes. Self%&. Self%& s!)) )))
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_le_bytes. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (s! Poly) (x! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_le_bytes. Self%&. Self%& s! x!) (and (has_type x! Self%&) (= x! (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? Self%&. Self%& (vstd!view.View.view.? $ (SLICE $ (UINT 8)) s!))))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_le_bytes. Self%&. Self%& s! x!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::lemma_auto_spec_to_from_le_bytes")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.lemma_auto_spec_to_from_le_bytes. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.lemma_auto_spec_to_from_le_bytes. Self%&. Self%&) (and (forall ((x$ Poly)) (! (=> (has_type x$ Self%&) (and (= (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? Self%&. Self%& x$)) (%I (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? Self%&. Self%&))) (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? Self%&. Self%& (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? Self%&. Self%& x$)) x$))) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? Self%&. Self%& x$)) )) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (= (vstd!seq.Seq.len.? $ (UINT 8) s$) (%I (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? Self%&. Self%&))) (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? Self%&. Self%& (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? Self%&. Self%& s$)) s$))) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? Self%&. Self%& (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? Self%&. Self%& s$))) )))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.lemma_auto_spec_to_from_le_bytes. Self%&. Self%&)) )))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::deepv_is_as_int")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.deepv_is_as_int. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.deepv_is_as_int. Self%&. Self%& v!) (= (%I (lib!marshalling.Marshalling_v.Deepview.deepv.? Self%&. Self%& $ INT v!)) (%I v!))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.deepv_is_as_int. Self%&. Self%& v!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::deepv_is_as_int_forall")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.deepv_is_as_int_forall. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.deepv_is_as_int_forall. Self%&. Self%&) (forall ((v$ Poly)) (! (=> (has_type v$ Self%&) (= (%I (lib!marshalling.Marshalling_v.Deepview.deepv.? Self%&. Self%& $ INT v$)) (%I v$))) :pattern ((lib!marshalling.Marshalling_v.Deepview.deepv.? Self%&. Self%& $ INT v$)) ))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.deepv_is_as_int_forall. Self%&. Self%&)) )))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::IntFormattable::deepv_is_as_int_forall")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:58:11: 58:38 (#0)")
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormattable::max")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? Self%&. Self%&) (UINT SZ)) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::max_ensures")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.max_ensures. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.max_ensures. Self%&. Self%& v!) (<= (%I v!) (%I (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? Self%&. Self%&)))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.max_ensures. Self%&. Self%& v!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::exec_max")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.exec_max. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (m! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.exec_max. Self%&. Self%& m!) (and (has_type m! (UINT SZ)) (= m! (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? Self%&. Self%&)))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.exec_max. Self%&. Self%& m!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::to_usize")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.to_usize. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly) (w! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.to_usize. Self%&. Self%& v! w!) (and (has_type w! (UINT SZ)) (= (%I v!) (%I w!)))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.to_usize. Self%&. Self%& v! w!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::from_usize")
(declare-fun req%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly)) (! (= (req%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. Self%&. Self%& v!) (=> %%global_location_label%%25 (<= (%I v!) (%I (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? Self%&. Self%&))))) :pattern ((req%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. Self%&. Self%& v!)) )))
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly) (w! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. Self%&. Self%& v! w!) (and (has_type w! Self%&) (= (%I w!) (%I v!)))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.from_usize. Self%&. Self%& v! w!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormattable::nonnegative")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.nonnegative. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (t! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.nonnegative. Self%&. Self%& t!) (<= 0 (%I t!))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.IntFormattable.nonnegative. Self%&. Self%& t!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::vec_index")
(declare-fun req%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int)) (! (= (req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!) (=> %%global_location_label%%26 (< i! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!))))) :pattern ((req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!)) )))
(declare-fun ens%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!) (and (has_type element! T&) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (I i!))))) :pattern ((ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!)) )))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_spec_len.) (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!)) ))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::len")
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::as_slice")
(declare-fun ens%alloc!vec.impl&%1.as_slice. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (slice! Poly)) (! (= (ens%alloc!vec.impl&%1.as_slice. T&. T& A&. A& vec! slice!) (and (has_type slice! (SLICE T&. T&)) (= (vstd!view.View.view.? $ (SLICE T&. T&) slice!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!)))) :pattern ((ens%alloc!vec.impl&%1.as_slice. T&. T& A&. A& vec! slice!)) )))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_vec_index_decreases")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_vec_index_decreases.) (forall ((A&. Dcr) (A& Type) (v! Poly) (i! Poly)) (! (=> (and (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!)) (height v!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!))) ))))
(set-info :comment ";; Function-Specs alloc::slice::impl&%0::into_vec")
(declare-fun ens%alloc!slice.impl&%0.into_vec. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (b! Poly) (v! Poly)) (! (= (ens%alloc!slice.impl&%0.into_vec. T&. T& A&. A& b! v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) v!) (vstd!view.View.view.? $ (SLICE T&. T&) b!)))) :pattern ((ens%alloc!slice.impl&%0.into_vec. T&. T& A&. A& b! v!)) )))
(set-info :comment ";; Function-Specs alloc::boxed::impl&%0::new")
(declare-fun ens%alloc!boxed.impl&%0.new. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (t! Poly) (v! Poly)) (! (= (ens%alloc!boxed.impl&%0.new. T&. T& t! v!) (and (has_type v! T&) (= v! t!))) :pattern ((ens%alloc!boxed.impl&%0.new. T&. T& t! v!)) )))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) )))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!)) ))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!))) ))))
(set-info :comment ";; Function-Specs vstd::array::array_as_slice")
(declare-fun ens%vstd!array.array_as_slice. (Dcr Type Dcr Type %%Function%% Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! %%Function%%) (out! Poly)) (! (= (ens%vstd!array.array_as_slice. T&. T& N&. N& ar! out!) (and (has_type out! (SLICE T&. T&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) (Poly%array%. ar!)) (vstd!view.View.view.? $ (SLICE T&. T&) out!)))) :pattern ((ens%vstd!array.array_as_slice. T&. T& N&. N& ar! out!)) )))
(set-info :comment ";; Function-Specs vstd::bytes::spec_u16_from_le_bytes")
(declare-fun req%vstd!bytes.spec_u16_from_le_bytes. (Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((s! Poly)) (! (= (req%vstd!bytes.spec_u16_from_le_bytes. s!) (=> %%global_location_label%%27 (= (vstd!seq.Seq.len.? $ (UINT 8) s!) 2))) :pattern ((req%vstd!bytes.spec_u16_from_le_bytes. s!)) )))
(set-info :comment ";; Function-Axioms vstd::bytes::spec_u16_from_le_bytes")
(assert (forall ((s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 16 (vstd!bytes.spec_u16_from_le_bytes.? s!))) :pattern ((vstd!bytes.spec_u16_from_le_bytes.? s!)) )))
(set-info :comment ";; Function-Specs vstd::bytes::lemma_auto_spec_u16_to_from_le_bytes")
(declare-fun ens%vstd!bytes.lemma_auto_spec_u16_to_from_le_bytes. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%vstd!bytes.lemma_auto_spec_u16_to_from_le_bytes. no%param) (and (forall ((x$ Poly)) (! (=> (has_type x$ (UINT 16)) (and (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u16_to_le_bytes.? x$))) 2) (= (vstd!bytes.spec_u16_from_le_bytes.? (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u16_to_le_bytes.? x$))) (%I x$)))) :pattern ((vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u16_to_le_bytes.? x$)))) )) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (= (vstd!seq.Seq.len.? $ (UINT 8) s$) 2) (= (vstd!bytes.spec_u16_to_le_bytes.? (I (vstd!bytes.spec_u16_from_le_bytes.? s$))) (%Poly%vstd!seq.Seq<u8.>. s$)))) :pattern ((vstd!bytes.spec_u16_to_le_bytes.? (I (vstd!bytes.spec_u16_from_le_bytes.? s$)))) )))) :pattern ((ens%vstd!bytes.lemma_auto_spec_u16_to_from_le_bytes. no%param)) )))
(set-info :comment ";; Function-Specs vstd::bytes::u16_from_le_bytes")
(declare-fun req%vstd!bytes.u16_from_le_bytes. (slice%<u8.>.) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((s! slice%<u8.>.)) (! (= (req%vstd!bytes.u16_from_le_bytes. s!) (=> %%global_location_label%%28 (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. s!))) 2))) :pattern ((req%vstd!bytes.u16_from_le_bytes. s!)) )))
(declare-fun ens%vstd!bytes.u16_from_le_bytes. (slice%<u8.>. Int) Bool)
(assert (forall ((s! slice%<u8.>.) (x! Int)) (! (= (ens%vstd!bytes.u16_from_le_bytes. s! x!) (and (uInv 16 x!) (= x! (vstd!bytes.spec_u16_from_le_bytes.? (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. s!)))))) :pattern ((ens%vstd!bytes.u16_from_le_bytes. s! x!)) )))
(set-info :comment ";; Function-Specs vstd::bytes::u16_to_le_bytes")
(declare-fun ens%vstd!bytes.u16_to_le_bytes. (Int alloc!vec.Vec<u8./allocator_global%.>.) Bool)
(assert (forall ((x! Int) (s! alloc!vec.Vec<u8./allocator_global%.>.)) (! (= (ens%vstd!bytes.u16_to_le_bytes. x! s!) (and (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. s!))) (vstd!bytes.spec_u16_to_le_bytes.? (I x!))) (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. s!))) 2))) :pattern ((ens%vstd!bytes.u16_to_le_bytes. x! s!)) )))
(set-info :comment ";; Function-Specs vstd::bytes::spec_u32_from_le_bytes")
(declare-fun req%vstd!bytes.spec_u32_from_le_bytes. (Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((s! Poly)) (! (= (req%vstd!bytes.spec_u32_from_le_bytes. s!) (=> %%global_location_label%%29 (= (vstd!seq.Seq.len.? $ (UINT 8) s!) 4))) :pattern ((req%vstd!bytes.spec_u32_from_le_bytes. s!)) )))
(set-info :comment ";; Function-Axioms vstd::bytes::spec_u32_from_le_bytes")
(assert (forall ((s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 32 (vstd!bytes.spec_u32_from_le_bytes.? s!))) :pattern ((vstd!bytes.spec_u32_from_le_bytes.? s!)) )))
(set-info :comment ";; Function-Specs vstd::bytes::lemma_auto_spec_u32_to_from_le_bytes")
(declare-fun ens%vstd!bytes.lemma_auto_spec_u32_to_from_le_bytes. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%vstd!bytes.lemma_auto_spec_u32_to_from_le_bytes. no%param) (and (forall ((x$ Poly)) (! (=> (has_type x$ (UINT 32)) (and (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u32_to_le_bytes.? x$))) 4) (= (vstd!bytes.spec_u32_from_le_bytes.? (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u32_to_le_bytes.? x$))) (%I x$)))) :pattern ((vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u32_to_le_bytes.? x$)))) )) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (= (vstd!seq.Seq.len.? $ (UINT 8) s$) 4) (= (vstd!bytes.spec_u32_to_le_bytes.? (I (vstd!bytes.spec_u32_from_le_bytes.? s$))) (%Poly%vstd!seq.Seq<u8.>. s$)))) :pattern ((vstd!bytes.spec_u32_to_le_bytes.? (I (vstd!bytes.spec_u32_from_le_bytes.? s$)))) )))) :pattern ((ens%vstd!bytes.lemma_auto_spec_u32_to_from_le_bytes. no%param)) )))
(set-info :comment ";; Function-Specs vstd::bytes::u32_from_le_bytes")
(declare-fun req%vstd!bytes.u32_from_le_bytes. (slice%<u8.>.) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((s! slice%<u8.>.)) (! (= (req%vstd!bytes.u32_from_le_bytes. s!) (=> %%global_location_label%%30 (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. s!))) 4))) :pattern ((req%vstd!bytes.u32_from_le_bytes. s!)) )))
(declare-fun ens%vstd!bytes.u32_from_le_bytes. (slice%<u8.>. Int) Bool)
(assert (forall ((s! slice%<u8.>.) (x! Int)) (! (= (ens%vstd!bytes.u32_from_le_bytes. s! x!) (and (uInv 32 x!) (= x! (vstd!bytes.spec_u32_from_le_bytes.? (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. s!)))))) :pattern ((ens%vstd!bytes.u32_from_le_bytes. s! x!)) )))
(set-info :comment ";; Function-Specs vstd::bytes::u32_to_le_bytes")
(declare-fun ens%vstd!bytes.u32_to_le_bytes. (Int alloc!vec.Vec<u8./allocator_global%.>.) Bool)
(assert (forall ((x! Int) (s! alloc!vec.Vec<u8./allocator_global%.>.)) (! (= (ens%vstd!bytes.u32_to_le_bytes. x! s!) (and (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. s!))) (vstd!bytes.spec_u32_to_le_bytes.? (I x!))) (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. s!))) 4))) :pattern ((ens%vstd!bytes.u32_to_le_bytes. x! s!)) )))
(set-info :comment ";; Function-Specs vstd::bytes::spec_u64_from_le_bytes")
(declare-fun req%vstd!bytes.spec_u64_from_le_bytes. (Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((s! Poly)) (! (= (req%vstd!bytes.spec_u64_from_le_bytes. s!) (=> %%global_location_label%%31 (= (vstd!seq.Seq.len.? $ (UINT 8) s!) 8))) :pattern ((req%vstd!bytes.spec_u64_from_le_bytes. s!)) )))
(set-info :comment ";; Function-Axioms vstd::bytes::spec_u64_from_le_bytes")
(assert (forall ((s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (vstd!bytes.spec_u64_from_le_bytes.? s!))) :pattern ((vstd!bytes.spec_u64_from_le_bytes.? s!)) )))
(set-info :comment ";; Function-Specs vstd::bytes::lemma_auto_spec_u64_to_from_le_bytes")
(declare-fun ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. no%param) (and (forall ((x$ Poly)) (! (=> (has_type x$ (UINT 64)) (and (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? x$))) 8) (= (vstd!bytes.spec_u64_from_le_bytes.? (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? x$))) (%I x$)))) :pattern ((vstd!bytes.spec_u64_to_le_bytes.? x$)) )) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (= (vstd!seq.Seq.len.? $ (UINT 8) s$) 8) (= (vstd!bytes.spec_u64_to_le_bytes.? (I (vstd!bytes.spec_u64_from_le_bytes.? s$))) (%Poly%vstd!seq.Seq<u8.>. s$)))) :pattern ((vstd!bytes.spec_u64_to_le_bytes.? (I (vstd!bytes.spec_u64_from_le_bytes.? s$)))) )))) :pattern ((ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. no%param)) )))
(set-info :comment ";; Function-Specs vstd::bytes::u64_from_le_bytes")
(declare-fun req%vstd!bytes.u64_from_le_bytes. (slice%<u8.>.) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((s! slice%<u8.>.)) (! (= (req%vstd!bytes.u64_from_le_bytes. s!) (=> %%global_location_label%%32 (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. s!))) 8))) :pattern ((req%vstd!bytes.u64_from_le_bytes. s!)) )))
(declare-fun ens%vstd!bytes.u64_from_le_bytes. (slice%<u8.>. Int) Bool)
(assert (forall ((s! slice%<u8.>.) (x! Int)) (! (= (ens%vstd!bytes.u64_from_le_bytes. s! x!) (and (uInv 64 x!) (= x! (vstd!bytes.spec_u64_from_le_bytes.? (vstd!view.View.view.? $ (SLICE $ (UINT 8)) (Poly%slice%<u8.>. s!)))))) :pattern ((ens%vstd!bytes.u64_from_le_bytes. s! x!)) )))
(set-info :comment ";; Function-Specs vstd::bytes::u64_to_le_bytes")
(declare-fun ens%vstd!bytes.u64_to_le_bytes. (Int alloc!vec.Vec<u8./allocator_global%.>.) Bool)
(assert (forall ((x! Int) (s! alloc!vec.Vec<u8./allocator_global%.>.)) (! (= (ens%vstd!bytes.u64_to_le_bytes. x! s!) (and (= (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. s!))) (vstd!bytes.spec_u64_to_le_bytes.? (I x!))) (= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. s!))) 8))) :pattern ((ens%vstd!bytes.u64_to_le_bytes. x! s!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%33 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Specs vstd::pervasive::impl&%1::set")
(declare-fun req%vstd!pervasive.impl&%1.set. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre%self! Poly) (i! Int) (value! Poly)) (! (= (req%vstd!pervasive.impl&%1.set. T&. T& pre%self! i! value!) (=> %%global_location_label%%34 (< i! (vstd!std_specs.vec.spec_vec_len.? T&. T& $ ALLOCATOR_GLOBAL pre%self!)))) :pattern ((req%vstd!pervasive.impl&%1.set. T&. T& pre%self! i! value!)) )))
(declare-fun ens%vstd!pervasive.impl&%1.set. (Dcr Type Poly Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre%self! Poly) (self! Poly) (i! Int) (value! Poly)) (! (= (ens%vstd!pervasive.impl&%1.set. T&. T& pre%self! self! i! value!) (and (has_type self! (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) (vstd!seq.Seq.update.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) pre%self!) (I i!) value!)))) :pattern ((ens%vstd!pervasive.impl&%1.set. T&. T& pre%self! self! i! value!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Function-Specs vstd::slice::slice_index_get")
(declare-fun req%vstd!slice.slice_index_get. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((T&. Dcr) (T& Type) (slice! Poly) (i! Int)) (! (= (req%vstd!slice.slice_index_get. T&. T& slice! i!) (=> %%global_location_label%%35 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (SLICE T&. T&) slice!)))))) :pattern ((req%vstd!slice.slice_index_get. T&. T& slice! i!)) )))
(declare-fun ens%vstd!slice.slice_index_get. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (slice! Poly) (i! Int) (out! Poly)) (! (= (ens%vstd!slice.slice_index_get. T&. T& slice! i! out!) (and (has_type out! T&) (= out! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (SLICE T&. T&) slice!) (I i!))))) :pattern ((ens%vstd!slice.slice_index_get. T&. T& slice! i! out!)) )))
(set-info :comment ";; Function-Specs vstd::slice::slice_subrange")
(declare-fun req%vstd!slice.slice_subrange. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((T&. Dcr) (T& Type) (slice! Poly) (i! Int) (j! Int)) (! (= (req%vstd!slice.slice_subrange. T&. T& slice! i! j!) (=> %%global_location_label%%36 (and (and (<= 0 i!) (<= i! j!)) (<= j! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (SLICE T&. T&) slice!)))))) :pattern ((req%vstd!slice.slice_subrange. T&. T& slice! i! j!)) )))
(declare-fun ens%vstd!slice.slice_subrange. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (slice! Poly) (i! Int) (j! Int) (out! Poly)) (! (= (ens%vstd!slice.slice_subrange. T&. T& slice! i! j! out!) (and (has_type out! (SLICE T&. T&)) (= (vstd!view.View.view.? $ (SLICE T&. T&) out!) (vstd!seq.Seq.subrange.? T&. T& (vstd!view.View.view.? $ (SLICE T&. T&) slice!) (I i!) (I j!))))) :pattern ((ens%vstd!slice.slice_subrange. T&. T& slice! i! j! out!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::valid")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.valid.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.valid.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.Marshalling_v.Marshal.valid.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self!) (B true))) :pattern ((lib!marshalling.Marshalling_v.Marshal.valid.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self!)) ))))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormat::new")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.impl&%12.new. (Dcr Type lib!marshalling.IntegerMarshalling_v.IntFormat.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (s! lib!marshalling.IntegerMarshalling_v.IntFormat.)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.impl&%12.new. T&. T& s!) (%B (lib!marshalling.Marshalling_v.Marshal.valid.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. s!)))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.impl&%12.new. T&. T& s!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::UniformSized_v::UniformSized::uniform_size")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? Self%&. Self%& self!) (UINT SZ))) :pattern ((lib!marshalling.UniformSized_v.UniformSized.uniform_size.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::UniformSized_v::UniformSized::uniform_size_ensures")
(declare-fun ens%lib!marshalling.UniformSized_v.UniformSized.uniform_size_ensures. (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (= (ens%lib!marshalling.UniformSized_v.UniformSized.uniform_size_ensures. Self%&. Self%& self!) (< 0 (%I (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? Self%&. Self%& self!)))) :pattern ((ens%lib!marshalling.UniformSized_v.UniformSized.uniform_size_ensures. Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Specs lib::marshalling::UniformSized_v::UniformSized::exec_uniform_size")
(declare-fun ens%lib!marshalling.UniformSized_v.UniformSized.exec_uniform_size. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (sz! Poly)) (! (= (ens%lib!marshalling.UniformSized_v.UniformSized.exec_uniform_size. Self%&. Self%& self! sz!) (and (has_type sz! (UINT SZ)) (= sz! (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? Self%&. Self%& self!)))) :pattern ((ens%lib!marshalling.UniformSized_v.UniformSized.exec_uniform_size. Self%&. Self%& self! sz!)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::uniform_size")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.UniformSized_v.UniformSized.uniform_size.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self!) (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&))) :pattern ((lib!marshalling.UniformSized_v.UniformSized.uniform_size.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::parsable")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parsable.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parsable.) (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.Marshalling_v.Marshal.parsable.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! data!) (B (<= (%I (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) data!))))) :pattern ((lib!marshalling.Marshalling_v.Marshal.parsable.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! data!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::parse")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parse.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.parse.) (forall ((T&. Dcr) (T& Type) (self! Poly) (data! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.Marshalling_v.Marshal.parse.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! data!) (I (%I (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? T&. T& (vstd!seq.Seq.subrange.? $ (UINT 8) data! (I 0) (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&))))))) :pattern ((lib!marshalling.Marshalling_v.Marshal.parse.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! data!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::Slice_v::SpecSlice::len")
(assert (fuel_bool_default fuel%lib!marshalling.Slice_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!marshalling.Slice_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!marshalling.Slice_v.impl&%0.len.? self!) (Sub (lib!marshalling.Slice_v.SpecSlice./SpecSlice/end (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)) (lib!marshalling.Slice_v.SpecSlice./SpecSlice/start (%Poly%lib!marshalling.Slice_v.SpecSlice. self!)))) :pattern ((lib!marshalling.Slice_v.impl&%0.len.? self!)) ))))
(set-info :comment ";; Function-Specs lib::marshalling::Slice_v::Slice::len")
(declare-fun req%lib!marshalling.Slice_v.impl&%1.len. (lib!marshalling.Slice_v.Slice.) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((self! lib!marshalling.Slice_v.Slice.)) (! (= (req%lib!marshalling.Slice_v.impl&%1.len. self!) (=> %%global_location_label%%37 (lib!marshalling.Slice_v.impl&%0.wf.? (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. (Poly%lib!marshalling.Slice_v.Slice. self!))))) :pattern ((req%lib!marshalling.Slice_v.impl&%1.len. self!)) )))
(declare-fun ens%lib!marshalling.Slice_v.impl&%1.len. (lib!marshalling.Slice_v.Slice. Int) Bool)
(assert (forall ((self! lib!marshalling.Slice_v.Slice.) (out! Int)) (! (= (ens%lib!marshalling.Slice_v.impl&%1.len. self! out!) (and (uInv SZ out!) (= out! (lib!marshalling.Slice_v.impl&%0.len.? (vstd!view.View.view.? $ TYPE%lib!marshalling.Slice_v.Slice. (Poly%lib!marshalling.Slice_v.Slice. self!)))))) :pattern ((ens%lib!marshalling.Slice_v.impl&%1.len. self! out!)) )))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::IntFormat::exec_parsable")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:453:10: 453:76 (#0)")
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::marshallable")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.marshallable.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.marshallable.) (forall ((T&. Dcr) (T& Type) (self! Poly) (value! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.Marshalling_v.Marshal.marshallable.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! value!) (B true))) :pattern ((lib!marshalling.Marshalling_v.Marshal.marshallable.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! value!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::IntFormat::spec_size")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.spec_size.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%13.spec_size.) (forall ((T&. Dcr) (T& Type) (self! Poly) (value! Poly)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (= (lib!marshalling.Marshalling_v.Marshal.spec_size.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! value!) (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&))) :pattern ((lib!marshalling.Marshalling_v.Marshal.spec_size.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! value!)) ))))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::IntFormat::exec_size")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:481:5: 481:49 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::IntFormat::try_parse")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:491:10: 491:78 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::IntFormat::exec_parse")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:505:10: 505:74 (#0)")
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormat::install_bytes")
(declare-fun req%lib!marshalling.IntegerMarshalling_v.impl&%12.install_bytes. (Dcr Type alloc!vec.Vec<u8./allocator_global%.>. alloc!vec.Vec<u8./allocator_global%.>. Int) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((T&. Dcr) (T& Type) (source! alloc!vec.Vec<u8./allocator_global%.>.) (pre%data! alloc!vec.Vec<u8./allocator_global%.>.) (start! Int)) (! (= (req%lib!marshalling.IntegerMarshalling_v.impl&%12.install_bytes. T&. T& source! pre%data! start!) (=> %%global_location_label%%38 (<= (Add start! (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u8./allocator_global%.>. source!))) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u8./allocator_global%.>. pre%data!))))) :pattern ((req%lib!marshalling.IntegerMarshalling_v.impl&%12.install_bytes. T&. T& source! pre%data! start!)) )))
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.impl&%12.install_bytes. (Dcr Type alloc!vec.Vec<u8./allocator_global%.>. alloc!vec.Vec<u8./allocator_global%.>. alloc!vec.Vec<u8./allocator_global%.>. Int Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (source! alloc!vec.Vec<u8./allocator_global%.>.) (pre%data! alloc!vec.Vec<u8./allocator_global%.>.) (data! alloc!vec.Vec<u8./allocator_global%.>.) (start! Int) (end! Int)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.impl&%12.install_bytes. T&. T& source! pre%data! data! start! end!) (and (uInv SZ end!) (= (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u8./allocator_global%.>. data!)) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u8./allocator_global%.>. pre%data!))) (= end! (Add start! (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u8./allocator_global%.>. source!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) start!)) (= (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. data!)) i$) (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. pre%data!)) i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. data!)) i$)) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. pre%data!)) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u8./allocator_global%.>. source!)))) (= (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. data!)) (I (Add start! (%I i$)))) (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. source!)) i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. source!)) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= end! (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<u8./allocator_global%.>. data!)))) (= (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. data!)) i$) (vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. pre%data!)) i$)))) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. data!)) i$)) :pattern ((vstd!seq.Seq.index.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. pre%data!)) i$)) )))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.impl&%12.install_bytes. T&. T& source! pre%data! data! start! end!)) )))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::IntFormat::install_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:394:10: 394:93 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::IntFormat::exec_marshall")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:514:10: 514:93 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (tr_bound%lib!marshalling.Marshalling_v.Marshal. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) :pattern ((tr_bound%lib!marshalling.Marshalling_v.Marshal. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) )))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormat::uniform_size_ensures")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size_ensures. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size_ensures. T&. T& self!) (and (ens%lib!marshalling.UniformSized_v.UniformSized.uniform_size_ensures. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self!) (< 0 (%I (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&))))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.impl&%14.uniform_size_ensures. T&. T& self!)) )))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::IntFormat::uniform_size_ensures")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:535:11: 535:41 (#0)")
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormat::exec_uniform_size")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.impl&%14.exec_uniform_size. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (sz! Poly)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.impl&%14.exec_uniform_size. T&. T& self! sz!) (and (ens%lib!marshalling.UniformSized_v.UniformSized.exec_uniform_size. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) self! sz!) (= sz! (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? T&. T&)))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.impl&%14.exec_uniform_size. T&. T& self! sz!)) )))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::IntFormat::exec_uniform_size")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:541:10: 541:51 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. T&. T&) (tr_bound%lib!marshalling.UniformSized_v.UniformSized. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) :pattern ((tr_bound%lib!marshalling.UniformSized_v.UniformSized. $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&))) )))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%0::deepv")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%0.deepv.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%0.deepv.) (forall ((self! Poly)) (! (= (lib!marshalling.Marshalling_v.Deepview.deepv.? $ (UINT 8) $ INT self!) self!) :pattern ((lib!marshalling.Marshalling_v.Deepview.deepv.? $ (UINT 8) $ INT self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.Marshalling_v.Deepview. $ (UINT 8) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%builtin!Integer. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%builtin!Integer. Rhs&. Rhs&) (tr_bound%builtin!SpecOrd. $ (UINT 8) Rhs&. Rhs&)) :pattern ((tr_bound%builtin!SpecOrd. $ (UINT 8) Rhs&. Rhs&)) )))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%1::uniform_size")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%1.uniform_size.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%1.uniform_size.) (= (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? $ (UINT 8)) (I 1))))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%1::uniform_size_ensures")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:108:11: 108:36 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%1::exec_uniform_size")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:110:10: 110:41 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.StaticallySized_v.StaticallySized. $ (UINT 8)))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%2::spec_from_le_bytes")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.spec_from_le_bytes.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.spec_from_le_bytes.) (forall ((s! Poly)) (! (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? $ (UINT 8) s!) (vstd!seq.Seq.index.? $ (UINT 8) s! (I 0))) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? $ (UINT 8) s!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%2::spec_to_le_bytes")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.spec_to_le_bytes.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.spec_to_le_bytes.) (forall ((x! Poly)) (! (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? $ (UINT 8) x!) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) x!)) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? $ (UINT 8) x!)) ))))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%2::to_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:124:10: 124:46 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%2::from_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:132:10: 132:45 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%2::lemma_auto_spec_to_from_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:137:11: 137:48 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%2::deepv_is_as_int")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:156:11: 156:38 (#0)")
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%2::max")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.max.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%2.max.) (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? $ (UINT 8)) (I (uClip SZ 255)))))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%2::max_ensures")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:160:11: 160:34 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%2::exec_max")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:162:10: 162:36 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%2::to_usize")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:164:10: 164:43 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%2::from_usize")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:166:10: 166:45 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%2::nonnegative")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:168:11: 168:34 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. $ (UINT 8)))
(set-info :comment ";; Function-Axioms alloc::vec::Vec::deepv")
(assert (fuel_bool_default fuel%lib!marshalling.Marshalling_v.impl&%0.deepv.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$) (lib!marshalling.Marshalling_v.Deepview.deepv.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$)))))
(assert (=> (fuel_bool fuel%lib!marshalling.Marshalling_v.impl&%0.deepv.) (forall ((DVE&. Dcr) (DVE& Type) (Elt&. Dcr) (Elt& Type) (self! Poly)) (! (=> (tr_bound%lib!marshalling.Marshalling_v.Deepview. Elt&. Elt& DVE&. DVE&) (= (lib!marshalling.Marshalling_v.Deepview.deepv.? $ (TYPE%alloc!vec.Vec. Elt&. Elt& $ ALLOCATOR_GLOBAL) $ (TYPE%vstd!seq.Seq. DVE&. DVE&) self!) (vstd!seq.Seq.new.? DVE&. DVE& $ (TYPE%fun%1. $ INT DVE&. DVE&) (I (vstd!std_specs.vec.spec_vec_len.? Elt&. Elt& $ ALLOCATOR_GLOBAL self!)) (Poly%fun%1. (mk_fun (%%lambda%%1 Elt&. Elt& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. Elt&. Elt& $ ALLOCATOR_GLOBAL) self!) Elt&. Elt& DVE&. DVE&)))))) :pattern ((lib!marshalling.Marshalling_v.Deepview.deepv.? $ (TYPE%alloc!vec.Vec. Elt&. Elt& $ ALLOCATOR_GLOBAL) $ (TYPE%vstd!seq.Seq. DVE&. DVE&) self!)) ))))
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::IntFormat::parse_nat")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.impl&%12.parse_nat. (Dcr Type lib!marshalling.IntegerMarshalling_v.IntFormat. vstd!seq.Seq<u8.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!marshalling.IntegerMarshalling_v.IntFormat.) (data! vstd!seq.Seq<u8.>.)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.impl&%12.parse_nat. T&. T& self! data!) (let ((tmp%%$ (%I (lib!marshalling.Marshalling_v.Marshal.parse.? $ (TYPE%lib!marshalling.IntegerMarshalling_v.IntFormat. T&. T&) (Poly%lib!marshalling.IntegerMarshalling_v.IntFormat. self!) (Poly%vstd!seq.Seq<u8.>. data!))))) (and (<= 0 tmp%%$) (<= tmp%%$ (%I (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? T&. T&)))))) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.impl&%12.parse_nat. T&. T& self! data!)) )))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::IntFormat::parse_nat")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:429:5: 429:49 (#0)")
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%3::deepv")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%3.deepv.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%3.deepv.) (forall ((self! Poly)) (! (= (lib!marshalling.Marshalling_v.Deepview.deepv.? $ (UINT 16) $ INT self!) self!) :pattern ((lib!marshalling.Marshalling_v.Deepview.deepv.? $ (UINT 16) $ INT self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%4::uniform_size")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%4.uniform_size.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%4.uniform_size.) (= (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? $ (UINT 16)) (I 2))))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%5::deepv_is_as_int")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:224:11: 224:38 (#0)")
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%6::deepv")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%6.deepv.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%6.deepv.) (forall ((self! Poly)) (! (= (lib!marshalling.Marshalling_v.Deepview.deepv.? $ (UINT 32) $ INT self!) self!) :pattern ((lib!marshalling.Marshalling_v.Deepview.deepv.? $ (UINT 32) $ INT self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%7::uniform_size")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%7.uniform_size.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%7.uniform_size.) (= (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? $ (UINT 32)) (I 4))))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%8::deepv_is_as_int")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:292:11: 292:38 (#0)")
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%9::deepv")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%9.deepv.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%9.deepv.) (forall ((self! Poly)) (! (= (lib!marshalling.Marshalling_v.Deepview.deepv.? $ (UINT 64) $ INT self!) self!) :pattern ((lib!marshalling.Marshalling_v.Deepview.deepv.? $ (UINT 64) $ INT self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%10::uniform_size")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%10.uniform_size.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%10.uniform_size.) (= (lib!marshalling.StaticallySized_v.StaticallySized.uniform_size.? $ (UINT 64)) (I 8))))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%11::deepv_is_as_int")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:357:11: 357:38 (#0)")
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%16::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%16.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%16.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 16) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 16) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%18::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%40::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%40.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%40.view.) (forall ((A0&. Dcr) (A0& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A0&. A0&) (= (vstd!view.View.view.? $ (TYPE%tuple%1. A0&. A0&) self!) (Poly%tuple%1. (tuple%1./tuple%1 (vstd!view.View.view.? A0&. A0& (tuple%1./tuple%1/0 (%Poly%tuple%1. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%1. A0&. A0&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%5::spec_from_le_bytes")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.spec_from_le_bytes.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.spec_from_le_bytes.) (forall ((s! Poly)) (! (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? $ (UINT 16) s!) (I (vstd!bytes.spec_u16_from_le_bytes.? s!))) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? $ (UINT 16) s!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%5::spec_to_le_bytes")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.spec_to_le_bytes.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.spec_to_le_bytes.) (forall ((x! Poly)) (! (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? $ (UINT 16) x!) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u16_to_le_bytes.? x!))) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? $ (UINT 16) x!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%5::max")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.max.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%5.max.) (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? $ (UINT 16)) (I (uClip SZ 65535)))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%8::spec_from_le_bytes")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.spec_from_le_bytes.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.spec_from_le_bytes.) (forall ((s! Poly)) (! (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? $ (UINT 32) s!) (I (vstd!bytes.spec_u32_from_le_bytes.? s!))) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? $ (UINT 32) s!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%8::spec_to_le_bytes")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.spec_to_le_bytes.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.spec_to_le_bytes.) (forall ((x! Poly)) (! (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? $ (UINT 32) x!) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u32_to_le_bytes.? x!))) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? $ (UINT 32) x!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%8::max")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.max.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%8.max.) (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? $ (UINT 32)) (I (uClip SZ 4294967295)))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%11::spec_from_le_bytes")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.spec_from_le_bytes.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.spec_from_le_bytes.) (forall ((s! Poly)) (! (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? $ (UINT 64) s!) (I (vstd!bytes.spec_u64_from_le_bytes.? s!))) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_from_le_bytes.? $ (UINT 64) s!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%11::spec_to_le_bytes")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.spec_to_le_bytes.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.spec_to_le_bytes.) (forall ((x! Poly)) (! (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? $ (UINT 64) x!) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? x!))) :pattern ((lib!marshalling.IntegerMarshalling_v.IntFormattable.spec_to_le_bytes.? $ (UINT 64) x!)) ))))
(set-info :comment ";; Function-Axioms lib::marshalling::IntegerMarshalling_v::impl&%11::max")
(assert (fuel_bool_default fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.max.))
(assert (=> (fuel_bool fuel%lib!marshalling.IntegerMarshalling_v.impl&%11.max.) (= (lib!marshalling.IntegerMarshalling_v.IntFormattable.max.? $ (UINT 64)) (I (uClip SZ 18446744073709551615)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type)) (! (=> (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. $ (TYPE%tuple%1. A0&. A0&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%1. A0&. A0&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%builtin!Integer. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%builtin!Integer. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%builtin!Integer. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%builtin!Integer. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%builtin!Integer. Rhs&. Rhs&) (tr_bound%builtin!SpecOrd. $ (UINT SZ) Rhs&. Rhs&)) :pattern ((tr_bound%builtin!SpecOrd. $ (UINT SZ) Rhs&. Rhs&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%builtin!Integer. Rhs&. Rhs&) (tr_bound%builtin!SpecOrd. $ (UINT 64) Rhs&. Rhs&)) :pattern ((tr_bound%builtin!SpecOrd. $ (UINT 64) Rhs&. Rhs&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%builtin!Integer. Rhs&. Rhs&) (tr_bound%builtin!SpecOrd. $ (UINT 32) Rhs&. Rhs&)) :pattern ((tr_bound%builtin!SpecOrd. $ (UINT 32) Rhs&. Rhs&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%builtin!Integer. Rhs&. Rhs&) (tr_bound%builtin!SpecOrd. $ (UINT 16) Rhs&. Rhs&)) :pattern ((tr_bound%builtin!SpecOrd. $ (UINT 16) Rhs&. Rhs&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%lib!marshalling.Slice_v.Slice.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DVE&. Dcr) (DVE& Type) (Elt&. Dcr) (Elt& Type)) (! (=> (tr_bound%lib!marshalling.Marshalling_v.Deepview. Elt&. Elt& DVE&. DVE&) (tr_bound%lib!marshalling.Marshalling_v.Deepview. $ (TYPE%alloc!vec.Vec. Elt&. Elt& $ ALLOCATOR_GLOBAL) $ (TYPE%vstd!seq.Seq. DVE&. DVE&))) :pattern ((tr_bound%lib!marshalling.Marshalling_v.Deepview. $ (TYPE%alloc!vec.Vec. Elt&. Elt& $ ALLOCATOR_GLOBAL) $ (TYPE%vstd!seq.Seq. DVE&. DVE&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.Marshalling_v.Deepview. $ (UINT 16) $ INT))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%4::uniform_size_ensures")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:184:11: 184:36 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%4::exec_uniform_size")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:186:10: 186:41 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.StaticallySized_v.StaticallySized. $ (UINT 16)))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%5::to_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:200:10: 200:47 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%5::from_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:205:10: 205:46 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%5::lemma_auto_spec_to_from_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:210:11: 210:48 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%5::max_ensures")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:228:11: 228:34 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%5::exec_max")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:230:10: 230:36 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%5::to_usize")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:232:10: 232:43 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%5::from_usize")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:234:10: 234:45 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%5::nonnegative")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:236:11: 236:34 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.Marshalling_v.Deepview. $ (UINT 32) $ INT))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%7::uniform_size_ensures")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:252:11: 252:36 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%7::exec_uniform_size")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:254:10: 254:41 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.StaticallySized_v.StaticallySized. $ (UINT 32)))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%8::to_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:268:10: 268:47 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%8::from_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:273:10: 273:46 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%8::lemma_auto_spec_to_from_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:278:11: 278:48 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%8::max_ensures")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:296:11: 296:34 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%8::exec_max")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:298:10: 298:36 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%8::to_usize")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:300:10: 300:43 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%8::from_usize")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:302:10: 302:45 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%8::nonnegative")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:304:11: 304:34 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.IntegerMarshalling_v.IntFormattable. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.Marshalling_v.Deepview. $ (UINT 64) $ INT))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%10::uniform_size_ensures")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:320:11: 320:36 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%10::exec_uniform_size")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:322:10: 322:41 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!marshalling.StaticallySized_v.StaticallySized. $ (UINT 64)))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%11::to_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:342:10: 342:47 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%11::from_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:347:10: 347:46 (#0)")
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::impl&%11::lemma_auto_spec_to_from_le_bytes")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:352:11: 352:48 (#0)")
(set-info :comment ";; Function-Specs lib::marshalling::IntegerMarshalling_v::usize64_workaround")
(declare-fun ens%lib!marshalling.IntegerMarshalling_v.usize64_workaround. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!marshalling.IntegerMarshalling_v.usize64_workaround. no%param) (= (- (uHi SZ) 1) 18446744073709551615)) :pattern ((ens%lib!marshalling.IntegerMarshalling_v.usize64_workaround. no%param)) )))
(set-info :comment ";; Function-Def lib::marshalling::IntegerMarshalling_v::usize64_workaround")
(set-info :comment ";; marshalling/IntegerMarshalling_v.rs:326:1: 326:34 (#0)")
(declare-const no%param Int)
(assert fuel_defaults)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(assert (not (=> (= (- (uHi SZ) 1) 18446744073709551615) (=> %%location_label%%0 (= (- (uHi SZ) 1) 18446744073709551615)))))
(check-sat)
(exit)
