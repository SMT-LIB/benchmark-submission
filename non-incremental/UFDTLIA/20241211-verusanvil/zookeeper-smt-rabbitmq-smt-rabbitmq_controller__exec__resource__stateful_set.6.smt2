(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 60
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Anvil (https://www.usenix.org/conference/osdi24/presentation/sun-xudong) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module rabbitmq_controller::exec::resource::stateful_set'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.get_Ok_0. FuelId)
(declare-const fuel%vstd!std_specs.result.is_ok. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map_values. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.check_argument_is_seq. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%1.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%3.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%5.view. FuelId)
(declare-const fuel%vstd!view.impl&%11.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%15.view. FuelId)
(declare-const fuel%vstd!view.impl&%19.view. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.impl&%0.requirements. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.common.make_owner_references. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.get_request. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.make. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.update. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.state_after_create. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.state_after_update. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_key. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.sts_restart_annotation. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.update_stateful_set. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_rabbitmq_pod_spec. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_env_vars. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%2.view. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%4.view. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%6.view. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%8.view. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%10.view. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%12.view. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%13.view. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_env. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_image. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_ports. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_volume_mounts. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_lifecycle. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.unset_resources. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_readiness_probe. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_command. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.set_pre_stop. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.set_exec. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_failure_threshold. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_initial_delay_seconds. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_period_seconds. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_success_threshold. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_tcp_socket. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_timeout_seconds. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.set_command. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.set_port. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.set_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value_from. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.set_field_ref. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.set_match_labels. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.owner_references_only_contains. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_metadata. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_spec. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.kind. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.marshal. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.unmarshal. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_access_modes. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_resources. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_storage_class_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_affinity. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_affinity. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_containers. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_volumes. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_init_containers. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_service_account_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_tolerations. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_tolerations. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_termination_grace_period_seconds. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_metadata. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_spec. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_limits. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_requests. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_metadata. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_spec. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.kind. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.marshal. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.unmarshal. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_replicas. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_selector. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_service_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_template. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_volume_claim_templates. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pod_management_policy. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pvc_retention_policy. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.unset_pvc_retention_policy. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_config_map. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_projected. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_downward_api. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.set_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.set_sources. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_config_map. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_secret. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_items. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_items. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_name. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.set_items. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_field_ref. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_path. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path. FuelId)
(declare-const fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_api_version. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%1.view. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.default. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.kind. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.marshal. FuelId)
(declare-const fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.unmarshal. FuelId)
(declare-const fuel%rabbitmq_controller!reconciler.exec.resource_builder.resource_res_to_view. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.impl&%0.get_Ok_0. fuel%vstd!std_specs.result.is_ok. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq_lib.impl&%0.map_values. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.check_argument_is_seq. fuel%vstd!set.impl&%0.choose. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%1.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%3.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%5.view. fuel%vstd!view.impl&%11.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%15.view. fuel%vstd!view.impl&%19.view. fuel%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.impl&%0.requirements. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.common.make_owner_references. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.get_request. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.make. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.update. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.state_after_create. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.state_after_update. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_key. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.sts_restart_annotation. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.update_stateful_set. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_rabbitmq_pod_spec. fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_env_vars. fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%2.view. fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%4.view. fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%6.view. fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%8.view. fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%10.view. fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%12.view. fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%13.view. fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_env. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_image. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_ports. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_volume_mounts. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_lifecycle. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.unset_resources. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_readiness_probe. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_command. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.set_pre_stop. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.set_exec. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_failure_threshold. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_initial_delay_seconds. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_period_seconds. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_success_threshold. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_tcp_socket. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_timeout_seconds. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.set_command. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.set_port. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.set_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value_from. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.set_field_ref. fuel%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.set_match_labels. fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.owner_references_only_contains. fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace. fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels. fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations. fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references. fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers. fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_metadata. fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_spec. fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.kind. fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.marshal. fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.unmarshal. fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_access_modes. fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_resources. fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_storage_class_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_affinity. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_affinity. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_containers. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_volumes. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_init_containers. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_service_account_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_tolerations. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_tolerations. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_termination_grace_period_seconds. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_metadata. fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_spec. fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_limits. fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_requests. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_metadata. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_spec. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.kind. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.marshal. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.unmarshal. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_replicas. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_selector. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_service_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_template. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_volume_claim_templates. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pod_management_policy. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pvc_retention_policy. fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.unset_pvc_retention_policy. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_config_map. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_projected. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_downward_api. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.set_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.set_sources. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_config_map. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_secret. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_items. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_items. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_name. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.set_items. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_field_ref. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_path. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path. fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_api_version. fuel%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%1.view. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.default. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.kind. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.marshal. fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.unmarshal. fuel%rabbitmq_controller!reconciler.exec.resource_builder.resource_res_to_view.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec (Dcr Type) Dcr)
(declare-fun proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec (Dcr Type) Type)
(declare-fun proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status (Dcr Type) Dcr)
(declare-fun proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!alloc.Global. 0)
(declare-sort alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>. 0)
(declare-sort alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.container.Container. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. 0)
(declare-sort rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. 0)
(declare-sort rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. 0)
(declare-sort rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. 0)
(declare-sort rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. 0)
(declare-sort rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. 0)
(declare-sort rabbitmq_controller!vstd_ext.string_map.StringMap. 0)
(declare-sort vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. 0)
(declare-sort vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. 0)
(declare-sort vstd!seq.Seq<vstd!string.String.>. 0)
(declare-sort vstd!string.String. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. 0) (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. 0) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. 0) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. 0) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. 0) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. 0) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. 0) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. 0) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. 0) (rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. 0) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. 0) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. 0) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. 0) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. 0) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. 0) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. 0) (rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. 0) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. 0) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. 0) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. 0) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. 0) (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. 0) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. 0) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. 0) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. 0) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. 0) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. 0) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. 0) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. 0) (rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. 0) (rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder./StatefulSetBuilder )) ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder./StatefulSetBuilder )) ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/?0 rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/?0 rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/?0 rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/?0 rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/?0 rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/?0 rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.))) ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?api_resource rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?name vstd!string.String.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?namespace vstd!string.String.))) ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/?api_resource rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/?namespace vstd!string.String.))) ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?api_resource rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?namespace vstd!string.String.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?obj rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.))) ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?api_resource rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?name vstd!string.String.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?namespace vstd!string.String.))) ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?api_resource rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?name vstd!string.String.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?namespace vstd!string.String.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?obj rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.))) ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?api_resource rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?name vstd!string.String.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?namespace vstd!string.String.) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?obj rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.))) ((rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView./AffinityView )) ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/?0 rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/?0 rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/?0 rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/?0 rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/?0 rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/?0 rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.))) ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/?key rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.))) ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/?kind rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/?namespace Poly))) ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/?namespace Poly) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/?obj rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.))) ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/?key rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.))) ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?namespace Poly) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?name Poly) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?obj rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.))) ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?namespace Poly) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?name Poly) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?obj rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.))) ((rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView (rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/?kind rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.))) ((rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./ConfigMapKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./CustomResourceKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./DaemonSetKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./PersistentVolumeClaimKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./PodKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./RoleKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./RoleBindingKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./StatefulSetKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./ServiceKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./ServiceAccountKind ) (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./SecretKind )) ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?kind rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?name Poly) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?namespace Poly))) ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?env core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?image core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?name Poly) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?ports core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?volume_mounts core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?lifecycle core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?resources core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?readiness_probe core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?liveness_probe core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?command core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?image_pull_policy core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?args core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?security_context core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/?pre_stop core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/?exec_ core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?container_port Int) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?name core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?protocol core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?mount_path Poly) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?name Poly) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?read_only core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?sub_path core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?mount_propagation core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?exec_ core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?failure_threshold core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?initial_delay_seconds core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?period_seconds core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?success_threshold core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?tcp_socket core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?timeout_seconds core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView (rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/?command core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/?host core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/?port Int))) ((rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?name Poly) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?value core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?value_from core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/?field_ref core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView./SecurityContextView )) ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?kind rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?metadata rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?spec rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?status rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))) ((rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView/?match_labels core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Null ) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool/?0 Bool)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/?0 Int)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int/?0 Int)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/?0 Poly)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/?0 vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/?0 Poly)) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/?0 vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.))) ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?name core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?namespace core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?resource_version core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?uid core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?labels core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?annotations core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?owner_references core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?finalizers core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?deletion_timestamp core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?block_owner_deletion core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?controller core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?kind rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?name Poly) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?uid Int))) ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/?metadata rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/?spec core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/?status core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/?storage_class_name core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/?access_modes core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/?resources core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?affinity core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?containers vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?volumes core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?init_containers core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?service_account_name core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?tolerations core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?node_selector core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?runtime_class_name core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?dns_policy core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?priority_class_name core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?scheduler_name core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?security_context core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?host_network core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?termination_grace_period_seconds core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?image_pull_secrets core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView./PodSecurityContextView )) ((rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView./LocalObjectReferenceView )) ((rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/?metadata core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/?spec core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView./EmptyStatusView )) ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?limits core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?requests core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/?metadata rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/?spec core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/?status core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?replicas core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?selector rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?service_name Poly) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?template rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?volume_claim_templates core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?pod_management_policy core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?persistent_volume_claim_retention_policy core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/?when_deleted core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/?when_scaled core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView./StatefulSetStatusView (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView./StatefulSetStatusView/?ready_replicas core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView./TolerationView )) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?host_path core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?config_map core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?name Poly) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?projected core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?secret core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?downward_api core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?empty_dir core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/?medium core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/?size_limit core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView (rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/?path Poly))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/?name core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/?secret_name core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView (rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/?sources core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/?config_map core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/?secret core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/?items core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/?name core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/?items core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/?name core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/?key Poly) (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/?path Poly))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/?items core!option.Option.))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/?field_ref core!option.Option.) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/?path Poly))) ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/?field_path Poly) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/?api_version core!option.Option.))) ((rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/?reconcile_step rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/?latest_config_map_rv_opt core!option.Option.))) ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/?reconcile_step rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/?latest_config_map_rv_opt core!option.Option.))) ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?metadata rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?spec rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?status core!option.Option.))) ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?replicas Int) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?image Poly) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?persistence rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?rabbitmq_config core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?affinity core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?tolerations core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?labels Poly) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?annotations Poly) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?resources core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?pod_management_policy Poly) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?persistent_volume_claim_retention_policy core!option.Option.))) ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?additional_config core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?advanced_config core!option.Option.) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?env_config core!option.Option.))) ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/?storage_class_name Poly) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/?storage Poly))) ((rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./Init ) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/?0 rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/?1 rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./Done ) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./Error )) ((rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./HeadlessService ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./Service ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./ErlangCookieSecret ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./DefaultUserSecret ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./PluginsConfigMap ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./ServerConfigMap ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./ServiceAccount ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./Role ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./RoleBinding ) (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource./StatefulSet )) ((rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind./Get ) (rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind./Create ) (rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind./Update )) ((rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./MissingField ) (rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnexpectedType ) (rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError ) (rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./ExecError )) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/0 (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/0 (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/0 (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/0 (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/0 (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/0 (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/api_resource (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/name (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) vstd!string.String.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/namespace (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) vstd!string.String.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/api_resource (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/namespace (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) vstd!string.String.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/api_resource (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/namespace (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) vstd!string.String.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/obj (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/api_resource (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/name (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) vstd!string.String.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/namespace (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) vstd!string.String.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/api_resource (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/name (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) vstd!string.String.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/namespace (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) vstd!string.String.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/obj (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/api_resource (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/name (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) vstd!string.String.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/namespace (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) vstd!string.String.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/obj (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/0 (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/0 (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/0 (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/0 (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/0 (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/0 (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/key (rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.) rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/kind (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.) rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/namespace (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/namespace (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/obj (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/key (rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.) rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/namespace (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/name (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/obj (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/namespace (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/name (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/obj (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind (rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.) rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/kind (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/pre_stop (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/exec_ (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/container_port (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.) Int)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/command (rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/host (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/port (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.) Int)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/field_ref (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView/match_labels (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Bool)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Int)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Int)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Int)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/metadata (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/spec (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/status (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/storage_class_name (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/access_modes (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/resources (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/metadata (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/spec (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/status (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_deleted (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_scaled (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView./StatefulSetStatusView/ready_replicas (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/medium (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/size_limit (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/path (rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/name (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/secret_name (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/sources (rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/config_map (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/secret (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/items (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/name (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/items (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/name (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/key (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/path (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/items (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/field_ref (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) core!option.Option.)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/path (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/field_path (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/reconcile_step (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.) rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/reconcile_step (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.) rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/replicas (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Int)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/labels (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/additional_config (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) core!option.Option.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) Poly)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/0 (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/1 (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%alloc!alloc.Global. Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%vstd!string.String. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. Type)
(declare-const TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. Type)
(declare-const TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. Type)
(declare-const TYPE%rabbitmq_controller!vstd_ext.string_map.StringMap. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!alloc.Global. (alloc!alloc.Global.) Poly)
(declare-fun %Poly%alloc!alloc.Global. (Poly) alloc!alloc.Global.)
(declare-fun Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. (alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>. (alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. (alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>. (alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. (alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>. (alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>. (alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. (alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>. (alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>. (alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>.)
(declare-fun Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. (alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity. (rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. (rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.container.Container.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. (rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. (rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. (rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. (rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. (rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. (rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. (rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. (rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. (rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. (rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. (rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. (rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. (rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. (rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. (rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. (rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. (rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. (rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. (rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. (rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. (rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. (rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. (rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. (rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. (rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.)
(declare-fun Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. (rabbitmq_controller!vstd_ext.string_map.StringMap.) Poly)
(declare-fun %Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. (Poly) rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-fun Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly) vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>.)
(declare-fun Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. (vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!string.String.>. (vstd!seq.Seq<vstd!string.String.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!string.String.>. (Poly) vstd!seq.Seq<vstd!string.String.>.)
(declare-fun Poly%vstd!string.String. (vstd!string.String.) Poly)
(declare-fun %Poly%vstd!string.String. (Poly) vstd!string.String.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. (rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. (Poly) rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. (Poly) rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. (rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView. (rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. (rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. (rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)
(declare-fun Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. (rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.) Poly)
(declare-fun %Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. (Poly) rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)
(declare-fun Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.) Poly)
(declare-fun %Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (Poly) rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x alloc!alloc.Global.)) (! (= x (%Poly%alloc!alloc.Global. (Poly%alloc!alloc.Global. x))) :pattern ((Poly%alloc!alloc.Global. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%alloc!alloc.Global.) (= x (Poly%alloc!alloc.Global. (%Poly%alloc!alloc.Global. x)))) :pattern ((has_type x TYPE%alloc!alloc.Global.)) )))
(assert (forall ((x alloc!alloc.Global.)) (! (has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.) :pattern ((has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.)) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%vstd!string.String. $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%vstd!string.String. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%vstd!string.String. $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ TYPE%vstd!string.String. $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.Container.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.Container.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.)) )))
(assert (forall ((x rabbitmq_controller!vstd_ext.string_map.StringMap.)) (! (= x (%Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. x))) :pattern ((Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!vstd_ext.string_map.StringMap.) (= x (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. (%Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!vstd_ext.string_map.StringMap.)) )))
(assert (forall ((x rabbitmq_controller!vstd_ext.string_map.StringMap.)) (! (has_type (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. x) TYPE%rabbitmq_controller!vstd_ext.string_map.StringMap.) :pattern ((has_type (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. x) TYPE%rabbitmq_controller!vstd_ext.string_map.StringMap.)) )))
(assert (forall ((x vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (= x (%Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x))) :pattern ((Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (= x (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (%Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.Container.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>.)) (! (= x (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. x))) :pattern ((Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (= x (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.))) )))
(assert (forall ((x vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>.)) (! (has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((has_type (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. x) (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.))) )))
(assert (forall ((x vstd!seq.Seq<vstd!string.String.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!string.String.>. (Poly%vstd!seq.Seq<vstd!string.String.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!string.String.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%vstd!string.String.)) (= x (Poly%vstd!seq.Seq<vstd!string.String.>. (%Poly%vstd!seq.Seq<vstd!string.String.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%vstd!string.String.))) )))
(assert (forall ((x vstd!seq.Seq<vstd!string.String.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!string.String.>. x) (TYPE%vstd!seq.Seq. $ TYPE%vstd!string.String.)) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!string.String.>. x) (TYPE%vstd!seq.Seq. $ TYPE%vstd!string.String.))) )))
(assert (forall ((x vstd!string.String.)) (! (= x (%Poly%vstd!string.String. (Poly%vstd!string.String. x))) :pattern ((Poly%vstd!string.String. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!string.String.) (= x (Poly%vstd!string.String. (%Poly%vstd!string.String. x)))) :pattern ((has_type x TYPE%vstd!string.String.)) )))
(assert (forall ((x vstd!string.String.)) (! (has_type (Poly%vstd!string.String. x) TYPE%vstd!string.String.) :pattern ((has_type (Poly%vstd!string.String. x) TYPE%vstd!string.String.)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))) )))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. (Poly%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. (%Poly%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. x) TYPE%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. x) TYPE%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. (Poly%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. (%Poly%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. x) TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. x) TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/0 x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/0 x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/0 x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/0 x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/0 x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/0 x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/api_resource x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?api_resource x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/api_resource x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/name x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/name x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/namespace x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/namespace x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/api_resource x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/?api_resource x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/api_resource x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/namespace x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/namespace x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/api_resource x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?api_resource x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/api_resource x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/namespace x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/namespace x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/obj x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/?obj x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/obj x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/api_resource x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?api_resource x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/api_resource x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/name x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/name x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/namespace x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/namespace x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/api_resource x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?api_resource x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/api_resource x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/name x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/name x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/namespace x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/namespace x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/obj x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/?obj x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/obj x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/api_resource x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?api_resource x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/api_resource x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/name x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/name x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/namespace x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/namespace x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/obj x) (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/?obj x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/obj x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. x) TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) (! (=> (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. _0!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) (! (=> (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. _0!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) (! (=> (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. _0!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) (! (=> (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. _0!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (! (=> (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. _0!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((_0! rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) (! (=> (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. _0!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) )))
(assert (forall ((_key! rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (=> (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. _key!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest _key!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest _key!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/key x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/?key x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/key (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest/key (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) )))
(assert (forall ((_kind! rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (_namespace! Poly)) (! (=> (has_type _namespace! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest _kind! _namespace!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest _kind! _namespace!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/kind x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/?kind x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/kind x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/namespace x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) )))
(assert (forall ((_namespace! Poly) (_obj! rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (=> (and (has_type _namespace! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. _obj!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest _namespace! _obj!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest _namespace! _obj!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/namespace x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/obj x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/?obj x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/obj x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/obj (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest/obj (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) )))
(assert (forall ((_key! rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (=> (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. _key!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest _key!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest _key!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/key x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/?key x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/key (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest/key (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) )))
(assert (forall ((_namespace! Poly) (_name! Poly) (_obj! rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (=> (and (has_type _namespace! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. _obj!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest _namespace! _name! _obj!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest _namespace! _name! _obj!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/namespace x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/name x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/obj x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/?obj x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/obj x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/obj (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest/obj (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) )))
(assert (forall ((_namespace! Poly) (_name! Poly) (_obj! rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (=> (and (has_type _namespace! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. _obj!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest _namespace! _name! _obj!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest _namespace! _name! _obj!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/namespace x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/name x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/obj x) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/?obj x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/obj x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/obj (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest/obj (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind x) (rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/?kind x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((_kind! rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (_name! Poly) (_namespace! Poly)) (! (=> (and (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _namespace! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef _kind! _name! _namespace!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef _kind! _name! _namespace!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/kind x) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?kind x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/kind x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name x) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace x) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((_env! core!option.Option.) (_image! core!option.Option.) (_name! Poly) (_ports! core!option.Option.) (_volume_mounts! core!option.Option.) (_lifecycle! core!option.Option.) (_resources! core!option.Option.) (_readiness_probe! core!option.Option.) (_liveness_probe! core!option.Option.) (_command! core!option.Option.) (_image_pull_policy! core!option.Option.) (_args! core!option.Option.) (_security_context! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _env!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.))) (has_type (Poly%core!option.Option. _image!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _ports!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.))) (has_type (Poly%core!option.Option. _volume_mounts!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.))) (has_type (Poly%core!option.Option. _lifecycle!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)) (has_type (Poly%core!option.Option. _resources!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (has_type (Poly%core!option.Option. _readiness_probe!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) (has_type (Poly%core!option.Option. _liveness_probe!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) (has_type (Poly%core!option.Option. _command!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _image_pull_policy!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _args!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _security_context!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView _env! _image! _name! _ports! _volume_mounts! _lifecycle! _resources! _readiness_probe! _liveness_probe! _command! _image_pull_policy! _args! _security_context!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView _env! _image! _name! _ports! _volume_mounts! _lifecycle! _resources! _readiness_probe! _liveness_probe! _command! _image_pull_policy! _args! _security_context!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?env x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?image x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?ports x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?volume_mounts x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?lifecycle x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?resources x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?readiness_probe x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?liveness_probe x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?command x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?image_pull_policy x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?args x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/?security_context x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)) )))
(assert (forall ((_pre_stop! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _pre_stop!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView _pre_stop!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView _pre_stop!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/pre_stop x) (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/?pre_stop x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/pre_stop x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/pre_stop (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView/pre_stop (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) )))
(assert (forall ((_exec_! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _exec_!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView _exec_!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView _exec_!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/exec_ x) (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/?exec_ x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/exec_ x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/exec_ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView/exec_ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) )))
(assert (forall ((_container_port! Int) (_name! core!option.Option.) (_protocol! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _protocol!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView _container_port! _name! _protocol!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView _container_port! _name! _protocol!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/container_port x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?container_port x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/container_port x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/?protocol x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((_mount_path! Poly) (_name! Poly) (_read_only! core!option.Option.) (_sub_path! core!option.Option.) (_mount_propagation! core!option.Option.)) (! (=> (and (has_type _mount_path! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _read_only!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _sub_path!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _mount_propagation!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView _mount_path! _name! _read_only! _sub_path! _mount_propagation!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView _mount_path! _name! _read_only! _sub_path! _mount_propagation!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path x) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?mount_path x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only x) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?read_only x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path x) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?sub_path x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation x) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/?mount_propagation x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((_exec_! core!option.Option.) (_failure_threshold! core!option.Option.) (_initial_delay_seconds! core!option.Option.) (_period_seconds! core!option.Option.) (_success_threshold! core!option.Option.) (_tcp_socket! core!option.Option.) (_timeout_seconds! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _exec_!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) (has_type (Poly%core!option.Option. _failure_threshold!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _initial_delay_seconds!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _period_seconds!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _success_threshold!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _tcp_socket!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) (has_type (Poly%core!option.Option. _timeout_seconds!) (TYPE%core!option.Option. $ INT))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView _exec_! _failure_threshold! _initial_delay_seconds! _period_seconds! _success_threshold! _tcp_socket! _timeout_seconds!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView _exec_! _failure_threshold! _initial_delay_seconds! _period_seconds! _success_threshold! _tcp_socket! _timeout_seconds!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?exec_ x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?failure_threshold x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?initial_delay_seconds x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?period_seconds x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?success_threshold x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?tcp_socket x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/?timeout_seconds x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) )))
(assert (forall ((_command! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _command!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView _command!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView _command!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/command x) (rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/?command x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/command x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) )))
(assert (forall ((_host! core!option.Option.) (_port! Int)) (! (=> (has_type (Poly%core!option.Option. _host!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView _host! _port!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView _host! _port!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/host x) (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/?host x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/host x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/host (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/host (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/port x) (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/?port x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/port x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) )))
(assert (forall ((_name! Poly) (_value! core!option.Option.) (_value_from! core!option.Option.)) (! (=> (and (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _value_from!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView _name! _value! _value_from!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView _name! _value! _value_from!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value x) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?value x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from x) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/?value_from x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) )))
(assert (forall ((_field_ref! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _field_ref!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView _field_ref!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView _field_ref!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/field_ref x) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/?field_ref x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/field_ref x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/field_ref (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView/field_ref (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.SecurityContextView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((_kind! rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (_metadata! rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_spec! rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (_status! rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (and (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. _spec!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. _status!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView _kind! _metadata! _spec! _status!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView _kind! _metadata! _spec! _status!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind x) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?kind x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata x) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?metadata x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec x) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?spec x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status x) (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/?status x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)) )))
(assert (forall ((_match_labels! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _match_labels!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView _match_labels!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView _match_labels!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView/match_labels x) (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView/?match_labels x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView/match_labels x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView/match_labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView/match_labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Null) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.))
(assert (forall ((_0! Bool)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Bool/0 x)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (<= 0 (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Nat/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((_0! Int)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Int/0 x)) )))
(assert (forall ((_0! Poly)) (! (=> (has_type _0! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./String/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((_0! vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x)) )))
(assert (forall ((_0! Poly)) (! (=> (has_type _0! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./StringStringMap/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((_0! vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object _0!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x) (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/?0 x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x)) )))
(define-fun is-rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array_ ((c rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) Bool ((_ is rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array) c))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (is-rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array_ x) (height_lt (height (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x))) (height (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((height (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Array/0 x)))) )))
(define-fun is-rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object_ ((c rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) Bool ((_ is rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object) c))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (is-rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object_ x) (height_lt (height (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x))) (height (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((height (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x)))) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) (! (=> (is-rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x)))) (height (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<nat./rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.>. (rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value./Object/0 x))))) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((_name! core!option.Option.) (_namespace! core!option.Option.) (_resource_version! core!option.Option.) (_uid! core!option.Option.) (_labels! core!option.Option.) (_annotations! core!option.Option.) (_owner_references! core!option.Option.) (_finalizers! core!option.Option.) (_deletion_timestamp! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _namespace!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _resource_version!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _uid!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _labels!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _annotations!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _owner_references!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) (has_type (Poly%core!option.Option. _finalizers!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _deletion_timestamp!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView _name! _namespace! _resource_version! _uid! _labels! _annotations! _owner_references! _finalizers! _deletion_timestamp!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView _name! _namespace! _resource_version! _uid! _labels! _annotations! _owner_references! _finalizers! _deletion_timestamp!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?namespace x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?resource_version x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?uid x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?labels x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?annotations x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?owner_references x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?finalizers x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp x) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/?deletion_timestamp x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((_block_owner_deletion! core!option.Option.) (_controller! core!option.Option.) (_kind! rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) (_name! Poly) (_uid! Int)) (! (=> (and (has_type (Poly%core!option.Option. _block_owner_deletion!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _controller!) (TYPE%core!option.Option. $ BOOL)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView _block_owner_deletion! _controller! _kind! _name! _uid!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView _block_owner_deletion! _controller! _kind! _name! _uid!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion x) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?block_owner_deletion x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/block_owner_deletion (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller x) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?controller x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/controller (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind x) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?kind x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/kind x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid x) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/?uid x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView/uid x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) )))
(assert (forall ((_metadata! rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_spec! core!option.Option.) (_status! core!option.Option.)) (! (=> (and (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. _spec!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) (has_type (Poly%core!option.Option. _status!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView _metadata! _spec! _status!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView _metadata! _spec! _status!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/metadata x) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/?metadata x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/spec x) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/?spec x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/status x) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/?status x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/status x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) )))
(assert (forall ((_storage_class_name! core!option.Option.) (_access_modes! core!option.Option.) (_resources! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _storage_class_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _access_modes!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _resources!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView _storage_class_name! _access_modes! _resources!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView _storage_class_name! _access_modes! _resources!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/storage_class_name x) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/?storage_class_name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/storage_class_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/storage_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/storage_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/access_modes x) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/?access_modes x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/access_modes x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/access_modes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/access_modes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/resources x) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/?resources x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/resources x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((_affinity! core!option.Option.) (_containers! vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>.) (_volumes! core!option.Option.) (_init_containers! core!option.Option.) (_service_account_name! core!option.Option.) (_tolerations! core!option.Option.) (_node_selector! core!option.Option.) (_runtime_class_name! core!option.Option.) (_dns_policy! core!option.Option.) (_priority_class_name! core!option.Option.) (_scheduler_name! core!option.Option.) (_security_context! core!option.Option.) (_host_network! core!option.Option.) (_termination_grace_period_seconds! core!option.Option.) (_image_pull_secrets! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _affinity!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (has_type (Poly%core!option.Option. _volumes!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.))) (has_type (Poly%core!option.Option. _init_containers!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.))) (has_type (Poly%core!option.Option. _service_account_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _tolerations!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) (has_type (Poly%core!option.Option. _node_selector!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _runtime_class_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _dns_policy!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _priority_class_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _scheduler_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _security_context!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)) (has_type (Poly%core!option.Option. _host_network!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _termination_grace_period_seconds!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%core!option.Option. _image_pull_secrets!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView _affinity! _containers! _volumes! _init_containers! _service_account_name! _tolerations! _node_selector! _runtime_class_name! _dns_policy! _priority_class_name! _scheduler_name! _security_context! _host_network! _termination_grace_period_seconds! _image_pull_secrets!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView _affinity! _containers! _volumes! _init_containers! _service_account_name! _tolerations! _node_selector! _runtime_class_name! _dns_policy! _priority_class_name! _scheduler_name! _security_context! _host_network! _termination_grace_period_seconds! _image_pull_secrets!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?affinity x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?containers x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers x)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?volumes x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?init_containers x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?service_account_name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?tolerations x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?node_selector x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?runtime_class_name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?dns_policy x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?priority_class_name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?scheduler_name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?security_context x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?host_network x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?termination_grace_period_seconds x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets x) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/?image_pull_secrets x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSecurityContextView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.LocalObjectReferenceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) )))
(assert (forall ((_metadata! core!option.Option.) (_spec! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _metadata!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (has_type (Poly%core!option.Option. _spec!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView _metadata! _spec!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView _metadata! _spec!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/metadata x) (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/?metadata x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/spec x) (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/?spec x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((_limits! core!option.Option.) (_requests! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _limits!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%core!option.Option. _requests!) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView _limits! _requests!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView _limits! _requests!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits x) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?limits x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests x) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/?requests x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) )))
(assert (forall ((_metadata! rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_spec! core!option.Option.) (_status! core!option.Option.)) (! (=> (and (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%core!option.Option. _spec!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) (has_type (Poly%core!option.Option. _status!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView _metadata! _spec! _status!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView _metadata! _spec! _status!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/?metadata x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/?spec x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/status x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/?status x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/status x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) )))
(assert (forall ((_replicas! core!option.Option.) (_selector! rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.) (_service_name! Poly) (_template! rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.) (_volume_claim_templates! core!option.Option.) (_pod_management_policy! core!option.Option.) (_persistent_volume_claim_retention_policy! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _replicas!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. _selector!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.) (has_type _service_name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. _template!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.) (has_type (Poly%core!option.Option. _volume_claim_templates!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.))) (has_type (Poly%core!option.Option. _pod_management_policy!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _persistent_volume_claim_retention_policy!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView _replicas! _selector! _service_name! _template! _volume_claim_templates! _pod_management_policy! _persistent_volume_claim_retention_policy!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView _replicas! _selector! _service_name! _template! _volume_claim_templates! _pod_management_policy! _persistent_volume_claim_retention_policy!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?replicas x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?selector x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?service_name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?template x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?volume_claim_templates x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?pod_management_policy x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/?persistent_volume_claim_retention_policy x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) )))
(assert (forall ((_when_deleted! core!option.Option.) (_when_scaled! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _when_deleted!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _when_scaled!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView _when_deleted! _when_scaled!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView _when_deleted! _when_scaled!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_deleted x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/?when_deleted x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_deleted x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_deleted (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_deleted (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_scaled x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/?when_scaled x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_scaled x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_scaled (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView./StatefulSetPersistentVolumeClaimRetentionPolicyView/when_scaled (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.)) )))
(assert (forall ((_ready_replicas! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _ready_replicas!) (TYPE%core!option.Option. $ INT)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView./StatefulSetStatusView _ready_replicas!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView./StatefulSetStatusView _ready_replicas!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView./StatefulSetStatusView/ready_replicas x) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView./StatefulSetStatusView/?ready_replicas x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView./StatefulSetStatusView/ready_replicas x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView./StatefulSetStatusView/ready_replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. x))) (TYPE%core!option.Option. $ INT))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView./StatefulSetStatusView/ready_replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. x) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((_host_path! core!option.Option.) (_config_map! core!option.Option.) (_name! Poly) (_projected! core!option.Option.) (_secret! core!option.Option.) (_downward_api! core!option.Option.) (_empty_dir! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _host_path!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) (has_type (Poly%core!option.Option. _config_map!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) (has_type _name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _projected!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) (has_type (Poly%core!option.Option. _secret!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) (has_type (Poly%core!option.Option. _downward_api!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) (has_type (Poly%core!option.Option. _empty_dir!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView _host_path! _config_map! _name! _projected! _secret! _downward_api! _empty_dir!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView _host_path! _config_map! _name! _projected! _secret! _downward_api! _empty_dir!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?host_path x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?config_map x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?projected x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?secret x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?downward_api x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/?empty_dir x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) )))
(assert (forall ((_medium! core!option.Option.) (_size_limit! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _medium!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (has_type (Poly%core!option.Option. _size_limit!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView _medium! _size_limit!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView _medium! _size_limit!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/medium x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/?medium x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/medium x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/medium (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x))) (TYPE%core!option.Option. $ TYPE%vstd!string.String.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/medium (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/size_limit x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/?size_limit x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/size_limit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/size_limit (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView/size_limit (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) )))
(assert (forall ((_path! Poly)) (! (=> (has_type _path! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView _path!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView _path!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/path x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/?path x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView./HostPathVolumeSourceView/path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.HostPathVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) )))
(assert (forall ((_name! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView _name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView _name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) )))
(assert (forall ((_secret_name! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _secret_name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView _secret_name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView _secret_name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/secret_name x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/?secret_name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/secret_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/secret_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView/secret_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) )))
(assert (forall ((_sources! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _sources!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView _sources!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView _sources!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/sources x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/?sources x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/sources x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/sources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView/sources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) )))
(assert (forall ((_config_map! core!option.Option.) (_secret! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _config_map!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) (has_type (Poly%core!option.Option. _secret!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView _config_map! _secret!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView _config_map! _secret!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/config_map x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/?config_map x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/config_map x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/config_map (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/config_map (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/secret x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/?secret x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/secret x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/secret (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/secret (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) )))
(assert (forall ((_items! core!option.Option.) (_name! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _items!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.))) (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView _items! _name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView _items! _name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/items x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/?items x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/items x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/items (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/items (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) )))
(assert (forall ((_items! core!option.Option.) (_name! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _items!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.))) (has_type (Poly%core!option.Option. _name!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView _items! _name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView _items! _name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/items x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/?items x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/items x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/items (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/items (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/name x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/?name x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) )))
(assert (forall ((_key! Poly) (_path! Poly)) (! (=> (and (has_type _key! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _path! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView _key! _path!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView _key! _path!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/key x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/?key x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/key (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/key (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/path x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/?path x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) )))
(assert (forall ((_items! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _items!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView _items!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView _items!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/items x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/?items x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/items x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/items (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView/items (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) )))
(assert (forall ((_field_ref! core!option.Option.) (_path! Poly)) (! (=> (and (has_type (Poly%core!option.Option. _field_ref!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (has_type _path! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView _field_ref! _path!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView _field_ref! _path!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/field_ref x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/?field_ref x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/field_ref x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/field_ref (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/field_ref (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/path x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/?path x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) )))
(assert (forall ((_field_path! Poly) (_api_version! core!option.Option.)) (! (=> (and (has_type _field_path! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _api_version!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView _field_path! _api_version!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView _field_path! _api_version!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/field_path x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/?field_path x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/field_path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/field_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/field_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version x) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/?api_version x)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. x)) (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.)) )))
(assert (forall ((_reconcile_step! rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) (_latest_config_map_rv_opt! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _latest_config_map_rv_opt!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState _reconcile_step! _latest_config_map_rv_opt!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.)) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState _reconcile_step! _latest_config_map_rv_opt!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/reconcile_step x) (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/?reconcile_step x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/reconcile_step x)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt x) (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/?latest_config_map_rv_opt x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. x))) (TYPE%core!option.Option. $ TYPE%vstd!string.String.))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) )))
(assert (forall ((_reconcile_step! rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) (_latest_config_map_rv_opt! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _latest_config_map_rv_opt!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState _reconcile_step! _latest_config_map_rv_opt!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState _reconcile_step! _latest_config_map_rv_opt!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/reconcile_step x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/?reconcile_step x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/reconcile_step x)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/?latest_config_map_rv_opt x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) )))
(assert (forall ((_metadata! rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (_spec! rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (_status! core!option.Option.)) (! (=> (and (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. _metadata!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. _spec!) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. _status!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView _metadata! _spec! _status!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView _metadata! _spec! _status!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?metadata x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x))) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?spec x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x))) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/?status x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((_replicas! Int) (_image! Poly) (_persistence! rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (_rabbitmq_config! core!option.Option.) (_affinity! core!option.Option.) (_tolerations! core!option.Option.) (_labels! Poly) (_annotations! Poly) (_resources! core!option.Option.) (_pod_management_policy! Poly) (_persistent_volume_claim_retention_policy! core!option.Option.)) (! (=> (and (has_type _image! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. _persistence!) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (has_type (Poly%core!option.Option. _rabbitmq_config!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) (has_type (Poly%core!option.Option. _affinity!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (has_type (Poly%core!option.Option. _tolerations!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) (has_type _labels! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type _annotations! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _resources!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (has_type _pod_management_policy! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type (Poly%core!option.Option. _persistent_volume_claim_retention_policy!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.))) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView _replicas! _image! _persistence! _rabbitmq_config! _affinity! _tolerations! _labels! _annotations! _resources! _pod_management_policy! _persistent_volume_claim_retention_policy!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView _replicas! _image! _persistence! _rabbitmq_config! _affinity! _tolerations! _labels! _annotations! _resources! _pod_management_policy! _persistent_volume_claim_retention_policy!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/replicas x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?replicas x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/replicas x)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?image x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?persistence x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?rabbitmq_config x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?affinity x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?tolerations x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/labels x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?labels x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/labels x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/labels (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/labels (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?annotations x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?resources x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?pod_management_policy x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/?persistent_volume_claim_retention_policy x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x))) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) )))
(assert (forall ((_additional_config! core!option.Option.) (_advanced_config! core!option.Option.) (_env_config! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _additional_config!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _advanced_config!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%core!option.Option. _env_config!) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView _additional_config! _advanced_config! _env_config!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView _additional_config! _advanced_config! _env_config!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/additional_config x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?additional_config x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/additional_config x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/additional_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/additional_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?advanced_config x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/?env_config x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.) (has_type (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x))) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) )))
(assert (forall ((_storage_class_name! Poly) (_storage! Poly)) (! (=> (and (has_type _storage_class_name! (TYPE%vstd!seq.Seq. $ CHAR)) (has_type _storage! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView _storage_class_name! _storage!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView _storage_class_name! _storage!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/?storage_class_name x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage x) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/?storage x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.) (has_type (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. x)) (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/0 x) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/?0 x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/0 x)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/1 x) (rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/?1 x)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./AfterKRequestStep/1 x)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.SubResource.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)) (! (= x (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. x))) :pattern ((Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.) (= x (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)) )))
(assert (forall ((x rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)) (! (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.) :pattern ((has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind. x) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.step.ActionKind.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) (! (= x (%Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x))) :pattern ((Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.) (= x (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. (%Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x)))) :pattern ((has_type x TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) )))
(assert (forall ((x rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) (! (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x) TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.) :pattern ((has_type (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. x) TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView. (Dcr Type) Bool)
(declare-fun tr_bound%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder. (Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder. (Dcr Type Dcr Type Dcr Type) Bool)
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (= (proj%%vstd!view.View./V $ (SINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 64)) (SINT 64)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.))
(assert (= (proj%%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.))
(assert (= (proj%%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.))
(assert (= (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) $))
(assert (= (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)))
(assert (= (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) $))
(assert (= (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)))
(assert (= (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) $))
(assert (= (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)))
(assert (= (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) $))
(assert (= (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetStatusView.)))
(assert (= (proj%%vstd!view.View./V $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.))
(assert (= (proj%%vstd!view.View./V $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.))
(assert (= (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) $))
(assert (= (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.))
(assert (= (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) $))
(assert (= (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource.EmptyStatusView.)))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::is_ok")
(declare-fun vstd!std_specs.result.is_ok.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::map_values")
(declare-fun vstd!seq_lib.impl&%0.map_values.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::filter")
(declare-fun vstd!seq_lib.impl&%0.filter.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::check_argument_is_seq")
(declare-fun vstd!seq_lib.check_argument_is_seq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::string::impl&%0::view")
(declare-fun vstd!string.impl&%0.view.? (Poly) Poly)
(set-info :comment ";; Function-Decl vstd::string::impl&%0::is_ascii")
(declare-fun vstd!string.impl&%0.is_ascii.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::string::impl&%1::view")
(declare-fun vstd!string.impl&%1.view.? (Poly) Poly)
(set-info :comment ";; Function-Decl vstd::string::impl&%1::is_ascii")
(declare-fun vstd!string.impl&%1.is_ascii.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::model::resource::common::make_labels")
(declare-fun rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels.? (Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::model::resource::common::make_owner_references")
(declare-fun rabbitmq_controller!rabbitmq_controller.model.resource.common.make_owner_references.? (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>.)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::make_stateful_set_key")
(declare-fun rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_key.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::make_stateful_set_name")
(declare-fun rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name.? (Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::sts_restart_annotation")
(declare-fun rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.sts_restart_annotation.? (Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::update_stateful_set")
(declare-fun rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.update_stateful_set.? (Poly Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::make_stateful_set")
(declare-fun rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::make_rabbitmq_pod_spec")
(declare-fun rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_rabbitmq_pod_spec.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::make_env_vars")
(declare-fun rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_env_vars.? (Poly) vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::affinity::Affinity::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.affinity.impl&%0.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::api_method::opt_req_to_view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::api_resource::ApiResource::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.api_resource.impl&%0.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::container::Container::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::container::ContainerPort::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%1.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::container::VolumeMount::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::container::Probe::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::container::ExecAction::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::container::TCPSocketAction::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::container::Lifecycle::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::container::LifecycleHandler::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::container::EnvVar::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%8.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::container::EnvVarSource::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%9.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::label_selector::LabelSelector::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::owner_reference::OwnerReference::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::persistent_volume_claim::PersistentVolumeClaim::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::persistent_volume_claim::PersistentVolumeClaimSpec::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::pod::PodSpec::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::pod_template_spec::PodTemplateSpec::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::resource_requirements::ResourceRequirements::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetPersistentVolumeClaimRetentionPolicy::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%5.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::toleration::Toleration::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.toleration.impl&%0.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::Volume::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::EmptyDirVolumeSource::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%1.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::ConfigMapVolumeSource::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::SecretVolumeSource::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::ProjectedVolumeSource::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::VolumeProjection::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::ConfigMapProjection::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::SecretProjection::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::KeyToPath::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::DownwardAPIVolumeSource::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::DownwardAPIVolumeFile::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::exec::volume::ObjectFieldSelector::view")
(declare-fun rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.view.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_env")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_env.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_image")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_image.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_ports")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_ports.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_volume_mounts")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_volume_mounts.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_lifecycle")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_lifecycle.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_resources")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::unset_resources")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.unset_resources.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_readiness_probe")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_readiness_probe.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_command")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_command.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::LifecycleView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::LifecycleView::set_pre_stop")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.set_pre_stop.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::LifecycleHandlerView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::LifecycleHandlerView::set_exec")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.set_exec.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerPortView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerPortView::set_container_port")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerPortView::set_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::VolumeMountView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::VolumeMountView::set_mount_path")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::VolumeMountView::set_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::VolumeMountView::set_sub_path")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_failure_threshold")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_failure_threshold.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_initial_delay_seconds")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_initial_delay_seconds.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_period_seconds")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_period_seconds.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_success_threshold")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_success_threshold.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_tcp_socket")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_tcp_socket.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_timeout_seconds")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_timeout_seconds.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ExecActionView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::ExecActionView::set_command")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.set_command.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::TCPSocketActionView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::TCPSocketActionView::set_port")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.set_port.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarView::set_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.set_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarView::overwrite_value")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarView::overwrite_value_from")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value_from.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarSourceView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarSourceView::set_field_ref")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.set_field_ref.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::label_selector::LabelSelectorView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::label_selector::LabelSelectorView::set_match_labels")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.set_match_labels.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::owner_references_only_contains")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.owner_references_only_contains.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_namespace")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_labels")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_annotations")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_owner_references")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::unset_finalizers")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimView::set_metadata")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_metadata.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimView::set_spec")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_spec.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimSpecView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimSpecView::set_access_modes")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_access_modes.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimSpecView::set_resources")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_resources.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimSpecView::set_storage_class_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_storage_class_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_affinity")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_affinity.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::unset_affinity")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_affinity.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_containers")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_containers.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_volumes")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_volumes.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_init_containers")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_init_containers.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_service_account_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_service_account_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_tolerations")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_tolerations.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::unset_tolerations")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_tolerations.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_termination_grace_period_seconds")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_termination_grace_period_seconds.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod_template_spec::PodTemplateSpecView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod_template_spec::PodTemplateSpecView::set_metadata")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_metadata.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::pod_template_spec::PodTemplateSpecView::set_spec")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_spec.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? (Dcr Type) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::kind")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? (Dcr Type) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_spec")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_spec")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_status")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_status")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? (Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource_requirements::ResourceRequirementsView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource_requirements::ResourceRequirementsView::set_limits")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_limits.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::resource_requirements::ResourceRequirementsView::set_requests")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_requests.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetView::set_metadata")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_metadata.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetView::set_spec")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_spec.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_replicas")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_replicas.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_selector")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_selector.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_service_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_service_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_template")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_template.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_volume_claim_templates")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_volume_claim_templates.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_pod_management_policy")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pod_management_policy.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_pvc_retention_policy")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pvc_retention_policy.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::unset_pvc_retention_policy")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.unset_pvc_retention_policy.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_config_map")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_config_map.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_projected")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_projected.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_secret")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_empty_dir")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_downward_api")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_downward_api.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::EmptyDirVolumeSourceView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::ConfigMapVolumeSourceView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::ConfigMapVolumeSourceView::set_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.set_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::SecretVolumeSourceView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::SecretVolumeSourceView::set_secret_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::ProjectedVolumeSourceView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::ProjectedVolumeSourceView::set_sources")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.set_sources.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeProjectionView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeProjectionView::set_config_map")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_config_map.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeProjectionView::set_secret")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_secret.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::ConfigMapProjectionView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::ConfigMapProjectionView::set_items")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_items.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::ConfigMapProjectionView::set_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::SecretProjectionView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::SecretProjectionView::set_items")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_items.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::SecretProjectionView::set_name")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_name.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::KeyToPathView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::KeyToPathView::set_key")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::KeyToPathView::set_path")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::DownwardAPIVolumeSourceView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::DownwardAPIVolumeSourceView::set_items")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.set_items.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::DownwardAPIVolumeFileView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::DownwardAPIVolumeFileView::set_field_ref")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_field_ref.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::DownwardAPIVolumeFileView::set_path")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_path.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::ObjectFieldSelectorView::default")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::ObjectFieldSelectorView::set_field_path")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::kubernetes_api_objects::spec::volume::ObjectFieldSelectorView::set_api_version")
(declare-fun rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_api_version.? (Poly Poly) rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::view")
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqConfig::view")
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.view.? (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterPersistenceSpec::view")
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.view.? (Poly) rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::well_formed")
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? (Poly) Bool)
(set-info :comment ";; Function-Decl rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::controller_owner_ref")
(declare-fun rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? (Poly) rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)
(set-info :comment ";; Function-Decl rabbitmq_controller::reconciler::exec::resource_builder::ResourceBuilder::requirements")
(declare-fun rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements%default%.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::reconciler::exec::resource_builder::resource_res_to_view")
(declare-fun rabbitmq_controller!reconciler.exec.resource_builder.resource_res_to_view.? (Dcr Type Poly) core!result.Result.)
(set-info :comment ";; Function-Decl rabbitmq_controller::reconciler::spec::resource_builder::ResourceBuilder::get_request")
(declare-fun rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::reconciler::spec::resource_builder::ResourceBuilder::make")
(declare-fun rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.make%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::reconciler::spec::resource_builder::ResourceBuilder::update")
(declare-fun rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.update%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::reconciler::spec::resource_builder::ResourceBuilder::state_after_create")
(declare-fun rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::reconciler::spec::resource_builder::ResourceBuilder::state_after_update")
(declare-fun rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl rabbitmq_controller::vstd_ext::string_map::StringMap::view")
(declare-fun rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly) Poly)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::default")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? Self%&. Self%&) Self%&) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::kind")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind.) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? Self%&. Self%& self!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal")
(assert (forall ((Self%&. Dcr) (Self%& Type) (obj! Poly)) (! (=> (has_type obj! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& obj!) (TYPE%core!result.Result. Self%&. Self%& $ TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? Self%&. Self%& obj!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::get_Ok_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!) T&)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? Self%&. Self%& T&. T& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::get_Ok_0")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.get_Ok_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.get_Ok_0.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (core!result.Result./Ok/0 (%Poly%core!result.Result. self!))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (s! Poly)) (! (=> (has_type s! (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec Self%&. Self%&)) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? Self%&. Self%& s!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? Self%&. Self%& s!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly)) (! (=> (has_type v! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? Self%&. Self%& v!) (TYPE%core!result.Result. (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec Self%&. Self%&) (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Spec Self%&. Self%&) $ TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? Self%&. Self%& v!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::marshal_status")
(assert (forall ((Self%&. Dcr) (Self%& Type) (s! Poly)) (! (=> (has_type s! (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status Self%&. Self%&)) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? Self%&. Self%& s!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? Self%&. Self%& s!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource::ResourceView::unmarshal_status")
(assert (forall ((Self%&. Dcr) (Self%& Type) (v! Poly)) (! (=> (has_type v! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value.) (has_type (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? Self%&. Self%& v!) (TYPE%core!result.Result. (proj%%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status Self%&. Self%&) (proj%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView./Status Self%&. Self%&) $ TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? Self%&. Self%& v!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::reconciler::spec::resource_builder::ResourceBuilder::get_request")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (cr! Poly)) (! (=> (has_type cr! K&) (has_type (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? Self%&. Self%& K&. K& T&. T& cr!) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest.)) :pattern ((rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? Self%&. Self%& K&. K& T&. T& cr!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::reconciler::spec::resource_builder::ResourceBuilder::make")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (cr! Poly) (state! Poly)) (! (=> (and (has_type cr! K&) (has_type state! T&)) (has_type (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? Self%&. Self%& K&. K& T&. T& cr! state!) (TYPE%core!result.Result. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. $ TYPE%tuple%0.))) :pattern ((rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? Self%&. Self%& K&. K& T&. T& cr! state!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::reconciler::spec::resource_builder::ResourceBuilder::update")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (cr! Poly) (state! Poly) (obj! Poly)) (! (=> (and (has_type cr! K&) (has_type state! T&) (has_type obj! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.)) (has_type (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? Self%&. Self%& K&. K& T&. T& cr! state! obj!) (TYPE%core!result.Result. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. $ TYPE%tuple%0.))) :pattern ((rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? Self%&. Self%& K&. K& T&. T& cr! state! obj!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::reconciler::spec::resource_builder::ResourceBuilder::state_after_create")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (cr! Poly) (obj! Poly) (state! Poly)) (! (=> (and (has_type cr! K&) (has_type obj! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type state! T&)) (has_type (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? Self%&. Self%& K&. K& T&. T& cr! obj! state!) (TYPE%core!result.Result. $ (TYPE%tuple%2. T&. T& $ (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) $ TYPE%tuple%0.))) :pattern ((rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? Self%&. Self%& K&. K& T&. T& cr! obj! state!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::reconciler::spec::resource_builder::ResourceBuilder::state_after_update")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (cr! Poly) (obj! Poly) (state! Poly)) (! (=> (and (has_type cr! K&) (has_type obj! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView.) (has_type state! T&)) (has_type (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? Self%&. Self%& K&. K& T&. T& cr! obj! state!) (TYPE%core!result.Result. $ (TYPE%tuple%2. T&. T& $ (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.)) $ TYPE%tuple%0.))) :pattern ((rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? Self%&. Self%& K&. K& T&. T& cr! obj! state!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::reconciler::exec::resource_builder::ResourceBuilder::requirements")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly)) (! (=> (has_type cr! (proj%vstd!view.View./V K&. K&)) (has_type (rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr!) BOOL)) :pattern ((rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr!)) )))
(set-info :comment ";; Function-Axioms vstd::string::impl&%1::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%vstd!string.String.) (has_type (vstd!string.impl&%1.view.? self!) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((vstd!string.impl&%1.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::api_method::KubeGetRequest::view")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%2.view.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%2.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (rabbitmq_controller!kubernetes_api_objects.exec.api_resource.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/api_resource (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. self!))))))))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/name (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. self!)))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest./KubeGetRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. self!)))))))))) :pattern ((vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. self!)) ))))
(set-info :comment ";; Function-Specs rabbitmq_controller::reconciler::exec::resource_builder::ResourceBuilder::get_request")
(declare-fun req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly)) (! (= (req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr!) (=> %%global_location_label%%0 (%B (rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& (vstd!view.View.view.? K&. K& cr!))))) :pattern ((req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr!)) )))
(declare-fun ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (req! Poly)) (! (= (ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! req!) (and (has_type req! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.) (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. req!) (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!))))) :pattern ((ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.get_request. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! req!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.))
(set-info :comment ";; Function-Axioms rabbitmq_controller::reconciler::exec::resource_builder::resource_res_to_view")
(assert (fuel_bool_default fuel%rabbitmq_controller!reconciler.exec.resource_builder.resource_res_to_view.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!reconciler.exec.resource_builder.resource_res_to_view.) (forall ((T&. Dcr) (T& Type) (res! Poly)) (! (= (rabbitmq_controller!reconciler.exec.resource_builder.resource_res_to_view.? T&. T& res!) (ite (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!)) (let ((resource$ (core!result.Result./Ok/0 (%Poly%core!result.Result. res!)))) (core!result.Result./Ok (vstd!view.View.view.? T&. T& resource$))) (let ((err$ (%Poly%tuple%0. (core!result.Result./Err/0 (%Poly%core!result.Result. res!))))) (core!result.Result./Err (Poly%tuple%0. err$))))) :pattern ((rabbitmq_controller!reconciler.exec.resource_builder.resource_res_to_view.? T&. T& res!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (res! Poly)) (! (=> (has_type res! (TYPE%core!result.Result. T&. T& $ TYPE%tuple%0.)) (has_type (Poly%core!result.Result. (rabbitmq_controller!reconciler.exec.resource_builder.resource_res_to_view.? T&. T& res!)) (TYPE%core!result.Result. (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) $ TYPE%tuple%0.))) :pattern ((rabbitmq_controller!reconciler.exec.resource_builder.resource_res_to_view.? T&. T& res!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::reconciler::exec::resource_builder::ResourceBuilder::make")
(declare-fun req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.make. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (state! Poly)) (! (= (req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.make. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state!) (=> %%global_location_label%%1 (%B (rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& (vstd!view.View.view.? K&. K& cr!))))) :pattern ((req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.make. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state!)) )))
(declare-fun ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.make. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (state! Poly) (res! Poly)) (! (= (ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.make. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! res!) (and (has_type res! (TYPE%core!result.Result. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. $ TYPE%tuple%0.)) (= (rabbitmq_controller!reconciler.exec.resource_builder.resource_res_to_view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. res!) (%Poly%core!result.Result. (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? T&. T& state!)))))) :pattern ((ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.make. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! res!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::reconciler::exec::resource_builder::ResourceBuilder::update")
(declare-fun req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.update. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (state! Poly) (obj! Poly)) (! (= (req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! obj!) (=> %%global_location_label%%2 (%B (rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& (vstd!view.View.view.? K&. K& cr!))))) :pattern ((req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! obj!)) )))
(declare-fun ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.update. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (state! Poly) (obj! Poly) (res! Poly)) (! (= (ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! obj! res!) (and (has_type res! (TYPE%core!result.Result. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. $ TYPE%tuple%0.)) (= (rabbitmq_controller!reconciler.exec.resource_builder.resource_res_to_view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. res!) (%Poly%core!result.Result. (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? T&. T& state!) (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!)))))) :pattern ((ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! state! obj! res!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::api_method::KubeListRequest::view")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%4.view.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%4.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest./ListRequest (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (rabbitmq_controller!kubernetes_api_objects.exec.api_resource.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/api_resource (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. self!))))))))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest./KubeListRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. self!))))))) :pattern ((vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::api_method::KubeCreateRequest::view")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%6.view.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%6.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest./CreateRequest (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest./KubeCreateRequest/obj (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. self!)))))))) :pattern ((vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::api_method::KubeDeleteRequest::view")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%8.view.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%8.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest./DeleteRequest (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (rabbitmq_controller!kubernetes_api_objects.exec.api_resource.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/api_resource (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. self!))))))))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/name (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. self!)))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest./KubeDeleteRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. self!)))))))))) :pattern ((vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::api_method::KubeUpdateRequest::view")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%10.view.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest./UpdateRequest (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. self!)))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/name (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest./KubeUpdateRequest/obj (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. self!)))))))) :pattern ((vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::api_method::KubeUpdateStatusRequest::view")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%12.view.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest./UpdateStatusRequest (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. self!)))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/name (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest./KubeUpdateStatusRequest/obj (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. self!)))))))) :pattern ((vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::api_method::KubeAPIRequest::view")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%13.view.))
(define-fun is-rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest_ ((c rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) Bool ((_ is rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest) c))
(define-fun is-rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest_ ((c rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) Bool ((_ is rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest) c))
(define-fun is-rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest_ ((c rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) Bool ((_ is rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest) c))
(define-fun is-rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest_ ((c rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) Bool ((_ is rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest) c))
(define-fun is-rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest_ ((c rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) Bool ((_ is rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest) c))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.impl&%13.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest. (ite (is-rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest_ (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) (let ((get_req$ (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./GetRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./GetRequest (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest. get_req$))))) (ite (is-rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest_ (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) (let ((list_req$ (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./ListRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./ListRequest (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.ListRequest. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest. list_req$))))) (ite (is-rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest_ (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) (let ((create_req$ (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./CreateRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./CreateRequest (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.CreateRequest. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest. create_req$))))) (ite (is-rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest_ (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) (let ((delete_req$ (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./DeleteRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./DeleteRequest (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.DeleteRequest. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest. delete_req$))))) (ite (is-rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest_ (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) (let ((update_req$ (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateRequest (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateRequest. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest. update_req$))))) (let ((update_status_req$ (rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest./UpdateStatusRequest/0 (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest./UpdateStatusRequest (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.UpdateStatusRequest. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest. update_status_req$)))))))))))) :pattern ((vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::api_method::opt_req_to_view")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.) (forall ((req! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? req!) (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. req!)) (let ((req$ (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (core!option.Option./Some/0 (%Poly%core!option.Option. req!))))) (core!option.Option./Some (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest. req$)))) core!option.Option./None)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? req!)) ))))
(assert (forall ((req! Poly)) (! (=> (has_type req! (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) (has_type (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? req!)) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.api_method.APIRequest.))) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? req!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::reconciler::exec::resource_builder::ResourceBuilder::state_after_create")
(declare-fun req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (obj! Poly) (state! Poly)) (! (= (req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state!) (=> %%global_location_label%%3 (%B (rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& (vstd!view.View.view.? K&. K& cr!))))) :pattern ((req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state!)) )))
(declare-fun ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (obj! Poly) (state! Poly) (res! Poly)) (! (= (ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state! res!) (and (has_type res! (TYPE%core!result.Result. $ (TYPE%tuple%2. T&. T& $ (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) $ TYPE%tuple%0.)) (= (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!))) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!) (vstd!view.View.view.? T&. T& state!)))))) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!)))) (= (tuple%2./tuple%2 (vstd!view.View.view.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. res!))))) (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. res!))))))) (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!) (vstd!view.View.view.? T&. T& state!))))))))) :pattern ((ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_create. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state! res!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::reconciler::exec::resource_builder::ResourceBuilder::state_after_update")
(declare-fun req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (obj! Poly) (state! Poly)) (! (= (req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state!) (=> %%global_location_label%%4 (%B (rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& (vstd!view.View.view.? K&. K& cr!))))) :pattern ((req%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state!)) )))
(declare-fun ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (SpecBuilder&. Dcr) (SpecBuilder& Type) (cr! Poly) (obj! Poly) (state! Poly) (res! Poly)) (! (= (ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state! res!) (and (has_type res! (TYPE%core!result.Result. $ (TYPE%tuple%2. T&. T& $ (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.)) $ TYPE%tuple%0.)) (= (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!))) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!) (vstd!view.View.view.? T&. T& state!)))))) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. res!)))) (= (tuple%2./tuple%2 (vstd!view.View.view.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. res!))))) (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.exec.api_method.opt_req_to_view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. res!))))))) (%Poly%tuple%2. (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? SpecBuilder&. SpecBuilder& (proj%%vstd!view.View./V K&. K&) (proj%vstd!view.View./V K&. K&) (proj%%vstd!view.View./V T&. T&) (proj%vstd!view.View./V T&. T&) (vstd!view.View.view.? K&. K& cr!) (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!) (vstd!view.View.view.? T&. T& state!))))))))) :pattern ((ens%rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.state_after_update. Self%&. Self%& K&. K& T&. T& SpecBuilder&. SpecBuilder& cr! obj! state! res!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!)) ))))
(set-info :comment ";; Function-Specs core::option::impl&%0::is_some")
(declare-fun ens%core!option.impl&%0.is_some. (Dcr Type core!option.Option. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (b! Bool)) (! (= (ens%core!option.impl&%0.is_some. T&. T& option! b!) (= b! (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. option!))))) :pattern ((ens%core!option.impl&%0.is_some. T&. T& option! b!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs core::option::impl&%0::as_ref")
(declare-fun ens%core!option.impl&%0.as_ref. (Dcr Type core!option.Option. core!option.Option.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (a! core!option.Option.)) (! (= (ens%core!option.impl&%0.as_ref. T&. T& option! a!) (and (has_type (Poly%core!option.Option. a!) (TYPE%core!option.Option. (REF T&.) T&)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. a!)))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. option!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. a!))))) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. a!))))))) :pattern ((ens%core!option.impl&%0.as_ref. T&. T& option! a!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%5 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%6 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. option!))))))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)) )))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::is_ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.is_ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.is_ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! Poly)) (! (= (vstd!std_specs.result.is_ok.? T&. T& E&. E& result!) (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!))) :pattern ((vstd!std_specs.result.is_ok.? T&. T& E&. E& result!)) ))))
(set-info :comment ";; Function-Specs core::result::impl&%0::is_ok")
(declare-fun ens%core!result.impl&%0.is_ok. (Dcr Type Dcr Type core!result.Result. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.) (b! Bool)) (! (= (ens%core!result.impl&%0.is_ok. T&. T& E&. E& result! b!) (= b! (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. result!))))) :pattern ((ens%core!result.impl&%0.is_ok. T&. T& E&. E& result! b!)) )))
(set-info :comment ";; Function-Specs core::result::impl&%0::unwrap")
(declare-fun req%core!result.impl&%0.unwrap. (Dcr Type Dcr Type core!result.Result.) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.)) (! (= (req%core!result.impl&%0.unwrap. T&. T& E&. E& result!) (=> %%global_location_label%%7 (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. result!))))))) :pattern ((req%core!result.impl&%0.unwrap. T&. T& E&. E& result!)) )))
(declare-fun ens%core!result.impl&%0.unwrap. (Dcr Type Dcr Type core!result.Result. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.) (t! Poly)) (! (= (ens%core!result.impl&%0.unwrap. T&. T& E&. E& result! t!) (and (has_type t! T&) (= t! (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. result!)))))) :pattern ((ens%core!result.impl&%0.unwrap. T&. T& E&. E& result! t!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%8 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::axiom_spec_len")
(declare-fun ens%vstd!std_specs.vec.axiom_spec_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (= (ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!)) )))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%0::new")
(declare-fun ens%alloc!vec.impl&%0.new. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%alloc!vec.impl&%0.new. T&. T& v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) v!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%0.new. T&. T& v!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::push")
(declare-fun ens%alloc!vec.impl&%1.push. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (value! Poly)) (! (= (ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.push.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) value!)))) :pattern ((ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%9 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%10 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%11 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%12 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%13 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%14 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%15 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%16 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%17 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%18 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%19 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%20 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%21 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%22 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%23 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%26 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%27 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%28 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%29 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%30 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%31 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%32 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%33 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%34 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::filter")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (has_type (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::filter_lemma_broadcast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. (Dcr Type Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))))) (and (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$))) )) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_lemma_broadcast")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))) (and (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$))) ))) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!))) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::filter_distributes_over_add_broacast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. (Dcr Type Poly Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) (Poly%fun%1. pred!)) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! (Poly%fun%1. pred!)) (vstd!seq_lib.impl&%0.filter.? A&. A& b! (Poly%fun%1. pred!))))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_distributes_over_add_broacast")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! pred!) (vstd!seq_lib.impl&%0.filter.? A&. A& b! pred!)))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%0 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::seq_to_set_is_finite_broadcast")
(declare-fun ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (= (ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite_broadcast")
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%35 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%36 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%37 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%38 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%43 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%44 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%45 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%46 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%47 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%48 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%49 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%50 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%51 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Axioms vstd::string::impl&%0::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! STRSLICE) (has_type (vstd!string.impl&%0.view.? self!) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((vstd!string.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Specs vstd::string::axiom_str_literal_is_ascii")
(declare-fun ens%vstd!string.axiom_str_literal_is_ascii. (StrSlice) Bool)
(assert (forall ((s! StrSlice)) (! (= (ens%vstd!string.axiom_str_literal_is_ascii. s!) (= (vstd!string.impl&%0.is_ascii.? (S s!)) (str%strslice_is_ascii s!))) :pattern ((ens%vstd!string.axiom_str_literal_is_ascii. s!)) )))
(set-info :comment ";; Broadcast vstd::string::axiom_str_literal_is_ascii")
(assert (forall ((s! Poly)) (! (=> (has_type s! STRSLICE) (= (vstd!string.impl&%0.is_ascii.? s!) (str%strslice_is_ascii (%S s!)))) :pattern ((vstd!string.impl&%0.is_ascii.? s!)) )))
(set-info :comment ";; Function-Specs vstd::string::axiom_str_literal_len")
(declare-fun ens%vstd!string.axiom_str_literal_len. (StrSlice) Bool)
(assert (forall ((s! StrSlice)) (! (= (ens%vstd!string.axiom_str_literal_len. s!) (= (vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? (S s!))) (str%strslice_len s!))) :pattern ((ens%vstd!string.axiom_str_literal_len. s!)) )))
(set-info :comment ";; Broadcast vstd::string::axiom_str_literal_len")
(assert (forall ((s! Poly)) (! (=> (has_type s! STRSLICE) (= (vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? s!)) (str%strslice_len (%S s!)))) :pattern ((vstd!seq.Seq.len.? $ CHAR (vstd!string.impl&%0.view.? s!))) )))
(set-info :comment ";; Function-Specs vstd::string::axiom_str_literal_get_char")
(declare-fun ens%vstd!string.axiom_str_literal_get_char. (StrSlice Int) Bool)
(assert (forall ((s! StrSlice) (i! Int)) (! (= (ens%vstd!string.axiom_str_literal_get_char. s! i!) (= (%C (vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? (S s!)) (I i!))) (str%strslice_get_char s! i!))) :pattern ((ens%vstd!string.axiom_str_literal_get_char. s! i!)) )))
(set-info :comment ";; Broadcast vstd::string::axiom_str_literal_get_char")
(assert (forall ((s! Poly) (i! Poly)) (! (=> (and (has_type s! STRSLICE) (has_type i! INT)) (= (%C (vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? s!) i!)) (str%strslice_get_char (%S s!) (%I i!)))) :pattern ((vstd!seq.Seq.index.? $ CHAR (vstd!string.impl&%0.view.? s!) i!)) )))
(set-info :comment ";; Function-Specs vstd::string::impl&%1::concat")
(declare-fun ens%vstd!string.impl&%1.concat. (vstd!string.String. StrSlice vstd!string.String.) Bool)
(assert (forall ((self! vstd!string.String.) (other! StrSlice) (ret! vstd!string.String.)) (! (= (ens%vstd!string.impl&%1.concat. self! other! ret!) (and (= (vstd!string.impl&%1.view.? (Poly%vstd!string.String. ret!)) (vstd!seq.Seq.add.? $ CHAR (vstd!string.impl&%1.view.? (Poly%vstd!string.String. self!)) (vstd!string.impl&%0.view.? (S other!)))) (and (= (vstd!string.impl&%1.is_ascii.? (Poly%vstd!string.String. ret!)) (vstd!string.impl&%1.is_ascii.? (Poly%vstd!string.String. self!))) (vstd!string.impl&%0.is_ascii.? (S other!))))) :pattern ((ens%vstd!string.impl&%1.concat. self! other! ret!)) )))
(set-info :comment ";; Function-Specs vstd::string::impl&%1::eq")
(declare-fun ens%vstd!string.impl&%1.eq. (vstd!string.String. vstd!string.String. Bool) Bool)
(assert (forall ((self! vstd!string.String.) (other! vstd!string.String.) (b! Bool)) (! (= (ens%vstd!string.impl&%1.eq. self! other! b!) (= b! (= (vstd!string.impl&%1.view.? (Poly%vstd!string.String. self!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. other!))))) :pattern ((ens%vstd!string.impl&%1.eq. self! other! b!)) )))
(set-info :comment ";; Function-Specs vstd::string::impl&%1::clone")
(declare-fun ens%vstd!string.impl&%1.clone. (vstd!string.String. vstd!string.String.) Bool)
(assert (forall ((self! vstd!string.String.) (result! vstd!string.String.)) (! (= (ens%vstd!string.impl&%1.clone. self! result!) (= result! self!)) :pattern ((ens%vstd!string.impl&%1.clone. self! result!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? no%param)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::vstd_ext::string_map::StringMap::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!vstd_ext.string_map.StringMap.) (has_type (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? self!) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::container::Container::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Container::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) Bool)
(assert (forall ((no%param Int) (container! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.default. no%param container!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. container!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.default. no%param container!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_image")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_image.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_image.) (forall ((self! Poly) (image! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_image.? self! image!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some image!))) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_image.? self! image!)) ))))
(assert (forall ((self! Poly) (image! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type image! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_image.? self! image!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_image.? self! image!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Container::set_image")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_image. (rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Container. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (image! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_image. pre%self! self! image!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_image.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. image!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_image. pre%self! self! image!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_name.? self! name!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) name! (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_name.? self! name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_name.? self! name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Container::set_name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_name. (rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Container. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_name. pre%self! self! name!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_name. pre%self! self! name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_volume_mounts")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_volume_mounts.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_volume_mounts.) (forall ((self! Poly) (volume_mounts! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_volume_mounts.? self! volume_mounts!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some volume_mounts!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_volume_mounts.? self! volume_mounts!)) ))))
(assert (forall ((self! Poly) (volume_mounts! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type volume_mounts! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_volume_mounts.? self! volume_mounts!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_volume_mounts.? self! volume_mounts!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::map_values")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map_values.))
(declare-fun %%lambda%%1 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%0 %%hole%%3 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map_values.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%1 A&. A& self! (%Poly%fun%1. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%1. A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map_values.? A&. A& B&. B& self! f!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::container::VolumeMount::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Container::set_volume_mounts")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_volume_mounts. (rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Container. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%2 () %%Function%%)
(assert (forall ((mount$ Poly)) (! (= (%%apply%%0 %%lambda%%2 mount$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.view.? mount$))) :pattern ((%%apply%%0 %%lambda%%2 mount$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (volume_mounts! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_volume_mounts. pre%self! self! volume_mounts!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_volume_mounts.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount./alloc!alloc.Global.>. volume_mounts!)) (Poly%fun%1. (mk_fun %%lambda%%2)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_volume_mounts. pre%self! self! volume_mounts!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_ports")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_ports.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_ports.) (forall ((self! Poly) (ports! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_ports.? self! ports!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some ports!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_ports.? self! ports!)) ))))
(assert (forall ((self! Poly) (ports! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type ports! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_ports.? self! ports!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_ports.? self! ports!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::container::ContainerPort::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%1.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%1.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Container::set_ports")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_ports. (rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Container. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%3 () %%Function%%)
(assert (forall ((port$ Poly)) (! (= (%%apply%%0 %%lambda%%3 port$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%1.view.? port$))) :pattern ((%%apply%%0 %%lambda%%3 port$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (ports! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_ports. pre%self! self! ports!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_ports.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort./alloc!alloc.Global.>. ports!)) (Poly%fun%1. (mk_fun %%lambda%%3)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_ports. pre%self! self! ports!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_lifecycle")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_lifecycle.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_lifecycle.) (forall ((self! Poly) (lifecycle! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_lifecycle.? self! lifecycle!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some lifecycle!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_lifecycle.? self! lifecycle!)) ))))
(assert (forall ((self! Poly) (lifecycle! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type lifecycle! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_lifecycle.? self! lifecycle!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_lifecycle.? self! lifecycle!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::container::Lifecycle::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Container::set_lifecycle")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_lifecycle. (rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (lifecycle! rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_lifecycle. pre%self! self! lifecycle!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_lifecycle.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. lifecycle!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_lifecycle. pre%self! self! lifecycle!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_resources")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources.) (forall ((self! Poly) (resources! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources.? self! resources!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some resources!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources.? self! resources!)) ))))
(assert (forall ((self! Poly) (resources! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type resources! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources.? self! resources!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources.? self! resources!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::resource_requirements::ResourceRequirements::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Container::set_resources")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_resources. (rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (resources! rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_resources. pre%self! self! resources!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. resources!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_resources. pre%self! self! resources!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::unset_resources")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.unset_resources.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.unset_resources.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.unset_resources.? self!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.unset_resources.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.unset_resources.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.unset_resources.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Container::overwrite_resources")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.overwrite_resources. (rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Container. core!option.Option.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (resources! core!option.Option.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.overwrite_resources. pre%self! self! resources!) (and (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. resources!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.unset_resources.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. pre%self!)))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. resources!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. resources!)))))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.overwrite_resources. pre%self! self! resources!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::container::Probe::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_readiness_probe")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_readiness_probe.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_readiness_probe.) (forall ((self! Poly) (readiness_probe! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_readiness_probe.? self! readiness_probe!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some readiness_probe!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_readiness_probe.? self! readiness_probe!)) ))))
(assert (forall ((self! Poly) (readiness_probe! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type readiness_probe! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_readiness_probe.? self! readiness_probe!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_readiness_probe.? self! readiness_probe!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Container::set_readiness_probe")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_readiness_probe. (rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (readiness_probe! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_readiness_probe. pre%self! self! readiness_probe!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_readiness_probe.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. readiness_probe!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_readiness_probe. pre%self! self! readiness_probe!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_command")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_command.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_command.) (forall ((self! Poly) (command! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_command.? self! command!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/env (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some command!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_command.? self! command!)) ))))
(assert (forall ((self! Poly) (command! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type command! (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_command.? self! command!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_command.? self! command!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Container::set_command")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_command. (rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Container. alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%4 () %%Function%%)
(assert (forall ((c$ Poly)) (! (= (%%apply%%0 %%lambda%%4 c$) (vstd!string.impl&%1.view.? c$)) :pattern ((%%apply%%0 %%lambda%%4 c$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (command! alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_command. pre%self! self! command!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_command.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%vstd!string.String. $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%vstd!string.String. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. command!)) (Poly%fun%1. (mk_fun %%lambda%%4)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_command. pre%self! self! command!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerView::set_env")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_env.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_env.) (forall ((self! Poly) (env! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_env.? self! env!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some env!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/ports (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/volume_mounts (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/lifecycle (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/readiness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_env.? self! env!)) ))))
(assert (forall ((self! Poly) (env! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (has_type env! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_env.? self! env!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_env.? self! env!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::container::EnvVar::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%8.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%8.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Container::set_env")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_env. (rabbitmq_controller!kubernetes_api_objects.exec.container.Container. rabbitmq_controller!kubernetes_api_objects.exec.container.Container. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%5 () %%Function%%)
(assert (forall ((v$ Poly)) (! (= (%%apply%%0 %%lambda%%5 v$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%8.view.? v$))) :pattern ((%%apply%%0 %%lambda%%5 v$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Container.) (env! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_env. pre%self! self! env!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_env.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. env!)) (Poly%fun%1. (mk_fun %%lambda%%5)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.set_env. pre%self! self! env!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerPortView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView (%I (I 0)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default.? no%param)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerPortView::set_container_port")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.) (forall ((self! Poly) (container_port! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? self! container_port!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView (%I container_port!) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? self! container_port!)) ))))
(assert (forall ((self! Poly) (container_port! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (has_type container_port! INT)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? self! container_port!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? self! container_port!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ContainerPortView::set_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? self! name!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView (%I (I (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/container_port (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some name!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView./ContainerPortView/protocol (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? self! name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? self! name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::VolumeMountView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (B false)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::VolumeMount::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.) Bool)
(assert (forall ((no%param Int) (volume_mount! rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.default. no%param volume_mount!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. volume_mount!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.default. no%param volume_mount!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::VolumeMountView::set_mount_path")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.) (forall ((self! Poly) (mount_path! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? self! mount_path!) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView mount_path! (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? self! mount_path!)) ))))
(assert (forall ((self! Poly) (mount_path! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type mount_path! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? self! mount_path!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? self! mount_path!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::VolumeMount::set_mount_path")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.set_mount_path. (rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.) (mount_path! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.set_mount_path. pre%self! self! mount_path!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. mount_path!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.set_mount_path. pre%self! self! mount_path!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::VolumeMountView::set_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? self! name!) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)) name! (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/sub_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? self! name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? self! name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::VolumeMount::set_name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.set_name. (rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.) (name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.set_name. pre%self! self! name!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.set_name. pre%self! self! name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::VolumeMountView::set_sub_path")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.) (forall ((self! Poly) (sub_path! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? self! sub_path!) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/read_only (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some sub_path!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView./VolumeMountView/mount_propagation (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? self! sub_path!)) ))))
(assert (forall ((self! Poly) (sub_path! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (has_type sub_path! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? self! sub_path!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? self! sub_path!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::VolumeMount::set_sub_path")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.set_sub_path. (rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount.) (sub_path! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.set_sub_path. pre%self! self! sub_path!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.VolumeMount. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. sub_path!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%2.set_sub_path. pre%self! self! sub_path!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Probe::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) Bool)
(assert (forall ((no%param Int) (probe! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.default. no%param probe!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. probe!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.default. no%param probe!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::container::ExecAction::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_failure_threshold")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_failure_threshold.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_failure_threshold.) (forall ((self! Poly) (failure_threshold! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_failure_threshold.? self! failure_threshold!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some failure_threshold!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_failure_threshold.? self! failure_threshold!)) ))))
(assert (forall ((self! Poly) (failure_threshold! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type failure_threshold! INT)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_failure_threshold.? self! failure_threshold!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_failure_threshold.? self! failure_threshold!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Probe::set_failure_threshold")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_failure_threshold. (rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. Int) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (failure_threshold! Int)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_failure_threshold. pre%self! self! failure_threshold!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_failure_threshold.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. pre%self!))) (I failure_threshold!)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_failure_threshold. pre%self! self! failure_threshold!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_initial_delay_seconds")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_initial_delay_seconds.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_initial_delay_seconds.) (forall ((self! Poly) (initial_delay_seconds! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_initial_delay_seconds.? self! initial_delay_seconds!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some initial_delay_seconds!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_initial_delay_seconds.? self! initial_delay_seconds!)) ))))
(assert (forall ((self! Poly) (initial_delay_seconds! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type initial_delay_seconds! INT)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_initial_delay_seconds.? self! initial_delay_seconds!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_initial_delay_seconds.? self! initial_delay_seconds!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Probe::set_initial_delay_seconds")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_initial_delay_seconds. (rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. Int) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (initial_delay_seconds! Int)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_initial_delay_seconds. pre%self! self! initial_delay_seconds!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_initial_delay_seconds.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. pre%self!))) (I initial_delay_seconds!)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_initial_delay_seconds. pre%self! self! initial_delay_seconds!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_period_seconds")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_period_seconds.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_period_seconds.) (forall ((self! Poly) (period_seconds! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_period_seconds.? self! period_seconds!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some period_seconds!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_period_seconds.? self! period_seconds!)) ))))
(assert (forall ((self! Poly) (period_seconds! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type period_seconds! INT)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_period_seconds.? self! period_seconds!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_period_seconds.? self! period_seconds!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Probe::set_period_seconds")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_period_seconds. (rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. Int) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (period_seconds! Int)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_period_seconds. pre%self! self! period_seconds!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_period_seconds.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. pre%self!))) (I period_seconds!)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_period_seconds. pre%self! self! period_seconds!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_success_threshold")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_success_threshold.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_success_threshold.) (forall ((self! Poly) (success_threshold! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_success_threshold.? self! success_threshold!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some success_threshold!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_success_threshold.? self! success_threshold!)) ))))
(assert (forall ((self! Poly) (success_threshold! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type success_threshold! INT)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_success_threshold.? self! success_threshold!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_success_threshold.? self! success_threshold!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Probe::set_success_threshold")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_success_threshold. (rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. Int) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (success_threshold! Int)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_success_threshold. pre%self! self! success_threshold!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_success_threshold.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. pre%self!))) (I success_threshold!)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_success_threshold. pre%self! self! success_threshold!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_tcp_socket")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_tcp_socket.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_tcp_socket.) (forall ((self! Poly) (tcp_socket! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_tcp_socket.? self! tcp_socket!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some tcp_socket!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/timeout_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_tcp_socket.? self! tcp_socket!)) ))))
(assert (forall ((self! Poly) (tcp_socket! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type tcp_socket! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_tcp_socket.? self! tcp_socket!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_tcp_socket.? self! tcp_socket!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::container::TCPSocketAction::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Probe::set_tcp_socket")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_tcp_socket. (rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (tcp_socket! rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_tcp_socket. pre%self! self! tcp_socket!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_tcp_socket.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. tcp_socket!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_tcp_socket. pre%self! self! tcp_socket!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ProbeView::set_timeout_seconds")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_timeout_seconds.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_timeout_seconds.) (forall ((self! Poly) (timeout_seconds! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_timeout_seconds.? self! timeout_seconds!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/exec_ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/failure_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/initial_delay_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/success_threshold (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView./ProbeView/tcp_socket (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some timeout_seconds!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_timeout_seconds.? self! timeout_seconds!)) ))))
(assert (forall ((self! Poly) (timeout_seconds! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.) (has_type timeout_seconds! INT)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_timeout_seconds.? self! timeout_seconds!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_timeout_seconds.? self! timeout_seconds!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Probe::set_timeout_seconds")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_timeout_seconds. (rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. Int) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Probe.) (timeout_seconds! Int)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_timeout_seconds. pre%self! self! timeout_seconds!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_timeout_seconds.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Probe. pre%self!))) (I timeout_seconds!)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%3.set_timeout_seconds. pre%self! self! timeout_seconds!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ExecActionView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::ExecAction::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.) Bool)
(assert (forall ((no%param Int) (exec_action! rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.default. no%param exec_action!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. exec_action!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.default. no%param exec_action!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::ExecActionView::set_command")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.set_command.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.set_command.) (forall ((self! Poly) (command! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.set_command.? self! command!) (rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView./ExecActionView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some command!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.set_command.? self! command!)) ))))
(assert (forall ((self! Poly) (command! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.) (has_type command! (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.set_command.? self! command!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.set_command.? self! command!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::ExecAction::set_command")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.set_command. (rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.) (command! alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.set_command. pre%self! self! command!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.set_command.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%vstd!string.String. $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%vstd!string.String. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. command!)) (Poly%fun%1. (mk_fun %%lambda%%4)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.set_command. pre%self! self! command!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::TCPSocketActionView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%I (I 0)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::TCPSocketAction::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.) Bool)
(assert (forall ((no%param Int) (tcp_socket_action! rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.default. no%param tcp_socket_action!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. tcp_socket_action!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.default. no%param tcp_socket_action!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::TCPSocketActionView::set_port")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.set_port.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.set_port.) (forall ((self! Poly) (port! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.set_port.? self! port!) (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView./TCPSocketActionView/host (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. self!)))) (%I port!))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.set_port.? self! port!)) ))))
(assert (forall ((self! Poly) (port! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.) (has_type port! INT)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.set_port.? self! port!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.set_port.? self! port!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::TCPSocketAction::set_port")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.set_port. (rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. Int) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction.) (port! Int)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.set_port. pre%self! self! port!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.set_port.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.TCPSocketAction. pre%self!))) (I port!)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%5.set_port. pre%self! self! port!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::LifecycleView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Lifecycle::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.) Bool)
(assert (forall ((no%param Int) (lifecycle! rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.default. no%param lifecycle!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. lifecycle!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.default. no%param lifecycle!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::LifecycleView::set_pre_stop")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.set_pre_stop.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.set_pre_stop.) (forall ((self! Poly) (pre_stop! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.set_pre_stop.? self! pre_stop!) (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView./LifecycleView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some pre_stop!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.set_pre_stop.? self! pre_stop!)) ))))
(assert (forall ((self! Poly) (pre_stop! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.) (has_type pre_stop! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.set_pre_stop.? self! pre_stop!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.set_pre_stop.? self! pre_stop!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::container::LifecycleHandler::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::Lifecycle::set_pre_stop")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.set_pre_stop. (rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle.) (handler! rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.set_pre_stop. pre%self! self! handler!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.set_pre_stop.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.Lifecycle. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. handler!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%6.set_pre_stop. pre%self! self! handler!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::LifecycleHandlerView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::LifecycleHandler::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.) Bool)
(assert (forall ((no%param Int) (lifecycle_handler! rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.default. no%param lifecycle_handler!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. lifecycle_handler!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.default. no%param lifecycle_handler!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::LifecycleHandlerView::set_exec")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.set_exec.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.set_exec.) (forall ((self! Poly) (exec! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.set_exec.? self! exec!) (rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView./LifecycleHandlerView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some exec!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.set_exec.? self! exec!)) ))))
(assert (forall ((self! Poly) (exec! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.) (has_type exec! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.set_exec.? self! exec!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.set_exec.? self! exec!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::LifecycleHandler::set_exec")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.set_exec. (rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.) (self! rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler.) (exec! rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.set_exec. pre%self! self! exec!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.set_exec.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.LifecycleHandler. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%4.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ExecAction. exec!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%7.set_exec. pre%self! self! exec!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? no%param)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarView::set_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.set_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.set_name.? self! name!) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView name! (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.set_name.? self! name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.set_name.? self! name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarView::overwrite_value")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value.) (forall ((self! Poly) (value! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value.? self! value!) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. self!)) (%Poly%core!option.Option. value!) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value.? self! value!)) ))))
(assert (forall ((self! Poly) (value! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) (has_type value! (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value.? self! value!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value.? self! value!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarView::overwrite_value_from")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value_from.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value_from.) (forall ((self! Poly) (value_from! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value_from.? self! value_from!) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. self!)))) (%Poly%core!option.Option. value_from!))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value_from.? self! value_from!)) ))))
(assert (forall ((self! Poly) (value_from! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) (has_type value_from! (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value_from.? self! value_from!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value_from.? self! value_from!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::container::EnvVarSource::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%9.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%9.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarSourceView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default.? no%param)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::container::EnvVarSourceView::set_field_ref")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.set_field_ref.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.set_field_ref.) (forall ((self! Poly) (field_ref! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.set_field_ref.? self! field_ref!) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some field_ref!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.set_field_ref.? self! field_ref!)) ))))
(assert (forall ((self! Poly) (field_ref! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.) (has_type field_ref! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.set_field_ref.? self! field_ref!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.set_field_ref.? self! field_ref!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::ObjectFieldSelector::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::label_selector::LabelSelectorView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default.? no%param)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod_template_spec::PodTemplateSpecView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default.? no%param)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::label_selector::LabelSelector::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::pod_template_spec::PodTemplateSpec::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::label_selector::LabelSelector::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.) Bool)
(assert (forall ((no%param Int) (label_selector! rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.default. no%param label_selector!) (= (rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. label_selector!)) (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.default. no%param label_selector!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::label_selector::LabelSelectorView::set_match_labels")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.set_match_labels.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.set_match_labels.) (forall ((self! Poly) (match_labels! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.set_match_labels.? self! match_labels!) (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView./LabelSelectorView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some match_labels!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.set_match_labels.? self! match_labels!)) ))))
(assert (forall ((self! Poly) (match_labels! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.) (has_type match_labels! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.set_match_labels.? self! match_labels!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.set_match_labels.? self! match_labels!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::label_selector::LabelSelector::set_match_labels")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.set_match_labels. (rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. rabbitmq_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.) (self! rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.) (match_labels! rabbitmq_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.set_match_labels. pre%self! self! match_labels!) (= (rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.set_match_labels.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. pre%self!))) (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. match_labels!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.set_match_labels. pre%self! self! match_labels!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((no%param Int) (object_meta! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. no%param object_meta!) (= (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. object_meta!)) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. no%param object_meta!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (name! core!option.Option.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. self! name!) (and (has_type (Poly%core!option.Option. name!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. name!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. name!))))) (= (vstd!string.impl&%1.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. name!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)))))))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. self! name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::namespace")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.namespace. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (namespace! core!option.Option.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.namespace. self! namespace!) (and (has_type (Poly%core!option.Option. namespace!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. namespace!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. namespace!))))) (= (vstd!string.impl&%1.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. namespace!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)))))))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.namespace. self! namespace!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::labels")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.labels. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (labels! core!option.Option.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.labels. self! labels!) (and (has_type (Poly%core!option.Option. labels!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!vstd_ext.string_map.StringMap.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. labels!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. labels!))))) (= (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. labels!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)))))))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.labels. self! labels!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::annotations")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.annotations. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (annotations! core!option.Option.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.annotations. self! annotations!) (and (has_type (Poly%core!option.Option. annotations!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!vstd_ext.string_map.StringMap.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. annotations!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. annotations!))))) (= (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. annotations!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)))))))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.annotations. self! annotations!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::owner_reference::OwnerReference::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::owner_references_only_contains")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.owner_references_only_contains.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.owner_references_only_contains.) (forall ((self! Poly) (owner_ref! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.owner_references_only_contains.? self! owner_ref!) (let ((tmp%%$ (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (and (is-core!option.Option./Some_ tmp%%$) (let ((owner_refs$ (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= owner_refs$ (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) owner_ref!))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.owner_references_only_contains.? self! owner_ref!)) ))))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::owner_references_only_contains")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.owner_references_only_contains. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. Bool) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (owner_ref! rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) (res! Bool)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.owner_references_only_contains. self! owner_ref! res!) (= res! (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.owner_references_only_contains.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. owner_ref!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.owner_references_only_contains. self! owner_ref! res!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some name!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? self! name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::set_name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_name. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_name. pre%self! self! name!) (= (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_name. pre%self! self! name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_namespace")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace.) (forall ((self! Poly) (namespace! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace.? self! namespace!) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some namespace!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace.? self! namespace!)) ))))
(assert (forall ((self! Poly) (namespace! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type namespace! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace.? self! namespace!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace.? self! namespace!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::set_namespace")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_namespace. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (namespace! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_namespace. pre%self! self! namespace!) (= (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. namespace!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_namespace. pre%self! self! namespace!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_labels")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.) (forall ((self! Poly) (labels! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? self! labels!) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some labels!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? self! labels!)) ))))
(assert (forall ((self! Poly) (labels! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type labels! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? self! labels!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? self! labels!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::set_labels")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_labels. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. rabbitmq_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (labels! rabbitmq_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_labels. pre%self! self! labels!) (= (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!))) (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. labels!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_labels. pre%self! self! labels!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_annotations")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.) (forall ((self! Poly) (annotations! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? self! annotations!) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some annotations!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? self! annotations!)) ))))
(assert (forall ((self! Poly) (annotations! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type annotations! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? self! annotations!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? self! annotations!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::set_annotations")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_annotations. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. rabbitmq_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (annotations! rabbitmq_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_annotations. pre%self! self! annotations!) (= (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!))) (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. annotations!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_annotations. pre%self! self! annotations!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::set_owner_references")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.) (forall ((self! Poly) (owner_references! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some owner_references!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/finalizers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!)) ))))
(assert (forall ((self! Poly) (owner_references! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type owner_references! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? self! owner_references!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::set_owner_references")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_owner_references. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%6 () %%Function%%)
(assert (forall ((o$ Poly)) (! (= (%%apply%%0 %%lambda%%6 o$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? o$))) :pattern ((%%apply%%0 %%lambda%%6 o$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (owner_references! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_owner_references. pre%self! self! owner_references!) (= (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. owner_references!)) (Poly%fun%1. (mk_fun %%lambda%%6)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_owner_references. pre%self! self! owner_references!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::object_meta::ObjectMetaView::unset_finalizers")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? self!) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/owner_references (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::object_meta::ObjectMeta::unset_finalizers")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.unset_finalizers. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) (self! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.unset_finalizers. pre%self! self!) (= (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.unset_finalizers.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. pre%self!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.unset_finalizers. pre%self! self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::persistent_volume_claim::PersistentVolumeClaim::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.default.) (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::persistent_volume_claim::PersistentVolumeClaim::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.) Bool)
(assert (forall ((no%param Int) (pvc! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.default. no%param pvc!) (= (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. pvc!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.default. no%param pvc!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::persistent_volume_claim::PersistentVolumeClaimSpec::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimView::set_metadata")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_metadata.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_metadata.) (forall ((self! Poly) (metadata! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_metadata.? self! metadata!) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. metadata!) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_metadata.? self! metadata!)) ))))
(assert (forall ((self! Poly) (metadata! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (has_type metadata! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_metadata.? self! metadata!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_metadata.? self! metadata!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::persistent_volume_claim::PersistentVolumeClaim::set_metadata")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.set_metadata. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.) (self! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.) (metadata! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.set_metadata. pre%self! self! metadata!) (= (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_metadata.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. metadata!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.set_metadata. pre%self! self! metadata!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimView::set_spec")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_spec.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_spec.) (forall ((self! Poly) (spec! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_spec.? self! spec!) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some spec!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_spec.? self! spec!)) ))))
(assert (forall ((self! Poly) (spec! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (has_type spec! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_spec.? self! spec!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_spec.? self! spec!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::persistent_volume_claim::PersistentVolumeClaim::set_spec")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.set_spec. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.) (self! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.) (spec! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.set_spec. pre%self! self! spec!) (= (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_spec.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. spec!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.set_spec. pre%self! self! spec!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimView::kind")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.kind.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.kind.) (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./PersistentVolumeClaimKind))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimView::marshal")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.marshal.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.marshal.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. self!))))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. self!)))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimView::unmarshal")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.unmarshal.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%1.unmarshal.) (forall ((obj! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. obj!) (Poly%core!result.Result. (ite (not (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.)))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (core!result.Result./Ok (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)))) (%Poly%core!option.Option. (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))) (%Poly%core!option.Option. (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. obj!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimSpecView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::persistent_volume_claim::PersistentVolumeClaimSpec::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) Bool)
(assert (forall ((no%param Int) (pvc_spec! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.default. no%param pvc_spec!) (= (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. pvc_spec!)) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.default. no%param pvc_spec!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimSpecView::set_access_modes")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_access_modes.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_access_modes.) (forall ((self! Poly) (access_modes! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_access_modes.? self! access_modes!) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/storage_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some access_modes!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_access_modes.? self! access_modes!)) ))))
(assert (forall ((self! Poly) (access_modes! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.) (has_type access_modes! (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_access_modes.? self! access_modes!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_access_modes.? self! access_modes!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::persistent_volume_claim::PersistentVolumeClaimSpec::set_access_modes")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_access_modes. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) (access_modes! alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_access_modes. pre%self! self! access_modes!) (= (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_access_modes.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%vstd!string.String. $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%vstd!string.String. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. access_modes!)) (Poly%fun%1. (mk_fun %%lambda%%4)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_access_modes. pre%self! self! access_modes!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimSpecView::set_resources")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_resources.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_resources.) (forall ((self! Poly) (resources! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_resources.? self! resources!) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/storage_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/access_modes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some resources!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_resources.? self! resources!)) ))))
(assert (forall ((self! Poly) (resources! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.) (has_type resources! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_resources.? self! resources!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_resources.? self! resources!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::persistent_volume_claim::PersistentVolumeClaimSpec::set_resources")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_resources. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) (resources! rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_resources. pre%self! self! resources!) (= (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_resources.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. resources!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_resources. pre%self! self! resources!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::persistent_volume_claim::PersistentVolumeClaimSpecView::set_storage_class_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_storage_class_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_storage_class_name.) (forall ((self! Poly) (storage_class_name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_storage_class_name.? self! storage_class_name!) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some storage_class_name!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/access_modes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/resources (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_storage_class_name.? self! storage_class_name!)) ))))
(assert (forall ((self! Poly) (storage_class_name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.) (has_type storage_class_name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_storage_class_name.? self! storage_class_name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_storage_class_name.? self! storage_class_name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::persistent_volume_claim::PersistentVolumeClaimSpec::set_storage_class_name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_storage_class_name. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.) (storage_class_name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_storage_class_name. pre%self! self! storage_class_name!) (= (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_storage_class_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. storage_class_name!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_storage_class_name. pre%self! self! storage_class_name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::pod::PodSpec::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? self!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::pod::PodSpec::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) Bool)
(assert (forall ((no%param Int) (pod_spec! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.default. no%param pod_spec!) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. pod_spec!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.default. no%param pod_spec!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_affinity")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_affinity.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_affinity.) (forall ((self! Poly) (affinity! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_affinity.? self! affinity!) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some affinity!))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_affinity.? self! affinity!)) ))))
(assert (forall ((self! Poly) (affinity! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type affinity! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_affinity.? self! affinity!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_affinity.? self! affinity!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::unset_affinity")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_affinity.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_affinity.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_affinity.? self!) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_affinity.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_affinity.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_affinity.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::pod::PodSpec::overwrite_affinity")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.overwrite_affinity. (rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. core!option.Option.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (affinity! core!option.Option.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.overwrite_affinity. pre%self! self! affinity!) (and (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. affinity!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_affinity.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. pre%self!)))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. affinity!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_affinity.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. (rabbitmq_controller!kubernetes_api_objects.exec.affinity.impl&%0.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. affinity!)))))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.overwrite_affinity. pre%self! self! affinity!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_containers")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_containers.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_containers.) (forall ((self! Poly) (containers! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_containers.? self! containers!) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. containers!) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_containers.? self! containers!)) ))))
(assert (forall ((self! Poly) (containers! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type containers! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_containers.? self! containers!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_containers.? self! containers!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::pod::PodSpec::set_containers")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_containers. (rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%7 () %%Function%%)
(assert (forall ((container$ Poly)) (! (= (%%apply%%0 %%lambda%%7 container$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%0.view.? container$))) :pattern ((%%apply%%0 %%lambda%%7 container$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (containers! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_containers. pre%self! self! containers!) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_containers.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. containers!)) (Poly%fun%1. (mk_fun %%lambda%%7)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_containers. pre%self! self! containers!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_volumes")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_volumes.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_volumes.) (forall ((self! Poly) (volumes! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_volumes.? self! volumes!) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some volumes!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_volumes.? self! volumes!)) ))))
(assert (forall ((self! Poly) (volumes! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type volumes! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_volumes.? self! volumes!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_volumes.? self! volumes!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::Volume::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::pod::PodSpec::set_volumes")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_volumes. (rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%8 () %%Function%%)
(assert (forall ((vol$ Poly)) (! (= (%%apply%%0 %%lambda%%8 vol$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? vol$))) :pattern ((%%apply%%0 %%lambda%%8 vol$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (volumes! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_volumes. pre%self! self! volumes!) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_volumes.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume./alloc!alloc.Global.>. volumes!)) (Poly%fun%1. (mk_fun %%lambda%%8)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_volumes. pre%self! self! volumes!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_init_containers")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_init_containers.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_init_containers.) (forall ((self! Poly) (init_containers! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_init_containers.? self! init_containers!) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some init_containers!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_init_containers.? self! init_containers!)) ))))
(assert (forall ((self! Poly) (init_containers! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type init_containers! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_init_containers.? self! init_containers!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_init_containers.? self! init_containers!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::pod::PodSpec::set_init_containers")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_init_containers. (rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (init_containers! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_init_containers. pre%self! self! init_containers!) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_init_containers.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.Container. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.Container./alloc!alloc.Global.>. init_containers!)) (Poly%fun%1. (mk_fun %%lambda%%7)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_init_containers. pre%self! self! init_containers!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_service_account_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_service_account_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_service_account_name.) (forall ((self! Poly) (service_account_name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_service_account_name.? self! service_account_name!) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some service_account_name!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_service_account_name.? self! service_account_name!)) ))))
(assert (forall ((self! Poly) (service_account_name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type service_account_name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_service_account_name.? self! service_account_name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_service_account_name.? self! service_account_name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::pod::PodSpec::set_service_account_name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_service_account_name. (rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (service_account! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_service_account_name. pre%self! self! service_account!) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_service_account_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. service_account!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_service_account_name. pre%self! self! service_account!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_tolerations")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_tolerations.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_tolerations.) (forall ((self! Poly) (tolerations! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_tolerations.? self! tolerations!) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some tolerations!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_tolerations.? self! tolerations!)) ))))
(assert (forall ((self! Poly) (tolerations! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type tolerations! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_tolerations.? self! tolerations!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_tolerations.? self! tolerations!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::unset_tolerations")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_tolerations.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_tolerations.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_tolerations.? self!) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/termination_grace_period_seconds (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_tolerations.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_tolerations.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_tolerations.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::pod::PodSpec::overwrite_tolerations")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.overwrite_tolerations. (rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. core!option.Option.) Bool)
(declare-fun %%lambda%%9 () %%Function%%)
(assert (forall ((toleration$ Poly)) (! (= (%%apply%%0 %%lambda%%9 toleration$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. (rabbitmq_controller!kubernetes_api_objects.exec.toleration.impl&%0.view.? toleration$))) :pattern ((%%apply%%0 %%lambda%%9 toleration$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (tolerations! core!option.Option.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.overwrite_tolerations. pre%self! self! tolerations!) (and (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. tolerations!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.unset_tolerations.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. pre%self!)))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. tolerations!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_tolerations.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. $ TYPE%alloc!alloc.Global.) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tolerations!)))) (Poly%fun%1. (mk_fun %%lambda%%9)))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.overwrite_tolerations. pre%self! self! tolerations!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod::PodSpecView::set_termination_grace_period_seconds")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_termination_grace_period_seconds.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_termination_grace_period_seconds.) (forall ((self! Poly) (termination_grace_period_seconds! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_termination_grace_period_seconds.? self! termination_grace_period_seconds!) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/affinity (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/volumes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/init_containers (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/service_account_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/tolerations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some termination_grace_period_seconds!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_termination_grace_period_seconds.? self! termination_grace_period_seconds!)) ))))
(assert (forall ((self! Poly) (termination_grace_period_seconds! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.) (has_type termination_grace_period_seconds! INT)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_termination_grace_period_seconds.? self! termination_grace_period_seconds!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_termination_grace_period_seconds.? self! termination_grace_period_seconds!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::pod::PodSpec::set_termination_grace_period_seconds")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_termination_grace_period_seconds. (rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. Int) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) (termination_grace_period_seconds! Int)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_termination_grace_period_seconds. pre%self! self! termination_grace_period_seconds!) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.set_termination_grace_period_seconds.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. pre%self!))) (I termination_grace_period_seconds!)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.set_termination_grace_period_seconds. pre%self! self! termination_grace_period_seconds!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::pod_template_spec::PodTemplateSpec::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.) Bool)
(assert (forall ((no%param Int) (pod_template_spec! rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.default. no%param pod_template_spec!) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. pod_template_spec!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.default. no%param pod_template_spec!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod_template_spec::PodTemplateSpecView::set_metadata")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_metadata.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_metadata.) (forall ((self! Poly) (metadata! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_metadata.? self! metadata!) (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some metadata!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_metadata.? self! metadata!)) ))))
(assert (forall ((self! Poly) (metadata! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.) (has_type metadata! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_metadata.? self! metadata!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_metadata.? self! metadata!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::pod_template_spec::PodTemplateSpec::set_metadata")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.set_metadata. (rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.) (metadata! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.set_metadata. pre%self! self! metadata!) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_metadata.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. metadata!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.set_metadata. pre%self! self! metadata!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::pod_template_spec::PodTemplateSpecView::set_spec")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_spec.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_spec.) (forall ((self! Poly) (spec! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_spec.? self! spec!) (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView./PodTemplateSpecView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some spec!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_spec.? self! spec!)) ))))
(assert (forall ((self! Poly) (spec! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.) (has_type spec! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_spec.? self! spec!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_spec.? self! spec!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::pod_template_spec::PodTemplateSpec::set_spec")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.set_spec. (rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.) (spec! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.set_spec. pre%self! self! spec!) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_spec.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. spec!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.set_spec. pre%self! self! spec!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource_requirements::ResourceRequirementsView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::resource_requirements::ResourceRequirements::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.) Bool)
(assert (forall ((no%param Int) (resource_requirements! rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.default. no%param resource_requirements!) (= (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. resource_requirements!)) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.default. no%param resource_requirements!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource_requirements::ResourceRequirementsView::set_limits")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_limits.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_limits.) (forall ((self! Poly) (limits! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_limits.? self! limits!) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some limits!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/requests (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_limits.? self! limits!)) ))))
(assert (forall ((self! Poly) (limits! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (has_type limits! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_limits.? self! limits!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_limits.? self! limits!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::resource_requirements::ResourceRequirements::set_limits")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.set_limits. (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. rabbitmq_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.) (self! rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.) (limits! rabbitmq_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.set_limits. pre%self! self! limits!) (= (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_limits.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. pre%self!))) (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. limits!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.set_limits. pre%self! self! limits!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::resource_requirements::ResourceRequirementsView::set_requests")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_requests.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_requests.) (forall ((self! Poly) (requests! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_requests.? self! requests!) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView/limits (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some requests!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_requests.? self! requests!)) ))))
(assert (forall ((self! Poly) (requests! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.) (has_type requests! (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_requests.? self! requests!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_requests.? self! requests!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::resource_requirements::ResourceRequirements::set_requests")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.set_requests. (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. rabbitmq_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.) (self! rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.) (requests! rabbitmq_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.set_requests. pre%self! self! requests!) (= (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_requests.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements. pre%self!))) (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. requests!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.set_requests. pre%self! self! requests!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.default.) (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSet::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) Bool)
(assert (forall ((no%param Int) (stateful_set! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.default. no%param stateful_set!) (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. stateful_set!)) (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.default. no%param stateful_set!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSet::clone")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.clone. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) (s! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.clone. self! s!) (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. s!)) (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. self!)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.clone. self! s!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSet::metadata")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.metadata. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) (metadata! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.metadata. self! metadata!) (= (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. metadata!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. self!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.metadata. self! metadata!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSet::spec")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.spec. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) (spec! core!option.Option.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.spec. self! spec!) (and (has_type (Poly%core!option.Option. spec!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. self!)))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. spec!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. spec!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. spec!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. self!)))))))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.spec. self! spec!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetView::set_metadata")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_metadata.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_metadata.) (forall ((self! Poly) (metadata! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_metadata.? self! metadata!) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. metadata!) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_metadata.? self! metadata!)) ))))
(assert (forall ((self! Poly) (metadata! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (has_type metadata! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_metadata.? self! metadata!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_metadata.? self! metadata!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSet::set_metadata")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.set_metadata. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) (self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) (metadata! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.set_metadata. pre%self! self! metadata!) (= (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. self!))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_metadata.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. pre%self!)) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. metadata!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.set_metadata. pre%self! self! metadata!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetView::set_spec")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_spec.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_spec.) (forall ((self! Poly) (spec! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_spec.? self! spec!) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some spec!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_spec.? self! spec!)) ))))
(assert (forall ((self! Poly) (spec! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (has_type spec! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_spec.? self! spec!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_spec.? self! spec!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSet::set_spec")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.set_spec. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) (self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) (spec! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.set_spec. pre%self! self! spec!) (= (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. self!))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_spec.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. pre%self!)) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. spec!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.set_spec. pre%self! self! spec!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetView::kind")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.kind.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.kind.) (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./StatefulSetKind))))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSet::api_resource")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.api_resource. (Int rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.) Bool)
(assert (forall ((no%param Int) (res! rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.api_resource. no%param res!) (= (rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView./ApiResourceView/kind (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_resource.ApiResourceView. (rabbitmq_controller!kubernetes_api_objects.exec.api_resource.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.api_resource.ApiResource. res!))))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.api_resource. no%param res!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetView::marshal")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.marshal.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.marshal.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. self!))))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. self!)))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. self!)) ))))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSet::marshal")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.marshal. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) (obj! rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.marshal. self! obj!) (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!)) (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. self!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.marshal. self! obj!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetView::unmarshal")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.unmarshal.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%1.unmarshal.) (forall ((obj! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. obj!) (Poly%core!result.Result. (ite (not (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (core!result.Result./Ok (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)))) (%Poly%core!option.Option. (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))) (%Poly%core!option.Option. (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. obj!)) ))))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSet::unmarshal")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.unmarshal. (rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. core!result.Result.) Bool)
(assert (forall ((obj! rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject.) (res! core!result.Result.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.unmarshal. obj! res!) (and (has_type (Poly%core!result.Result. res!) (TYPE%core!result.Result. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. $ TYPE%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError.)) (= (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. res!)))) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!))))))) (=> (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. res!))))) (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. res!)))) (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.dynamic.DynamicObject. obj!))))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.unmarshal. obj! res!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default.? (I 0)))) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default.? (I 0)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) Bool)
(assert (forall ((no%param Int) (stateful_set_spec! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.default. no%param stateful_set_spec!) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. stateful_set_spec!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.default. no%param stateful_set_spec!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_replicas")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_replicas.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_replicas.) (forall ((self! Poly) (replicas! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_replicas.? self! replicas!) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some replicas!))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_replicas.? self! replicas!)) ))))
(assert (forall ((self! Poly) (replicas! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type replicas! INT)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_replicas.? self! replicas!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_replicas.? self! replicas!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::set_replicas")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_replicas. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. Int) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (replicas! Int)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_replicas. pre%self! self! replicas!) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_replicas.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. pre%self!))) (I replicas!)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_replicas. pre%self! self! replicas!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_selector")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_selector.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_selector.) (forall ((self! Poly) (selector! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_selector.? self! selector!) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. selector!) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_selector.? self! selector!)) ))))
(assert (forall ((self! Poly) (selector! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type selector! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_selector.? self! selector!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_selector.? self! selector!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::set_selector")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_selector. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (selector! rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_selector. pre%self! self! selector!) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_selector.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector. selector!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_selector. pre%self! self! selector!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_service_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_service_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_service_name.) (forall ((self! Poly) (service_name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_service_name.? self! service_name!) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) service_name! (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_service_name.? self! service_name!)) ))))
(assert (forall ((self! Poly) (service_name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type service_name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_service_name.? self! service_name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_service_name.? self! service_name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::set_service_name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_service_name. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (service_name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_service_name. pre%self! self! service_name!) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_service_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. service_name!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_service_name. pre%self! self! service_name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_template")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_template.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_template.) (forall ((self! Poly) (template! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_template.? self! template!) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. template!) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_template.? self! template!)) ))))
(assert (forall ((self! Poly) (template! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type template! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_template.? self! template!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_template.? self! template!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::set_template")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_template. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (template! rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_template. pre%self! self! template!) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_template.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. template!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_template. pre%self! self! template!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_volume_claim_templates")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_volume_claim_templates.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_volume_claim_templates.) (forall ((self! Poly) (volume_claim_templates! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_volume_claim_templates.? self! volume_claim_templates!) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some volume_claim_templates!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_volume_claim_templates.? self! volume_claim_templates!)) ))))
(assert (forall ((self! Poly) (volume_claim_templates! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type volume_claim_templates! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_volume_claim_templates.? self! volume_claim_templates!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_volume_claim_templates.? self! volume_claim_templates!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::set_volume_claim_templates")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_volume_claim_templates. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%10 () %%Function%%)
(assert (forall ((pvc$ Poly)) (! (= (%%apply%%0 %%lambda%%10 pvc$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.view.? pvc$))) :pattern ((%%apply%%0 %%lambda%%10 pvc$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (volume_claim_templates! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_volume_claim_templates. pre%self! self! volume_claim_templates!) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_volume_claim_templates.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. volume_claim_templates!)) (Poly%fun%1. (mk_fun %%lambda%%10)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_volume_claim_templates. pre%self! self! volume_claim_templates!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_pod_management_policy")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pod_management_policy.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pod_management_policy.) (forall ((self! Poly) (pod_management_policy! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pod_management_policy.? self! pod_management_policy!) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some pod_management_policy!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pod_management_policy.? self! pod_management_policy!)) ))))
(assert (forall ((self! Poly) (pod_management_policy! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type pod_management_policy! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pod_management_policy.? self! pod_management_policy!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pod_management_policy.? self! pod_management_policy!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::set_pod_management_policy")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_pod_management_policy. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (pod_management_policy! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_pod_management_policy. pre%self! self! pod_management_policy!) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pod_management_policy.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. pod_management_policy!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_pod_management_policy. pre%self! self! pod_management_policy!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::set_pvc_retention_policy")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pvc_retention_policy.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pvc_retention_policy.) (forall ((self! Poly) (pvc_retention_policy! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pvc_retention_policy.? self! pvc_retention_policy!) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some pvc_retention_policy!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pvc_retention_policy.? self! pvc_retention_policy!)) ))))
(assert (forall ((self! Poly) (pvc_retention_policy! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type pvc_retention_policy! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pvc_retention_policy.? self! pvc_retention_policy!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pvc_retention_policy.? self! pvc_retention_policy!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetPersistentVolumeClaimRetentionPolicy::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%5.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%5.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::set_pvc_retention_policy")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_pvc_retention_policy. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (pvc_retention_policy! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_pvc_retention_policy. pre%self! self! pvc_retention_policy!) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pvc_retention_policy.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%5.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. pvc_retention_policy!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_pvc_retention_policy. pre%self! self! pvc_retention_policy!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::stateful_set::StatefulSetSpecView::unset_pvc_retention_policy")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.unset_pvc_retention_policy.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.unset_pvc_retention_policy.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.unset_pvc_retention_policy.? self!) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.unset_pvc_retention_policy.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.unset_pvc_retention_policy.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.unset_pvc_retention_policy.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::overwrite_pvc_retention_policy")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.overwrite_pvc_retention_policy. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. core!option.Option.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (pvc_retention_policy! core!option.Option.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.overwrite_pvc_retention_policy. pre%self! self! pvc_retention_policy!) (and (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. pvc_retention_policy!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.unset_pvc_retention_policy.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. pre%self!)))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. pvc_retention_policy!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.set_pvc_retention_policy.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%5.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. pvc_retention_policy!)))))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.overwrite_pvc_retention_policy. pre%self! self! pvc_retention_policy!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::replicas")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.replicas. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (replicas! core!option.Option.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.replicas. self! replicas!) (and (has_type (Poly%core!option.Option. replicas!) (TYPE%core!option.Option. $ (SINT 32))) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. replicas!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. replicas!))))) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. replicas!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!)))))))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.replicas. self! replicas!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::template")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.template. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (template! rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.template. self! template!) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec. template!)) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.template. self! template!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::stateful_set::StatefulSetSpec::persistent_volume_claim_retention_policy")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.persistent_volume_claim_retention_policy. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.) (persistent_volume_claim_retention_policy! core!option.Option.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.persistent_volume_claim_retention_policy. self! persistent_volume_claim_retention_policy!) (and (has_type (Poly%core!option.Option. persistent_volume_claim_retention_policy!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. persistent_volume_claim_retention_policy!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. persistent_volume_claim_retention_policy!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%5.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. persistent_volume_claim_retention_policy!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec. self!))))))))))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.persistent_volume_claim_retention_policy. self! persistent_volume_claim_retention_policy!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::Volume::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) Bool)
(assert (forall ((no%param Int) (volume! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.default. no%param volume!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. volume!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.default. no%param volume!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? self! name!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) name! (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? self! name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? self! name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::Volume::set_name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_name. (rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_name. pre%self! self! name!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_name. pre%self! self! name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_config_map")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_config_map.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_config_map.) (forall ((self! Poly) (config_map! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_config_map.? self! config_map!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some config_map!))) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_config_map.? self! config_map!)) ))))
(assert (forall ((self! Poly) (config_map! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type config_map! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_config_map.? self! config_map!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_config_map.? self! config_map!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::ConfigMapVolumeSource::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::Volume::set_config_map")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_config_map. (rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (config_map! rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_config_map. pre%self! self! config_map!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_config_map.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. config_map!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_config_map. pre%self! self! config_map!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_projected")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_projected.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_projected.) (forall ((self! Poly) (projected! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_projected.? self! projected!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some projected!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_projected.? self! projected!)) ))))
(assert (forall ((self! Poly) (projected! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type projected! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_projected.? self! projected!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_projected.? self! projected!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::ProjectedVolumeSource::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::Volume::set_projected")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_projected. (rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (projected! rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_projected. pre%self! self! projected!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_projected.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. projected!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_projected. pre%self! self! projected!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_secret")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.) (forall ((self! Poly) (secret! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? self! secret!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some secret!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? self! secret!)) ))))
(assert (forall ((self! Poly) (secret! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type secret! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? self! secret!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? self! secret!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::SecretVolumeSource::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::Volume::set_secret")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_secret. (rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (secret! rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_secret. pre%self! self! secret!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. secret!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_secret. pre%self! self! secret!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_downward_api")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_downward_api.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_downward_api.) (forall ((self! Poly) (downward_api! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_downward_api.? self! downward_api!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some downward_api!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/empty_dir (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_downward_api.? self! downward_api!)) ))))
(assert (forall ((self! Poly) (downward_api! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type downward_api! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_downward_api.? self! downward_api!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_downward_api.? self! downward_api!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::DownwardAPIVolumeSource::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::Volume::set_downward_api")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_downward_api. (rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (downward_api! rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_downward_api. pre%self! self! downward_api!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_downward_api.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. downward_api!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_downward_api. pre%self! self! downward_api!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeView::set_empty_dir")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir.) (forall ((self! Poly) (empty_dir! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir.? self! empty_dir!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/host_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/config_map (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/projected (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/secret (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView./VolumeView/downward_api (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some empty_dir!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir.? self! empty_dir!)) ))))
(assert (forall ((self! Poly) (empty_dir! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (has_type empty_dir! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir.? self! empty_dir!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir.? self! empty_dir!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::EmptyDirVolumeSource::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%1.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%1.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::Volume::set_empty_dir")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_empty_dir. (rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume.) (empty_dir! rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_empty_dir. pre%self! self! empty_dir!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.Volume. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. empty_dir!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%0.set_empty_dir. pre%self! self! empty_dir!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::EmptyDirVolumeSourceView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView./EmptyDirVolumeSourceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::EmptyDirVolumeSource::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%1.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.) Bool)
(assert (forall ((no%param Int) (empty_dir_volum_source! rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%1.default. no%param empty_dir_volum_source!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.EmptyDirVolumeSource. empty_dir_volum_source!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%1.default. no%param empty_dir_volum_source!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::ConfigMapVolumeSourceView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::ConfigMapVolumeSource::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.) Bool)
(assert (forall ((no%param Int) (config_map_volume_source! rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.default. no%param config_map_volume_source!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. config_map_volume_source!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.default. no%param config_map_volume_source!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::ConfigMapVolumeSourceView::set_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.set_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.set_name.? self! name!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView./ConfigMapVolumeSourceView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some name!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.set_name.? self! name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.set_name.? self! name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::ConfigMapVolumeSource::set_name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.set_name. (rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource.) (name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.set_name. pre%self! self! name!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapVolumeSource. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%3.set_name. pre%self! self! name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::SecretVolumeSourceView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::SecretVolumeSource::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.) Bool)
(assert (forall ((no%param Int) (secret_volume_source! rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.default. no%param secret_volume_source!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. secret_volume_source!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.default. no%param secret_volume_source!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::SecretVolumeSourceView::set_secret_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.) (forall ((self! Poly) (secret_name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? self! secret_name!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView./SecretVolumeSourceView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some secret_name!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? self! secret_name!)) ))))
(assert (forall ((self! Poly) (secret_name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.) (has_type secret_name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? self! secret_name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? self! secret_name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::SecretVolumeSource::set_secret_name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.set_secret_name. (rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource.) (secret_name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.set_secret_name. pre%self! self! secret_name!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretVolumeSource. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. secret_name!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%4.set_secret_name. pre%self! self! secret_name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::ProjectedVolumeSourceView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::ProjectedVolumeSource::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.) Bool)
(assert (forall ((no%param Int) (projected_volume_source! rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.default. no%param projected_volume_source!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. projected_volume_source!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.default. no%param projected_volume_source!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::ProjectedVolumeSourceView::set_sources")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.set_sources.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.set_sources.) (forall ((self! Poly) (sources! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.set_sources.? self! sources!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView./ProjectedVolumeSourceView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some sources!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.set_sources.? self! sources!)) ))))
(assert (forall ((self! Poly) (sources! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.) (has_type sources! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.set_sources.? self! sources!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.set_sources.? self! sources!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::VolumeProjection::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::ProjectedVolumeSource::set_sources")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.set_sources. (rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%11 () %%Function%%)
(assert (forall ((v$ Poly)) (! (= (%%apply%%0 %%lambda%%11 v$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.view.? v$))) :pattern ((%%apply%%0 %%lambda%%11 v$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource.) (sources! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.set_sources. pre%self! self! sources!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.set_sources.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ProjectedVolumeSource. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection./alloc!alloc.Global.>. sources!)) (Poly%fun%1. (mk_fun %%lambda%%11)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%5.set_sources. pre%self! self! sources!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeProjectionView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::VolumeProjection::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.) Bool)
(assert (forall ((no%param Int) (volume_projection! rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.default. no%param volume_projection!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. volume_projection!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.default. no%param volume_projection!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeProjectionView::set_config_map")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_config_map.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_config_map.) (forall ((self! Poly) (config_map! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_config_map.? self! config_map!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some config_map!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/secret (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_config_map.? self! config_map!)) ))))
(assert (forall ((self! Poly) (config_map! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) (has_type config_map! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_config_map.? self! config_map!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_config_map.? self! config_map!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::ConfigMapProjection::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::VolumeProjection::set_config_map")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.set_config_map. (rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.) (config_map! rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.set_config_map. pre%self! self! config_map!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_config_map.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. config_map!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.set_config_map. pre%self! self! config_map!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::VolumeProjectionView::set_secret")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_secret.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_secret.) (forall ((self! Poly) (secret! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_secret.? self! secret!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView./VolumeProjectionView/config_map (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some secret!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_secret.? self! secret!)) ))))
(assert (forall ((self! Poly) (secret! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) (has_type secret! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_secret.? self! secret!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_secret.? self! secret!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::SecretProjection::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::VolumeProjection::set_secret")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.set_secret. (rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection.) (secret! rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.set_secret. pre%self! self! secret!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_secret.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.VolumeProjection. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. secret!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%6.set_secret. pre%self! self! secret!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::ConfigMapProjectionView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::ConfigMapProjection::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.) Bool)
(assert (forall ((no%param Int) (config_map_projection! rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.default. no%param config_map_projection!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. config_map_projection!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.default. no%param config_map_projection!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::ConfigMapProjectionView::set_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_name.? self! name!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/items (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some name!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_name.? self! name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_name.? self! name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::ConfigMapProjection::set_name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.set_name. (rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.) (name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.set_name. pre%self! self! name!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.set_name. pre%self! self! name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::ConfigMapProjectionView::set_items")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_items.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_items.) (forall ((self! Poly) (items! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_items.? self! items!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some items!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView./ConfigMapProjectionView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_items.? self! items!)) ))))
(assert (forall ((self! Poly) (items! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.) (has_type items! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_items.? self! items!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_items.? self! items!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::KeyToPath::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::ConfigMapProjection::set_items")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.set_items. (rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%12 () %%Function%%)
(assert (forall ((v$ Poly)) (! (= (%%apply%%0 %%lambda%%12 v$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.view.? v$))) :pattern ((%%apply%%0 %%lambda%%12 v$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection.) (items! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.set_items. pre%self! self! items!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_items.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ConfigMapProjection. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. items!)) (Poly%fun%1. (mk_fun %%lambda%%12)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%7.set_items. pre%self! self! items!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::SecretProjectionView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::SecretProjection::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.) Bool)
(assert (forall ((no%param Int) (secret_projection! rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.default. no%param secret_projection!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. secret_projection!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.default. no%param secret_projection!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::SecretProjectionView::set_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_name.) (forall ((self! Poly) (name! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_name.? self! name!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/items (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some name!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_name.? self! name!)) ))))
(assert (forall ((self! Poly) (name! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) (has_type name! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_name.? self! name!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_name.? self! name!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::SecretProjection::set_name")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.set_name. (rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.) (name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.set_name. pre%self! self! name!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.set_name. pre%self! self! name!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::SecretProjectionView::set_items")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_items.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_items.) (forall ((self! Poly) (items! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_items.? self! items!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some items!))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView./SecretProjectionView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_items.? self! items!)) ))))
(assert (forall ((self! Poly) (items! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.) (has_type items! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_items.? self! items!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_items.? self! items!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::SecretProjection::set_items")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.set_items. (rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection.) (items! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.set_items. pre%self! self! items!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_items.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.SecretProjection. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath./alloc!alloc.Global.>. items!)) (Poly%fun%1. (mk_fun %%lambda%%12)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%8.set_items. pre%self! self! items!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::KeyToPathView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::KeyToPath::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.) Bool)
(assert (forall ((no%param Int) (key_to_path! rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.default. no%param key_to_path!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. key_to_path!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.default. no%param key_to_path!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::KeyToPathView::set_key")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key.) (forall ((self! Poly) (key! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key.? self! key!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView key! (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. self!)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) (has_type key! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key.? self! key!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key.? self! key!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::KeyToPath::set_key")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.set_key. (rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.) (key! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.set_key. pre%self! self! key!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. key!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.set_key. pre%self! self! key!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::KeyToPathView::set_path")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path.) (forall ((self! Poly) (path! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path.? self! path!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView (rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView./KeyToPathView/key (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. self!)) path!)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path.? self! path!)) ))))
(assert (forall ((self! Poly) (path! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) (has_type path! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path.? self! path!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path.? self! path!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::KeyToPath::set_path")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.set_path. (rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath.) (path! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.set_path. pre%self! self! path!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.KeyToPath. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. path!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%9.set_path. pre%self! self! path!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::DownwardAPIVolumeSourceView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::DownwardAPIVolumeSource::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.) Bool)
(assert (forall ((no%param Int) (downward_api_volume_source! rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.default. no%param downward_api_volume_source!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. downward_api_volume_source!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.default. no%param downward_api_volume_source!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::DownwardAPIVolumeSourceView::set_items")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.set_items.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.set_items.) (forall ((self! Poly) (items! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.set_items.? self! items!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView./DownwardAPIVolumeSourceView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some items!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.set_items.? self! items!)) ))))
(assert (forall ((self! Poly) (items! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.) (has_type items! (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.set_items.? self! items!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.set_items.? self! items!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::exec::volume::DownwardAPIVolumeFile::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.view.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::DownwardAPIVolumeSource::set_items")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.set_items. (rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>.) Bool)
(declare-fun %%lambda%%13 () %%Function%%)
(assert (forall ((v$ Poly)) (! (= (%%apply%%0 %%lambda%%13 v$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.view.? v$))) :pattern ((%%apply%%0 %%lambda%%13 v$)))))
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource.) (items! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.set_items. pre%self! self! items!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.set_items.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeSource. pre%self!))) (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile./alloc!alloc.Global.>. items!)) (Poly%fun%1. (mk_fun %%lambda%%13)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%10.set_items. pre%self! self! items!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::DownwardAPIVolumeFileView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::DownwardAPIVolumeFile::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.) Bool)
(assert (forall ((no%param Int) (downward_api_volume_file! rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.default. no%param downward_api_volume_file!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. downward_api_volume_file!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.default. no%param downward_api_volume_file!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::DownwardAPIVolumeFileView::set_field_ref")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_field_ref.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_field_ref.) (forall ((self! Poly) (field_ref! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_field_ref.? self! field_ref!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some field_ref!))) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. self!)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_field_ref.? self! field_ref!)) ))))
(assert (forall ((self! Poly) (field_ref! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) (has_type field_ref! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_field_ref.? self! field_ref!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_field_ref.? self! field_ref!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::DownwardAPIVolumeFile::set_field_ref")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.set_field_ref. (rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.) (field_ref! rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.set_field_ref. pre%self! self! field_ref!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_field_ref.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. pre%self!))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. field_ref!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.set_field_ref. pre%self! self! field_ref!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::DownwardAPIVolumeFileView::set_path")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_path.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_path.) (forall ((self! Poly) (path! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_path.? self! path!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView./DownwardAPIVolumeFileView/field_ref (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. self!)))) path!)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_path.? self! path!)) ))))
(assert (forall ((self! Poly) (path! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) (has_type path! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_path.? self! path!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_path.? self! path!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::DownwardAPIVolumeFile::set_path")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.set_path. (rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile.) (path! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.set_path. pre%self! self! path!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.DownwardAPIVolumeFile. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. path!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%11.set_path. pre%self! self! path!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::ObjectFieldSelectorView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? no%param) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? no%param)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? no%param)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::ObjectFieldSelector::default")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.default. (Int rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.) Bool)
(assert (forall ((no%param Int) (object_field_selector! rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.default. no%param object_field_selector!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. object_field_selector!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? (I 0)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.default. no%param object_field_selector!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::ObjectFieldSelectorView::set_field_path")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path.) (forall ((self! Poly) (field_path! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path.? self! field_path!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView field_path! (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/api_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. self!)))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path.? self! field_path!)) ))))
(assert (forall ((self! Poly) (field_path! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) (has_type field_path! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path.? self! field_path!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path.? self! field_path!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::ObjectFieldSelector::set_field_path")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.set_field_path. (rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. vstd!string.String.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.) (self! rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.) (field_path! vstd!string.String.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.set_field_path. pre%self! self! field_path!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. self!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. field_path!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.set_field_path. pre%self! self! field_path!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::kubernetes_api_objects::spec::volume::ObjectFieldSelectorView::set_api_version")
(assert (fuel_bool_default fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_api_version.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_api_version.) (forall ((self! Poly) (api_version! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_api_version.? self! api_version!) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView/field_path (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. self!)) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some api_version!))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_api_version.? self! api_version!)) ))))
(assert (forall ((self! Poly) (api_version! Poly)) (! (=> (and (has_type self! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.) (has_type api_version! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_api_version.? self! api_version!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView.)) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_api_version.? self! api_version!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqCluster::metadata")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.metadata. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) (metadata! rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.metadata. self! metadata!) (= (rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta. metadata!)) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. self!)))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.metadata. self! metadata!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? self!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqCluster::spec")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) (spec! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. self! spec!) (= (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. spec!)) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. self!)))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. self! spec!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::kind")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.kind.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.kind.) (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. rabbitmq_controller!kubernetes_api_objects.spec.common.Kind./CustomResourceKind))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::controller_owner_ref")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.) (forall ((self! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!) (rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView./OwnerReferenceView (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (B true)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))))))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!))))))))))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqCluster::controller_owner_ref")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.controller_owner_ref. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) (owner_reference! rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.controller_owner_ref. self! owner_reference!) (= (rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.impl&%0.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. owner_reference!)) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. self!))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.controller_owner_ref. self! owner_reference!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::marshal")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.marshal.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.marshal.) (forall ((self! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_spec.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!))))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal_status.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/status (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::unmarshal")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.unmarshal.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.unmarshal.) (forall ((obj! Poly)) (! (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. obj!) (Poly%core!result.Result. (ite (not (= (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/kind (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.)))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (ite (not (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))) (core!result.Result./Err (Poly%rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError. rabbitmq_controller!kubernetes_api_objects.error.ParseDynamicObjectError./UnmarshalError)) (core!result.Result./Ok (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!)))) (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_spec.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))) (%Poly%core!option.Option. (core!result.Result./Ok/0 (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal_status.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.marshal.Value. (rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView./DynamicObjectView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.dynamic.DynamicObjectView. obj!))))))))))))))) :pattern ((rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. obj!)) ))))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::replicas")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.replicas. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. Int) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (replicas! Int)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.replicas. self! replicas!) (and (iInv 32 replicas!) (= replicas! (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/replicas (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!)))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.replicas. self! replicas!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::image")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.image. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. vstd!string.String.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (image! vstd!string.String.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.image. self! image!) (= (vstd!string.impl&%1.view.? (Poly%vstd!string.String. image!)) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.image. self! image!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqConfig::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.view.? self!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::rabbitmq_config")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.rabbitmq_config. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (rabbitmq_config! core!option.Option.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.rabbitmq_config. self! rabbitmq_config!) (and (has_type (Poly%core!option.Option. rabbitmq_config!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. rabbitmq_config!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. rabbitmq_config!))))) (= (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. rabbitmq_config!)))) (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.rabbitmq_config. self! rabbitmq_config!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterPersistenceSpec::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.) (has_type (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.view.? self!)) TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.view.? self!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::persistence")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.persistence. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (persistence! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.persistence. self! persistence!) (= (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. persistence!)) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.persistence. self! persistence!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::affinity")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.affinity. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (affinity! core!option.Option.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.affinity. self! affinity!) (and (has_type (Poly%core!option.Option. affinity!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.affinity.Affinity.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. affinity!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. affinity!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.affinity.impl&%0.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. affinity!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.affinity.AffinityView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.affinity. self! affinity!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::tolerations")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.tolerations. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (tolerations! core!option.Option.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.tolerations. self! tolerations!) (and (has_type (Poly%core!option.Option. tolerations!) (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. $ TYPE%alloc!alloc.Global.))) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. tolerations!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. tolerations!))))) (= (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.toleration.TolerationView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.toleration.Toleration. $ TYPE%alloc!alloc.Global.) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tolerations!)))) (Poly%fun%1. (mk_fun %%lambda%%9))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!)))))))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.tolerations. self! tolerations!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::annotations")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.annotations. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. rabbitmq_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (annotations! rabbitmq_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.annotations. self! annotations!) (= (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. annotations!)) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.annotations. self! annotations!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::resources")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.resources. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (resources! core!option.Option.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.resources. self! resources!) (and (has_type (Poly%core!option.Option. resources!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. resources!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. resources!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. resources!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.resources. self! resources!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::pod_management_policy")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.pod_management_policy. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. vstd!string.String.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (policy! vstd!string.String.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.pod_management_policy. self! policy!) (= (vstd!string.impl&%1.view.? (Poly%vstd!string.String. policy!)) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.pod_management_policy. self! policy!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterSpec::persistent_volume_claim_retention_policy")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.persistent_volume_claim_retention_policy. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.) (policy! core!option.Option.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.persistent_volume_claim_retention_policy. self! policy!) (and (has_type (Poly%core!option.Option. policy!) (TYPE%core!option.Option. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. policy!)))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!)))))))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. policy!))))) (= (rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%5.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. policy!)))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicyView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec. self!))))))))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.persistent_volume_claim_retention_policy. self! policy!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqConfig::advanced_config")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.advanced_config. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.) (advanced_config! core!option.Option.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.advanced_config. self! advanced_config!) (and (has_type (Poly%core!option.Option. advanced_config!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. advanced_config!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. advanced_config!))))) (= (vstd!string.impl&%1.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. advanced_config!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. self!)))))))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.advanced_config. self! advanced_config!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqConfig::env_config")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.env_config. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. core!option.Option.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig.) (env_config! core!option.Option.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.env_config. self! env_config!) (and (has_type (Poly%core!option.Option. env_config!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (= (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. self!))))))))) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. env_config!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. env_config!))))) (= (vstd!string.impl&%1.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. env_config!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqConfig. self!)))))))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%6.env_config. self! env_config!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterPersistenceSpec::storage")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.storage. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. vstd!string.String.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.) (storage! vstd!string.String.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.storage. self! storage!) (= (vstd!string.impl&%1.view.? (Poly%vstd!string.String. storage!)) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. self!))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.storage. self! storage!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqClusterPersistenceSpec::storage_class_name")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.storage_class_name. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. vstd!string.String.) Bool)
(assert (forall ((self! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.) (storage_class_name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.storage_class_name. self! storage_class_name!) (= (vstd!string.impl&%1.view.? (Poly%vstd!string.String. storage_class_name!)) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.view.? (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec. self!))))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.storage_class_name. self! storage_class_name!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Specs rabbitmq_controller::vstd_ext::string_map::StringMap::insert")
(declare-fun ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.insert. (rabbitmq_controller!vstd_ext.string_map.StringMap. rabbitmq_controller!vstd_ext.string_map.StringMap. vstd!string.String. vstd!string.String. core!option.Option.) Bool)
(assert (forall ((pre%self! rabbitmq_controller!vstd_ext.string_map.StringMap.) (self! rabbitmq_controller!vstd_ext.string_map.StringMap.) (key! vstd!string.String.) (value! vstd!string.String.) (old_v! core!option.Option.)) (! (= (ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.insert. pre%self! self! key! value! old_v!) (and (has_type (Poly%core!option.Option. old_v!) (TYPE%core!option.Option. $ TYPE%vstd!string.String.)) (= (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. self!)) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. pre%self!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. key!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. value!)))) (= (vstd!set.impl&%0.contains.? $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.dom.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. pre%self!))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. key!))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. old_v!)))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. old_v!))))) (= (vstd!string.impl&%1.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. old_v!)))) (vstd!map.impl&%0.index.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. pre%self!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. key!))))))) :pattern ((ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.insert. pre%self! self! key! value! old_v!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::check_argument_is_seq")
(assert (fuel_bool_default fuel%vstd!seq_lib.check_argument_is_seq.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.check_argument_is_seq.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (vstd!seq_lib.check_argument_is_seq.? A&. A& s!) s!) :pattern ((vstd!seq_lib.check_argument_is_seq.? A&. A& s!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.check_argument_is_seq.? A&. A& s!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.check_argument_is_seq.? A&. A& s!)) )))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%1::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%1.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%1.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (BOX A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (BOX A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (RC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (RC A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%3::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%3.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%3.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (ARC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (ARC A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%5::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%5.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%5.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%11::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%11.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%11.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%15::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%15.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%15.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%19::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%19.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%19.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::well_formed")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.) (forall ((self! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? self!) (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!))))))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. self!)))))))))))) :pattern ((rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? self!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::StatefulSetBuilder::requirements")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.impl&%0.requirements.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.impl&%0.requirements.) (forall ((rabbitmq! Poly)) (! (= (rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? $ TYPE%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. rabbitmq!) (B (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? rabbitmq!))) :pattern ((rabbitmq_controller!reconciler.exec.resource_builder.ResourceBuilder.requirements.? $ TYPE%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. rabbitmq!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::common::make_labels")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels.) (forall ((rabbitmq! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels.? rabbitmq!) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/labels (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 1588539530315223847722953298287299374188107919534831743833089341130026030232599932513390495630937258371487356320380652074008820394790478717851686026166260))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels.? rabbitmq!)) ))))
(assert (forall ((rabbitmq! Poly)) (! (=> (has_type rabbitmq! TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels.? rabbitmq!) (TYPE%vstd!map.Map. $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels.? rabbitmq!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::common::make_owner_references")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.common.make_owner_references.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.common.make_owner_references.) (forall ((rabbitmq! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.model.resource.common.make_owner_references.? rabbitmq!) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? rabbitmq!))))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.common.make_owner_references.? rabbitmq!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::make_stateful_set_name")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name.) (forall ((rabbitmq! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name.? rabbitmq!) (vstd!seq.Seq.add.? $ CHAR (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 10279308584099474568940563332545884414184594758518238841138723754616012683779746418232774576598959013196533085821287704910359838186536854093139200408962316))))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name.? rabbitmq!)) ))))
(assert (forall ((rabbitmq! Poly)) (! (=> (has_type rabbitmq! TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name.? rabbitmq!) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name.? rabbitmq!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::make_stateful_set_key")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_key.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_key.) (forall ((rabbitmq! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_key.? rabbitmq!) (rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef./ObjectRef (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.Kind. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.kind.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name.? rabbitmq!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_key.? rabbitmq!)) ))))
(assert (forall ((rabbitmq! Poly)) (! (=> (has_type rabbitmq! TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_key.? rabbitmq!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef.)) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_key.? rabbitmq!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::StatefulSetBuilder::get_request")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.get_request.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.get_request.) (forall ((rabbitmq! Poly)) (! (= (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. rabbitmq!) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest. (rabbitmq_controller!kubernetes_api_objects.spec.api_method.GetRequest./GetRequest (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.common.ObjectRef. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_key.? rabbitmq!)))))) :pattern ((rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.get_request.? $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. rabbitmq!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::sts_restart_annotation")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.sts_restart_annotation.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.sts_restart_annotation.) (forall ((no%param Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.sts_restart_annotation.? no%param) (vstd!string.impl&%0.view.? (S (str%new_strlit 11868152889750308127394849017865753752559209185230824887746527780753375979816498710239186393525946106271277532145063164551901213046214112361608870083323444)))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.sts_restart_annotation.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.sts_restart_annotation.? no%param) (TYPE%vstd!seq.Seq. $ CHAR))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.sts_restart_annotation.? no%param)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::make_env_vars")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_env_vars.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_env_vars.) (forall ((rabbitmq! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_env_vars.? rabbitmq!) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (let ((tmp%%$ (vstd!string.impl&%0.view.? (S (str%new_strlit 715310266423537887171717918001476186069286343720827987433923352365310440928844404057801764873024713181218483814154263159573298627448333220738908024620809))))) (let ((tmp%%$1 (core!option.Option./Some (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (let ((tmp%%$2 (core!option.Option./Some (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (let ((tmp%%$3 (core!option.Option./Some (vstd!string.impl&%0.view.? (S (str%new_strlit 374351474230017362113545826114468331104128211309744959235170654267856784728026042693516522696214718776848905871909491402741885494675189265901085287709143)))))) (let ((tmp%%$4 (vstd!string.impl&%0.view.? (S (str%new_strlit 6698785621039222535857624240186400092759697771650372290815946233533981663385403028149815008834972360600065225890879549642964867090469727365016078204598151))))) (let ((tmp%%$5 (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView tmp%%$4 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3)))))))))) (let ((tmp%%$6 (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2))))))))) (let ((tmp%%$7 (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView tmp%%$ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)))))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (let ((tmp%%$ (vstd!string.impl&%0.view.? (S (str%new_strlit 3478358822287320053861105525820247755387465354656709122988477510919219779454022524794623127036982694803799212648336350534170243085600057196700023785380245))))) (let ((tmp%%$9 (core!option.Option./Some (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (let ((tmp%%$10 (core!option.Option./Some (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (let ((tmp%%$11 (core!option.Option./Some (vstd!string.impl&%0.view.? (S (str%new_strlit 374351474230017362113545826114468331104128211309744959235170654267856784728026042693516522696214718776848905871909491402741885494675189265901085287709143)))))) (let ((tmp%%$12 (vstd!string.impl&%0.view.? (S (str%new_strlit 3041251118165690119956067631590473404381494916833784071269556176058574361455106900046703009527317834559819434822918349755681822310529635263977741313935355))))) (let ((tmp%%$13 (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView./ObjectFieldSelectorView tmp%%$12 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$11)))))))))) (let ((tmp%%$14 (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView./EnvVarSourceView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$10))))))))) (let ((tmp%%$15 (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView tmp%%$ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. tmp%%$15))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9)))))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (let ((tmp%%$ (vstd!string.impl&%0.view.? (S (str%new_strlit 11992437624168557254928207077517881015436837638474363990497226408706336334873674541756878996941565175359974680424766420042983670032171202925266007665428836))))) (let ((tmp%%$17 (core!option.Option./Some (vstd!seq.Seq.add.? $ CHAR (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 1122019937498671927585961378854752799699106449427344106232883844519375274549808909704650986349974493982854057198001239182575245295601575022066869780843260))))))) (let ((tmp%%$18 (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView tmp%%$ (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$17)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. tmp%%$18))))))))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (let ((tmp%%$ (vstd!string.impl&%0.view.? (S (str%new_strlit 10951011238861068609515647298113486928254682061984634181029658858153382086768962383401572363712280774924477282677984817941763966812380612844917639186612637))))) (let ((tmp%%$20 (core!option.Option./Some (vstd!string.impl&%0.view.? (S (str%new_strlit 3662256768417196916813399742799926894964983081436518002273147167224479762871407430610490139618203997634542300424791267956771452419826666255079929703482451)))))) (let ((tmp%%$21 (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView tmp%%$ (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$20)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. tmp%%$21))))))))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (let ((tmp%%$ (vstd!string.impl&%0.view.? (S (str%new_strlit 9110086807793166269022617807741406318891236490710720224816818534403789249017098221896082180099454287316890832152108235313856179170113163548670189202077163))))) (let ((tmp%%$23 (core!option.Option./Some (vstd!string.impl&%0.view.? (S (str%new_strlit 11637400195873028372200715104505016331225424777916447153207180491248112863272853114947825202366113649973124995061780453289044502024224448976321879479230609)))))) (let ((tmp%%$24 (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView tmp%%$ (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$23)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. tmp%%$24))))))))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (let ((tmp%%$ (vstd!string.impl&%0.view.? (S (str%new_strlit 8031552071990419096948940805487233229120648384743155228535280258755352091340289994268493494880761278147184696796421553338928410548204968819835235818973837))))) (let ((tmp%%$26 (core!option.Option./Some (vstd!string.impl&%0.view.? (S (str%new_strlit 815170946187195945776621687193822469392108186641318906182037632547970911657582662214295646710415445910170232875972469531195001520941471973508083425920940)))))) (let ((tmp%%$27 (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView tmp%%$ (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$26)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. tmp%%$27))))))))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (let ((tmp%%$ (vstd!string.impl&%0.view.? (S (str%new_strlit 2564993182147488095664800710187965497382843804455438559935998176029285759508936373819361468216220359497263216574943233460450414489058395007747619836922994))))) (let ((tmp%%$29 (core!option.Option./Some (vstd!string.impl&%0.view.? (S (str%new_strlit 5990228883102037149515481292728550233947626298733306894505951900842416988877700598920365479795926219309137019429421242281891830179354346647855808722630478)))))) (let ((tmp%%$30 (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView tmp%%$ (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$29)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView./EnvVarView/value_from (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. tmp%%$30))))))))))))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_env_vars.? rabbitmq!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::make_rabbitmq_pod_spec")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_rabbitmq_pod_spec.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_rabbitmq_pod_spec.) (forall ((rabbitmq! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_rabbitmq_pod_spec.? rabbitmq!) (let ((volumes$ (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_config_map.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 6142750415932269463045439675282663762006701750562049584694650375257290344527956772255448937490539392465433465565632490490663477829222528064223059357955649))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%3.default.? (I 0))) (vstd!seq.Seq.add.? $ CHAR (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 3192874755427204935488255239812520486199241945072484263420457176530733020971535487750070931923945030879206528748982506441703889477071438743248182483883284))))))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_projected.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 5998984799081412367579036577774040092903170476225250184610896559185025675595143487124358802572621748915246750406048047205217528444634363032350019693901078))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.set_sources.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ProjectedVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%5.default.? (I 0))) (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_config_map.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default.? (I 0))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_items.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ConfigMapProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%7.default.? (I 0))) (vstd!seq.Seq.add.? $ CHAR (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 818461961162252101233745447235998044445234685626334658815083531797911370054416291231038822480446981531585054101766824260008241443262874599928982382610191)))))) (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 13117762450768842366238920654417855384850919360050385365613868224251900076100650068449128595237731240253408295067501335659400087394586738736575602451967871))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 13117762450768842366238920654417855384850919360050385365613868224251900076100650068449128595237731240253408295067501335659400087394586738736575602451967871)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9728257962999570384064811817629995826214132524400209623453603321516350357280632070793977920863773628299334496829524236510156817166145671477052581981777855))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9728257962999570384064811817629995826214132524400209623453603321516350357280632070793977920863773628299334496829524236510156817166145671477052581981777855))))))))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.set_secret.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%6.default.? (I 0))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_items.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretProjectionView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%8.default.? (I 0))) (vstd!seq.Seq.add.? $ CHAR (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 10768373408229166444493032406198517804562673544033787170785547601963275829923589017476856877053489680904227264286952911345495377295407583265684737590259227)))))) (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.set_key.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.KeyToPathView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%9.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8151561874596248359290004118581170679813747609535730167386410787223574886782720866027936743040831792358675392667464340998382556747977181172062436146592235))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8151561874596248359290004118581170679813747609535730167386410787223574886782720866027936743040831792358675392667464340998382556747977181172062436146592235)))))))))))))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 10690605150937856471555812613536973337831394400740256968948715167202540391665231492003502440884939855292250954262333255111914088839158076725663296714936935))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default.? (I 0)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_secret.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 13210116765657890308455014402094636352247473295947242126554981372859838476165967132704244197793707379926144827454316254496030254088579251602499043437851938))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.set_secret_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.SecretVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%4.default.? (I 0))) (vstd!seq.Seq.add.? $ CHAR (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 3376095768058526058112050260920555392584732670376096551518981790053231774004433829551875674608365401354288483502845086161995781786017840476511453633608940))))))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8025154115697209795331333980485858257984587525835620802943027902655679593618371980468439125327093726990923319220926901473746134089593857647049978343436891))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default.? (I 0)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_downward_api.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 7153647892475062385472893992176785765810572129670463351162614791405226334477311918871705050584280658249128215047531440246196457641024849425478777331493942))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.set_items.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%10.default.? (I 0))) (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_field_ref.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.set_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.DownwardAPIVolumeFileView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%11.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 7214659961706377826267526191854183942027665775991887612480696580554678395967769027735734781063372551441869851713672946282796342868201760835042875257316679))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 868506187620513393401387472023878668059931667914985937119900681333978425662869078810591336805036677264221005398550254175058366598149019605177928731839115)))))))))))))))) (let ((tmp%%$ (core!option.Option./Some (vstd!seq.Seq.add.? $ CHAR (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 10279308584099474568940563332545884414184594758518238841138723754616012683779746418232774576598959013196533085821287704910359838186536854093139200408962316))))))) (let ((tmp%%$1 (core!option.Option./Some (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_volume_mounts.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_resources.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_command.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_image.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 1793752296312270520238961865948961466515825053505386208024973381288741319371868766808092205829602884711791344450117589221758458531512911858327159302018953))))) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))) (vstd!seq.Seq.push.? $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!seq.Seq.push.? $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!seq.Seq.push.? $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!seq.Seq.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR)) (vstd!string.impl&%0.view.? (S (str%new_strlit 6946360913408934543957224208064044164112591529860299207914663659747448570791429370271508322982796956067475762841532259560133711048707222845168802491164164)))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9294885502219543465987594722053669349337789367804757087523752931256595111673636082188536976661309299181175859785440800713528331903074609292174340328716375)))) (vstd!string.impl&%0.view.? (S (str%new_strlit 2532137236258335615278491703794257928320260719185001471600271425393601217905036759414415022039374717227262525602413560650665023124766994377094996381059473)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView./ResourceRequirementsView (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)) (vstd!string.impl&%0.view.? (S (str%new_strlit 4083557735126976974256068166925607716328273055572322773256063967296938394101060073452299421013528398347027505572388934931913591274707585273570619589019433))) (vstd!string.impl&%0.view.? (S (str%new_strlit 2653453292755871346603453875577085747240210175260019131121389572381990829050220202883798671947795600094992944007731641036305907469749533031039003663324599)))) (vstd!string.impl&%0.view.? (S (str%new_strlit 7251000985905478551424330961002587840332154346645855672530000512279939273293750298498037641441322545975685345596216702282261533155521445050360576075413799))) (vstd!string.impl&%0.view.? (S (str%new_strlit 11180360690310508628961897997446261513694448795211028137038891269352593299924540339953933621555012816952583189064429036627255061329876402258172003272865288))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)) (vstd!string.impl&%0.view.? (S (str%new_strlit 4083557735126976974256068166925607716328273055572322773256063967296938394101060073452299421013528398347027505572388934931913591274707585273570619589019433))) (vstd!string.impl&%0.view.? (S (str%new_strlit 2653453292755871346603453875577085747240210175260019131121389572381990829050220202883798671947795600094992944007731641036305907469749533031039003663324599)))) (vstd!string.impl&%0.view.? (S (str%new_strlit 7251000985905478551424330961002587840332154346645855672530000512279939273293750298498037641441322545975685345596216702282261533155521445050360576075413799))) (vstd!string.impl&%0.view.? (S (str%new_strlit 11180360690310508628961897997446261513694448795211028137038891269352593299924540339953933621555012816952583189064429036627255061329876402258172003272865288))))))))))) (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 6142750415932269463045439675282663762006701750562049584694650375257290344527956772255448937490539392465433465565632490490663477829222528064223059357955649))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9500192730539661361456796353898480602775818245422809431773663655183175817424835888839732612538798363521250225388557316599461702255211865269027233536186489)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 10690605150937856471555812613536973337831394400740256968948715167202540391665231492003502440884939855292250954262333255111914088839158076725663296714936935))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 6263554433162355454131204451102548311935878205992632440212670711352241985777201302904646827746506974329851537816226781326460858618225538745936110938499100)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 13210116765657890308455014402094636352247473295947242126554981372859838476165967132704244197793707379926144827454316254496030254088579251602499043437851938))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 7245412519031847343350828901375315648188092006733153944282167956141242799195353761057488241892243427967907505232387873076954714262285893870815462372437372)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8025154115697209795331333980485858257984587525835620802943027902655679593618371980468439125327093726990923319220926901473746134089593857647049978343436891))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9029364321757854845895378465352259305682702203368577702848635585484154296806817419503309343434643956174847575316534065118582850020616276313917933494995010)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 10903198182025725172200932809483852499267536969054560311319602280646397029033477778984949816394850865501397331032340536096170310257450213129177986724688881))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 4745477632009615688137701800136812217948217888957990220617488007025339929543408229722839818584690058865125091909105968740796984841617625806283266955855455)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 5998984799081412367579036577774040092903170476225250184610896559185025675595143487124358802572621748915246750406048047205217528444634363032350019693901078))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 728053015428464008193683777884399362643851082751456343616931375950567815033599116600263482585940499397112617030912208459895783186033824235355530302591414))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8151561874596248359290004118581170679813747609535730167386410787223574886782720866027936743040831792358675392667464340998382556747977181172062436146592235)))))))))))) (let ((tmp%%$2 (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (let ((tmp%%$3 (vstd!string.impl&%0.view.? (S (str%new_strlit 5630953615046292298544215263164569552010839827183149158799555273299566331203638371635051949712699227264773239825403080460851283245118884089295221395249199))))) (let ((tmp%%$4 (core!option.Option./Some (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/image (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (let ((tmp%%$5 (core!option.Option./Some (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.set_pre_stop.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%1.default.? (I 0))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.set_exec.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.LifecycleHandlerView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%2.default.? (I 0))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.set_command.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ExecActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%6.default.? (I 0))) (vstd!seq.Seq.push.? $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!seq.Seq.push.? $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!seq.Seq.push.? $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!seq.Seq.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR)) (vstd!string.impl&%0.view.? (S (str%new_strlit 10645533410742622673974545670065315046098970454785224384010073068762083930022796072800003375722429457181917769261803119802709407051657483207789890936344443)))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9294885502219543465987594722053669349337789367804757087523752931256595111673636082188536976661309299181175859785440800713528331903074609292174340328716375)))) (vstd!string.impl&%0.view.? (S (str%new_strlit 382809884744171264418862974749973576790002063074996565556005153315294033879992648129521751488981995959819997799094157409918803599330000295680810807671762))))))))))))) (let ((tmp%%$6 (core!option.Option./Some (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_env_vars.? rabbitmq!))))) (let ((tmp%%$7 (core!option.Option./Some (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (let ((volume_mounts$ (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 10690605150937856471555812613536973337831394400740256968948715167202540391665231492003502440884939855292250954262333255111914088839158076725663296714936935))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 6263554433162355454131204451102548311935878205992632440212670711352241985777201302904646827746506974329851537816226781326460858618225538745936110938499100)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 10903198182025725172200932809483852499267536969054560311319602280646397029033477778984949816394850865501397331032340536096170310257450213129177986724688881))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 4745477632009615688137701800136812217948217888957990220617488007025339929543408229722839818584690058865125091909105968740796984841617625806283266955855455)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8025154115697209795331333980485858257984587525835620802943027902655679593618371980468439125327093726990923319220926901473746134089593857647049978343436891))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9029364321757854845895378465352259305682702203368577702848635585484154296806817419503309343434643956174847575316534065118582850020616276313917933494995010)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 5998984799081412367579036577774040092903170476225250184610896559185025675595143487124358802572621748915246750406048047205217528444634363032350019693901078))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 1536582742612725648974893006491021969763819872235124133538384248604822997164907017413592103200994406974374240782771963593301309494547583911396088592063210))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 13117762450768842366238920654417855384850919360050385365613868224251900076100650068449128595237731240253408295067501335659400087394586738736575602451967871)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 5998984799081412367579036577774040092903170476225250184610896559185025675595143487124358802572621748915246750406048047205217528444634363032350019693901078))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9700597889378272265462408982284703739781596489110371762602152591864189068480059258179349527973186736857444306491539133031143185105252684621731798956798606))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9728257962999570384064811817629995826214132524400209623453603321516350357280632070793977920863773628299334496829524236510156817166145671477052581981777855)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 7153647892475062385472893992176785765810572129670463351162614791405226334477311918871705050584280658249128215047531440246196457641024849425478777331493942))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 5799192477097431705994312937951337230398479844904466446638522727807103149781449843387021585282986671199255372887485082958774858613390806194658871689828746)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 5998984799081412367579036577774040092903170476225250184610896559185025675595143487124358802572621748915246750406048047205217528444634363032350019693901078))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9842515357217379781165924678971785447344487451064368503547240461044319783775776499356480423548292054905622969695753858850901222080352533511867126849408519))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8151561874596248359290004118581170679813747609535730167386410787223574886782720866027936743040831792358675392667464340998382556747977181172062436146592235))))))))) (ite (and (and (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))))))))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711)))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))))))))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711)))))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. volume_mounts$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8100380295990970958499029373669899252198392246053671371661743118473799357408907078753203916479478616891727760615491450857169684668610531705177383752759631))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9862156943681126136165698239883196347035445659311165229923017560259368444280396714578843226232300546329638574287677638291926068326996067944967194925134349))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8702963122705556703473231227445545170992664928167828607624186432447781361244138491064798721181043955888520347989576190948797638982113611629657382450524421)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8100380295990970958499029373669899252198392246053671371661743118473799357408907078753203916479478616891727760615491450857169684668610531705177383752759631))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 6536021203071969712388138459153421784234348002368717496042043947777210540651398161332040769631846602432078853601685515946711112598902043519320625427789901))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 4215113907207989040168213208277471508606367224808991282277119340940803063123304647702144550584346766661387934630621940493871732048577409848429398199398562))))))) (ite (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))))))))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/advanced_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711)))))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. volume_mounts$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8100380295990970958499029373669899252198392246053671371661743118473799357408907078753203916479478616891727760615491450857169684668610531705177383752759631))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 6536021203071969712388138459153421784234348002368717496042043947777210540651398161332040769631846602432078853601685515946711112598902043519320625427789901))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 4215113907207989040168213208277471508606367224808991282277119340940803063123304647702144550584346766661387934630621940493871732048577409848429398199398562))))))) (ite (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))))))))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView./RabbitmqConfigView/env_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqConfigView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/rabbitmq_config (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 3291835376408573590478209986637364656599265025014012802863049622424083630783948306431999498413285667939592978357630573418285899181951386474024455144309711)))))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView.>. volume_mounts$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_sub_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_mount_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.VolumeMountView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%4.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8100380295990970958499029373669899252198392246053671371661743118473799357408907078753203916479478616891727760615491450857169684668610531705177383752759631))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 9862156943681126136165698239883196347035445659311165229923017560259368444280396714578843226232300546329638574287677638291926068326996067944967194925134349))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 8702963122705556703473231227445545170992664928167828607624186432447781361244138491064798721181043955888520347989576190948797638982113611629657382450524421))))))) volume_mounts$)))))))) (let ((tmp%%$8 (core!option.Option./Some (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 1122097117480433470085149889135372392087605020368036369584473380177011579437989212002219520622224624533846773865240735563719368766565852845581406243644540))))) (I 4369)))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 7434456997385881715537794636590658410293906820977203599548093451795654568216178714387464296144522078300856473208410938509481696645905408307004650551148964))))) (I 5672)))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 2998780766147530933736157311160787880051786657534096108470130249363317038886425430250455530781027256953233949742008975321434095973989445422200578281816922))))) (I 15672))))))) (let ((tmp%%$9 (core!option.Option./Some (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_tcp_socket.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_timeout_seconds.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_success_threshold.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_period_seconds.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_initial_delay_seconds.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.set_failure_threshold.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ProbeView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%5.default.? (I 0))) (I 3))) (I 10))) (I 10))) (I 1))) (I 5))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.set_port.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.TCPSocketActionView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%7.default.? (I 0))) (I 5672)))))))) (let ((tmp%%$10 (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/resources (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))) (let ((tmp%%$11 (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%0.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$4)) tmp%%$3 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$8)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$10)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/liveness_probe (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. tmp%%$11))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/command (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. tmp%%$11))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/image_pull_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. tmp%%$11))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/args (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. tmp%%$11))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView./ContainerView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView. tmp%%$11)))))))))))))))))))) (let ((tmp%%$12 (core!option.Option./Some (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. (ite (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 1666999487841568792954592678403801017278756060393580408429257652574254669440921223215941280270433044742100764224805013969794992348771695759640041105223099)))) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView.>. volumes$) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_empty_dir.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.VolumeView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 10903198182025725172200932809483852499267536969054560311319602280646397029033477778984949816394850865501397331032340536096170310257450213129177986724688881))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.EmptyDirVolumeSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%1.default.? (I 0))))))) volumes$))))) (let ((tmp%%$13 (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/affinity (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))) (let ((tmp%%$14 (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/tolerations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))) (let ((tmp%%$15 (core!option.Option./Some (I 604800)))) (let ((tmp%%$16 (rabbitmq_controller!kubernetes_api_objects.spec.pod.impl&%2.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$13)) (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerView.>. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$12)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$14)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/node_selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. tmp%%$16))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/runtime_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. tmp%%$16))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/dns_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. tmp%%$16))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/priority_class_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. tmp%%$16))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/scheduler_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. tmp%%$16))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/security_context (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. tmp%%$16))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/host_network (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. tmp%%$16))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$15)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView./PodSpecView/image_pull_secrets (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. tmp%%$16)))))))))))))))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_rabbitmq_pod_spec.? rabbitmq!)) ))))
(assert (forall ((rabbitmq! Poly)) (! (=> (has_type rabbitmq! TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_rabbitmq_pod_spec.? rabbitmq!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_rabbitmq_pod_spec.? rabbitmq!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::make_stateful_set")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.) (forall ((rabbitmq! Poly) (config_map_rv! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? rabbitmq! config_map_rv!) (let ((name$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))))) (let ((sts_name$ (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name.? rabbitmq!))) (let ((namespace$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))))) (let ((labels$ (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)) (vstd!string.impl&%0.view.? (S (str%new_strlit 1588539530315223847722953298287299374188107919534831743833089341130026030232599932513390495630937258371487356320380652074008820394790478717851686026166260))) name$))) (let ((metadata$ (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_owner_references.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0))) sts_name$)) namespace$)) (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (rabbitmq_controller!rabbitmq_controller.model.resource.common.make_owner_references.? rabbitmq!)))) (rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels.? rabbitmq!))) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (let ((spec$ (let ((tmp%%$ (core!option.Option./Some (I (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/replicas (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))))) (let ((tmp%%$1 (vstd!seq.Seq.add.? $ CHAR name$ (vstd!string.impl&%0.view.? (S (str%new_strlit 1122019937498671927585961378854752799699106449427344106232883844519375274549808909704650986349974493982854057198001239182575245295601575022066869780843260)))))) (let ((tmp%%$2 (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.set_match_labels.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.label_selector.impl&%0.default.? (I 0))) labels$))) (let ((tmp%%$3 (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_spec.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.set_metadata.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.impl&%0.default.? (I 0))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_annotations.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0))) (rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels.? rabbitmq!))) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/annotations (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))) (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.sts_restart_annotation.? (I 0)) config_map_rv!))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod.PodSpecView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_rabbitmq_pod_spec.? rabbitmq!))))) (let ((tmp%%$4 (core!option.Option./Some (ite (= (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (vstd!string.impl&%0.view.? (S (str%new_strlit 1666999487841568792954592678403801017278756060393580408429257652574254669440921223215941280270433044742100764224805013969794992348771695759640041105223099)))) (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (vstd!seq.Seq.push.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (vstd!seq.Seq.empty.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_spec.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%0.set_metadata.? (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_labels.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_namespace.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0))) (vstd!string.impl&%0.view.? (S (str%new_strlit 10903198182025725172200932809483852499267536969054560311319602280646397029033477778984949816394850865501397331032340536096170310257450213129177986724688881))))) namespace$)) labels$)))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_storage_class_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_resources.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.set_access_modes.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.impl&%2.default.? (I 0))) (vstd!seq.Seq.push.? $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!seq.Seq.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR)) (vstd!string.impl&%0.view.? (S (str%new_strlit 3829758277519170405922782189888808236906857130640089039399625483901455057994484300555780340360655609079185583351884216059971425022081298847641131176681513)))))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.set_requests.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.ResourceRequirementsView. (rabbitmq_controller!kubernetes_api_objects.spec.resource_requirements.impl&%0.default.? (I 0))) (vstd!map.impl&%0.insert.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!map.impl&%0.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)) (vstd!string.impl&%0.view.? (S (str%new_strlit 1300926296256712374622009529095030328769397908469815840728870309441362622238129235077877649542114507324532975852639292503898789404618066001447955647330407))) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))))))))) (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView./RabbitmqClusterPersistenceSpecView/storage_class_name (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterPersistenceSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistence (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))))))))))))) (let ((tmp%%$5 (core!option.Option./Some (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/pod_management_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!)))))))) (let ((tmp%%$6 (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView./RabbitmqClusterSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/spec (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. rabbitmq!))))))) (let ((tmp%%$7 (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%2.default.? (I 0)))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. tmp%%$2)) tmp%%$1 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. tmp%%$3)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$4)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6))))))))))))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_spec.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.impl&%0.set_metadata.? (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. metadata$))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. spec$))))))))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? rabbitmq! config_map_rv!)) ))))
(assert (forall ((rabbitmq! Poly) (config_map_rv! Poly)) (! (=> (and (has_type rabbitmq! TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type config_map_rv! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? rabbitmq! config_map_rv!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? rabbitmq! config_map_rv!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::StatefulSetBuilder::make")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.make.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.make.) (forall ((rabbitmq! Poly) (state! Poly)) (! (= (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. rabbitmq! state!) (Poly%core!result.Result. (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. state!))))))) (core!result.Result./Ok (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? rabbitmq! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. state!))))))))) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0))))) :pattern ((rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.make.? $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. rabbitmq! state!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::update_stateful_set")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.update_stateful_set.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.update_stateful_set.) (forall ((rabbitmq! Poly) (found_stateful_set! Poly) (config_map_rv! Poly)) (! (= (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.update_stateful_set.? rabbitmq! found_stateful_set! config_map_rv!) (let ((made_spec$ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? rabbitmq! config_map_rv!)))))))))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (let ((tmp%%$ (core!option.Option./Some (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (rabbitmq_controller!rabbitmq_controller.model.resource.common.make_owner_references.? rabbitmq!))))) (let ((tmp%%$1 core!option.Option./None)) (let ((tmp%%$2 (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/labels (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? rabbitmq! config_map_rv!))))))))) (let ((tmp%%$3 (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/annotations (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? rabbitmq! config_map_rv!))))))))) (let ((tmp%%$4 (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. found_stateful_set!)))) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/resource_version (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/uid (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/deletion_timestamp (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. tmp%%$4))))))))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (let ((tmp%%$ (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/replicas (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. made_spec$))))) (let ((tmp%%$6 (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/template (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. made_spec$))))) (let ((tmp%%$7 (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/persistent_volume_claim_retention_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. made_spec$))))) (let ((tmp%%$8 (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. found_stateful_set!)))))))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.label_selector.LabelSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/selector (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. tmp%%$8))))) (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/service_name (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. tmp%%$8))) (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.pod_template_spec.PodTemplateSpecView. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/pod_management_policy (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7))))))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/status (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. found_stateful_set!))))))) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.update_stateful_set.? rabbitmq! found_stateful_set! config_map_rv!)) ))))
(assert (forall ((rabbitmq! Poly) (found_stateful_set! Poly) (config_map_rv! Poly)) (! (=> (and (has_type rabbitmq! TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (has_type found_stateful_set! TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.) (has_type config_map_rv! (TYPE%vstd!seq.Seq. $ CHAR))) (has_type (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.update_stateful_set.? rabbitmq! found_stateful_set! config_map_rv!)) TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.)) :pattern ((rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.update_stateful_set.? rabbitmq! found_stateful_set! config_map_rv!)) )))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::StatefulSetBuilder::update")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.update.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.update.) (forall ((rabbitmq! Poly) (state! Poly) (obj! Poly)) (! (= (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. rabbitmq! state! obj!) (Poly%core!result.Result. (let ((sts$ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. obj!)))) (let ((found_sts$ (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. sts$)))))) (ite (and (and (and (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. sts$))))) (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.owner_references_only_contains.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/metadata (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. found_sts$)))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.controller_owner_ref.? rabbitmq!)))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. state!)))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. found_sts$))))))))) (core!result.Result./Ok (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.marshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.update_stateful_set.? rabbitmq! (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. found_sts$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. state!))))))))) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0))))))) :pattern ((rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.update.? $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. rabbitmq! state! obj!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::StatefulSetBuilder::state_after_create")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.state_after_create.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.state_after_create.) (forall ((rabbitmq! Poly) (obj! Poly) (state! Poly)) (! (= (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. rabbitmq! obj! state!) (Poly%core!result.Result. (let ((sts$ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. obj!)))) (ite (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. sts$))))) (let ((state_prime$ (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./Done)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. state!))))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. state_prime$) (Poly%core!option.Option. core!option.Option./None))))) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0)))))) :pattern ((rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_create.? $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. rabbitmq! obj! state!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::model::resource::stateful_set::StatefulSetBuilder::state_after_update")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.state_after_update.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.impl&%0.state_after_update.) (forall ((rabbitmq! Poly) (obj! Poly) (state! Poly)) (! (= (rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. rabbitmq! obj! state!) (Poly%core!result.Result. (let ((sts$ (%Poly%core!result.Result. (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.unmarshal.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. obj!)))) (ite (%B (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. sts$))))) (let ((state_prime$ (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep./Done)) (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. state!))))))) (core!result.Result./Ok (Poly%tuple%2. (tuple%2./tuple%2 (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. state_prime$) (Poly%core!option.Option. core!option.Option./None))))) (core!result.Result./Err (Poly%tuple%0. tuple%0./tuple%0)))))) :pattern ((rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder.state_after_update.? $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. rabbitmq! obj! state!)) ))))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::spec_types::RabbitmqClusterView::default")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.default.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%1.default.) (= (rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView.default.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.) (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.impl&%0.default.? (I 0)))) (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView. (vstd!pervasive.arbitrary.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterSpecView.)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%rabbitmq_controller!reconciler.spec.resource_builder.ResourceBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.StatefulSetBuilder. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState.))
(set-info :comment ";; Function-Axioms rabbitmq_controller::rabbitmq_controller::trusted::exec_types::RabbitmqReconcileState::view")
(assert (fuel_bool_default fuel%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%1.view.))
(assert (=> (fuel_bool fuel%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%1.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. self!) (Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqReconcileState./RabbitmqReconcileState (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.step.RabbitmqReconcileStep. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/reconcile_step (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (let ((tmp%%$ (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState./RabbitmqReconcileState/latest_config_map_rv_opt (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. self!)))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((s$ (%Poly%vstd!string.String. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (vstd!string.impl&%1.view.? (Poly%vstd!string.String. s$)))) core!option.Option./None))))))) :pattern ((vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState. self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&) :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeGetRequest.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeListRequest.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeCreateRequest.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeDeleteRequest.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateRequest.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeUpdateStatusRequest.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.api_method.KubeAPIRequest.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%rabbitmq_controller!kubernetes_api_objects.spec.resource.ResourceView. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqReconcileState.))
(set-info :comment ";; Function-Specs vstd::string::impl&%0::to_string")
(declare-fun ens%vstd!string.impl&%0.to_string. (StrSlice vstd!string.String.) Bool)
(assert (forall ((self! StrSlice) (ret! vstd!string.String.)) (! (= (ens%vstd!string.impl&%0.to_string. self! ret!) (and (= (vstd!string.impl&%0.view.? (S self!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. ret!))) (= (vstd!string.impl&%0.is_ascii.? (S self!)) (vstd!string.impl&%1.is_ascii.? (Poly%vstd!string.String. ret!))))) :pattern ((ens%vstd!string.impl&%0.to_string. self! ret!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::exec::resource::common::make_owner_references")
(declare-fun req%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_owner_references. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.)) (! (= (req%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_owner_references. rabbitmq!) (=> %%global_location_label%%52 (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))) :pattern ((req%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_owner_references. rabbitmq!)) )))
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_owner_references. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.) Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) (owner_references! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_owner_references. rabbitmq! owner_references!) (= (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView.>. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.owner_reference.OwnerReferenceView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>. owner_references!)) (Poly%fun%1. (mk_fun %%lambda%%6)))) (rabbitmq_controller!rabbitmq_controller.model.resource.common.make_owner_references.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_owner_references. rabbitmq! owner_references!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::exec::resource::common::make_labels")
(declare-fun req%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_labels. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.)) (! (= (req%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_labels. rabbitmq!) (=> %%global_location_label%%53 (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))) :pattern ((req%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_labels. rabbitmq!)) )))
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_labels. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) (labels! rabbitmq_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_labels. rabbitmq! labels!) (= (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. labels!)) (rabbitmq_controller!rabbitmq_controller.model.resource.common.make_labels.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_labels. rabbitmq! labels!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::vstd_ext::string_map::StringMap::empty")
(declare-fun ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.empty. (Int rabbitmq_controller!vstd_ext.string_map.StringMap.) Bool)
(assert (forall ((no%param Int) (m! rabbitmq_controller!vstd_ext.string_map.StringMap.)) (! (= (ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.empty. no%param m!) (= (rabbitmq_controller!vstd_ext.string_map.impl&%0.view.? (Poly%rabbitmq_controller!vstd_ext.string_map.StringMap. m!)) (vstd!map.impl&%0.empty.? $ (TYPE%vstd!seq.Seq. $ CHAR) $ (TYPE%vstd!seq.Seq. $ CHAR)))) :pattern ((ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.empty. no%param m!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::make_stateful_set_name")
(declare-fun req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set_name. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.)) (! (= (req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set_name. rabbitmq!) (and (=> %%global_location_label%%54 (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!)))) (=> %%global_location_label%%55 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))))))))))))) :pattern ((req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set_name. rabbitmq!)) )))
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set_name. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. vstd!string.String.) Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) (name! vstd!string.String.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set_name. rabbitmq! name!) (= (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!)) (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set_name.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set_name. rabbitmq! name!)) )))
(set-info :comment ";; Function-Def rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::make_stateful_set_name")
(set-info :comment ";; controller_examples/rabbitmq_controller/exec/resource/stateful_set.rs:130:1: 130:75 (#0)")
(set-info :comment ";; Function-Def rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::StatefulSetBuilder::get_request")
(set-info :comment ";; controller_examples/rabbitmq_controller/exec/resource/stateful_set.rs:28:5: 28:65 (#0)")
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::sts_restart_annotation")
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.sts_restart_annotation. (Int vstd!string.String.) Bool)
(assert (forall ((no%param Int) (anno! vstd!string.String.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.sts_restart_annotation. no%param anno!) (= (vstd!string.impl&%1.view.? (Poly%vstd!string.String. anno!)) (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.sts_restart_annotation.? (I 0)))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.sts_restart_annotation. no%param anno!)) )))
(set-info :comment ";; Function-Def rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::sts_restart_annotation")
(set-info :comment ";; controller_examples/rabbitmq_controller/exec/resource/stateful_set.rs:124:1: 124:49 (#0)")
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::EnvVar::new_with")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%8.new_with. (vstd!string.String. core!option.Option. core!option.Option. rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.) Bool)
(assert (forall ((name! vstd!string.String.) (value! core!option.Option.) (value_from! core!option.Option.) (env_var! rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%8.new_with. name! value! value_from! env_var!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%8.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. env_var!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value_from.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.overwrite_value.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%8.default.? (I 0))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!)))) (Poly%core!option.Option. (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. value!))))) (core!option.Option./Some (vstd!string.impl&%1.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. value!))))) core!option.Option./None)))) (Poly%core!option.Option. (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. value_from!))))) (core!option.Option./Some (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%9.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. value_from!)))))) core!option.Option./None))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%8.new_with. name! value! value_from! env_var!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::EnvVarSource::new_with_field_ref")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%9.new_with_field_ref. (rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource.) Bool)
(assert (forall ((field_ref! rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.) (env_var_source! rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%9.new_with_field_ref. field_ref! env_var_source!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%9.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVarSource. env_var_source!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.set_field_ref.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarSourceView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%9.default.? (I 0))) (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. field_ref!)))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%9.new_with_field_ref. field_ref! env_var_source!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::volume::ObjectFieldSelector::new_with")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.new_with. (vstd!string.String. vstd!string.String. rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.) Bool)
(assert (forall ((api_version! vstd!string.String.) (field_path! vstd!string.String.) (object_field_selector! rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.new_with. api_version! field_path! object_field_selector!) (= (rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.volume.ObjectFieldSelector. object_field_selector!)) (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_field_path.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.set_api_version.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.volume.ObjectFieldSelectorView. (rabbitmq_controller!kubernetes_api_objects.spec.volume.impl&%12.default.? (I 0))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. api_version!)))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. field_path!))))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.volume.impl&%12.new_with. api_version! field_path! object_field_selector!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::make_env_vars")
(declare-fun req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_env_vars. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.)) (! (= (req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_env_vars. rabbitmq!) (=> %%global_location_label%%56 (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))) :pattern ((req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_env_vars. rabbitmq!)) )))
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_env_vars. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>.) Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) (env_vars! alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_env_vars. rabbitmq! env_vars!) (= (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView.>. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.container.EnvVarView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.container.EnvVar./alloc!alloc.Global.>. env_vars!)) (Poly%fun%1. (mk_fun %%lambda%%5)))) (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_env_vars.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_env_vars. rabbitmq! env_vars!)) )))
(set-info :comment ";; Function-Def rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::make_env_vars")
(set-info :comment ";; controller_examples/rabbitmq_controller/exec/resource/stateful_set.rs:685:1: 685:75 (#0)")
(set-info :comment ";; Function-Specs rabbitmq_controller::kubernetes_api_objects::exec::container::ContainerPort::new_with")
(declare-fun ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%1.new_with. (vstd!string.String. Int rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.) Bool)
(assert (forall ((name! vstd!string.String.) (port! Int) (container_port! rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort.)) (! (= (ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%1.new_with. name! port! container_port!) (= (rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.container.ContainerPort. container_port!)) (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_container_port.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.set_name.? (Poly%rabbitmq_controller!kubernetes_api_objects.spec.container.ContainerPortView. (rabbitmq_controller!kubernetes_api_objects.spec.container.impl&%3.default.? (I 0))) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. name!)))) (I port!)))) :pattern ((ens%rabbitmq_controller!kubernetes_api_objects.exec.container.impl&%1.new_with. name! port! container_port!)) )))
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::make_rabbitmq_pod_spec")
(declare-fun req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_rabbitmq_pod_spec. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.)) (! (= (req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_rabbitmq_pod_spec. rabbitmq!) (and (=> %%global_location_label%%57 (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!)))) (=> %%global_location_label%%58 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))))))))))))) :pattern ((req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_rabbitmq_pod_spec. rabbitmq!)) )))
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_rabbitmq_pod_spec. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.) Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) (pod_spec! rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_rabbitmq_pod_spec. rabbitmq! pod_spec!) (= (rabbitmq_controller!kubernetes_api_objects.exec.pod.impl&%1.view.? (Poly%rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec. pod_spec!)) (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_rabbitmq_pod_spec.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_rabbitmq_pod_spec. rabbitmq! pod_spec!)) )))
(set-info :comment ";; Function-Def rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::make_rabbitmq_pod_spec")
(set-info :comment ";; controller_examples/rabbitmq_controller/exec/resource/stateful_set.rs:263:1: 263:80 (#0)")
(set-info :comment ";; Function-Specs rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::make_stateful_set")
(declare-fun req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. vstd!string.String.) Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) (config_map_rv! vstd!string.String.)) (! (= (req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set. rabbitmq! config_map_rv!) (and (=> %%global_location_label%%59 (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!)))) (=> %%global_location_label%%60 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))))))))))))) :pattern ((req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set. rabbitmq! config_map_rv!)) )))
(declare-fun ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set. (rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. vstd!string.String. rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.) Bool)
(assert (forall ((rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.) (config_map_rv! vstd!string.String.) (stateful_set! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)) (! (= (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set. rabbitmq! config_map_rv! stateful_set!) (= (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. stateful_set!))) (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. config_map_rv!))))) :pattern ((ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set. rabbitmq! config_map_rv! stateful_set!)) )))
(set-info :comment ";; Function-Def rabbitmq_controller::rabbitmq_controller::exec::resource::stateful_set::make_stateful_set")
(set-info :comment ";; controller_examples/rabbitmq_controller/exec/resource/stateful_set.rs:139:1: 139:107 (#0)")
(declare-const stateful_set! rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)
(declare-const rabbitmq! rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster.)
(declare-const config_map_rv! vstd!string.String.)
(declare-const tmp%1 vstd!string.String.)
(declare-const tmp%2 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const tmp%3 core!option.Option.)
(declare-const tmp%4 Poly)
(declare-const tmp%5 alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.owner_reference.OwnerReference./alloc!alloc.Global.>.)
(declare-const tmp%6 rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-const tmp%7 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)
(declare-const tmp%8 rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-const metadata@0 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const tmp%9 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)
(declare-const tmp%10 Int)
(declare-const tmp%11 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const tmp%12 core!option.Option.)
(declare-const tmp%13 Poly)
(declare-const tmp%14 vstd!string.String.)
(declare-const tmp%15 vstd!string.String.)
(declare-const tmp%16 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const tmp%17 core!option.Option.)
(declare-const tmp%18 Poly)
(declare-const tmp%19 core!option.Option.)
(declare-const match_labels@0 rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-const selector@0 rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.)
(declare-const tmp%20 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)
(declare-const tmp%21 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.)
(declare-const tmp%22 vstd!string.String.)
(declare-const tmp%23 vstd!string.String.)
(declare-const tmp%24 Bool)
(declare-const tmp%25 Poly)
(declare-const tmp%26 Bool)
(declare-const idx@ Poly)
(declare-const tmp%27 Bool)
(declare-const s1@ vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>.)
(declare-const s2@ vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>.)
(declare-const empty_pvc@ alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>.)
(declare-const tmp%28 Poly)
(declare-const tmp%29 vstd!string.String.)
(declare-const tmp%30 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const tmp%31 core!option.Option.)
(declare-const tmp%32 Poly)
(declare-const tmp%33 vstd!string.String.)
(declare-const tmp%34 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const tmp%35 core!option.Option.)
(declare-const tmp%36 Poly)
(declare-const tmp%37 core!option.Option.)
(declare-const labels@0 rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-const metadata$1@0 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const tmp%38 Poly)
(declare-const tmp%39 vstd!string.String.)
(declare-const tmp%40 Bool)
(declare-const idx$1@ Poly)
(declare-const tmp%41 Bool)
(declare-const s1$1@ Poly)
(declare-const s2$1@ Poly)
(declare-const access_modes@0 alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.)
(declare-const tmp%42 vstd!string.String.)
(declare-const tmp%43 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)
(declare-const tmp%44 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.)
(declare-const tmp%45 vstd!string.String.)
(declare-const tmp%46 core!option.Option.)
(declare-const requests@0 rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-const resources@0 rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.)
(declare-const tmp%47 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)
(declare-const tmp%48 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterPersistenceSpec.)
(declare-const tmp%49 vstd!string.String.)
(declare-const pvc_spec@0 rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.)
(declare-const pvc@0 rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.)
(declare-const tmp%50 Bool)
(declare-const idx$2@ Poly)
(declare-const tmp%51 Bool)
(declare-const s1$2@ vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>.)
(declare-const s2$2@ vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>.)
(declare-const volume_claim_templates@0 alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>.)
(declare-const tmp%52 alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>.)
(declare-const tmp%53 rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-const tmp%54 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)
(declare-const tmp%55 vstd!string.String.)
(declare-const tmp%56 vstd!string.String.)
(declare-const tmp%57 core!option.Option.)
(declare-const anno@0 rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-const metadata$2@0 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const tmp%58 rabbitmq_controller!kubernetes_api_objects.exec.pod.PodSpec.)
(declare-const pod_template_spec@0 rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.)
(declare-const tmp%59 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)
(declare-const tmp%60 vstd!string.String.)
(declare-const tmp%61 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)
(declare-const tmp%62 core!option.Option.)
(declare-const tmp%63 Bool)
(declare-const tmp%64 rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqClusterSpec.)
(declare-const tmp%65 core!option.Option.)
(declare-const tmp%66 Poly)
(declare-const stateful_set_spec@0 rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)
(declare-const stateful_set@0 rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)
(assert fuel_defaults)
(assert (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.impl&%0.well_formed.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!))))
(assert (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView./ObjectMetaView/namespace (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.object_meta.ObjectMetaView. (rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView./RabbitmqClusterView/metadata (%Poly%rabbitmq_controller!rabbitmq_controller.trusted.spec_types.RabbitmqClusterView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!)))))))))))))
(declare-const metadata@1 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const metadata@2 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const metadata@3 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const metadata@4 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const metadata@5 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const stateful_set@1 rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)
(declare-const stateful_set_spec@1 rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)
(declare-const stateful_set_spec@2 rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)
(declare-const match_labels@1 rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-const selector@1 rabbitmq_controller!kubernetes_api_objects.exec.label_selector.LabelSelector.)
(declare-const stateful_set_spec@3 rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)
(declare-const metadata$1@1 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const metadata$1@2 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const labels@1 rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-const metadata$1@3 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const pvc@1 rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.)
(declare-const access_modes@1 alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>.)
(declare-const pvc_spec@1 rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.)
(declare-const requests@1 rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-const resources@1 rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.ResourceRequirements.)
(declare-const pvc_spec@2 rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.)
(declare-const pvc_spec@3 rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaimSpec.)
(declare-const pvc@2 rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim.)
(declare-const volume_claim_templates@1 alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>.)
(declare-const stateful_set_spec@4 rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)
(declare-const metadata$2@1 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const anno@1 rabbitmq_controller!vstd_ext.string_map.StringMap.)
(declare-const metadata$2@2 rabbitmq_controller!kubernetes_api_objects.exec.object_meta.ObjectMeta.)
(declare-const pod_template_spec@1 rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.)
(declare-const pod_template_spec@2 rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.PodTemplateSpec.)
(declare-const stateful_set_spec@5 rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)
(declare-const stateful_set_spec@6 rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)
(declare-const stateful_set_spec@7 rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetSpec.)
(declare-const stateful_set@2 rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet.)
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%23 Bool)
(declare-const %%query%% Bool)
(assert (=> %%query%% (not (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.default. 0 stateful_set@0) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. 0 metadata@0) (and (=> %%location_label%%0 (req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set_name. rabbitmq!)) (=> (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_stateful_set_name. rabbitmq! tmp%1) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_name. metadata@0 metadata@1 tmp%1) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.metadata. rabbitmq! tmp%2) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.namespace. tmp%2 tmp%3) (and (=> %%location_label%%1 (req%core!option.impl&%0.unwrap. $ TYPE%vstd!string.String. tmp%3)) (=> (ens%core!option.impl&%0.unwrap. $ TYPE%vstd!string.String. tmp%3 tmp%4) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_namespace. metadata@1 metadata@2 (%Poly%vstd!string.String. tmp%4)) (and (=> %%location_label%%2 (req%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_owner_references. rabbitmq!)) (=> (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_owner_references. rabbitmq! tmp%5) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_owner_references. metadata@2 metadata@3 tmp%5) (and (=> %%location_label%%3 (req%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_labels. rabbitmq!)) (=> (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_labels. rabbitmq! tmp%6) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_labels. metadata@3 metadata@4 tmp%6) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. rabbitmq! tmp%7) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.annotations. tmp%7 tmp%8) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_annotations. metadata@4 metadata@5 tmp%8) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.set_metadata. stateful_set@0 stateful_set@1 metadata@5) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.default. 0 stateful_set_spec@0) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. rabbitmq! tmp%9) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.replicas. tmp%9 tmp%10) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_replicas. stateful_set_spec@0 stateful_set_spec@1 tmp%10) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.metadata. rabbitmq! tmp%11) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. tmp%11 tmp%12) (and (=> %%location_label%%4 (req%core!option.impl&%0.unwrap. $ TYPE%vstd!string.String. tmp%12)) (=> (ens%core!option.impl&%0.unwrap. $ TYPE%vstd!string.String. tmp%12 tmp%13) (=> (ens%vstd!string.impl&%1.concat. (%Poly%vstd!string.String. tmp%13) (str%new_strlit 1122019937498671927585961378854752799699106449427344106232883844519375274549808909704650986349974493982854057198001239182575245295601575022066869780843260) tmp%14) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_service_name. stateful_set_spec@1 stateful_set_spec@2 tmp%14) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.default. 0 selector@0) (=> (ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.empty. 0 match_labels@0) (=> (ens%vstd!string.impl&%0.to_string. (str%new_strlit 1588539530315223847722953298287299374188107919534831743833089341130026030232599932513390495630937258371487356320380652074008820394790478717851686026166260) tmp%15) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.metadata. rabbitmq! tmp%16) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. tmp%16 tmp%17) (and (=> %%location_label%%5 (req%core!option.impl&%0.unwrap. $ TYPE%vstd!string.String. tmp%17)) (=> (ens%core!option.impl&%0.unwrap. $ TYPE%vstd!string.String. tmp%17 tmp%18) (=> (ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.insert. match_labels@0 match_labels@1 tmp%15 (%Poly%vstd!string.String. tmp%18) tmp%19) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.label_selector.impl&%0.set_match_labels. selector@0 selector@1 match_labels@1) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_selector. stateful_set_spec@2 stateful_set_spec@3 selector@1) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. rabbitmq! tmp%20) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.persistence. tmp%20 tmp%21) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.storage. tmp%21 tmp%22) (=> (ens%vstd!string.impl&%0.to_string. (str%new_strlit 1666999487841568792954592678403801017278756060393580408429257652574254669440921223215941280270433044742100764224805013969794992348771695759640041105223099) tmp%23) (=> (ens%vstd!string.impl&%1.eq. tmp%22 tmp%23 tmp%24) (or (and (=> tmp%24 (=> (ens%alloc!vec.impl&%0.new. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. tmp%25) (=> (= empty_pvc@ (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. tmp%25)) (=> (= s1@ (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. empty_pvc@)) (Poly%fun%1. (mk_fun %%lambda%%10))))) (=> (= s2@ (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. config_map_rv!)))))))))))))))) (and (=> (= tmp%26 (= (vstd!seq.Seq.len.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1@)) (vstd!seq.Seq.len.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s2@)))) (and (=> %%location_label%%6 tmp%26) (=> tmp%26 (and (=> (has_type idx@ INT) (=> (and (<= 0 (%I idx@)) (< (%I idx@) (vstd!seq.Seq.len.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1@)))) (=> %%location_label%%7 (= (vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1@) idx@) (vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s2@) idx@))))) (=> (forall ((idx$ Poly)) (! (=> (has_type idx$ INT) (=> (and (<= 0 (%I idx$)) (< (%I idx$) (vstd!seq.Seq.len.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1@)))) (= (vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1@) idx$) (vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s2@) idx$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1@) idx$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s2@) idx$)) )) (=> (= tmp%27 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1@) (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s2@))) (and (=> %%location_label%%8 tmp%27) (=> tmp%27 (=> %%location_label%%9 (= s1@ s2@)))))))))) (=> (= s1@ s2@) (=> (= tmp%52 empty_pvc@) (=> (= labels@1 labels@0) (=> (= metadata$1@3 metadata$1@0) (=> (= access_modes@1 access_modes@0) (=> (= requests@1 requests@0) (=> (= resources@1 resources@0) (=> (= pvc_spec@3 pvc_spec@0) (=> (= pvc@2 pvc@0) (=> (= volume_claim_templates@1 volume_claim_templates@0) %%switch_label%%1)))))))))))))))) (=> (not tmp%24) (=> (ens%alloc!vec.impl&%0.new. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. tmp%28) (=> (= volume_claim_templates@0 (%Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. tmp%28)) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.default. 0 pvc@0) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. 0 metadata$1@0) (=> (ens%vstd!string.impl&%0.to_string. (str%new_strlit 10903198182025725172200932809483852499267536969054560311319602280646397029033477778984949816394850865501397331032340536096170310257450213129177986724688881) tmp%29) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_name. metadata$1@0 metadata$1@1 tmp%29) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.metadata. rabbitmq! tmp%30) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.namespace. tmp%30 tmp%31) (and (=> %%location_label%%10 (req%core!option.impl&%0.unwrap. $ TYPE%vstd!string.String. tmp%31)) (=> (ens%core!option.impl&%0.unwrap. $ TYPE%vstd!string.String. tmp%31 tmp%32) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_namespace. metadata$1@1 metadata$1@2 (%Poly%vstd!string.String. tmp%32)) (=> (ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.empty. 0 labels@0) (=> (ens%vstd!string.impl&%0.to_string. (str%new_strlit 1588539530315223847722953298287299374188107919534831743833089341130026030232599932513390495630937258371487356320380652074008820394790478717851686026166260) tmp%33) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.metadata. rabbitmq! tmp%34) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.name. tmp%34 tmp%35) (and (=> %%location_label%%11 (req%core!option.impl&%0.unwrap. $ TYPE%vstd!string.String. tmp%35)) (=> (ens%core!option.impl&%0.unwrap. $ TYPE%vstd!string.String. tmp%35 tmp%36) (=> (ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.insert. labels@0 labels@1 tmp%33 (%Poly%vstd!string.String. tmp%36) tmp%37) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_labels. metadata$1@2 metadata$1@3 labels@1) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.set_metadata. pvc@0 pvc@1 metadata$1@3) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.default. 0 pvc_spec@0) (=> (ens%alloc!vec.impl&%0.new. $ TYPE%vstd!string.String. tmp%38) (=> (= access_modes@0 (%Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. tmp%38)) (=> (ens%vstd!string.impl&%0.to_string. (str%new_strlit 3829758277519170405922782189888808236906857130640089039399625483901455057994484300555780340360655609079185583351884216059971425022081298847641131176681513) tmp%39) (=> (ens%alloc!vec.impl&%1.push. $ TYPE%vstd!string.String. $ TYPE%alloc!alloc.Global. (Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. access_modes@0) (Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. access_modes@1) (Poly%vstd!string.String. tmp%39)) (=> (= s1$1@ (vstd!seq_lib.impl&%0.map_values.? $ TYPE%vstd!string.String. $ (TYPE%vstd!seq.Seq. $ CHAR) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%vstd!string.String. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<vstd!string.String./alloc!alloc.Global.>. access_modes@1)) (Poly%fun%1. (mk_fun %%lambda%%4)))) (=> (= s2$1@ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView./PersistentVolumeClaimSpecView/access_modes (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimSpecView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView./PersistentVolumeClaimView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. config_map_rv!)))))))))))))) (I 0))))))))))))) (and (=> (= tmp%40 (= (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ CHAR) s1$1@) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ CHAR) s2$1@))) (and (=> %%location_label%%12 tmp%40) (=> tmp%40 (and (=> (has_type idx$1@ INT) (=> (and (<= 0 (%I idx$1@)) (< (%I idx$1@) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ CHAR) s1$1@))) (=> %%location_label%%13 (= (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ CHAR) s1$1@ idx$1@) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ CHAR) s2$1@ idx$1@))))) (=> (forall ((idx$ Poly)) (! (=> (has_type idx$ INT) (=> (and (<= 0 (%I idx$)) (< (%I idx$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ CHAR) s1$1@))) (= (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ CHAR) s1$1@ idx$) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ CHAR) s2$1@ idx$)))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ CHAR) s1$1@ idx$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ CHAR) s2$1@ idx$)) )) (=> (= tmp%41 (ext_eq false (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ CHAR)) s1$1@ s2$1@)) (and (=> %%location_label%%14 tmp%41) (=> tmp%41 (=> %%location_label%%15 (= s1$1@ s2$1@)))))))))) (=> (= s1$1@ s2$1@) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_access_modes. pvc_spec@0 pvc_spec@1 access_modes@1) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.default. 0 resources@0) (=> (ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.empty. 0 requests@0) (=> (ens%vstd!string.impl&%0.to_string. (str%new_strlit 1300926296256712374622009529095030328769397908469815840728870309441362622238129235077877649542114507324532975852639292503898789404618066001447955647330407) tmp%42) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. rabbitmq! tmp%43) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.persistence. tmp%43 tmp%44) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.storage. tmp%44 tmp%45) (=> (ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.insert. requests@0 requests@1 tmp%42 tmp%45 tmp%46) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.resource_requirements.impl&%0.set_requests. resources@0 resources@1 requests@1) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_resources. pvc_spec@1 pvc_spec@2 resources@1) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. rabbitmq! tmp%47) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.persistence. tmp%47 tmp%48) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%7.storage_class_name. tmp%48 tmp%49) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%2.set_storage_class_name. pvc_spec@2 pvc_spec@3 tmp%49) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.impl&%0.set_spec. pvc@1 pvc@2 pvc_spec@3) (=> (ens%alloc!vec.impl&%1.push. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. $ TYPE%alloc!alloc.Global. (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. volume_claim_templates@0) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. volume_claim_templates@1) (Poly%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. pvc@2)) (=> (= s1$2@ (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. (vstd!seq_lib.impl&%0.map_values.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim. $ TYPE%alloc!alloc.Global.) (Poly%alloc!vec.Vec<rabbitmq_controller!kubernetes_api_objects.exec.persistent_volume_claim.PersistentVolumeClaim./alloc!alloc.Global.>. volume_claim_templates@1)) (Poly%fun%1. (mk_fun %%lambda%%10))))) (=> (= s2$2@ (%Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView./StatefulSetSpecView/volume_claim_templates (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetSpecView. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView./StatefulSetView/spec (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. config_map_rv!)))))))))))))))) (and (=> (= tmp%50 (= (vstd!seq.Seq.len.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1$2@)) (vstd!seq.Seq.len.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s2$2@)))) (and (=> %%location_label%%16 tmp%50) (=> tmp%50 (and (=> (has_type idx$2@ INT) (=> (and (<= 0 (%I idx$2@)) (< (%I idx$2@) (vstd!seq.Seq.len.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1$2@)))) (=> %%location_label%%17 (= (vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1$2@) idx$2@) (vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s2$2@) idx$2@))))) (=> (forall ((idx$ Poly)) (! (=> (has_type idx$ INT) (=> (and (<= 0 (%I idx$)) (< (%I idx$) (vstd!seq.Seq.len.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1$2@)))) (= (vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1$2@) idx$) (vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s2$2@) idx$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1$2@) idx$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView. (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s2$2@) idx$)) )) (=> (= tmp%51 (ext_eq false (TYPE%vstd!seq.Seq. $ TYPE%rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.) (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s1$2@) (Poly%vstd!seq.Seq<rabbitmq_controller!kubernetes_api_objects.spec.persistent_volume_claim.PersistentVolumeClaimView.>. s2$2@))) (and (=> %%location_label%%18 tmp%51) (=> tmp%51 (=> %%location_label%%19 (= s1$2@ s2$2@)))))))))) (=> (= s1$2@ s2$2@) (=> (= tmp%52 volume_claim_templates@1) %%switch_label%%1)))))))))))))))))))))))))))))))))))))))))))))))))))) (and (not %%switch_label%%1) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_volume_claim_templates. stateful_set_spec@3 stateful_set_spec@4 tmp%52) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.default. 0 pod_template_spec@0) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.default. 0 metadata$2@0) (and (=> %%location_label%%20 (req%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_labels. rabbitmq!)) (=> (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.common.make_labels. rabbitmq! tmp%53) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_labels. metadata$2@0 metadata$2@1 tmp%53) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. rabbitmq! tmp%54) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.annotations. tmp%54 anno@0) (=> (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.sts_restart_annotation. 0 tmp%55) (=> (ens%vstd!string.impl&%1.clone. config_map_rv! tmp%56) (=> (ens%rabbitmq_controller!vstd_ext.string_map.impl&%0.insert. anno@0 anno@1 tmp%55 tmp%56 tmp%57) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.object_meta.impl&%0.set_annotations. metadata$2@1 metadata$2@2 anno@1) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.set_metadata. pod_template_spec@0 pod_template_spec@1 metadata$2@2) (and (=> %%location_label%%21 (req%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_rabbitmq_pod_spec. rabbitmq!)) (=> (ens%rabbitmq_controller!rabbitmq_controller.exec.resource.stateful_set.make_rabbitmq_pod_spec. rabbitmq! tmp%58) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.pod_template_spec.impl&%0.set_spec. pod_template_spec@1 pod_template_spec@2 tmp%58) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_template. stateful_set_spec@4 stateful_set_spec@5 pod_template_spec@2) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. rabbitmq! tmp%59) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.pod_management_policy. tmp%59 tmp%60) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_pod_management_policy. stateful_set_spec@5 stateful_set_spec@6 tmp%60) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. rabbitmq! tmp%61) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.persistent_volume_claim_retention_policy. tmp%61 tmp%62) (=> (ens%core!option.impl&%0.is_some. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. tmp%62 tmp%63) (or (and (=> tmp%63 (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%3.spec. rabbitmq! tmp%64) (=> (ens%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.impl&%5.persistent_volume_claim_retention_policy. tmp%64 tmp%65) (and (=> %%location_label%%22 (req%core!option.impl&%0.unwrap. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. tmp%65)) (=> (ens%core!option.impl&%0.unwrap. $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. tmp%65 tmp%66) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%3.set_pvc_retention_policy. stateful_set_spec@6 stateful_set_spec@7 (%Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSetPersistentVolumeClaimRetentionPolicy. tmp%66)) %%switch_label%%0)))))) (=> (not tmp%63) (=> (= stateful_set_spec@7 stateful_set_spec@6) %%switch_label%%0))) (and (not %%switch_label%%0) (=> (ens%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.impl&%1.set_spec. stateful_set@1 stateful_set@2 stateful_set_spec@7) (=> (= stateful_set! stateful_set@2) (=> %%location_label%%23 (= (%Poly%rabbitmq_controller!kubernetes_api_objects.spec.stateful_set.StatefulSetView. (vstd!view.View.view.? $ TYPE%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. (Poly%rabbitmq_controller!kubernetes_api_objects.exec.stateful_set.StatefulSet. stateful_set!))) (rabbitmq_controller!rabbitmq_controller.model.resource.stateful_set.make_stateful_set.? (vstd!view.View.view.? $ TYPE%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. (Poly%rabbitmq_controller!rabbitmq_controller.trusted.exec_types.RabbitmqCluster. rabbitmq!)) (vstd!string.impl&%1.view.? (Poly%vstd!string.String. config_map_rv!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert %%query%%)
(check-sat)
(exit)
