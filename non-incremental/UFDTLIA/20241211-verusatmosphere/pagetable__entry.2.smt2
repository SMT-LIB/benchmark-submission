(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module pagetable::entry'")
(set-info :comment ";; Fuel")
(declare-const fuel%lib!pagetable.entry.impl&%4.is_empty. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_page_entry_to_map_entry. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_map_entry_to_page_entry. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2present. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2ps. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2write. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2execute_disable. FuelId)
(declare-const fuel%lib!pagetable.entry.usize2user. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2page_entry_perm. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2page_entry. FuelId)
(declare-const fuel%lib!pagetable.entry.spec_usize2pa. FuelId)
(declare-const fuel%lib!util.page_ptr_util_u.MEM_valid. FuelId)
(declare-const fuel%lib!define.MEM_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_USER_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PS_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PRESENT_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_WRITE_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_USER_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PS_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%lib!pagetable.entry.impl&%4.is_empty. fuel%lib!pagetable.entry.spec_page_entry_to_map_entry. fuel%lib!pagetable.entry.spec_map_entry_to_page_entry. fuel%lib!pagetable.entry.usize2present. fuel%lib!pagetable.entry.usize2ps. fuel%lib!pagetable.entry.usize2write. fuel%lib!pagetable.entry.usize2execute_disable. fuel%lib!pagetable.entry.usize2user. fuel%lib!pagetable.entry.spec_usize2page_entry_perm. fuel%lib!pagetable.entry.spec_usize2page_entry. fuel%lib!pagetable.entry.spec_usize2pa. fuel%lib!util.page_ptr_util_u.MEM_valid. fuel%lib!define.MEM_MASK. fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT. fuel%lib!define.PAGE_ENTRY_USER_SHIFT. fuel%lib!define.PAGE_ENTRY_PS_SHIFT. fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT. fuel%lib!define.PAGE_ENTRY_PRESENT_MASK. fuel%lib!define.PAGE_ENTRY_WRITE_MASK. fuel%lib!define.PAGE_ENTRY_USER_MASK. fuel%lib!define.PAGE_ENTRY_PS_MASK. fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-datatypes ((lib!pagetable.entry.PageEntryPerm. 0) (lib!pagetable.entry.PageEntry. 0) (lib!pagetable.entry.MapEntry. 0) (tuple%0. 0)) (((lib!pagetable.entry.PageEntryPerm./PageEntryPerm (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?present Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?ps Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?write Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?execute_disable Bool) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?user Bool))) ((lib!pagetable.entry.PageEntry./PageEntry (lib!pagetable.entry.PageEntry./PageEntry/?addr Int) (lib!pagetable.entry.PageEntry./PageEntry/?perm lib!pagetable.entry.PageEntryPerm.))) ((lib!pagetable.entry.MapEntry./MapEntry (lib!pagetable.entry.MapEntry./MapEntry/?addr Int) (lib!pagetable.entry.MapEntry./MapEntry/?write Bool) (lib!pagetable.entry.MapEntry./MapEntry/?execute_disable Bool))) ((tuple%0./tuple%0 ))))
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (lib!pagetable.entry.PageEntryPerm.) Bool)
(declare-fun lib!pagetable.entry.PageEntry./PageEntry/addr (lib!pagetable.entry.PageEntry.) Int)
(declare-fun lib!pagetable.entry.PageEntry./PageEntry/perm (lib!pagetable.entry.PageEntry.) lib!pagetable.entry.PageEntryPerm.)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/addr (lib!pagetable.entry.MapEntry.) Int)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/write (lib!pagetable.entry.MapEntry.) Bool)
(declare-fun lib!pagetable.entry.MapEntry./MapEntry/execute_disable (lib!pagetable.entry.MapEntry.) Bool)
(declare-const TYPE%lib!pagetable.entry.PageEntryPerm. Type)
(declare-const TYPE%lib!pagetable.entry.PageEntry. Type)
(declare-const TYPE%lib!pagetable.entry.MapEntry. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntryPerm.) Poly)
(declare-fun %Poly%lib!pagetable.entry.PageEntryPerm. (Poly) lib!pagetable.entry.PageEntryPerm.)
(declare-fun Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry.) Poly)
(declare-fun %Poly%lib!pagetable.entry.PageEntry. (Poly) lib!pagetable.entry.PageEntry.)
(declare-fun Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry.) Poly)
(declare-fun %Poly%lib!pagetable.entry.MapEntry. (Poly) lib!pagetable.entry.MapEntry.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= x (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. x))) :pattern ((Poly%lib!pagetable.entry.PageEntryPerm. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntryPerm.) (= x (Poly%lib!pagetable.entry.PageEntryPerm. (%Poly%lib!pagetable.entry.PageEntryPerm. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.PageEntryPerm.)) )))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?present x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present x)) )))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?ps x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps x)) )))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?write x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write x)) )))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?execute_disable x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable x)) )))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user x) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/?user x)) :pattern ((lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user x)) )))
(assert (forall ((x lib!pagetable.entry.PageEntryPerm.)) (! (has_type (Poly%lib!pagetable.entry.PageEntryPerm. x) TYPE%lib!pagetable.entry.PageEntryPerm.) :pattern ((has_type (Poly%lib!pagetable.entry.PageEntryPerm. x) TYPE%lib!pagetable.entry.PageEntryPerm.)) )))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= x (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. x))) :pattern ((Poly%lib!pagetable.entry.PageEntry. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntry.) (= x (Poly%lib!pagetable.entry.PageEntry. (%Poly%lib!pagetable.entry.PageEntry. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.PageEntry.)) )))
(assert (forall ((_addr! Int) (_perm! lib!pagetable.entry.PageEntryPerm.)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry./PageEntry _addr! _perm!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.PageEntry./PageEntry _addr! _perm!)) TYPE%lib!pagetable.entry.PageEntry.)) )))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= (lib!pagetable.entry.PageEntry./PageEntry/addr x) (lib!pagetable.entry.PageEntry./PageEntry/?addr x)) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.PageEntry.) (uInv SZ (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. x)))) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. x)) (has_type x TYPE%lib!pagetable.entry.PageEntry.)) )))
(assert (forall ((x lib!pagetable.entry.PageEntry.)) (! (= (lib!pagetable.entry.PageEntry./PageEntry/perm x) (lib!pagetable.entry.PageEntry./PageEntry/?perm x)) :pattern ((lib!pagetable.entry.PageEntry./PageEntry/perm x)) )))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= x (%Poly%lib!pagetable.entry.MapEntry. (Poly%lib!pagetable.entry.MapEntry. x))) :pattern ((Poly%lib!pagetable.entry.MapEntry. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.MapEntry.) (= x (Poly%lib!pagetable.entry.MapEntry. (%Poly%lib!pagetable.entry.MapEntry. x)))) :pattern ((has_type x TYPE%lib!pagetable.entry.MapEntry.)) )))
(assert (forall ((_addr! Int) (_write! Bool) (_execute_disable! Bool)) (! (=> (uInv SZ _addr!) (has_type (Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry./MapEntry _addr! _write! _execute_disable!)) TYPE%lib!pagetable.entry.MapEntry.)) :pattern ((has_type (Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.MapEntry./MapEntry _addr! _write! _execute_disable!)) TYPE%lib!pagetable.entry.MapEntry.)) )))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/addr x) (lib!pagetable.entry.MapEntry./MapEntry/?addr x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pagetable.entry.MapEntry.) (uInv SZ (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. x)))) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. x)) (has_type x TYPE%lib!pagetable.entry.MapEntry.)) )))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/write x) (lib!pagetable.entry.MapEntry./MapEntry/?write x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/write x)) )))
(assert (forall ((x lib!pagetable.entry.MapEntry.)) (! (= (lib!pagetable.entry.MapEntry./MapEntry/execute_disable x) (lib!pagetable.entry.MapEntry./MapEntry/?execute_disable x)) :pattern ((lib!pagetable.entry.MapEntry./MapEntry/execute_disable x)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Function-Decl lib::define::MEM_MASK")
(declare-fun lib!define.MEM_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2pa")
(declare-fun lib!pagetable.entry.spec_usize2pa.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PRESENT_MASK")
(declare-fun lib!define.PAGE_ENTRY_PRESENT_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2present")
(declare-fun lib!pagetable.entry.usize2present.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PS_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_PS_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PS_MASK")
(declare-fun lib!define.PAGE_ENTRY_PS_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2ps")
(declare-fun lib!pagetable.entry.usize2ps.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_WRITE_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_WRITE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_WRITE_MASK")
(declare-fun lib!define.PAGE_ENTRY_WRITE_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2write")
(declare-fun lib!pagetable.entry.usize2write.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_EXECUTE_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_EXECUTE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_EXECUTE_MASK")
(declare-fun lib!define.PAGE_ENTRY_EXECUTE_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2execute_disable")
(declare-fun lib!pagetable.entry.usize2execute_disable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_USER_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_USER_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_USER_MASK")
(declare-fun lib!define.PAGE_ENTRY_USER_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::pagetable::entry::usize2user")
(declare-fun lib!pagetable.entry.usize2user.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2page_entry_perm")
(declare-fun lib!pagetable.entry.spec_usize2page_entry_perm.? (Poly) lib!pagetable.entry.PageEntryPerm.)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_usize2page_entry")
(declare-fun lib!pagetable.entry.spec_usize2page_entry.? (Poly) lib!pagetable.entry.PageEntry.)
(set-info :comment ";; Function-Decl lib::util::page_ptr_util_u::MEM_valid")
(declare-fun lib!util.page_ptr_util_u.MEM_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::entry::PageEntry::is_empty")
(declare-fun lib!pagetable.entry.impl&%4.is_empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_page_entry_to_map_entry")
(declare-fun lib!pagetable.entry.spec_page_entry_to_map_entry.? (Poly) lib!pagetable.entry.MapEntry.)
(set-info :comment ";; Function-Decl lib::pagetable::entry::spec_map_entry_to_page_entry")
(declare-fun lib!pagetable.entry.spec_map_entry_to_page_entry.? (Poly Poly) lib!pagetable.entry.PageEntry.)
(set-info :comment ";; Function-Axioms lib::define::MEM_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_MASK.) (= lib!define.MEM_MASK.? 281474976706560)))
(assert (uInv 64 lib!define.MEM_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2pa")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2pa.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2pa.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2pa.? v!) (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.MEM_MASK.?))))) :pattern ((lib!pagetable.entry.spec_usize2pa.? v!)) ))))
(assert (forall ((v! Poly)) (! (=> (has_type v! (UINT SZ)) (uInv SZ (lib!pagetable.entry.spec_usize2pa.? v!))) :pattern ((lib!pagetable.entry.spec_usize2pa.? v!)) )))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PRESENT_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PRESENT_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PRESENT_MASK.) (= lib!define.PAGE_ENTRY_PRESENT_MASK.? 1)))
(assert (uInv 64 lib!define.PAGE_ENTRY_PRESENT_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2present")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2present.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2present.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2present.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_PRESENT_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2present.? v!)) ))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PS_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PS_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PS_SHIFT.) (= lib!define.PAGE_ENTRY_PS_SHIFT.? 7)))
(assert (uInv 64 lib!define.PAGE_ENTRY_PS_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PS_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PS_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PS_MASK.) (= lib!define.PAGE_ENTRY_PS_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_PS_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_PS_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2ps")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2ps.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2ps.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2ps.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_PS_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2ps.? v!)) ))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_WRITE_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT.) (= lib!define.PAGE_ENTRY_WRITE_SHIFT.? 1)))
(assert (uInv 64 lib!define.PAGE_ENTRY_WRITE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_WRITE_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_WRITE_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_WRITE_MASK.) (= lib!define.PAGE_ENTRY_WRITE_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_WRITE_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_WRITE_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2write")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2write.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2write.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2write.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_WRITE_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2write.? v!)) ))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_EXECUTE_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT.) (= lib!define.PAGE_ENTRY_EXECUTE_SHIFT.? 63)))
(assert (uInv 64 lib!define.PAGE_ENTRY_EXECUTE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_EXECUTE_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK.) (= lib!define.PAGE_ENTRY_EXECUTE_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_EXECUTE_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_EXECUTE_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2execute_disable")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2execute_disable.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2execute_disable.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2execute_disable.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_EXECUTE_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2execute_disable.? v!)) ))))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_USER_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_USER_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_USER_SHIFT.) (= lib!define.PAGE_ENTRY_USER_SHIFT.? 2)))
(assert (uInv 64 lib!define.PAGE_ENTRY_USER_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_USER_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_USER_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_USER_MASK.) (= lib!define.PAGE_ENTRY_USER_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_USER_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_USER_MASK.?))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::usize2user")
(assert (fuel_bool_default fuel%lib!pagetable.entry.usize2user.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.usize2user.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.usize2user.? v!) (not (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ lib!define.PAGE_ENTRY_USER_MASK.?)))) 0))) :pattern ((lib!pagetable.entry.usize2user.? v!)) ))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2page_entry_perm")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2page_entry_perm.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2page_entry_perm.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2page_entry_perm.? v!) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm (%B (B (lib!pagetable.entry.usize2present.? v!))) (%B (B (lib!pagetable.entry.usize2ps.? v!))) (%B (B (lib!pagetable.entry.usize2write.? v!))) (%B (B (lib!pagetable.entry.usize2execute_disable.? v!))) (%B (B (lib!pagetable.entry.usize2user.? v!))))) :pattern ((lib!pagetable.entry.spec_usize2page_entry_perm.? v!)) ))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_usize2page_entry")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_usize2page_entry.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_usize2page_entry.) (forall ((v! Poly)) (! (= (lib!pagetable.entry.spec_usize2page_entry.? v!) (lib!pagetable.entry.PageEntry./PageEntry (%I (I (lib!pagetable.entry.spec_usize2pa.? v!))) (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.spec_usize2page_entry_perm.? v!))))) :pattern ((lib!pagetable.entry.spec_usize2page_entry.? v!)) ))))
(assert (forall ((v! Poly)) (! (=> (has_type v! (UINT SZ)) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.spec_usize2page_entry.? v!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((lib!pagetable.entry.spec_usize2page_entry.? v!)) )))
(set-info :comment ";; Function-Axioms lib::util::page_ptr_util_u::MEM_valid")
(assert (fuel_bool_default fuel%lib!util.page_ptr_util_u.MEM_valid.))
(assert (=> (fuel_bool fuel%lib!util.page_ptr_util_u.MEM_valid.) (forall ((v! Poly)) (! (= (lib!util.page_ptr_util_u.MEM_valid.? v!) (= (uClip SZ (bitand (I (%I v!)) (I (uClip SZ (uClip 64 (bitnot (I lib!define.MEM_MASK.?))))))) 0)) :pattern ((lib!util.page_ptr_util_u.MEM_valid.? v!)) ))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::PageEntry::is_empty")
(assert (fuel_bool_default fuel%lib!pagetable.entry.impl&%4.is_empty.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.impl&%4.is_empty.) (forall ((self! Poly)) (! (= (lib!pagetable.entry.impl&%4.is_empty.? self!) (and (and (and (and (and (= (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. self!)) 0) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false)) (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. self!))))) false))) :pattern ((lib!pagetable.entry.impl&%4.is_empty.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_page_entry_to_map_entry")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_page_entry_to_map_entry.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_page_entry_to_map_entry.) (forall ((p! Poly)) (! (= (lib!pagetable.entry.spec_page_entry_to_map_entry.? p!) (lib!pagetable.entry.MapEntry./MapEntry (%I (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. p!)))) (%B (B (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. p!))))))) (%B (B (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. p!))))))))) :pattern ((lib!pagetable.entry.spec_page_entry_to_map_entry.? p!)) ))))
(assert (forall ((p! Poly)) (! (=> (has_type p! TYPE%lib!pagetable.entry.PageEntry.) (has_type (Poly%lib!pagetable.entry.MapEntry. (lib!pagetable.entry.spec_page_entry_to_map_entry.? p!)) TYPE%lib!pagetable.entry.MapEntry.)) :pattern ((lib!pagetable.entry.spec_page_entry_to_map_entry.? p!)) )))
(set-info :comment ";; Function-Axioms lib::pagetable::entry::spec_map_entry_to_page_entry")
(assert (fuel_bool_default fuel%lib!pagetable.entry.spec_map_entry_to_page_entry.))
(assert (=> (fuel_bool fuel%lib!pagetable.entry.spec_map_entry_to_page_entry.) (forall ((m! Poly) (ps! Poly)) (! (= (lib!pagetable.entry.spec_map_entry_to_page_entry.? m! ps!) (lib!pagetable.entry.PageEntry./PageEntry (%I (I (lib!pagetable.entry.MapEntry./MapEntry/addr (%Poly%lib!pagetable.entry.MapEntry. m!)))) (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntryPerm./PageEntryPerm (%B (B true)) (%B ps!) (%B (B (lib!pagetable.entry.MapEntry./MapEntry/write (%Poly%lib!pagetable.entry.MapEntry. m!)))) (%B (B (lib!pagetable.entry.MapEntry./MapEntry/execute_disable (%Poly%lib!pagetable.entry.MapEntry. m!)))) (%B (B true))))))) :pattern ((lib!pagetable.entry.spec_map_entry_to_page_entry.? m! ps!)) ))))
(assert (forall ((m! Poly) (ps! Poly)) (! (=> (and (has_type m! TYPE%lib!pagetable.entry.MapEntry.) (has_type ps! BOOL)) (has_type (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.spec_map_entry_to_page_entry.? m! ps!)) TYPE%lib!pagetable.entry.PageEntry.)) :pattern ((lib!pagetable.entry.spec_map_entry_to_page_entry.? m! ps!)) )))
(set-info :comment ";; Function-Specs lib::pagetable::entry::zero_leads_is_empty_page_entry")
(declare-fun ens%lib!pagetable.entry.zero_leads_is_empty_page_entry. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%lib!pagetable.entry.zero_leads_is_empty_page_entry. no%param) (lib!pagetable.entry.impl&%4.is_empty.? (Poly%lib!pagetable.entry.PageEntry. (lib!pagetable.entry.spec_usize2page_entry.? (I 0))))) :pattern ((ens%lib!pagetable.entry.zero_leads_is_empty_page_entry. no%param)) )))
(set-info :comment ";; Function-Def lib::pagetable::entry::zero_leads_is_empty_page_entry")
(set-info :comment ";; pagetable/entry.rs:136:1: 136:46 (#0)")
(set-info :comment ";; Function-Specs lib::pagetable::entry::page_entry2usize")
(declare-fun req%lib!pagetable.entry.page_entry2usize. (lib!pagetable.entry.PageEntry.) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((page_entry! lib!pagetable.entry.PageEntry.)) (! (= (req%lib!pagetable.entry.page_entry2usize. page_entry!) (=> %%global_location_label%%0 (lib!util.page_ptr_util_u.MEM_valid.? (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) :pattern ((req%lib!pagetable.entry.page_entry2usize. page_entry!)) )))
(declare-fun ens%lib!pagetable.entry.page_entry2usize. (lib!pagetable.entry.PageEntry. Int) Bool)
(assert (forall ((page_entry! lib!pagetable.entry.PageEntry.) (ret! Int)) (! (= (ens%lib!pagetable.entry.page_entry2usize. page_entry! ret!) (and (uInv SZ ret!) (= (lib!pagetable.entry.usize2present.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (= (lib!pagetable.entry.usize2ps.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (= (lib!pagetable.entry.usize2write.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (= (lib!pagetable.entry.usize2execute_disable.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (= (lib!pagetable.entry.usize2user.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (= (lib!pagetable.entry.spec_usize2pa.? (I ret!)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))) (ext_eq false TYPE%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.spec_usize2page_entry_perm.? (I ret!))) (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) :pattern ((ens%lib!pagetable.entry.page_entry2usize. page_entry! ret!)) )))
(set-info :comment ";; Function-Def lib::pagetable::entry::page_entry2usize")
(set-info :comment ";; pagetable/entry.rs:215:1: 215:62 (#0)")
(declare-const ret! Int)
(declare-const page_entry! lib!pagetable.entry.PageEntry.)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Bool)
(declare-const tmp%3 Bool)
(declare-const tmp%4 Bool)
(declare-const tmp%5 Bool)
(declare-const tmp%6 Bool)
(declare-const tmp%7 Bool)
(declare-const tmp%8 Bool)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const tmp%12 Bool)
(declare-const tmp%13 Bool)
(declare-const tmp%14 Bool)
(declare-const tmp%15 Bool)
(declare-const tmp%16 Bool)
(declare-const tmp%17 Bool)
(declare-const tmp%18 Bool)
(declare-const tmp%19 Bool)
(declare-const tmp%20 Bool)
(declare-const tmp%21 Bool)
(declare-const tmp%22 Bool)
(declare-const tmp%23 Bool)
(declare-const tmp%24 Bool)
(declare-const tmp%25 Bool)
(declare-const tmp%26 Bool)
(declare-const tmp%27 Bool)
(declare-const tmp%28 Bool)
(declare-const tmp%29 Bool)
(declare-const tmp%30 Bool)
(declare-const tmp%31 Bool)
(declare-const tmp%32 Bool)
(declare-const tmp%33 Bool)
(declare-const tmp%34 Bool)
(declare-const tmp%35 Bool)
(declare-const tmp%36 Bool)
(declare-const tmp%37 Bool)
(declare-const tmp%38 Bool)
(declare-const tmp%39 Bool)
(declare-const tmp%40 Bool)
(declare-const tmp%41 Bool)
(declare-const tmp%42 Bool)
(declare-const tmp%43 Bool)
(declare-const tmp%44 Bool)
(declare-const tmp%45 Bool)
(declare-const tmp%46 Bool)
(declare-const tmp%47 Bool)
(declare-const tmp%48 Bool)
(declare-const tmp%49 Bool)
(declare-const tmp%50 Bool)
(declare-const tmp%51 Bool)
(declare-const tmp%52 Bool)
(declare-const tmp%53 Bool)
(declare-const tmp%54 Bool)
(declare-const tmp%55 Bool)
(declare-const tmp%56 Bool)
(declare-const tmp%57 Bool)
(declare-const tmp%58 Bool)
(declare-const tmp%59 Bool)
(declare-const tmp%60 Bool)
(declare-const tmp%61 Bool)
(declare-const tmp%62 Bool)
(declare-const tmp%63 Bool)
(declare-const tmp%64 Bool)
(declare-const tmp%65 Bool)
(declare-const tmp%66 Bool)
(declare-const tmp%67 Bool)
(declare-const tmp%68 Bool)
(declare-const tmp%69 Bool)
(declare-const tmp%70 Bool)
(declare-const tmp%71 Bool)
(declare-const tmp%72 Bool)
(declare-const tmp%73 Bool)
(declare-const tmp%74 Bool)
(declare-const tmp%75 Bool)
(declare-const tmp%76 Bool)
(declare-const tmp%77 Bool)
(declare-const tmp%78 Bool)
(declare-const tmp%79 Bool)
(declare-const tmp%80 Bool)
(declare-const tmp%81 Bool)
(declare-const tmp%82 Bool)
(declare-const tmp%83 Bool)
(declare-const tmp%84 Bool)
(declare-const tmp%85 Bool)
(declare-const tmp%86 Bool)
(declare-const tmp%87 Bool)
(declare-const tmp%88 Bool)
(declare-const tmp%89 Bool)
(declare-const tmp%90 Bool)
(declare-const tmp%91 Bool)
(declare-const tmp%92 Bool)
(declare-const tmp%93 Bool)
(declare-const tmp%94 Bool)
(declare-const tmp%95 Bool)
(declare-const ret@0 Int)
(declare-const ghost_addr@0 Int)
(declare-const ghost_ret@0 Int)
(declare-const ghost_present@ Bool)
(declare-const ghost_ps@ Bool)
(declare-const ghost_write@ Bool)
(declare-const ghost_execute_disable@ Bool)
(declare-const ghost_user@ Bool)
(assert fuel_defaults)
(assert (has_type (Poly%lib!pagetable.entry.PageEntry. page_entry!) TYPE%lib!pagetable.entry.PageEntry.))
(assert (lib!util.page_ptr_util_u.MEM_valid.? (I (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))
(declare-const ret@1 Int)
(declare-const ghost_ret@1 Int)
(declare-const ret@2 Int)
(declare-const ghost_ret@2 Int)
(declare-const ret@3 Int)
(declare-const ghost_ret@3 Int)
(declare-const ret@4 Int)
(declare-const ghost_ret@4 Int)
(declare-const ret@5 Int)
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(declare-const %%switch_label%%4 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; possible bit shift underflow/overflow")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%30 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%31 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%32 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%33 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%34 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%35 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%36 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%37 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%38 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%39 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%40 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%41 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%42 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%43 Bool)
(set-info :comment ";; possible bit shift underflow/overflow")
(declare-const %%location_label%%44 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%45 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%46 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%47 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%48 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%49 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%50 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%51 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%52 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%53 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%54 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%55 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%56 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%57 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%58 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%59 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%60 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%61 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%62 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%63 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%64 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%65 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%66 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%67 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%68 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%69 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%70 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%71 Bool)
(set-info :comment ";; possible bit shift underflow/overflow")
(declare-const %%location_label%%72 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%73 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%74 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%75 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%76 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%77 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%78 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%79 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%80 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%81 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%82 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%83 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%84 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%85 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%86 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%87 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%88 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%89 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%90 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%91 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%92 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%93 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%94 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%95 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%96 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%97 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%98 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%99 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%100 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%101 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%102 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%103 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%104 Bool)
(set-info :comment ";; possible bit shift underflow/overflow")
(declare-const %%location_label%%105 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%106 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%107 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%108 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%109 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%110 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%111 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%112 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%113 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%114 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%115 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%116 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%117 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%118 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%119 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%120 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%121 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%122 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%123 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%124 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%125 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%126 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%127 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%128 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%129 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%130 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%131 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%132 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%133 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%134 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%135 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%136 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%137 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%138 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%139 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%140 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%141 Bool)
(assert (not (=> (= ret@0 (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))) (=> (= ghost_addr@0 (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))) (=> (= ghost_ret@0 (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))) (=> (= ghost_present@ (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (=> (= ghost_ps@ (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (=> (= ghost_write@ (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (=> (= ghost_execute_disable@ (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (=> (= ghost_user@ (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))) (=> (= tmp%1 (= ret@0 ghost_addr@0)) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (or (and (=> (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))) true) (and (=> %%location_label%%1 true) (=> (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@0) (I (uClip SZ 1))))) (I (uClip SZ 1)))) 0)) (and (=> %%location_label%%2 (and (= (uClip SZ (bitand (I ghost_addr@0) (I (uClip SZ (uClip 64 (bitnot (I 281474976706560))))))) 0) (= ghost_addr@0 ret@0))) (=> (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@0) (I (uClip SZ 1))))) (I (uClip SZ 281474976706560)))) ghost_addr@0) (=> (= ret@1 (uClip SZ (bitor (I ret@0) (I (uClip SZ 1))))) (=> (= tmp%2 (not (= (uClip SZ (bitand (I ret@1) (I (uClip SZ 1)))) 0))) (and (=> %%location_label%%3 tmp%2) (=> tmp%2 (=> (= tmp%3 (= (lib!pagetable.entry.usize2present.? (I ret@1)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%4 tmp%3) (=> tmp%3 (=> (= tmp%4 (= (uClip SZ (bitand (I ret@1) (I (uClip SZ 281474976706560)))) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%5 tmp%4) (=> tmp%4 (=> (= tmp%5 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@1)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%6 tmp%5) (=> tmp%5 (and (=> %%location_label%%7 (= (uClip SZ (bitand (I ghost_ret@0) (I (uClip SZ (uClip 64 (bitnot (I 281474976706560))))))) 0)) (=> (= (uClip SZ (bitand (I (uClip SZ (bitor (I ghost_ret@0) (I (uClip SZ 1))))) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I 1) (I 281474976706560)))))))))) 0) (=> (= tmp%6 (= (uClip SZ (bitand (I ret@1) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%8 tmp%6) (=> tmp%6 %%switch_label%%4))))))))))))))))))))))) (=> (not (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))) true)) (and (=> %%location_label%%9 (= (uClip SZ (bitand (I ret@0) (I (uClip SZ (uClip 64 (bitnot (I 281474976706560))))))) 0)) (=> (= (uClip SZ (bitand (I ret@0) (I (uClip SZ 1)))) 0) (=> (= tmp%7 (= (lib!pagetable.entry.usize2present.? (I ret@0)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%10 tmp%7) (=> tmp%7 (and (=> %%location_label%%11 (= (uClip SZ (bitand (I ret@0) (I (uClip SZ (uClip 64 (bitnot (I 281474976706560))))))) 0)) (=> (= (uClip SZ (bitand (I ret@0) (I (uClip SZ 281474976706560)))) ret@0) (=> (= tmp%8 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@0)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%12 tmp%8) (=> tmp%8 (and (=> %%location_label%%13 (= (uClip SZ (bitand (I ghost_addr@0) (I (uClip SZ (uClip 64 (bitnot (I 281474976706560))))))) 0)) (=> (= (uClip SZ (bitand (I ghost_addr@0) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I 1) (I 281474976706560)))))))))) 0) (=> (= tmp%9 (= (uClip SZ (bitand (I ret@0) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%14 tmp%9) (=> tmp%9 (=> (= ret@1 ret@0) %%switch_label%%4)))))))))))))))))) (and (not %%switch_label%%4) (=> (= tmp%10 (= (lib!pagetable.entry.usize2present.? (I ret@1)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%15 tmp%10) (=> tmp%10 (=> (= tmp%11 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@1)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%16 tmp%11) (=> tmp%11 (=> (= tmp%12 (= (uClip SZ (bitand (I ret@1) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%17 tmp%12) (=> tmp%12 (=> (= ghost_ret@1 ret@1) (or (and (=> (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))) true) (and (=> %%location_label%%18 true) (=> (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@1) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7)))))))) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0)) (and (=> %%location_label%%19 (and (= ghost_ret@1 ret@1) (= (not (= (uClip SZ (bitand (I ret@1) (I (uClip SZ 1)))) 0)) ghost_present@))) (=> (= (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@1) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7)))))))) (I (uClip SZ 1)))) 0)) ghost_present@) (and (=> %%location_label%%20 (and (= ghost_ret@1 ret@1) (= (uClip SZ (bitand (I ghost_ret@1) (I (uClip SZ 281474976706560)))) ghost_addr@0))) (=> (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@1) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7)))))))) (I (uClip SZ 281474976706560)))) ghost_addr@0) (and (=> %%location_label%%21 (and (<= 0 7) (< 7 64))) (=> (= ret@2 (uClip SZ (bitor (I ret@1) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7)))))))) (=> (= tmp%13 (= (not (= (uClip SZ (bitand (I ret@2) (I (uClip SZ 1)))) 0)) ghost_present@)) (and (=> %%location_label%%22 tmp%13) (=> tmp%13 (=> (= tmp%14 (= (lib!pagetable.entry.usize2present.? (I ret@2)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%23 tmp%14) (=> tmp%14 (=> (= tmp%15 (not (= (uClip SZ (bitand (I ret@2) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0))) (and (=> %%location_label%%24 tmp%15) (=> tmp%15 (=> (= tmp%16 (= (lib!pagetable.entry.usize2ps.? (I ret@2)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%25 tmp%16) (=> tmp%16 (=> (= tmp%17 (= (uClip SZ (bitand (I ret@2) (I (uClip SZ 281474976706560)))) ghost_addr@0)) (and (=> %%location_label%%26 tmp%17) (=> tmp%17 (=> (= tmp%18 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@2)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%27 tmp%18) (=> tmp%18 (and (=> %%location_label%%28 (= (uClip SZ (bitand (I ghost_ret@1) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I 1) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I (uClip SZ (bitor (I ghost_ret@1) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7)))))))) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I 281474976706560)))))))))) 0) (=> (= tmp%19 (= (uClip SZ (bitand (I ret@2) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.PAGE_ENTRY_PS_MASK.?)))) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%29 tmp%19) (=> tmp%19 %%switch_label%%3)))))))))))))))))))))))))))))))) (=> (not (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))) true)) (and (=> %%location_label%%30 (= (uClip SZ (bitand (I ret@1) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I 1) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I ret@1) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0) (=> (= tmp%20 (= (lib!pagetable.entry.usize2present.? (I ret@1)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%31 tmp%20) (=> tmp%20 (=> (= tmp%21 (= (lib!pagetable.entry.usize2ps.? (I ret@1)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%32 tmp%21) (=> tmp%21 (=> (= tmp%22 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@1)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%33 tmp%22) (=> tmp%22 (and (=> %%location_label%%34 (= (uClip SZ (bitand (I ret@1) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I 1) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I ret@1) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I 281474976706560)))))))))) 0) (=> (= tmp%23 (= (uClip SZ (bitand (I ret@1) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.PAGE_ENTRY_PS_MASK.?)))) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%35 tmp%23) (=> tmp%23 (=> (= ret@2 ret@1) %%switch_label%%3))))))))))))))))))) (and (not %%switch_label%%3) (=> (= tmp%24 (= (lib!pagetable.entry.usize2present.? (I ret@2)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%36 tmp%24) (=> tmp%24 (=> (= tmp%25 (= (lib!pagetable.entry.usize2ps.? (I ret@2)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%37 tmp%25) (=> tmp%25 (=> (= tmp%26 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@2)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%38 tmp%26) (=> tmp%26 (=> (= tmp%27 (= (uClip SZ (bitand (I ret@2) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.PAGE_ENTRY_PS_MASK.?)))) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%39 tmp%27) (=> tmp%27 (=> (= ghost_ret@2 ret@2) (or (and (=> (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))) true) (and (=> %%location_label%%40 true) (=> (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@2) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1)))))))) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1))))))) 0)) (and (=> %%location_label%%41 (and (= ghost_ret@2 ret@2) (= (not (= (uClip SZ (bitand (I ret@2) (I (uClip SZ 1)))) 0)) ghost_present@))) (=> (= (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@2) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1)))))))) (I (uClip SZ 1)))) 0)) ghost_present@) (and (=> %%location_label%%42 (and (= ghost_ret@2 ret@2) (= (not (= (uClip SZ (bitand (I ret@2) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0)) ghost_ps@))) (=> (= (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@2) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1)))))))) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0)) ghost_ps@) (and (=> %%location_label%%43 (and (= ghost_ret@2 ret@2) (= (uClip SZ (bitand (I ghost_ret@2) (I (uClip SZ 281474976706560)))) ghost_addr@0))) (=> (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@2) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1)))))))) (I (uClip SZ 281474976706560)))) ghost_addr@0) (and (=> %%location_label%%44 (and (<= 0 1) (< 1 64))) (=> (= ret@3 (uClip SZ (bitor (I ret@2) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1)))))))) (=> (= tmp%28 (= (not (= (uClip SZ (bitand (I ret@3) (I (uClip SZ 1)))) 0)) ghost_present@)) (and (=> %%location_label%%45 tmp%28) (=> tmp%28 (=> (= tmp%29 (= (lib!pagetable.entry.usize2present.? (I ret@3)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%46 tmp%29) (=> tmp%29 (=> (= tmp%30 (= (not (= (uClip SZ (bitand (I ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0)) ghost_ps@)) (and (=> %%location_label%%47 tmp%30) (=> tmp%30 (=> (= tmp%31 (= (lib!pagetable.entry.usize2ps.? (I ret@3)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%48 tmp%31) (=> tmp%31 (=> (= tmp%32 (not (= (uClip SZ (bitand (I ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1))))))) 0))) (and (=> %%location_label%%49 tmp%32) (=> tmp%32 (=> (= tmp%33 (= (lib!pagetable.entry.usize2write.? (I ret@3)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%50 tmp%33) (=> tmp%33 (=> (= tmp%34 (= (uClip SZ (bitand (I ret@3) (I (uClip SZ 281474976706560)))) ghost_addr@0)) (and (=> %%location_label%%51 tmp%34) (=> tmp%34 (=> (= tmp%35 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@3)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%52 tmp%35) (=> tmp%35 (and (=> %%location_label%%53 (= (uClip SZ (bitand (I ghost_ret@2) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I (uClip SZ (bitor (I ghost_ret@2) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1)))))))) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I 281474976706560)))))))))) 0) (=> (= tmp%36 (= (uClip SZ (bitand (I ret@3) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.PAGE_ENTRY_PS_MASK.?)))) (I lib!define.PAGE_ENTRY_WRITE_MASK.?)))) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%54 tmp%36) (=> tmp%36 %%switch_label%%2)))))))))))))))))))))))))))))))))))))))) (=> (not (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))) true)) (and (=> %%location_label%%55 (= (uClip SZ (bitand (I ret@2) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I ret@2) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1))))))) 0) (=> (= tmp%37 (= (lib!pagetable.entry.usize2present.? (I ret@2)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%56 tmp%37) (=> tmp%37 (=> (= tmp%38 (= (lib!pagetable.entry.usize2ps.? (I ret@2)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%57 tmp%38) (=> tmp%38 (=> (= tmp%39 (= (lib!pagetable.entry.usize2write.? (I ret@2)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%58 tmp%39) (=> tmp%39 (=> (= tmp%40 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@2)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%59 tmp%40) (=> tmp%40 (and (=> %%location_label%%60 (= (uClip SZ (bitand (I ret@2) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I ret@2) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I 281474976706560)))))))))) 0) (=> (= tmp%41 (= (uClip SZ (bitand (I ret@2) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.PAGE_ENTRY_PS_MASK.?)))) (I lib!define.PAGE_ENTRY_WRITE_MASK.?)))) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%61 tmp%41) (=> tmp%41 (=> (= ret@3 ret@2) %%switch_label%%2)))))))))))))))))))))) (and (not %%switch_label%%2) (=> (= tmp%42 (= (lib!pagetable.entry.usize2present.? (I ret@3)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%62 tmp%42) (=> tmp%42 (=> (= tmp%43 (= (lib!pagetable.entry.usize2ps.? (I ret@3)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%63 tmp%43) (=> tmp%43 (=> (= tmp%44 (= (lib!pagetable.entry.usize2write.? (I ret@3)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%64 tmp%44) (=> tmp%44 (=> (= tmp%45 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@3)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%65 tmp%45) (=> tmp%45 (=> (= tmp%46 (= (uClip SZ (bitand (I ret@3) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.PAGE_ENTRY_PS_MASK.?)))) (I lib!define.PAGE_ENTRY_WRITE_MASK.?)))) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%66 tmp%46) (=> tmp%46 (=> (= ghost_ret@3 ret@3) (or (and (=> (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))) true) (and (=> %%location_label%%67 true) (=> (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63)))))))) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63))))))) 0)) (and (=> %%location_label%%68 (and (= ghost_ret@3 ret@3) (= (not (= (uClip SZ (bitand (I ret@3) (I (uClip SZ 1)))) 0)) ghost_present@))) (=> (= (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63)))))))) (I (uClip SZ 1)))) 0)) ghost_present@) (and (=> %%location_label%%69 (and (= ghost_ret@3 ret@3) (= (not (= (uClip SZ (bitand (I ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0)) ghost_ps@))) (=> (= (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63)))))))) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0)) ghost_ps@) (and (=> %%location_label%%70 (and (= ghost_ret@3 ret@3) (= (not (= (uClip SZ (bitand (I ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1))))))) 0)) ghost_write@))) (=> (= (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63)))))))) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1))))))) 0)) ghost_write@) (and (=> %%location_label%%71 (and (= ghost_ret@3 ret@3) (= (uClip SZ (bitand (I ghost_ret@3) (I (uClip SZ 281474976706560)))) ghost_addr@0))) (=> (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63)))))))) (I (uClip SZ 281474976706560)))) ghost_addr@0) (and (=> %%location_label%%72 (and (<= 0 63) (< 63 64))) (=> (= ret@4 (uClip SZ (bitor (I ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63)))))))) (=> (= tmp%47 (= (not (= (uClip SZ (bitand (I ret@4) (I (uClip SZ 1)))) 0)) ghost_present@)) (and (=> %%location_label%%73 tmp%47) (=> tmp%47 (=> (= tmp%48 (= (lib!pagetable.entry.usize2present.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%74 tmp%48) (=> tmp%48 (=> (= tmp%49 (= (not (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0)) ghost_ps@)) (and (=> %%location_label%%75 tmp%49) (=> tmp%49 (=> (= tmp%50 (= (lib!pagetable.entry.usize2ps.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%76 tmp%50) (=> tmp%50 (=> (= tmp%51 (= (not (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1))))))) 0)) ghost_write@)) (and (=> %%location_label%%77 tmp%51) (=> tmp%51 (=> (= tmp%52 (= (lib!pagetable.entry.usize2write.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%78 tmp%52) (=> tmp%52 (=> (= tmp%53 (not (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63))))))) 0))) (and (=> %%location_label%%79 tmp%53) (=> tmp%53 (=> (= tmp%54 (= (lib!pagetable.entry.usize2execute_disable.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%80 tmp%54) (=> tmp%54 (=> (= tmp%55 (= (uClip SZ (bitand (I ret@4) (I (uClip SZ 281474976706560)))) ghost_addr@0)) (and (=> %%location_label%%81 tmp%55) (=> tmp%55 (=> (= tmp%56 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@4)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%82 tmp%56) (=> tmp%56 (and (=> %%location_label%%83 (= (uClip SZ (bitand (I ghost_ret@3) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I (uClip SZ (bitor (I ghost_ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63)))))))) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I (uClip 64 (bitshl (I 1) (I 63))))))) (I 281474976706560)))))))))) 0) (=> (= tmp%57 (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.PAGE_ENTRY_PS_MASK.?)))) (I lib!define.PAGE_ENTRY_WRITE_MASK.?)))) (I lib!define.PAGE_ENTRY_EXECUTE_MASK.?)))) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%84 tmp%57) (=> tmp%57 %%switch_label%%1)))))))))))))))))))))))))))))))))))))))))))))))) (=> (not (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))) true)) (and (=> %%location_label%%85 (= (uClip SZ (bitand (I ret@3) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I ret@3) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63))))))) 0) (=> (= tmp%58 (= (lib!pagetable.entry.usize2present.? (I ret@3)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%86 tmp%58) (=> tmp%58 (=> (= tmp%59 (= (lib!pagetable.entry.usize2ps.? (I ret@3)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%87 tmp%59) (=> tmp%59 (=> (= tmp%60 (= (lib!pagetable.entry.usize2write.? (I ret@3)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%88 tmp%60) (=> tmp%60 (=> (= tmp%61 (= (lib!pagetable.entry.usize2execute_disable.? (I ret@3)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%89 tmp%61) (=> tmp%61 (=> (= tmp%62 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@3)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%90 tmp%62) (=> tmp%62 (and (=> %%location_label%%91 (= (uClip SZ (bitand (I ret@3) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I ret@3) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I (uClip 64 (bitshl (I 1) (I 63))))))) (I 281474976706560)))))))))) 0) (=> (= tmp%63 (= (uClip SZ (bitand (I ret@3) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.PAGE_ENTRY_PS_MASK.?)))) (I lib!define.PAGE_ENTRY_WRITE_MASK.?)))) (I lib!define.PAGE_ENTRY_EXECUTE_MASK.?)))) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%92 tmp%63) (=> tmp%63 (=> (= ret@4 ret@3) %%switch_label%%1))))))))))))))))))))))))) (and (not %%switch_label%%1) (=> (= tmp%64 (= (lib!pagetable.entry.usize2present.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%93 tmp%64) (=> tmp%64 (=> (= tmp%65 (= (lib!pagetable.entry.usize2ps.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%94 tmp%65) (=> tmp%65 (=> (= tmp%66 (= (lib!pagetable.entry.usize2write.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%95 tmp%66) (=> tmp%66 (=> (= tmp%67 (= (lib!pagetable.entry.usize2execute_disable.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%96 tmp%67) (=> tmp%67 (=> (= tmp%68 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@4)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%97 tmp%68) (=> tmp%68 (=> (= tmp%69 (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.PAGE_ENTRY_PS_MASK.?)))) (I lib!define.PAGE_ENTRY_WRITE_MASK.?)))) (I lib!define.PAGE_ENTRY_EXECUTE_MASK.?)))) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%98 tmp%69) (=> tmp%69 (=> (= ghost_ret@4 ret@4) (or (and (=> (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))) true) (and (=> %%location_label%%99 true) (=> (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 2)))))))) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 2))))))) 0)) (and (=> %%location_label%%100 (and (= ghost_ret@4 ret@4) (= (not (= (uClip SZ (bitand (I ret@4) (I (uClip SZ 1)))) 0)) ghost_present@))) (=> (= (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 2)))))))) (I (uClip SZ 1)))) 0)) ghost_present@) (and (=> %%location_label%%101 (and (= ghost_ret@4 ret@4) (= (not (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0)) ghost_ps@))) (=> (= (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 2)))))))) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0)) ghost_ps@) (and (=> %%location_label%%102 (and (= ghost_ret@4 ret@4) (= (not (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1))))))) 0)) ghost_write@))) (=> (= (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 2)))))))) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1))))))) 0)) ghost_write@) (and (=> %%location_label%%103 (and (= ghost_ret@4 ret@4) (= (not (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63))))))) 0)) ghost_execute_disable@))) (=> (= (not (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 2)))))))) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63))))))) 0)) ghost_execute_disable@) (and (=> %%location_label%%104 (and (= ghost_ret@4 ret@4) (= (uClip SZ (bitand (I ghost_ret@4) (I (uClip SZ 281474976706560)))) ghost_addr@0))) (=> (= (uClip SZ (bitand (I (uClip SZ (bitor (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 2)))))))) (I (uClip SZ 281474976706560)))) ghost_addr@0) (and (=> %%location_label%%105 (and (<= 0 2) (< 2 64))) (=> (= ret@5 (uClip SZ (bitor (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 2)))))))) (=> (= tmp%70 (= (not (= (uClip SZ (bitand (I ret@5) (I (uClip SZ 1)))) 0)) ghost_present@)) (and (=> %%location_label%%106 tmp%70) (=> tmp%70 (=> (= tmp%71 (= (lib!pagetable.entry.usize2present.? (I ret@5)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%107 tmp%71) (=> tmp%71 (=> (= tmp%72 (= (not (= (uClip SZ (bitand (I ret@5) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 7))))))) 0)) ghost_ps@)) (and (=> %%location_label%%108 tmp%72) (=> tmp%72 (=> (= tmp%73 (= (lib!pagetable.entry.usize2ps.? (I ret@5)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%109 tmp%73) (=> tmp%73 (=> (= tmp%74 (= (not (= (uClip SZ (bitand (I ret@5) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 1))))))) 0)) ghost_write@)) (and (=> %%location_label%%110 tmp%74) (=> tmp%74 (=> (= tmp%75 (= (lib!pagetable.entry.usize2write.? (I ret@5)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%111 tmp%75) (=> tmp%75 (=> (= tmp%76 (= (not (= (uClip SZ (bitand (I ret@5) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 63))))))) 0)) ghost_execute_disable@)) (and (=> %%location_label%%112 tmp%76) (=> tmp%76 (=> (= tmp%77 (= (lib!pagetable.entry.usize2execute_disable.? (I ret@5)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%113 tmp%77) (=> tmp%77 (=> (= tmp%78 (not (= (uClip SZ (bitand (I ret@5) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 2))))))) 0))) (and (=> %%location_label%%114 tmp%78) (=> tmp%78 (=> (= tmp%79 (= (lib!pagetable.entry.usize2user.? (I ret@5)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%115 tmp%79) (=> tmp%79 (=> (= tmp%80 (= (uClip SZ (bitand (I ret@5) (I (uClip SZ 281474976706560)))) ghost_addr@0)) (and (=> %%location_label%%116 tmp%80) (=> tmp%80 (=> (= tmp%81 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@5)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%117 tmp%81) (=> tmp%81 (and (=> %%location_label%%118 (= (uClip SZ (bitand (I ghost_ret@4) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I (uClip 64 (bitshl (I 1) (I 63))))))) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I (uClip SZ (bitor (I ghost_ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 2)))))))) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I (uClip 64 (bitshl (I 1) (I 63))))))) (I (uClip 64 (bitshl (I 1) (I 2))))))) (I 281474976706560)))))))))) 0) (=> (= tmp%82 (= (uClip SZ (bitand (I ret@5) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.PAGE_ENTRY_PS_MASK.?)))) (I lib!define.PAGE_ENTRY_WRITE_MASK.?)))) (I lib!define.PAGE_ENTRY_EXECUTE_MASK.?)))) (I lib!define.PAGE_ENTRY_USER_MASK.?)))) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%119 tmp%82) (=> tmp%82 %%switch_label%%0)))))))))))))))))))))))))))))))))))))))))))))))))))))))) (=> (not (= (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))) true)) (and (=> %%location_label%%120 (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I (uClip 64 (bitshl (I 1) (I 63))))))) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitshl (I 1) (I 2))))))) 0) (=> (= tmp%83 (= (lib!pagetable.entry.usize2present.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%121 tmp%83) (=> tmp%83 (=> (= tmp%84 (= (lib!pagetable.entry.usize2ps.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%122 tmp%84) (=> tmp%84 (=> (= tmp%85 (= (lib!pagetable.entry.usize2write.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%123 tmp%85) (=> tmp%85 (=> (= tmp%86 (= (lib!pagetable.entry.usize2execute_disable.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%124 tmp%86) (=> tmp%86 (=> (= tmp%87 (= (lib!pagetable.entry.usize2user.? (I ret@4)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%125 tmp%87) (=> tmp%87 (=> (= tmp%88 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@4)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%126 tmp%88) (=> tmp%88 (and (=> %%location_label%%127 (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I (uClip 64 (bitshl (I 1) (I 63))))))) (I 281474976706560)))))))))) 0)) (=> (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I 1) (I (uClip 64 (bitshl (I 1) (I 7))))))) (I (uClip 64 (bitshl (I 1) (I 1))))))) (I (uClip 64 (bitshl (I 1) (I 63))))))) (I (uClip 64 (bitshl (I 1) (I 2))))))) (I 281474976706560)))))))))) 0) (=> (= tmp%89 (= (uClip SZ (bitand (I ret@4) (I (uClip SZ (uClip 64 (bitnot (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I (uClip 64 (bitor (I lib!define.PAGE_ENTRY_PRESENT_MASK.?) (I lib!define.PAGE_ENTRY_PS_MASK.?)))) (I lib!define.PAGE_ENTRY_WRITE_MASK.?)))) (I lib!define.PAGE_ENTRY_EXECUTE_MASK.?)))) (I lib!define.PAGE_ENTRY_USER_MASK.?)))) (I lib!define.MEM_MASK.?)))))))))) 0)) (and (=> %%location_label%%128 tmp%89) (=> tmp%89 (=> (= ret@5 ret@4) %%switch_label%%0)))))))))))))))))))))))))))) (and (not %%switch_label%%0) (=> (= tmp%90 (= (lib!pagetable.entry.usize2present.? (I ret@5)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%129 tmp%90) (=> tmp%90 (=> (= tmp%91 (= (lib!pagetable.entry.usize2ps.? (I ret@5)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%130 tmp%91) (=> tmp%91 (=> (= tmp%92 (= (lib!pagetable.entry.usize2write.? (I ret@5)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%131 tmp%92) (=> tmp%92 (=> (= tmp%93 (= (lib!pagetable.entry.usize2execute_disable.? (I ret@5)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%132 tmp%93) (=> tmp%93 (=> (= tmp%94 (= (lib!pagetable.entry.usize2user.? (I ret@5)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%133 tmp%94) (=> tmp%94 (=> (= tmp%95 (= (lib!pagetable.entry.spec_usize2pa.? (I ret@5)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (and (=> %%location_label%%134 tmp%95) (=> tmp%95 (=> (= ret! ret@5) (and (=> %%location_label%%135 (= (lib!pagetable.entry.usize2present.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/present (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%136 (= (lib!pagetable.entry.usize2ps.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/ps (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%137 (= (lib!pagetable.entry.usize2write.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/write (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%138 (= (lib!pagetable.entry.usize2execute_disable.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/execute_disable (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%139 (= (lib!pagetable.entry.usize2user.? (I ret!)) (lib!pagetable.entry.PageEntryPerm./PageEntryPerm/user (%Poly%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!)))))))) (and (=> %%location_label%%140 (= (lib!pagetable.entry.spec_usize2pa.? (I ret!)) (lib!pagetable.entry.PageEntry./PageEntry/addr (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))) (=> %%location_label%%141 (ext_eq false TYPE%lib!pagetable.entry.PageEntryPerm. (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.spec_usize2page_entry_perm.? (I ret!))) (Poly%lib!pagetable.entry.PageEntryPerm. (lib!pagetable.entry.PageEntry./PageEntry/perm (%Poly%lib!pagetable.entry.PageEntry. (Poly%lib!pagetable.entry.PageEntry. page_entry!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
