(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module process_manager::container_tree_spec_impl'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%2.arrow_0. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.value. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.skip. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.index_of. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.no_duplicates. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%0.spec_addr. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.pptr. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.is_init. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.value. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.view. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_dom. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.tree_wf. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.linked_list_wf. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.rest_specs. FuelId)
(declare-const fuel%lib!process_manager.container_tree_spec_impl.impl&%0.wf. FuelId)
(declare-const fuel%lib!define.CONTAINER_PROC_LIST_LEN. FuelId)
(declare-const fuel%lib!define.CONTAINER_CHILD_LIST_LEN. FuelId)
(declare-const fuel%lib!define.CONTAINER_ENDPOINT_LIST_LEN. FuelId)
(declare-const fuel%lib!define.MAX_CONTAINER_SCHEDULER_LEN. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!raw_ptr.impl&%2.arrow_0. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.impl&%7.is_init. fuel%vstd!raw_ptr.impl&%7.value. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.skip. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.index_of. fuel%vstd!seq_lib.impl&%0.no_duplicates. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!simple_pptr.impl&%0.spec_addr. fuel%vstd!simple_pptr.impl&%1.pptr. fuel%vstd!simple_pptr.impl&%1.is_init. fuel%vstd!simple_pptr.impl&%1.value. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%42.view. fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len. fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique. fuel%lib!slinkedlist.spec_impl_u.impl&%0.view. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_dom. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.tree_wf. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.linked_list_wf. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.rest_specs. fuel%lib!process_manager.container_tree_spec_impl.impl&%0.wf. fuel%lib!define.CONTAINER_PROC_LIST_LEN. fuel%lib!define.CONTAINER_CHILD_LIST_LEN. fuel%lib!define.CONTAINER_ENDPOINT_LIST_LEN. fuel%lib!define.MAX_CONTAINER_SCHEDULER_LEN. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<i32.>. 0)
(declare-sort vstd!seq.Seq<usize.>. 0)
(declare-sort vstd!set.Set<usize.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!marker.PhantomData. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (vstd!raw_ptr.MemContents. 0) (vstd!simple_pptr.PPtr. 0) (lib!slinkedlist.node.Node. 0) (lib!slinkedlist.spec_impl_u.StaticLinkedList. 0) (lib!process_manager.container.Container. 0) (lib!process_manager.container_tree_spec_impl.ContainerTree. 0) (lib!array.Array. 0) (lib!array_set.ArraySet. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!marker.PhantomData./PhantomData )) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((vstd!raw_ptr.MemContents./Uninit ) (vstd!raw_ptr.MemContents./Init (vstd!raw_ptr.MemContents./Init/?0 Poly))) ((vstd!simple_pptr.PPtr./PPtr (vstd!simple_pptr.PPtr./PPtr/?0 Int) (vstd!simple_pptr.PPtr./PPtr/?1 core!marker.PhantomData.))) ((lib!slinkedlist.node.Node./Node (lib!slinkedlist.node.Node./Node/?value core!option.Option.) (lib!slinkedlist.node.Node./Node/?next Int) (lib!slinkedlist.node.Node./Node/?prev Int))) ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?ar %%Function%%) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?spec_seq Poly) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list vstd!seq.Seq<i32.>.) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_head Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_tail Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_len Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list vstd!seq.Seq<i32.>.) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_head Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_tail Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_len Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?size Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?arr_seq Poly))) ((lib!process_manager.container.Container./Container (lib!process_manager.container.Container./Container/?owned_procs lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?parent core!option.Option.) (lib!process_manager.container.Container./Container/?parent_rev_ptr core!option.Option.) (lib!process_manager.container.Container./Container/?children lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?owned_endpoints lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?mem_quota Int) (lib!process_manager.container.Container./Container/?mem_used Int) (lib!process_manager.container.Container./Container/?owned_cpus lib!array_set.ArraySet.) (lib!process_manager.container.Container./Container/?scheduler lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.container.Container./Container/?depth Int) (lib!process_manager.container.Container./Container/?owned_threads vstd!set.Set<usize.>.) (lib!process_manager.container.Container./Container/?uppertree_seq vstd!seq.Seq<usize.>.) (lib!process_manager.container.Container./Container/?subtree_set vstd!set.Set<usize.>.) (lib!process_manager.container.Container./Container/?can_have_children Bool))) ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?root_container Int) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?container_perms vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.))) ((lib!array.Array./Array (lib!array.Array./Array/?seq Poly) (lib!array.Array./Array/?ar %%Function%%))) ((lib!array_set.ArraySet./ArraySet (lib!array_set.ArraySet./ArraySet/?data lib!array.Array.) (lib!array_set.ArraySet./ArraySet/?len Int) (lib!array_set.ArraySet./ArraySet/?set vstd!set.Set<usize.>.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun vstd!raw_ptr.MemContents./Init/0 (vstd!raw_ptr.MemContents.) Poly)
(declare-fun vstd!simple_pptr.PPtr./PPtr/0 (vstd!simple_pptr.PPtr.) Int)
(declare-fun vstd!simple_pptr.PPtr./PPtr/1 (vstd!simple_pptr.PPtr.) core!marker.PhantomData.)
(declare-fun lib!slinkedlist.node.Node./Node/value (lib!slinkedlist.node.Node.) core!option.Option.)
(declare-fun lib!slinkedlist.node.Node./Node/next (lib!slinkedlist.node.Node.) Int)
(declare-fun lib!slinkedlist.node.Node./Node/prev (lib!slinkedlist.node.Node.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (lib!slinkedlist.spec_impl_u.StaticLinkedList.) %%Function%%)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list (lib!slinkedlist.spec_impl_u.StaticLinkedList.) vstd!seq.Seq<i32.>.)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list (lib!slinkedlist.spec_impl_u.StaticLinkedList.) vstd!seq.Seq<i32.>.)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun lib!process_manager.container.Container./Container/owned_procs (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/parent (lib!process_manager.container.Container.) core!option.Option.)
(declare-fun lib!process_manager.container.Container./Container/parent_rev_ptr (lib!process_manager.container.Container.) core!option.Option.)
(declare-fun lib!process_manager.container.Container./Container/children (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/owned_endpoints (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/mem_quota (lib!process_manager.container.Container.) Int)
(declare-fun lib!process_manager.container.Container./Container/mem_used (lib!process_manager.container.Container.) Int)
(declare-fun lib!process_manager.container.Container./Container/owned_cpus (lib!process_manager.container.Container.) lib!array_set.ArraySet.)
(declare-fun lib!process_manager.container.Container./Container/scheduler (lib!process_manager.container.Container.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.container.Container./Container/depth (lib!process_manager.container.Container.) Int)
(declare-fun lib!process_manager.container.Container./Container/owned_threads (lib!process_manager.container.Container.) vstd!set.Set<usize.>.)
(declare-fun lib!process_manager.container.Container./Container/uppertree_seq (lib!process_manager.container.Container.) vstd!seq.Seq<usize.>.)
(declare-fun lib!process_manager.container.Container./Container/subtree_set (lib!process_manager.container.Container.) vstd!set.Set<usize.>.)
(declare-fun lib!process_manager.container.Container./Container/can_have_children (lib!process_manager.container.Container.) Bool)
(declare-fun lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (lib!process_manager.container_tree_spec_impl.ContainerTree.) Int)
(declare-fun lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (lib!process_manager.container_tree_spec_impl.ContainerTree.) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)
(declare-fun lib!array.Array./Array/seq (lib!array.Array.) Poly)
(declare-fun lib!array.Array./Array/ar (lib!array.Array.) %%Function%%)
(declare-fun lib!array_set.ArraySet./ArraySet/data (lib!array_set.ArraySet.) lib!array.Array.)
(declare-fun lib!array_set.ArraySet./ArraySet/len (lib!array_set.ArraySet.) Int)
(declare-fun lib!array_set.ArraySet./ArraySet/set (lib!array_set.ArraySet.) vstd!set.Set<usize.>.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!marker.PhantomData. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!raw_ptr.MemContents. (Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!simple_pptr.PPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!simple_pptr.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%lib!slinkedlist.node.Node. (Dcr Type) Type)
(declare-fun TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!process_manager.container.Container. Type)
(declare-const TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree. Type)
(declare-fun TYPE%lib!array.Array. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!array_set.ArraySet. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (Poly) vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<i32.>. (vstd!seq.Seq<i32.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<i32.>. (Poly) vstd!seq.Seq<i32.>.)
(declare-fun Poly%vstd!seq.Seq<usize.>. (vstd!seq.Seq<usize.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<usize.>. (Poly) vstd!seq.Seq<usize.>.)
(declare-fun Poly%vstd!set.Set<usize.>. (vstd!set.Set<usize.>.) Poly)
(declare-fun %Poly%vstd!set.Set<usize.>. (Poly) vstd!set.Set<usize.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (Poly) vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!marker.PhantomData. (core!marker.PhantomData.) Poly)
(declare-fun %Poly%core!marker.PhantomData. (Poly) core!marker.PhantomData.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents.) Poly)
(declare-fun %Poly%vstd!raw_ptr.MemContents. (Poly) vstd!raw_ptr.MemContents.)
(declare-fun Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.PPtr.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PPtr. (Poly) vstd!simple_pptr.PPtr.)
(declare-fun Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node.) Poly)
(declare-fun %Poly%lib!slinkedlist.node.Node. (Poly) lib!slinkedlist.node.Node.)
(declare-fun Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun %Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun Poly%lib!process_manager.container.Container. (lib!process_manager.container.Container.) Poly)
(declare-fun %Poly%lib!process_manager.container.Container. (Poly) lib!process_manager.container.Container.)
(declare-fun Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.container_tree_spec_impl.ContainerTree.) Poly)
(declare-fun %Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly) lib!process_manager.container_tree_spec_impl.ContainerTree.)
(declare-fun Poly%lib!array.Array. (lib!array.Array.) Poly)
(declare-fun %Poly%lib!array.Array. (Poly) lib!array.Array.)
(declare-fun Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet.) Poly)
(declare-fun %Poly%lib!array_set.ArraySet. (Poly) lib!array_set.ArraySet.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)) (! (= x (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x))) :pattern ((Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))) (= x (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (%Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)))))))
(assert (forall ((x vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)) (! (has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))) :pattern ((has_type (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. x) (TYPE%vstd!map.Map. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<i32.>.)) (! (= x (%Poly%vstd!seq.Seq<i32.>. (Poly%vstd!seq.Seq<i32.>. x))) :pattern ((Poly%vstd!seq.Seq<i32.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (SINT 32))) (= x (Poly%vstd!seq.Seq<i32.>. (%Poly%vstd!seq.Seq<i32.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (SINT 32)))))))
(assert (forall ((x vstd!seq.Seq<i32.>.)) (! (has_type (Poly%vstd!seq.Seq<i32.>. x) (TYPE%vstd!seq.Seq. $ (SINT 32))) :pattern ((has_type (Poly%vstd!seq.Seq<i32.>. x) (TYPE%vstd!seq.Seq. $ (SINT 32)))))))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (= x (%Poly%vstd!seq.Seq<usize.>. (Poly%vstd!seq.Seq<usize.>. x))) :pattern ((Poly%vstd!seq.Seq<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ))) (= x (Poly%vstd!seq.Seq<usize.>. (%Poly%vstd!seq.Seq<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ)))))))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ)))))))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (= x (%Poly%vstd!set.Set<usize.>. (Poly%vstd!set.Set<usize.>. x))) :pattern ((Poly%vstd!set.Set<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (UINT SZ))) (= x (Poly%vstd!set.Set<usize.>. (%Poly%vstd!set.Set<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (UINT SZ)))))))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ)))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))))))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x core!marker.PhantomData.)) (! (= x (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. x))) :pattern ((Poly%core!marker.PhantomData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!marker.PhantomData. V&. V&)) (= x (Poly%core!marker.PhantomData. (%Poly%core!marker.PhantomData. x)))) :pattern ((has_type x (TYPE%core!marker.PhantomData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (x core!marker.PhantomData.)) (! (has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&)) :pattern ((has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= x (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. x))) :pattern ((Poly%vstd!raw_ptr.MemContents. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (= x (Poly%vstd!raw_ptr.MemContents. (%Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&)) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= (vstd!raw_ptr.MemContents./Init/0 x) (vstd!raw_ptr.MemContents./Init/?0 x)) :pattern ((vstd!raw_ptr.MemContents./Init/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) T&)) :pattern ((vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(define-fun is-vstd!raw_ptr.MemContents./Init_ ((c vstd!raw_ptr.MemContents.)) Bool ((_ is vstd!raw_ptr.MemContents./Init) c))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (=> (is-vstd!raw_ptr.MemContents./Init_ x) (height_lt (height (vstd!raw_ptr.MemContents./Init/0 x)) (height (Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((height (vstd!raw_ptr.MemContents./Init/0 x))))))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (= x (%Poly%vstd!simple_pptr.PPtr. (Poly%vstd!simple_pptr.PPtr. x))) :pattern ((Poly%vstd!simple_pptr.PPtr. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (= x (Poly%vstd!simple_pptr.PPtr. (%Poly%vstd!simple_pptr.PPtr. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Int) (_1! core!marker.PhantomData.)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.PPtr./PPtr _0! _1!)) (TYPE%vstd!simple_pptr.PPtr. V&. V&))) :pattern ((has_type (Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.PPtr./PPtr _0! _1!)) (TYPE%vstd!simple_pptr.PPtr. V&. V&))))))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (= (vstd!simple_pptr.PPtr./PPtr/0 x) (vstd!simple_pptr.PPtr./PPtr/?0 x)) :pattern ((vstd!simple_pptr.PPtr./PPtr/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (uInv SZ (vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. x)))) :pattern ((vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. x)) (has_type x (TYPE%vstd!simple_pptr.PPtr. V&. V&))))))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (= (vstd!simple_pptr.PPtr./PPtr/1 x) (vstd!simple_pptr.PPtr./PPtr/?1 x)) :pattern ((vstd!simple_pptr.PPtr./PPtr/1 x)))))
(define-fun is-vstd!simple_pptr.PPtr./PPtr_ ((c vstd!simple_pptr.PPtr.)) Bool ((_ is vstd!simple_pptr.PPtr./PPtr) c))
(assert (forall ((x vstd!simple_pptr.PPtr.)) (! (=> (is-vstd!simple_pptr.PPtr./PPtr_ x) (height_lt (height (Poly%core!marker.PhantomData. (vstd!simple_pptr.PPtr./PPtr/1 x))) (height (Poly%vstd!simple_pptr.PPtr. x)))) :pattern ((height (Poly%core!marker.PhantomData. (vstd!simple_pptr.PPtr./PPtr/1 x)))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= x (%Poly%lib!slinkedlist.node.Node. (Poly%lib!slinkedlist.node.Node. x))) :pattern ((Poly%lib!slinkedlist.node.Node. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (= x (Poly%lib!slinkedlist.node.Node. (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! core!option.Option.) (_next! Int) (_prev! Int)) (! (=> (and (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. T&. T&)) (iInv 32 _next!) (iInv 32 _prev!)) (has_type (Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node./Node _value! _next! _prev!)) (TYPE%lib!slinkedlist.node.Node. T&. T&))) :pattern ((has_type (Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node./Node _value! _next! _prev!)) (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/value x) (lib!slinkedlist.node.Node./Node/?value x)) :pattern ((lib!slinkedlist.node.Node./Node/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (has_type (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value (%Poly%lib!slinkedlist.node.Node. x))) (TYPE%core!option.Option. T&. T&))) :pattern ((lib!slinkedlist.node.Node./Node/value (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/next x) (lib!slinkedlist.node.Node./Node/?next x)) :pattern ((lib!slinkedlist.node.Node./Node/next x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (iInv 32 (lib!slinkedlist.node.Node./Node/next (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((lib!slinkedlist.node.Node./Node/next (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/prev x) (lib!slinkedlist.node.Node./Node/?prev x)) :pattern ((lib!slinkedlist.node.Node./Node/prev x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (iInv 32 (lib!slinkedlist.node.Node./Node/prev (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((lib!slinkedlist.node.Node./Node/prev (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))))))
(define-fun is-lib!slinkedlist.node.Node./Node_ ((c lib!slinkedlist.node.Node.)) Bool ((_ is lib!slinkedlist.node.Node./Node) c))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (=> (is-lib!slinkedlist.node.Node./Node_ x) (height_lt (height (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value x))) (height (Poly%lib!slinkedlist.node.Node. x)))) :pattern ((height (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value x)))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= x (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x))) :pattern ((Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (= x (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (_ar! %%Function%%) (_spec_seq! Poly) (_value_list! vstd!seq.Seq<i32.>.) (_value_list_head! Int) (_value_list_tail! Int) (_value_list_len! Int) (_free_list! vstd!seq.Seq<i32.>.) (_free_list_head! Int) (_free_list_tail! Int) (_free_list_len! Int) (_size! Int) (_arr_seq! Poly)) (! (=> (and (has_type (Poly%array%. _ar!) (ARRAY $ (TYPE%lib!slinkedlist.node.Node. T&. T&) N&. N&)) (has_type _spec_seq! (TYPE%vstd!seq.Seq. T&. T&)) (iInv 32 _value_list_head!) (iInv 32 _value_list_tail!) (uInv SZ _value_list_len!) (iInv 32 _free_list_head!) (iInv 32 _free_list_tail!) (uInv SZ _free_list_len!) (uInv SZ _size!) (has_type _arr_seq! (TYPE%vstd!seq.Seq. $ (TYPE%lib!slinkedlist.node.Node. T&. T&)))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList _ar! _spec_seq! _value_list! _value_list_head! _value_list_tail! _value_list_len! _free_list! _free_list_head! _free_list_tail! _free_list_len! _size! _arr_seq!)) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) :pattern ((has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList _ar! _spec_seq! _value_list! _value_list_head! _value_list_tail! _value_list_len! _free_list! _free_list_head! _free_list_tail! _free_list_len! _size! _arr_seq!)) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?ar x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (Poly%array%. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x))) (ARRAY $ (TYPE%lib!slinkedlist.node.Node. T&. T&) N&. N&))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?spec_seq x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list x)))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_head x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_tail x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_len x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list x)))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_head x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_tail x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_len x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?size x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?arr_seq x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (TYPE%vstd!seq.Seq. $ (TYPE%lib!slinkedlist.node.Node. T&. T&)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))))))
(define-fun is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ ((c lib!slinkedlist.spec_impl_u.StaticLinkedList.)) Bool ((_ is lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList) c))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ x) (height_lt (height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x)) (height (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x))))))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ x) (height_lt (height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x)) (height (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x))))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= x (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. x))) :pattern ((Poly%lib!process_manager.container.Container. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (= x (Poly%lib!process_manager.container.Container. (%Poly%lib!process_manager.container.Container. x)))) :pattern ((has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((_owned_procs! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_parent! core!option.Option.) (_parent_rev_ptr! core!option.Option.) (_children! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_owned_endpoints! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_mem_quota! Int) (_mem_used! Int) (_owned_cpus! lib!array_set.ArraySet.) (_scheduler! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_depth! Int) (_owned_threads! vstd!set.Set<usize.>.) (_uppertree_seq! vstd!seq.Seq<usize.>.) (_subtree_set! vstd!set.Set<usize.>.) (_can_have_children! Bool)) (! (=> (and (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _owned_procs!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (has_type (Poly%core!option.Option. _parent!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%core!option.Option. _parent_rev_ptr!) (TYPE%core!option.Option. $ (SINT 32))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _children!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _owned_endpoints!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (uInv SZ _mem_quota!) (uInv SZ _mem_used!) (has_type (Poly%lib!array_set.ArraySet. _owned_cpus!) (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _scheduler!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10))) (uInv SZ _depth!)) (has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.container.Container./Container _owned_procs! _parent! _parent_rev_ptr! _children! _owned_endpoints! _mem_quota! _mem_used! _owned_cpus! _scheduler! _depth! _owned_threads! _uppertree_seq! _subtree_set! _can_have_children!)) TYPE%lib!process_manager.container.Container.)) :pattern ((has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.container.Container./Container _owned_procs! _parent! _parent_rev_ptr! _children! _owned_endpoints! _mem_quota! _mem_used! _owned_cpus! _scheduler! _depth! _owned_threads! _uppertree_seq! _subtree_set! _can_have_children!)) TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_procs x) (lib!process_manager.container.Container./Container/?owned_procs x)) :pattern ((lib!process_manager.container.Container./Container/owned_procs x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/parent x) (lib!process_manager.container.Container./Container/?parent x)) :pattern ((lib!process_manager.container.Container./Container/parent x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/parent_rev_ptr x) (lib!process_manager.container.Container./Container/?parent_rev_ptr x)) :pattern ((lib!process_manager.container.Container./Container/parent_rev_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. x))) (TYPE%core!option.Option. $ (SINT 32)))) :pattern ((lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/children x) (lib!process_manager.container.Container./Container/?children x)) :pattern ((lib!process_manager.container.Container./Container/children x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_endpoints x) (lib!process_manager.container.Container./Container/?owned_endpoints x)) :pattern ((lib!process_manager.container.Container./Container/owned_endpoints x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/mem_quota x) (lib!process_manager.container.Container./Container/?mem_quota x)) :pattern ((lib!process_manager.container.Container./Container/mem_quota x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (uInv SZ (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. x)))) :pattern ((lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/mem_used x) (lib!process_manager.container.Container./Container/?mem_used x)) :pattern ((lib!process_manager.container.Container./Container/mem_used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (uInv SZ (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. x)))) :pattern ((lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_cpus x) (lib!process_manager.container.Container./Container/?owned_cpus x)) :pattern ((lib!process_manager.container.Container./Container/owned_cpus x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)))) :pattern ((lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/scheduler x) (lib!process_manager.container.Container./Container/?scheduler x)) :pattern ((lib!process_manager.container.Container./Container/scheduler x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)))) :pattern ((lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/depth x) (lib!process_manager.container.Container./Container/?depth x)) :pattern ((lib!process_manager.container.Container./Container/depth x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container.Container.) (uInv SZ (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. x)))) :pattern ((lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. x)) (has_type x TYPE%lib!process_manager.container.Container.)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/owned_threads x) (lib!process_manager.container.Container./Container/?owned_threads x)) :pattern ((lib!process_manager.container.Container./Container/owned_threads x)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/uppertree_seq x) (lib!process_manager.container.Container./Container/?uppertree_seq x)) :pattern ((lib!process_manager.container.Container./Container/uppertree_seq x)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/subtree_set x) (lib!process_manager.container.Container./Container/?subtree_set x)) :pattern ((lib!process_manager.container.Container./Container/subtree_set x)))))
(assert (forall ((x lib!process_manager.container.Container.)) (! (= (lib!process_manager.container.Container./Container/can_have_children x) (lib!process_manager.container.Container./Container/?can_have_children x)) :pattern ((lib!process_manager.container.Container./Container/can_have_children x)))))
(assert (forall ((x lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= x (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x))) :pattern ((Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (= x (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)))) :pattern ((has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)))))
(assert (forall ((_root_container! Int) (_container_perms! vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)) (! (=> (uInv SZ _root_container!) (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree _root_container! _container_perms!)) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)) :pattern ((has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree _root_container! _container_perms!)) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)))))
(assert (forall ((x lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container x) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?root_container x)) :pattern ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (uInv SZ (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)))) :pattern ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. x)) (has_type x TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)))))
(assert (forall ((x lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms x) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/?container_perms x)) :pattern ((lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms x)))))
(assert (forall ((x lib!array.Array.)) (! (= x (%Poly%lib!array.Array. (Poly%lib!array.Array. x))) :pattern ((Poly%lib!array.Array. x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (= x (Poly%lib!array.Array. (%Poly%lib!array.Array. x)))) :pattern ((has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (_seq! Poly) (_ar! %%Function%%)) (! (=> (and (has_type _seq! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (Poly%array%. _ar!) (ARRAY A&. A& N&. N&))) (has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))) :pattern ((has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/seq x) (lib!array.Array./Array/?seq x)) :pattern ((lib!array.Array./Array/seq x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/ar x) (lib!array.Array./Array/?ar x)) :pattern ((lib!array.Array./Array/ar x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (Poly%array%. (lib!array.Array./Array/ar (%Poly%lib!array.Array. x))) (ARRAY A&. A& N&. N&))) :pattern ((lib!array.Array./Array/ar (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(define-fun is-lib!array.Array./Array_ ((c lib!array.Array.)) Bool ((_ is lib!array.Array./Array) c))
(assert (forall ((x lib!array.Array.)) (! (=> (is-lib!array.Array./Array_ x) (height_lt (height (lib!array.Array./Array/seq x)) (height (Poly%lib!array.Array. x)))) :pattern ((height (lib!array.Array./Array/seq x))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= x (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. x))) :pattern ((Poly%lib!array_set.ArraySet. x)))))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (= x (Poly%lib!array_set.ArraySet. (%Poly%lib!array_set.ArraySet. x)))) :pattern ((has_type x (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((N&. Dcr) (N& Type) (_data! lib!array.Array.) (_len! Int) (_set! vstd!set.Set<usize.>.)) (! (=> (and (has_type (Poly%lib!array.Array. _data!) (TYPE%lib!array.Array. $ BOOL N&. N&)) (uInv SZ _len!)) (has_type (Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet./ArraySet _data! _len! _set!)) (TYPE%lib!array_set.ArraySet. N&. N&))) :pattern ((has_type (Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet./ArraySet _data! _len! _set!)) (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/data x) (lib!array_set.ArraySet./ArraySet/?data x)) :pattern ((lib!array_set.ArraySet./ArraySet/data x)))))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (has_type (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. x))) (TYPE%lib!array.Array. $ BOOL N&. N&))) :pattern ((lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. x)) (has_type x (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/len x) (lib!array_set.ArraySet./ArraySet/?len x)) :pattern ((lib!array_set.ArraySet./ArraySet/len x)))))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (uInv SZ (lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. x)))) :pattern ((lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. x)) (has_type x (TYPE%lib!array_set.ArraySet. N&. N&))))))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/set x) (lib!array_set.ArraySet./ArraySet/?set x)) :pattern ((lib!array_set.ArraySet./ArraySet/set x)))))
(define-fun is-lib!array_set.ArraySet./ArraySet_ ((c lib!array_set.ArraySet.)) Bool ((_ is lib!array_set.ArraySet./ArraySet) c))
(assert (forall ((x lib!array_set.ArraySet.)) (! (=> (is-lib!array_set.ArraySet./ArraySet_ x) (height_lt (height (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data x))) (height (Poly%lib!array_set.ArraySet. x)))) :pattern ((height (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data x)))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::no_duplicates")
(declare-fun vstd!seq_lib.impl&%0.no_duplicates.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%0::spec_addr")
(declare-fun vstd!simple_pptr.impl&%0.spec_addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::addr")
(declare-fun vstd!simple_pptr.impl&%1.addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::mem_contents")
(declare-fun vstd!simple_pptr.impl&%1.mem_contents.? (Dcr Type Poly) vstd!raw_ptr.MemContents.)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::pptr")
(declare-fun vstd!simple_pptr.impl&%1.pptr.? (Dcr Type Poly) vstd!simple_pptr.PPtr.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::is_init")
(declare-fun vstd!raw_ptr.impl&%7.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::is_init")
(declare-fun vstd!simple_pptr.impl&%1.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%2::arrow_0")
(declare-fun vstd!raw_ptr.impl&%2.arrow_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::value")
(declare-fun vstd!raw_ptr.impl&%7.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::value")
(declare-fun vstd!simple_pptr.impl&%1.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::view")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::spec_len")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::unique")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.unique.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::wf")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_valid")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::define::MAX_CONTAINER_SCHEDULER_LEN")
(declare-fun lib!define.MAX_CONTAINER_SCHEDULER_LEN.? () Int)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::skip")
(declare-fun vstd!seq.impl&%0.skip.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::define::CONTAINER_PROC_LIST_LEN")
(declare-fun lib!define.CONTAINER_PROC_LIST_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::define::CONTAINER_CHILD_LIST_LEN")
(declare-fun lib!define.CONTAINER_CHILD_LIST_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::define::CONTAINER_ENDPOINT_LIST_LEN")
(declare-fun lib!define.CONTAINER_ENDPOINT_LIST_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_dom")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_perms_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_root_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_childern_list_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::containers_linkedlist_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_childern_depth_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_subtree_set_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::index_of")
(declare-fun vstd!seq_lib.impl&%0.index_of.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_uppertree_seq_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::container_subtree_set_exclusive")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::array_set::ArraySet::view")
(declare-fun lib!array_set.impl&%0.view.? (Dcr Type Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::spec_get_container")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly Poly) lib!process_manager.container.Container.)
(set-info :comment ";; Function-Decl lib::array_set::ArraySet::wf")
(declare-fun lib!array_set.impl&%0.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::tree_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.tree_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::linked_list_wf")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.linked_list_wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::container_tree_spec_impl::ContainerTree::rest_specs")
(declare-fun lib!process_manager.container_tree_spec_impl.impl&%0.rest_specs.? (Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%2 (is-core!option.Option./Some_ option!))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)))))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_empty")
(declare-fun ens%vstd!map.impl&%0.tracked_empty. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (out_v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!) (and (has_type out_v! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= out_v! (vstd!map.impl&%0.empty.? K&. K& V&. V&)))) :pattern ((ens%vstd!map.impl&%0.tracked_empty. K&. K& V&. V& out_v!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_insert")
(declare-fun ens%vstd!map.impl&%0.tracked_insert. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.insert.? K&. K& V&. V& pre%self! key! value!)))) :pattern ((ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_remove")
(declare-fun req%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!) (and (has_type v! V&) (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.remove.? K&. K& V&. V& pre%self! key!)) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& pre%self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_borrow")
(declare-fun req%vstd!map.impl&%0.tracked_borrow. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key!) (=> %%global_location_label%%8 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_borrow. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key! v!) (and (has_type v! V&) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_borrow. K&. K& V&. V& self! key! v!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%9 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::no_duplicates")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.no_duplicates.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.no_duplicates.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$))))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%0::spec_addr")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%0.spec_addr.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%0.spec_addr.) (forall ((V&. Dcr) (V& Type) (p! Poly)) (! (= (vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!) (vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. p!))) :pattern ((vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!))))))
(assert (forall ((V&. Dcr) (V& Type) (p! Poly)) (! (=> (has_type p! (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (uInv SZ (vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!))) :pattern ((vstd!simple_pptr.impl&%0.spec_addr.? V&. V& p!)))))
(set-info :comment ";; Function-Specs vstd::simple_pptr::impl&%0::from_usize")
(declare-fun ens%vstd!simple_pptr.impl&%0.from_usize. (Dcr Type Int vstd!simple_pptr.PPtr.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (u! Int) (s! vstd!simple_pptr.PPtr.)) (! (= (ens%vstd!simple_pptr.impl&%0.from_usize. V&. V& u! s!) (and (has_type (Poly%vstd!simple_pptr.PPtr. s!) (TYPE%vstd!simple_pptr.PPtr. V&. V&)) (= u! (vstd!simple_pptr.PPtr./PPtr/0 (%Poly%vstd!simple_pptr.PPtr. (Poly%vstd!simple_pptr.PPtr. s!)))))) :pattern ((ens%vstd!simple_pptr.impl&%0.from_usize. V&. V& u! s!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::addr")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (uInv SZ (vstd!simple_pptr.impl&%1.addr.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.addr.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::mem_contents")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)) (TYPE%vstd!raw_ptr.MemContents. V&. V&))) :pattern ((vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::pptr")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.pptr.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.pptr.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.pptr.? V&. V& self!) (vstd!simple_pptr.PPtr./PPtr (%I (I (vstd!simple_pptr.impl&%1.addr.? V&. V& self!))) (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. core!marker.PhantomData./PhantomData)))) :pattern ((vstd!simple_pptr.impl&%1.pptr.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (Poly%vstd!simple_pptr.PPtr. (vstd!simple_pptr.impl&%1.pptr.? V&. V& self!)) (TYPE%vstd!simple_pptr.PPtr. V&. V&))) :pattern ((vstd!simple_pptr.impl&%1.pptr.? V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.is_init.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::is_init")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.is_init.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.is_init.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.is_init.? V&. V& self!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.is_init.? V&. V& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%2::arrow_0")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%2.arrow_0.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%2.arrow_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.value.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%7.value.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!)))))
(set-info :comment ";; Function-Specs vstd::simple_pptr::impl&%1::value")
(declare-fun req%vstd!simple_pptr.impl&%1.value. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (req%vstd!simple_pptr.impl&%1.value. V&. V& self!) (=> %%global_location_label%%10 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)))) :pattern ((req%vstd!simple_pptr.impl&%1.value. V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::value")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.value.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.value.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.value.? V&. V& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!))))) :pattern ((vstd!simple_pptr.impl&%1.value.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (vstd!simple_pptr.impl&%1.value.? V&. V& self!) V&)) :pattern ((vstd!simple_pptr.impl&%1.value.? V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::simple_pptr::impl&%4::borrow")
(declare-fun req%vstd!simple_pptr.impl&%4.borrow. (Dcr Type vstd!simple_pptr.PPtr. Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! vstd!simple_pptr.PPtr.) (perm! Poly)) (! (= (req%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm!) (and (=> %%global_location_label%%11 (= (vstd!simple_pptr.PPtr./PPtr (%I (I (vstd!simple_pptr.impl&%1.addr.? V&. V& perm!))) (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. core!marker.PhantomData./PhantomData))) self!)) (=> %%global_location_label%%12 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& perm!))))) :pattern ((req%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm!)))))
(declare-fun ens%vstd!simple_pptr.impl&%4.borrow. (Dcr Type vstd!simple_pptr.PPtr. Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! vstd!simple_pptr.PPtr.) (perm! Poly) (v! Poly)) (! (= (ens%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm! v!) (and (has_type v! V&) (= v! (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& perm!))))))) :pattern ((ens%vstd!simple_pptr.impl&%4.borrow. V&. V& self! perm! v!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::view")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::spec_len")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!) (uClip SZ (vstd!seq.Seq.len.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::unique")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))) (and (<= 0 (%I j$)) (< (%I j$) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) i$) (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) j$))))) :pattern ((vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) i$) (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) j$))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& self!))))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::upper_tree_add_container")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container. (lib!process_manager.container_tree_spec_impl.ContainerTree. vstd!seq.Seq<usize.>. Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (seq! vstd!seq.Seq<usize.>.) (subchild_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container. pre%self! seq! subchild_ptr!) (=> %%global_location_label%%13 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. seq!) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) c_ptr$))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. seq!) c_ptr$)))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container. pre%self! seq! subchild_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container. (lib!process_manager.container_tree_spec_impl.ContainerTree. lib!process_manager.container_tree_spec_impl.ContainerTree. vstd!seq.Seq<usize.>. Int) Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (seq! vstd!seq.Seq<usize.>.) (subchild_ptr! Int)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container. pre%self! self! seq! subchild_ptr!) (and (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (= (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. seq!) c_ptr$) false)) (= (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))) :pattern ((vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)) (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. seq!) c_ptr$)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))) (I subchild_ptr!))))) :pattern ((lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. seq!) c_ptr$) false)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container. pre%self! self! seq! subchild_ptr!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::upper_tree_add_container1")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container1. (lib!process_manager.container_tree_spec_impl.ContainerTree. vstd!seq.Seq<usize.>. Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (seq! vstd!seq.Seq<usize.>.) (subchild_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container1. pre%self! seq! subchild_ptr!) (=> %%global_location_label%%14 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. seq!) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) c_ptr$))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. seq!) c_ptr$)))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container1. pre%self! seq! subchild_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container1. (lib!process_manager.container_tree_spec_impl.ContainerTree. lib!process_manager.container_tree_spec_impl.ContainerTree. vstd!seq.Seq<usize.>. Int) Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (seq! vstd!seq.Seq<usize.>.) (subchild_ptr! Int)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container1. pre%self! self! seq! subchild_ptr!) (and (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (= (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (= (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. seq!) c_ptr$) false)) (ext_eq false (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$)))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (and (and (and (and (and (and (and (and (and (and (and (and (and (= (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$))) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)) (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$)) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$))) :pattern ((lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. seq!) c_ptr$)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))) (I subchild_ptr!))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$)) :pattern ((lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. seq!) c_ptr$) false)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$)) :pattern ((lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container1. pre%self! self! seq! subchild_ptr!)))))
(set-info :comment ";; Function-Specs lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(declare-fun req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (= (req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. T&. T& N&. N& self! index!) (=> %%global_location_label%%15 (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& self! index!))) :pattern ((req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. T&. T& N&. N& self! index!)))))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (=> (and (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type index! (SINT 32))) (has_type (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& self! index!) T&)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& self! index!)))))
(set-info :comment ";; Function-Axioms lib::define::MAX_CONTAINER_SCHEDULER_LEN")
(assert (fuel_bool_default fuel%lib!define.MAX_CONTAINER_SCHEDULER_LEN.))
(assert (=> (fuel_bool fuel%lib!define.MAX_CONTAINER_SCHEDULER_LEN.) (= lib!define.MAX_CONTAINER_SCHEDULER_LEN.? 10)))
(assert (uInv SZ lib!define.MAX_CONTAINER_SCHEDULER_LEN.?))
(set-info :comment ";; Function-Specs lib::process_manager::container_util_t::scheduler_push_thread")
(declare-fun req%lib!process_manager.container_util_t.scheduler_push_thread. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (thread_ptr! Int)) (! (= (req%lib!process_manager.container_util_t.scheduler_push_thread. container_ptr! pre%container_perm! thread_ptr!) (and (=> %%global_location_label%%16 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))) (=> %%global_location_label%%17 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)) container_ptr!)) (=> %%global_location_label%%18 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))))) (=> %%global_location_label%%19 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))))) (=> %%global_location_label%%20 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) lib!define.MAX_CONTAINER_SCHEDULER_LEN.?)) (=> %%global_location_label%%21 (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (I thread_ptr!)) false)))) :pattern ((req%lib!process_manager.container_util_t.scheduler_push_thread. container_ptr! pre%container_perm! thread_ptr!)))))
(declare-fun ens%lib!process_manager.container_util_t.scheduler_push_thread. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. Int Int) Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (thread_ptr! Int) (ret! Int)) (! (= (ens%lib!process_manager.container_util_t.scheduler_push_thread. container_ptr! pre%container_perm! container_perm! thread_ptr! ret!) (and (iInv 32 ret!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)) container_ptr!) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false BOOL (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (I thread_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I ret!))) thread_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))))) :pattern ((ens%lib!process_manager.container_util_t.scheduler_push_thread. container_ptr! pre%container_perm! container_perm! thread_ptr! ret!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::skip")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.skip.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.skip.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.skip.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! n! (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.skip.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_util_t::scheduler_pop_head")
(declare-fun req%lib!process_manager.container_util_t.scheduler_pop_head. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)) (! (= (req%lib!process_manager.container_util_t.scheduler_pop_head. container_ptr! pre%container_perm!) (and (=> %%global_location_label%%22 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))) (=> %%global_location_label%%23 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)) container_ptr!)) (=> %%global_location_label%%24 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))))) (=> %%global_location_label%%25 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))))) (=> %%global_location_label%%26 (not (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) 0))))) :pattern ((req%lib!process_manager.container_util_t.scheduler_pop_head. container_ptr! pre%container_perm!)))))
(declare-fun ens%lib!process_manager.container_util_t.scheduler_pop_head. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. tuple%2.) Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (ret! tuple%2.)) (! (= (ens%lib!process_manager.container_util_t.scheduler_pop_head. container_ptr! pre%container_perm! container_perm! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) $ (SINT 32))) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)) container_ptr!) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false BOOL (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (Sub (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) 1)) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (vstd!seq.Seq.subrange.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (I 1) (I (vstd!seq.Seq.len.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))))))) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))) (vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (I 0))) (= (vstd!seq.Seq.index.? $ (SINT 32) (Poly%vstd!seq.Seq<i32.>. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))))) (I 0)) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (not (= index$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (not (= index$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (not (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)))))) :pattern ((ens%lib!process_manager.container_util_t.scheduler_pop_head. container_ptr! pre%container_perm! container_perm! ret!)))))
(set-info :comment ";; Function-Axioms lib::define::CONTAINER_PROC_LIST_LEN")
(assert (fuel_bool_default fuel%lib!define.CONTAINER_PROC_LIST_LEN.))
(assert (=> (fuel_bool fuel%lib!define.CONTAINER_PROC_LIST_LEN.) (= lib!define.CONTAINER_PROC_LIST_LEN.? 10)))
(assert (uInv SZ lib!define.CONTAINER_PROC_LIST_LEN.?))
(set-info :comment ";; Function-Specs lib::process_manager::container_util_t::container_push_proc")
(declare-fun req%lib!process_manager.container_util_t.container_push_proc. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. Int) Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (p_ptr! Int)) (! (= (req%lib!process_manager.container_util_t.container_push_proc. container_ptr! pre%container_perm! p_ptr!) (and (=> %%global_location_label%%27 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))) (=> %%global_location_label%%28 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)) container_ptr!)) (=> %%global_location_label%%29 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))))) (=> %%global_location_label%%30 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))))) (=> %%global_location_label%%31 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) lib!define.CONTAINER_PROC_LIST_LEN.?)) (=> %%global_location_label%%32 (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (I p_ptr!)) false)))) :pattern ((req%lib!process_manager.container_util_t.container_push_proc. container_ptr! pre%container_perm! p_ptr!)))))
(declare-fun ens%lib!process_manager.container_util_t.container_push_proc. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. Int Int) Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (p_ptr! Int) (ret! Int)) (! (= (ens%lib!process_manager.container_util_t.container_push_proc. container_ptr! pre%container_perm! container_perm! p_ptr! ret!) (and (iInv 32 ret!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)) container_ptr!) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false BOOL (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (I p_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I ret!))) p_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))))) :pattern ((ens%lib!process_manager.container_util_t.container_push_proc. container_ptr! pre%container_perm! container_perm! p_ptr! ret!)))))
(set-info :comment ";; Function-Axioms lib::define::CONTAINER_CHILD_LIST_LEN")
(assert (fuel_bool_default fuel%lib!define.CONTAINER_CHILD_LIST_LEN.))
(assert (=> (fuel_bool fuel%lib!define.CONTAINER_CHILD_LIST_LEN.) (= lib!define.CONTAINER_CHILD_LIST_LEN.? 10)))
(assert (uInv SZ lib!define.CONTAINER_CHILD_LIST_LEN.?))
(set-info :comment ";; Function-Specs lib::process_manager::container_util_t::container_push_child")
(declare-fun req%lib!process_manager.container_util_t.container_push_child. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. Int) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (c_ptr! Int)) (! (= (req%lib!process_manager.container_util_t.container_push_child. container_ptr! pre%container_perm! c_ptr!) (and (=> %%global_location_label%%33 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))) (=> %%global_location_label%%34 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)) container_ptr!)) (=> %%global_location_label%%35 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))))) (=> %%global_location_label%%36 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))))) (=> %%global_location_label%%37 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) lib!define.CONTAINER_CHILD_LIST_LEN.?)) (=> %%global_location_label%%38 (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (I c_ptr!)) false)))) :pattern ((req%lib!process_manager.container_util_t.container_push_child. container_ptr! pre%container_perm! c_ptr!)))))
(declare-fun ens%lib!process_manager.container_util_t.container_push_child. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. Int Int) Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (c_ptr! Int) (ret! Int)) (! (= (ens%lib!process_manager.container_util_t.container_push_child. container_ptr! pre%container_perm! container_perm! c_ptr! ret!) (and (iInv 32 ret!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)) container_ptr!) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false BOOL (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (I c_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I ret!))) c_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))))) :pattern ((ens%lib!process_manager.container_util_t.container_push_child. container_ptr! pre%container_perm! container_perm! c_ptr! ret!)))))
(set-info :comment ";; Function-Axioms lib::define::CONTAINER_ENDPOINT_LIST_LEN")
(assert (fuel_bool_default fuel%lib!define.CONTAINER_ENDPOINT_LIST_LEN.))
(assert (=> (fuel_bool fuel%lib!define.CONTAINER_ENDPOINT_LIST_LEN.) (= lib!define.CONTAINER_ENDPOINT_LIST_LEN.? 10)))
(assert (uInv SZ lib!define.CONTAINER_ENDPOINT_LIST_LEN.?))
(set-info :comment ";; Function-Specs lib::process_manager::container_util_t::container_push_endpoint")
(declare-fun req%lib!process_manager.container_util_t.container_push_endpoint. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. Int) Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (e_ptr! Int)) (! (= (req%lib!process_manager.container_util_t.container_push_endpoint. container_ptr! pre%container_perm! e_ptr!) (and (=> %%global_location_label%%39 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))) (=> %%global_location_label%%40 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)) container_ptr!)) (=> %%global_location_label%%41 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))))) (=> %%global_location_label%%42 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))))) (=> %%global_location_label%%43 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) lib!define.CONTAINER_ENDPOINT_LIST_LEN.?)) (=> %%global_location_label%%44 (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (I e_ptr!)) false)))) :pattern ((req%lib!process_manager.container_util_t.container_push_endpoint. container_ptr! pre%container_perm! e_ptr!)))))
(declare-fun ens%lib!process_manager.container_util_t.container_push_endpoint. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. Int Int) Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (e_ptr! Int) (ret! Int)) (! (= (ens%lib!process_manager.container_util_t.container_push_endpoint. container_ptr! pre%container_perm! container_perm! e_ptr! ret!) (and (iInv 32 ret!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)) container_ptr!) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false BOOL (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (I e_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))))))) index$)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I ret!))) e_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))))))))))) :pattern ((ens%lib!process_manager.container_util_t.container_push_endpoint. container_ptr! pre%container_perm! container_perm! e_ptr! ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_util_t::container_set_mem_quota")
(declare-fun req%lib!process_manager.container_util_t.container_set_mem_quota. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. Int) Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (value! Int)) (! (= (req%lib!process_manager.container_util_t.container_set_mem_quota. container_ptr! pre%container_perm! value!) (and (=> %%global_location_label%%45 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))) (=> %%global_location_label%%46 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)) container_ptr!)))) :pattern ((req%lib!process_manager.container_util_t.container_set_mem_quota. container_ptr! pre%container_perm! value!)))))
(declare-fun ens%lib!process_manager.container_util_t.container_set_mem_quota. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. Int) Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (value! Int)) (! (= (ens%lib!process_manager.container_util_t.container_set_mem_quota. container_ptr! pre%container_perm! container_perm! value!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)) container_ptr!) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false BOOL (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I value!)))) :pattern ((ens%lib!process_manager.container_util_t.container_set_mem_quota. container_ptr! pre%container_perm! container_perm! value!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_util_t::container_set_owned_threads")
(declare-fun req%lib!process_manager.container_util_t.container_set_owned_threads. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. vstd!set.Set<usize.>.) Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (owned_threads! vstd!set.Set<usize.>.)) (! (= (req%lib!process_manager.container_util_t.container_set_owned_threads. container_ptr! pre%container_perm! owned_threads!) (and (=> %%global_location_label%%47 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)))) (=> %%global_location_label%%48 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!)) container_ptr!)))) :pattern ((req%lib!process_manager.container_util_t.container_set_owned_threads. container_ptr! pre%container_perm! owned_threads!)))))
(declare-fun ens%lib!process_manager.container_util_t.container_set_owned_threads. (Int vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. vstd!set.Set<usize.>.) Bool)
(assert (forall ((container_ptr! Int) (pre%container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (container_perm! vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.) (owned_threads! vstd!set.Set<usize.>.)) (! (= (ens%lib!process_manager.container_util_t.container_set_owned_threads. container_ptr! pre%container_perm! container_perm! owned_threads!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)) container_ptr!) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false BOOL (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. pre%container_perm!))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm!)))))))) (Poly%vstd!set.Set<usize.>. owned_threads!)))) :pattern ((ens%lib!process_manager.container_util_t.container_set_owned_threads. container_ptr! pre%container_perm! container_perm! owned_threads!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_util_t::page_to_container_tree_version_1")
(declare-fun req%lib!process_manager.container_util_t.page_to_container_tree_version_1. (Int Poly Int Int Int lib!array_set.ArraySet. Int vstd!set.Set<usize.>. vstd!seq.Seq<usize.>.) Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((page_ptr! Int) (page_perm! Poly) (parent_container! Int) (parent_rev_ptr! Int) (init_quota! Int) (new_cpus! lib!array_set.ArraySet.) (depth! Int) (subtree_set! vstd!set.Set<usize.>.) (uppertree_seq! vstd!seq.Seq<usize.>.)) (! (= (req%lib!process_manager.container_util_t.page_to_container_tree_version_1. page_ptr! page_perm! parent_container! parent_rev_ptr! init_quota! new_cpus! depth! subtree_set! uppertree_seq!) (and (=> %%global_location_label%%49 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!))) (=> %%global_location_label%%50 (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!) page_ptr!)))) :pattern ((req%lib!process_manager.container_util_t.page_to_container_tree_version_1. page_ptr! page_perm! parent_container! parent_rev_ptr! init_quota! new_cpus! depth! subtree_set! uppertree_seq!)))))
(declare-fun ens%lib!process_manager.container_util_t.page_to_container_tree_version_1. (Int Poly Int Int Int lib!array_set.ArraySet. Int vstd!set.Set<usize.>. vstd!seq.Seq<usize.>. tuple%2.) Bool)
(assert (forall ((page_ptr! Int) (page_perm! Poly) (parent_container! Int) (parent_rev_ptr! Int) (init_quota! Int) (new_cpus! lib!array_set.ArraySet.) (depth! Int) (subtree_set! vstd!set.Set<usize.>.) (uppertree_seq! vstd!seq.Seq<usize.>.) (ret! tuple%2.)) (! (= (ens%lib!process_manager.container_util_t.page_to_container_tree_version_1. page_ptr! page_perm! parent_container! parent_rev_ptr! init_quota! new_cpus! depth! subtree_set! uppertree_seq! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) (TRACKED $) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.))) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) page_ptr!) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) page_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (Poly%core!option.Option. (core!option.Option./Some (I parent_container!)))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (Poly%core!option.Option. (core!option.Option./Some (I parent_rev_ptr!)))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) 0) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) 0) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (I init_quota!)) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (I 0)) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (Poly%lib!array_set.ArraySet. new_cpus!)) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (I depth!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (Poly%vstd!set.Set<usize.>. subtree_set!)) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (Poly%vstd!seq.Seq<usize.>. uppertree_seq!)) (ext_eq false BOOL (B (lib!process_manager.container.Container./Container/can_have_children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (B false)))) :pattern ((ens%lib!process_manager.container_util_t.page_to_container_tree_version_1. page_ptr! page_perm! parent_container! parent_rev_ptr! init_quota! new_cpus! depth! subtree_set! uppertree_seq! ret!)))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::container_dom")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? self!) (%Poly%vstd!set.Set<usize.>. (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::container_perms_wf")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf.? self!) (and (and (and (and (and (and (and (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)) (%I c_ptr$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))) :pattern ((vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))) c_ptr$) false))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))) c_ptr$))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))) :pattern ((vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (= (vstd!seq.Seq.len.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))) :pattern ((vstd!seq.Seq.len.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::container_root_wf")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf.? self!) (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (= (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (I (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))))))))) 0)) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (not (= (%I c_ptr$) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (not (= (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))) 0)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (not (= (%I c_ptr$) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (is-core!option.Option./Some_ (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))) :pattern ((is-core!option.Option./Some_ (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::container_childern_list_wf")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf.? self!) (forall ((c_ptr$ Poly) (child_c_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type child_c_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))) child_c_ptr$)) (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) child_c_ptr$) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) child_c_ptr$)))))))))) c_ptr$)) (= (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) child_c_ptr$))))))) (Add (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))) 1))))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))) child_c_ptr$) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) child_c_ptr$))))))) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))) child_c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) child_c_ptr$)) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))) child_c_ptr$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) child_c_ptr$)))))))))))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::containers_linkedlist_wf")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf.? self!) (and (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (not (= (%I c_ptr$) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (not (= (%I c_ptr$) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (and (and (and (is-core!option.Option./Some_ (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))))))))))) c_ptr$)) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))) c_ptr$)))) :pattern ((is-core!option.Option./Some_ (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))))))))))) c_ptr$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))))))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::container_childern_depth_wf")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf.? self!) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (not (= (%I c_ptr$) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (= (vstd!seq.Seq.index.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) (I (Sub (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))) 1))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))))))) :pattern ((vstd!seq.Seq.index.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) (I (Sub (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))) 1))))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::container_subtree_set_wf")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf.? self!) (forall ((c_ptr$ Poly) (sub_c_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type sub_c_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) sub_c_ptr$)) (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) sub_c_ptr$) (> (vstd!seq.Seq.len.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) sub_c_ptr$))))))))) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))) (= (vstd!seq.Seq.index.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) sub_c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$))))))))) c_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) sub_c_ptr$) (vstd!seq.Seq.len.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) sub_c_ptr$))))))))) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) sub_c_ptr$) (vstd!seq.Seq.index.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) sub_c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) sub_c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) sub_c_ptr$))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf.? self!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::index_of")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.index_of.))
(declare-fun %%choose%%0 (Type Int Int Dcr Type Poly Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Int) (%%hole%%2 Int) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Poly) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly)) (! (=> (exists ((i$ Poly)) (! (and (has_type i$ %%hole%%0) (and (and (<= %%hole%%1 (%I i$)) (< (%I i$) %%hole%%2)) (= (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 i$) %%hole%%6))) :pattern ((vstd!seq.Seq.index.? %%hole%%7 %%hole%%8 %%hole%%9 i$)))) (exists ((i$ Poly)) (! (and (and (has_type i$ %%hole%%0) (and (and (<= %%hole%%1 (%I i$)) (< (%I i$) %%hole%%2)) (= (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 i$) %%hole%%6))) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) i$)) :pattern ((vstd!seq.Seq.index.? %%hole%%7 %%hole%%8 %%hole%%9 i$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.index_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.index_of.? A&. A& self! needle!) (%I (as_type (%%choose%%0 INT 0 (vstd!seq.Seq.len.? A&. A& self!) A&. A& self! needle! A&. A& self!) INT))) :pattern ((vstd!seq_lib.impl&%0.index_of.? A&. A& self! needle!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::container_uppertree_seq_wf")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf.? self!) (forall ((c_ptr$ Poly) (u_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type u_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) u_ptr$)) (and (and (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) u_ptr$) (= (vstd!seq.Seq.index.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) u_ptr$))))))))) u_ptr$)) (= (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) u_ptr$))))))) (vstd!seq_lib.impl&%0.index_of.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) u_ptr$))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) u_ptr$)))))))) c_ptr$)) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) u_ptr$)))))))) (vstd!seq.Seq.subrange.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) (I 0) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) u_ptr$))))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) u_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) u_ptr$)) :pattern ((vstd!seq.Seq.subrange.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) (I 0) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) u_ptr$)))))))))) :pattern ((vstd!seq_lib.impl&%0.index_of.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) u_ptr$))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::container_subtree_set_exclusive")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive.? self!) (forall ((c_ptr$ Poly) (sub_c_ptr$ Poly)) (! (=> (and (has_type c_ptr$ (UINT SZ)) (has_type sub_c_ptr$ (UINT SZ))) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) sub_c_ptr$)) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) sub_c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) sub_c_ptr$)))))))) c_ptr$)))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr$)))))))) sub_c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) sub_c_ptr$)))))))) c_ptr$))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::wf")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? self!) (and (and (and (and (and (and (and (lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf.? self!) (lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive.? self!))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::spec_get_container")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.) (forall ((self! Poly) (c_ptr! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? self! c_ptr!) (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) c_ptr!))))))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? self! c_ptr!))))))
(assert (forall ((self! Poly) (c_ptr! Poly)) (! (=> (and (has_type self! TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (has_type c_ptr! (UINT SZ))) (has_type (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? self! c_ptr!)) TYPE%lib!process_manager.container.Container.)) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? self! c_ptr!)))))
(set-info :comment ";; Function-Specs lib::lemma::lemma_u::seq_push_lemma")
(declare-fun ens%lib!lemma.lemma_u.seq_push_lemma. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!lemma.lemma_u.seq_push_lemma. A&. A&) (and (forall ((s$ Poly) (v$ Poly) (x$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&) (has_type x$ A&)) (=> (vstd!seq_lib.impl&%0.contains.? A&. A& s$ x$) (and (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) v$) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))) (forall ((s$ Poly) (v$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&)) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) v$)) :pattern ((vstd!seq.Seq.push.? A&. A& s$ v$)))) (forall ((s$ Poly) (v$ Poly) (x$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&) (has_type x$ A&)) (=> (and (not (vstd!seq_lib.impl&%0.contains.? A&. A& s$ x$)) (not (= v$ x$))) (not (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) x$)))))) :pattern ((ens%lib!lemma.lemma_u.seq_push_lemma. A&. A&)))))
(set-info :comment ";; Function-Specs lib::lemma::lemma_u::seq_push_unique_lemma")
(declare-fun ens%lib!lemma.lemma_u.seq_push_unique_lemma. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%lib!lemma.lemma_u.seq_push_unique_lemma. A&. A&) (and (forall ((s$ Poly) (v$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&)) (=> (and (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& s$) (= (vstd!seq_lib.impl&%0.contains.? A&. A& s$ v$) false)) (and (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$)) (= (vstd!seq_lib.impl&%0.index_of.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$) v$) (Sub (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ v$)) 1))))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& s$ v$)))) (forall ((s$ Poly) (v$ Poly) (y$ Poly)) (! (=> (and (has_type s$ (TYPE%vstd!seq.Seq. A&. A&)) (has_type v$ A&) (has_type y$ A&)) (=> (and (and (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& s$) (vstd!seq_lib.impl&%0.contains.? A&. A& s$ v$)) (= (vstd!seq_lib.impl&%0.contains.? A&. A& s$ y$) false)) (= (vstd!seq_lib.impl&%0.index_of.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ y$) v$) (vstd!seq_lib.impl&%0.index_of.? A&. A& s$ v$)))) :pattern ((vstd!seq_lib.impl&%0.index_of.? A&. A& (vstd!seq.Seq.push.? A&. A& s$ y$) v$)))))) :pattern ((ens%lib!lemma.lemma_u.seq_push_unique_lemma. A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%30::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::tree_wf")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.tree_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.tree_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.tree_wf.? self!) (and (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf.? self!) (lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf.? self!))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.tree_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::linked_list_wf")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.linked_list_wf.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.linked_list_wf.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.linked_list_wf.? self!) (and (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf.? self!) (lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf.? self!))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.linked_list_wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::process_manager::container_tree_spec_impl::ContainerTree::rest_specs")
(assert (fuel_bool_default fuel%lib!process_manager.container_tree_spec_impl.impl&%0.rest_specs.))
(assert (=> (fuel_bool fuel%lib!process_manager.container_tree_spec_impl.impl&%0.rest_specs.) (forall ((self! Poly)) (! (= (lib!process_manager.container_tree_spec_impl.impl&%0.rest_specs.? self!) (and (and (and (lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf.? self!) (lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf.? self!)) (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive.? self!))) :pattern ((lib!process_manager.container_tree_spec_impl.impl&%0.rest_specs.? self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::get_container")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int) Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. self! container_ptr!) (and (=> %%global_location_label%%51 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (=> %%global_location_label%%52 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (I container_ptr!))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. self! container_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int lib!process_manager.container.Container.) Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (ret! lib!process_manager.container.Container.)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. self! container_ptr! ret!) (and (has_type (Poly%lib!process_manager.container.Container. ret!) TYPE%lib!process_manager.container.Container.) (= (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I container_ptr!)) ret!))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%0.get_container. self! container_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::container_tree_spec_impl::ContainerTree::get_container")
(set-info :comment ";; process_manager/container_tree_spec_impl.rs:31:9: 31:83 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::same_or_deeper_depth_imply_none_ancestor")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%1.same_or_deeper_depth_imply_none_ancestor. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int) Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (a_ptr! Int) (child_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%1.same_or_deeper_depth_imply_none_ancestor. self! a_ptr! child_ptr!) (and (=> %%global_location_label%%53 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (=> %%global_location_label%%54 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (I a_ptr!))) (=> %%global_location_label%%55 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (I child_ptr!))) (=> %%global_location_label%%56 (>= (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I a_ptr!)))))))) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I child_ptr!)))))))))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%1.same_or_deeper_depth_imply_none_ancestor. self! a_ptr! child_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%1.same_or_deeper_depth_imply_none_ancestor. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int) Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (a_ptr! Int) (child_ptr! Int)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%1.same_or_deeper_depth_imply_none_ancestor. self! a_ptr! child_ptr!) (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I a_ptr!))))))))) (I child_ptr!)) false)) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%1.same_or_deeper_depth_imply_none_ancestor. self! a_ptr! child_ptr!)))))
(set-info :comment ";; Function-Def lib::process_manager::container_tree_spec_impl::ContainerTree::same_or_deeper_depth_imply_none_ancestor")
(set-info :comment ";; process_manager/container_tree_spec_impl.rs:263:9: 263:113 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::no_child_imply_no_subtree")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%1.no_child_imply_no_subtree. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int) Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (c_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%1.no_child_imply_no_subtree. self! c_ptr!) (and (=> %%global_location_label%%57 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (=> %%global_location_label%%58 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (I c_ptr!))) (=> %%global_location_label%%59 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I c_ptr!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ)))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%1.no_child_imply_no_subtree. self! c_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%1.no_child_imply_no_subtree. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int) Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (c_ptr! Int)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%1.no_child_imply_no_subtree. self! c_ptr!) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I c_ptr!))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%1.no_child_imply_no_subtree. self! c_ptr!)))))
(set-info :comment ";; Function-Def lib::process_manager::container_tree_spec_impl::ContainerTree::no_child_imply_no_subtree")
(set-info :comment ";; process_manager/container_tree_spec_impl.rs:276:9: 276:74 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::in_child_impy_in_subtree")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%1.in_child_impy_in_subtree. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int Int) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (c_ptr! Int) (child_ptr! Int) (s_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%1.in_child_impy_in_subtree. self! c_ptr! child_ptr! s_ptr!) (and (=> %%global_location_label%%60 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (=> %%global_location_label%%61 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (I c_ptr!))) (=> %%global_location_label%%62 (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I c_ptr!)))))))))) (I child_ptr!))) (=> %%global_location_label%%63 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I child_ptr!))))))))) (I s_ptr!))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%1.in_child_impy_in_subtree. self! c_ptr! child_ptr! s_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%1.in_child_impy_in_subtree. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int Int) Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (c_ptr! Int) (child_ptr! Int) (s_ptr! Int)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%1.in_child_impy_in_subtree. self! c_ptr! child_ptr! s_ptr!) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I c_ptr!))))))))) (I s_ptr!))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%1.in_child_impy_in_subtree. self! c_ptr! child_ptr! s_ptr!)))))
(set-info :comment ";; Function-Def lib::process_manager::container_tree_spec_impl::ContainerTree::in_child_impy_in_subtree")
(set-info :comment ";; process_manager/container_tree_spec_impl.rs:310:9: 310:117 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::in_subtree_imply_exist_in_child")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%1.in_subtree_imply_exist_in_child. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int) Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (c_ptr! Int) (s_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%1.in_subtree_imply_exist_in_child. self! c_ptr! s_ptr!) (and (=> %%global_location_label%%64 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (=> %%global_location_label%%65 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (I c_ptr!))) (=> %%global_location_label%%66 (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I c_ptr!))))))))) (I s_ptr!))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%1.in_subtree_imply_exist_in_child. self! c_ptr! s_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%1.in_subtree_imply_exist_in_child. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int) Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (c_ptr! Int) (s_ptr! Int)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%1.in_subtree_imply_exist_in_child. self! c_ptr! s_ptr!) (or (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I c_ptr!)))))))))) (I s_ptr!)) (exists ((child_ptr$ Poly)) (! (and (has_type child_ptr$ (UINT SZ)) (and (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I c_ptr!)))))))))) child_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) child_ptr$)))))))) (I s_ptr!)))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I c_ptr!)))))))))) child_ptr$)))))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%1.in_subtree_imply_exist_in_child. self! c_ptr! s_ptr!)))))
(set-info :comment ";; Function-Def lib::process_manager::container_tree_spec_impl::ContainerTree::in_subtree_imply_exist_in_child")
(set-info :comment ";; process_manager/container_tree_spec_impl.rs:329:9: 329:100 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::not_in_dom_imply_not_in_any_children_set")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%1.not_in_dom_imply_not_in_any_children_set. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int) Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (s_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%1.not_in_dom_imply_not_in_any_children_set. self! s_ptr!) (and (=> %%global_location_label%%67 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (=> %%global_location_label%%68 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (I s_ptr!)) false)))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%1.not_in_dom_imply_not_in_any_children_set. self! s_ptr!)))))
(set-info :comment ";; Function-Def lib::process_manager::container_tree_spec_impl::ContainerTree::not_in_dom_imply_not_in_any_children_set")
(set-info :comment ";; process_manager/container_tree_spec_impl.rs:414:9: 414:89 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::container_tree_inv")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. (lib!process_manager.container_tree_spec_impl.ContainerTree.) Bool)
(declare-const %%global_location_label%%69 Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. self!) (=> %%global_location_label%%69 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. self!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. (lib!process_manager.container_tree_spec_impl.ContainerTree.) Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. self!) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) c_ptr$)))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$))))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%1.container_tree_inv. self!)))))
(set-info :comment ";; Function-Def lib::process_manager::container_tree_spec_impl::ContainerTree::container_tree_inv")
(set-info :comment ";; process_manager/container_tree_spec_impl.rs:428:9: 428:47 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::new")
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.new. (Int lib!process_manager.container_tree_spec_impl.ContainerTree.) Bool)
(assert (forall ((no%param Int) (%return! lib!process_manager.container_tree_spec_impl.ContainerTree.)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.new. no%param %return!) (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. %return!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.)) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.new. no%param %return!)))))
(set-info :comment ";; Function-Def lib::process_manager::container_tree_spec_impl::ContainerTree::new")
(set-info :comment ";; process_manager/container_tree_spec_impl.rs:443:9: 443:29 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::check_is_ancestor")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%2.check_is_ancestor. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int) Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (a_ptr! Int) (child_ptr! Int)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%2.check_is_ancestor. self! a_ptr! child_ptr!) (and (=> %%global_location_label%%70 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (=> %%global_location_label%%71 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (I a_ptr!))) (=> %%global_location_label%%72 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) (I child_ptr!))) (=> %%global_location_label%%73 (< (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I a_ptr!)))))))) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I child_ptr!)))))))))) (=> %%global_location_label%%74 (not (= child_ptr! (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))))))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%2.check_is_ancestor. self! a_ptr! child_ptr!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.check_is_ancestor. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int Bool) Bool)
(assert (forall ((self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (a_ptr! Int) (child_ptr! Int) (ret! Bool)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.check_is_ancestor. self! a_ptr! child_ptr! ret!) (= ret! (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I child_ptr!))))))))) (I a_ptr!)))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.check_is_ancestor. self! a_ptr! child_ptr! ret!)))))
(set-info :comment ";; Function-Def lib::process_manager::container_tree_spec_impl::ContainerTree::check_is_ancestor")
(set-info :comment ";; process_manager/container_tree_spec_impl.rs:476:13: 511:14 (#0)")
(set-info :comment ";; Function-Def lib::process_manager::container_tree_spec_impl::ContainerTree::check_is_ancestor")
(set-info :comment ";; process_manager/container_tree_spec_impl.rs:451:9: 451:97 (#0)")
(set-info :comment ";; Function-Specs lib::array_set::ArraySet::new")
(declare-fun ens%lib!array_set.impl&%0.new. (Dcr Type lib!array_set.ArraySet.) Bool)
(assert (forall ((N&. Dcr) (N& Type) (ret! lib!array_set.ArraySet.)) (! (= (ens%lib!array_set.impl&%0.new. N&. N& ret!) (and (has_type (Poly%lib!array_set.ArraySet. ret!) (TYPE%lib!array_set.ArraySet. N&. N&)) (lib!array_set.impl&%0.wf.? N&. N& (Poly%lib!array_set.ArraySet. ret!)) (= (lib!array_set.impl&%0.view.? N&. N& (Poly%lib!array_set.ArraySet. ret!)) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.empty.? $ (UINT SZ)))))) :pattern ((ens%lib!array_set.impl&%0.new. N&. N& ret!)))))
(set-info :comment ";; Function-Specs lib::process_manager::container_tree_spec_impl::ContainerTree::new_container")
(declare-fun req%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. (lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int Int Poly) Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (init_quota! Int) (page_ptr_1! Int) (page_perm_1! Poly)) (! (= (req%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. pre%self! container_ptr! init_quota! page_ptr_1! page_perm_1!) (and (=> %%global_location_label%%75 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (=> %%global_location_label%%76 (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) (I container_ptr!))) (=> %%global_location_label%%77 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) (I page_ptr_1!)) false)) (=> %%global_location_label%%78 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) lib!define.CONTAINER_CHILD_LIST_LEN.?)) (=> %%global_location_label%%79 (< (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))) (- (uHi SZ) 1))) (=> %%global_location_label%%80 (>= (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))) (Add init_quota! 3))) (=> %%global_location_label%%81 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm_1!))) (=> %%global_location_label%%82 (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm_1!) page_ptr_1!)))) :pattern ((req%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. pre%self! container_ptr! init_quota! page_ptr_1! page_perm_1!)))))
(declare-fun ens%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. (lib!process_manager.container_tree_spec_impl.ContainerTree. lib!process_manager.container_tree_spec_impl.ContainerTree. Int Int Int Poly) Bool)
(assert (forall ((pre%self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (self! lib!process_manager.container_tree_spec_impl.ContainerTree.) (container_ptr! Int) (init_quota! Int) (page_ptr_1! Int) (page_perm_1! Poly)) (! (= (ens%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. pre%self! self! container_ptr! init_quota! page_ptr_1! page_perm_1!) (and (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))) (I page_ptr_1!))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I page_ptr_1!)))))) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!) (I container_ptr!)))))) (I container_ptr!))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) c_ptr$) (not (= (%I c_ptr$) container_ptr!))) (and (and (and (and (and (and (and (and (and (and (and (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$)) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$))) :pattern ((lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I page_ptr_1!)))))) c_ptr$)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$)))))))) (I page_ptr_1!))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$)) :pattern ((lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!))))) c_ptr$) (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!) (I page_ptr_1!)))))) c_ptr$) false)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) c_ptr$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!))))) c_ptr$)) :pattern ((lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!)))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (I page_ptr_1!))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false INT (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (I (Sub (Sub (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))) init_quota!) 3))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I container_ptr!))))))))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!))))))))) (I page_ptr_1!))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (Poly%core!option.Option. (core!option.Option./Some (I container_ptr!)))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (I init_quota!)) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (I 0)) (lib!array_set.impl&%0.wf.? $ (CONST_INT 32) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!array_set.impl&%0.view.? $ (CONST_INT 32) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ))) (ext_eq false INT (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (I (Add (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!)))))))) 1))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. pre%self!)))) (I container_ptr!))))))))) (I container_ptr!))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!)))) (I page_ptr_1!)))))))))))) :pattern ((ens%lib!process_manager.container_tree_spec_impl.impl&%2.new_container. pre%self! self! container_ptr! init_quota! page_ptr_1! page_perm_1!)))))
(set-info :comment ";; Function-Def lib::process_manager::container_tree_spec_impl::ContainerTree::new_container")
(set-info :comment ";; process_manager/container_tree_spec_impl.rs:687:9: 687:141 (#0)")
(declare-const self!@0 lib!process_manager.container_tree_spec_impl.ContainerTree.)
(declare-const container_ptr! Int)
(declare-const init_quota! Int)
(declare-const page_ptr_1! Int)
(declare-const page_perm_1! Poly)
(declare-const tmp%1 Poly)
(declare-const tmp%2 vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>.)
(declare-const verus_tmp_container_perm@ vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)
(declare-const tmp%3 vstd!simple_pptr.PPtr.)
(declare-const tmp%4 Poly)
(declare-const tmp%5 Poly)
(declare-const tmp%6 Int)
(declare-const tmp%7 lib!array_set.ArraySet.)
(declare-const tmp%8 Int)
(declare-const tmp%9 vstd!set.Set<usize.>.)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const tmp%12 Bool)
(declare-const tmp%13 Bool)
(declare-const tmp%14 Bool)
(declare-const tmp%15 Bool)
(declare-const tmp%16 Bool)
(declare-const tmp%17 Bool)
(declare-const tmp%18 Bool)
(declare-const tmp%19 Bool)
(declare-const tmp%20 Bool)
(declare-const tmp%21 Bool)
(declare-const tmp%22 Bool)
(declare-const tmp%23 Bool)
(declare-const tmp%24 Bool)
(declare-const tmp%25 Bool)
(declare-const tmp%26 Bool)
(declare-const tmp%27 Bool)
(declare-const tmp%28 Bool)
(declare-const tmp%29 Bool)
(declare-const tmp%30 Bool)
(declare-const tmp%31 Bool)
(declare-const tmp%32 Bool)
(declare-const tmp%33 Bool)
(declare-const tmp%34 Bool)
(declare-const tmp%35 Bool)
(declare-const verus_tmp@ vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)
(declare-const container_perm@0 vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)
(declare-const container@ lib!process_manager.container.Container.)
(declare-const quota@ Int)
(declare-const depth@ Int)
(declare-const uppertree_seq@ vstd!seq.Seq<usize.>.)
(declare-const container_perm$1@0 vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)
(declare-const child_list_node_ref@ Int)
(declare-const new_upper_tree_ghost@ vstd!seq.Seq<usize.>.)
(declare-const tmp%%@ tuple%2.)
(declare-const new_container_ptr@ Int)
(declare-const container_perm$2@ vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.))
(assert (uInv SZ container_ptr!))
(assert (uInv SZ init_quota!))
(assert (uInv SZ page_ptr_1!))
(assert (has_type page_perm_1! (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)))))
(assert (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))
(assert (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0))))) (I container_ptr!)))
(assert (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0))))) (I page_ptr_1!)) false))
(assert (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!)))))))))) lib!define.CONTAINER_CHILD_LIST_LEN.?))
(assert (< (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!)))))))) (- (uHi SZ) 1)))
(assert (>= (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!)))))))) (Add init_quota! 3)))
(assert (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm_1!)))
(assert (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm_1!) page_ptr_1!))
(declare-const container_perm@1 vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)
(declare-const self!@1 lib!process_manager.container_tree_spec_impl.ContainerTree.)
(declare-const container_perm$1@1 vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)
(declare-const container_perm$1@2 vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.)
(declare-const self!@2 lib!process_manager.container_tree_spec_impl.ContainerTree.)
(declare-const self!@3 lib!process_manager.container_tree_spec_impl.ContainerTree.)
(declare-const self!@4 lib!process_manager.container_tree_spec_impl.ContainerTree.)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%30 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%31 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%32 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%33 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%34 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%35 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%36 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%37 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%38 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%39 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%40 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%41 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%42 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%43 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%44 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%45 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%46 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%47 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%48 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%49 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%50 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%51 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%52 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%53 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%54 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%55 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%56 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%57 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%58 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%59 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%60 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%61 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%62 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%63 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%64 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%65 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%66 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%67 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%68 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%69 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%70 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%71 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%72 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%73 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%74 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%75 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%76 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%77 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%78 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%79 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%80 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%81 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%82 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%83 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%84 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%85 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%86 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%87 Bool)
(assert (not (=> (= tmp%2 (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (and (=> %%location_label%%0 (req%vstd!map.impl&%0.tracked_borrow. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. tmp%2) (I container_ptr!))) (=> (ens%vstd!map.impl&%0.tracked_borrow. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. tmp%2) (I container_ptr!) tmp%1) (=> (= verus_tmp@ (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. tmp%1)) (=> (= verus_tmp_container_perm@ verus_tmp@) (=> (= container_perm@1 verus_tmp_container_perm@) (=> (ens%vstd!simple_pptr.impl&%0.from_usize. $ TYPE%lib!process_manager.container.Container. container_ptr! tmp%3) (and (=> %%location_label%%1 (req%vstd!simple_pptr.impl&%4.borrow. $ TYPE%lib!process_manager.container.Container. tmp%3 (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm@1))) (=> (ens%vstd!simple_pptr.impl&%4.borrow. $ TYPE%lib!process_manager.container.Container. tmp%3 (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm@1) tmp%4) (=> (= container@ (%Poly%lib!process_manager.container.Container. tmp%4)) (=> (= quota@ (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. container@)))) (=> (= depth@ (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. container@)))) (=> (= uppertree_seq@ (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. container@)))) (and (=> %%location_label%%2 (req%vstd!map.impl&%0.tracked_remove. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))) (=> (= (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container self!@0) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container self!@1)) (=> (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@1) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (=> (ens%vstd!map.impl&%0.tracked_remove. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@1)))) (I container_ptr!) tmp%5) (=> (= container_perm$1@0 (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. tmp%5)) (and (=> %%location_label%%3 (uInv SZ (Sub quota@ init_quota!))) (and (=> %%location_label%%4 (uInv SZ (Sub (uClip SZ (Sub quota@ init_quota!)) 3))) (=> (= tmp%6 (uClip SZ (Sub (uClip SZ (Sub quota@ init_quota!)) 3))) (and (=> %%location_label%%5 (req%lib!process_manager.container_util_t.container_set_mem_quota. container_ptr! container_perm$1@0 tmp%6)) (=> (ens%lib!process_manager.container_util_t.container_set_mem_quota. container_ptr! container_perm$1@0 container_perm$1@1 tmp%6) (and (=> %%location_label%%6 (req%lib!process_manager.container_util_t.container_push_child. container_ptr! container_perm$1@1 page_ptr_1!)) (=> (ens%lib!process_manager.container_util_t.container_push_child. container_ptr! container_perm$1@1 container_perm$1@2 page_ptr_1! child_list_node_ref@) (=> (= (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container self!@1) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container self!@2)) (=> (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@2) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (=> (ens%vstd!map.impl&%0.tracked_insert. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@1)))) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@2)))) (I container_ptr!) (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm$1@2)) (=> (= new_upper_tree_ghost@ (%Poly%vstd!seq.Seq<usize.>. (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!)))) (=> (ens%lib!array_set.impl&%0.new. $ (CONST_INT 32) tmp%7) (and (=> %%location_label%%7 (uInv SZ (Add depth@ 1))) (=> (= tmp%8 (uClip SZ (Add depth@ 1))) (=> (= tmp%9 (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (and (=> %%location_label%%8 (req%lib!process_manager.container_util_t.page_to_container_tree_version_1. page_ptr_1! page_perm_1! container_ptr! child_list_node_ref@ init_quota! tmp%7 tmp%8 tmp%9 new_upper_tree_ghost@)) (=> (ens%lib!process_manager.container_util_t.page_to_container_tree_version_1. page_ptr_1! page_perm_1! container_ptr! child_list_node_ref@ init_quota! tmp%7 tmp%8 tmp%9 new_upper_tree_ghost@ tmp%%@) (=> (= new_container_ptr@ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (=> (= container_perm$2@ (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (=> (= (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container self!@2) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container self!@3)) (=> (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@3) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (=> (ens%vstd!map.impl&%0.tracked_insert. $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@2)))) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@3)))) (I new_container_ptr@) (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>. container_perm$2@)) (and (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> %%location_label%%9 (forall ((u_ptr$ Poly)) (! (=> (has_type u_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@3)))) (I container_ptr!))))))))) (I container_ptr!)) u_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@3))))) u_ptr$))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@3)))) (I container_ptr!))))))))) u_ptr$)))))) (=> (forall ((u_ptr$ Poly)) (! (=> (has_type u_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@3)))) (I container_ptr!))))))))) (I container_ptr!)) u_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@3))))) u_ptr$))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@3)))) (I container_ptr!))))))))) u_ptr$)))) (=> (= tmp%10 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. new_upper_tree_ghost@) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@3)))) (I container_ptr!))))))))) (I container_ptr!)))) (and (=> %%location_label%%10 tmp%10) (=> tmp%10 (and (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> %%location_label%%11 (forall ((u_ptr$ Poly)) (! (=> (has_type u_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!)) u_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@3))))) u_ptr$))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!)) u_ptr$)))))) (=> (forall ((u_ptr$ Poly)) (! (=> (has_type u_ptr$ (UINT SZ)) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!)) u_ptr$) (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@3))))) u_ptr$))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!)) u_ptr$)))) (and (=> %%location_label%%12 (req%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container1. self!@3 new_upper_tree_ghost@ new_container_ptr@)) (=> (has_type (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4) TYPE%lib!process_manager.container_tree_spec_impl.ContainerTree.) (=> (ens%lib!process_manager.container_tree_spec_impl.impl&%2.upper_tree_add_container1. self!@3 self!@4 new_upper_tree_ghost@ new_container_ptr@) (=> (= tmp%11 (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!)) false)) (and (=> %%location_label%%13 tmp%11) (=> tmp%11 (=> (= tmp%12 (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I new_container_ptr@)) false)) (and (=> %%location_label%%14 tmp%12) (=> tmp%12 (and (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> %%location_label%%15 (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!)) (I container_ptr!)))) (=> (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!)) (I container_ptr!)) (and (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> %%location_label%%16 (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!)) (I new_container_ptr@)) false))) (=> (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!)) (I new_container_ptr@)) false) (and (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> (ens%lib!lemma.lemma_u.seq_push_unique_lemma. $ (UINT SZ)) (=> %%location_label%%17 (vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!)))))) (=> (vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. uppertree_seq@) (I container_ptr!))) (and (and (=> (ens%lib!lemma.lemma_u.seq_push_unique_lemma. $ (UINT SZ)) (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> (= tmp%13 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (not (= (%I c_ptr$) new_container_ptr@))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))) (and (=> %%location_label%%18 tmp%13) (=> tmp%13 (=> (= tmp%14 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (not (= (%I c_ptr$) new_container_ptr@))) (and (and (and (and (and (and (and (and (and (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$))))) (and (=> %%location_label%%19 tmp%14) (=> tmp%14 (=> (= tmp%15 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@))))) (and (=> %%location_label%%20 tmp%15) (=> tmp%15 (=> (= tmp%16 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@))) new_container_ptr@)) (and (=> %%location_label%%21 tmp%16) (=> tmp%16 (=> (= tmp%17 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@))))))))))) (and (=> %%location_label%%22 tmp%17) (=> tmp%17 (=> (= tmp%18 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@))))))))))) (and (=> %%location_label%%23 tmp%18) (=> tmp%18 (=> (= tmp%19 (lib!array_set.impl&%0.wf.? $ (CONST_INT 32) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@))))))))))) (and (=> %%location_label%%24 tmp%19) (=> tmp%19 (=> (= tmp%20 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@))))))))))) (and (=> %%location_label%%25 tmp%20) (=> tmp%20 (=> (= tmp%21 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@))))))))))) (and (=> %%location_label%%26 tmp%21) (=> tmp%21 (=> (= tmp%22 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@))))))))))) (and (=> %%location_label%%27 tmp%22) (=> tmp%22 (=> (= tmp%23 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@))))))))))) (and (=> %%location_label%%28 tmp%23) (=> tmp%23 (=> (= tmp%24 (vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@))))))))))) (and (=> %%location_label%%29 tmp%24) (=> tmp%24 (=> (= tmp%25 (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@))))))))))) (and (=> %%location_label%%30 tmp%25) (=> tmp%25 (=> (= tmp%26 (= (vstd!seq.Seq.len.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@)))))))))) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I new_container_ptr@)))))))))) (and (=> %%location_label%%31 tmp%26) (=> tmp%26 (=> (= tmp%27 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))) (and (=> %%location_label%%32 tmp%27) (=> tmp%27 (=> (= tmp%28 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)) (%I c_ptr$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))) (and (=> %%location_label%%33 tmp%28) (=> tmp%28 (=> (= tmp%29 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))))) (and (=> %%location_label%%34 tmp%29) (=> tmp%29 (=> (= tmp%30 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))))) (and (=> %%location_label%%35 tmp%30) (=> tmp%30 (=> (= tmp%31 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))) :pattern ((vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))))) (and (=> %%location_label%%36 tmp%31) (=> tmp%31 (=> (= tmp%32 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))) c_ptr$) false))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))) c_ptr$))))) (and (=> %%location_label%%37 tmp%32) (=> tmp%32 (=> (= tmp%33 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))) :pattern ((vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))))) (and (=> %%location_label%%38 tmp%33) (=> tmp%33 (=> (= tmp%34 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (= (vstd!seq.Seq.len.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))))) :pattern ((vstd!seq.Seq.len.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))) (and (=> %%location_label%%39 tmp%34) (=> tmp%34 (=> %%location_label%%40 (lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (=> (lib!process_manager.container_tree_spec_impl.impl&%0.container_perms_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)) (and (=> %%location_label%%41 (lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))) (=> (lib!process_manager.container_tree_spec_impl.impl&%0.container_root_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)) (and (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> (= tmp%35 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (not (= (%I c_ptr$) (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/root_container (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))))) (not (= (%I c_ptr$) new_container_ptr@))) (and (and (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (= (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))) (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$))))))))))) :pattern ((lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))) (and (=> %%location_label%%42 tmp%35) (=> tmp%35 (=> %%location_label%%43 (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))))) (=> (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_depth_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)) (and (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> (ens%lib!lemma.lemma_u.seq_push_unique_lemma. $ (UINT SZ)) (=> %%location_label%%44 (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) (=> (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_exclusive.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)) (=> %%location_label%%45 (lib!process_manager.container_tree_spec_impl.impl&%0.rest_specs.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))))))))) (=> (lib!process_manager.container_tree_spec_impl.impl&%0.rest_specs.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)) (and (and (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> (ens%lib!lemma.lemma_u.seq_push_unique_lemma. $ (UINT SZ)) (=> %%location_label%%46 (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) (=> (lib!process_manager.container_tree_spec_impl.impl&%0.container_subtree_set_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)) (and (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> (ens%lib!lemma.lemma_u.seq_push_unique_lemma. $ (UINT SZ)) (=> %%location_label%%47 (lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) (=> (lib!process_manager.container_tree_spec_impl.impl&%0.container_uppertree_seq_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)) (=> %%location_label%%48 (lib!process_manager.container_tree_spec_impl.impl&%0.tree_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))))) (=> (lib!process_manager.container_tree_spec_impl.impl&%0.tree_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)) (and (and (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> %%location_label%%49 (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (=> (lib!process_manager.container_tree_spec_impl.impl&%0.container_childern_list_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)) (and (=> (ens%lib!lemma.lemma_u.seq_push_lemma. $ (UINT SZ)) (=> %%location_label%%50 (lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (=> (lib!process_manager.container_tree_spec_impl.impl&%0.containers_linkedlist_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)) (=> %%location_label%%51 (lib!process_manager.container_tree_spec_impl.impl&%0.linked_list_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))))) (=> (lib!process_manager.container_tree_spec_impl.impl&%0.linked_list_wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)) (and (=> %%location_label%%52 (lib!process_manager.container_tree_spec_impl.impl&%0.wf.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))) (and (=> %%location_label%%53 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container_tree_spec_impl.impl&%0.container_dom.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0))) (I page_ptr_1!)))) (and (=> %%location_label%%54 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4) (I page_ptr_1!)))))) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0) (I container_ptr!)))))) (I container_ptr!)))) (and (=> %%location_label%%55 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0))))) c_ptr$) (not (= (%I c_ptr$) container_ptr!))) (and (and (and (and (and (and (and (and (and (and (and (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$))))))))) (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%core!option.Option. $ (SINT 32)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$)) :pattern ((is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))) :pattern ((vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))) :pattern ((lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/parent_rev_ptr (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) :pattern ((lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))) (and (=> %%location_label%%56 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$) (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4) (I page_ptr_1!)))))) c_ptr$)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$)))))))) (I page_ptr_1!))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$)) :pattern ((lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))) (and (=> %%location_label%%57 (forall ((c_ptr$ Poly)) (! (=> (has_type c_ptr$ (UINT SZ)) (=> (and (vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0))))) c_ptr$) (= (vstd!seq_lib.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (Poly%lib!process_manager.container.Container. (lib!process_manager.container_tree_spec_impl.impl&%0.spec_get_container.? (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4) (I page_ptr_1!)))))) c_ptr$) false)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$)))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) c_ptr$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (vstd!map.impl&%0.dom.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4))))) c_ptr$)) :pattern ((lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) c_ptr$))))))))))) (and (=> %%location_label%%58 (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!))))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))))))))))) (and (=> %%location_label%%59 (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!))))))))) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))))))))))) (and (=> %%location_label%%60 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!)))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!)))))))))) (I page_ptr_1!)))) (and (=> %%location_label%%61 (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!))))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))))))))))) (and (=> %%location_label%%62 (ext_eq false INT (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!))))))))) (I (Sub (Sub (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!)))))))) init_quota!) 3)))) (and (=> %%location_label%%63 (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!))))))))) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))))))))))) (and (=> %%location_label%%64 (ext_eq false (TYPE%lib!array_set.ArraySet. $ (CONST_INT 32)) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!))))))))) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))))))))))) (and (=> %%location_label%%65 (ext_eq false (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 10)) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!))))))))) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))))))))))) (and (=> %%location_label%%66 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!))))))))) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))))))))))) (and (=> %%location_label%%67 (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!))))))))) (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))))))))))) (and (=> %%location_label%%68 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!))))))))) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))))))))))) (and (=> %%location_label%%69 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I container_ptr!))))))))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))))))))) (I page_ptr_1!)))) (and (=> %%location_label%%70 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ)))) (and (=> %%location_label%%71 (ext_eq false (TYPE%core!option.Option. $ (UINT SZ)) (Poly%core!option.Option. (lib!process_manager.container.Container./Container/parent (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))) (Poly%core!option.Option. (core!option.Option./Some (I container_ptr!))))) (and (=> %%location_label%%72 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/children (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ)))) (and (=> %%location_label%%73 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))))) (and (=> %%location_label%%74 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_endpoints (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ)))) (and (=> %%location_label%%75 (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_quota (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))) (I init_quota!))) (and (=> %%location_label%%76 (ext_eq false (UINT SZ) (I (lib!process_manager.container.Container./Container/mem_used (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))) (I 0))) (and (=> %%location_label%%77 (lib!array_set.impl&%0.wf.? $ (CONST_INT 32) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))))) (and (=> %%location_label%%78 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!array_set.impl&%0.view.? $ (CONST_INT 32) (Poly%lib!array_set.ArraySet. (lib!process_manager.container.Container./Container/owned_cpus (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (and (=> %%location_label%%79 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))))) (and (=> %%location_label%%80 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!)))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ)))) (and (=> %%location_label%%81 (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))))) (and (=> %%location_label%%82 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/owned_threads (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (and (=> %%location_label%%83 (ext_eq false INT (I (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))) (I (Add (lib!process_manager.container.Container./Container/depth (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!)))))))) 1)))) (and (=> %%location_label%%84 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (Poly%vstd!seq.Seq<usize.>. (lib!process_manager.container.Container./Container/uppertree_seq (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@0)))) (I container_ptr!))))))))) (I container_ptr!)))) (and (=> %%location_label%%85 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.container.Container./Container/subtree_set (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ)))) (and (=> %%location_label%%86 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/owned_procs (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))))) (=> %%location_label%%87 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 10) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.container.Container./Container/scheduler (%Poly%lib!process_manager.container.Container. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.container.Container. (vstd!map.impl&%0.index.? $ (UINT SZ) $ (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.container.Container.) (Poly%vstd!map.Map<usize./vstd!simple_pptr.PointsTo<lib!process_manager.container.Container.>.>. (lib!process_manager.container_tree_spec_impl.ContainerTree./ContainerTree/container_perms (%Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. (Poly%lib!process_manager.container_tree_spec_impl.ContainerTree. self!@4)))) (I page_ptr_1!))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
