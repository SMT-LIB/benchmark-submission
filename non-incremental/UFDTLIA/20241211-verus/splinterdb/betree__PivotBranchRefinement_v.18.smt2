(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project SplinterDB 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.restrict. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.take. FuelId)
(declare-const fuel%vstd!seq.impl&%0.skip. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!seq.impl&%0.first. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.index_of. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.drop_last. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.insert. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.zip_with. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.fold_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.fold_left_alt. FuelId)
(declare-const fuel%vstd!seq_lib.seq_to_set_is_finite. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_choose_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_choose_len. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%vstd!set_lib.axiom_is_empty. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.query. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.query_internal. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.insert. FuelId)
(declare-const fuel%lib!betree.PivotBranchRefinement_v.impl&%0.i. FuelId)
(declare-const fuel%lib!betree.PivotBranchRefinement_v.impl&%0.append_via_insert. FuelId)
(declare-const fuel%lib!betree.PivotBranchRefinement_v.map_all_keys. FuelId)
(declare-const fuel%lib!betree.PivotBranchRefinement_v.union_all_keys. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%0.arrow_pivot_index. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%0.arrow_SplitIndex_pivot. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%0.arrow_SplitLeaf_pivot. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%1.get_pivot. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%2.arrow_pivots. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%2.arrow_msgs. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%2.arrow_keys. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%2.arrow_children. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.all_keys. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.children_keys. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.wf. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.route. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.route_ensures. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.query. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.insert_leaf. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.insert. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.grow. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.append. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.append_leaf. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.split_leaf. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.sub_index. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.split_index. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.split_node. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.can_split_child_of_index. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.split_child_of_index. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%3.split. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%4.subpath. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%4.valid. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%4.target. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%4.replaced_children. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%4.substitute. FuelId)
(declare-const fuel%lib!betree.PivotBranch_v.impl&%4.path_equiv. FuelId)
(declare-const fuel%lib!betree.Utils_v.union_seq_of_sets. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.lt. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.is_strictly_sorted. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.largest_lte. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.largest_lt. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.map_pivoted_union. FuelId)
(declare-const fuel%lib!spec.KeyType_t.impl&%1.is_sorted. FuelId)
(declare-const fuel%lib!spec.Messages_t.nop_delta. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!map_lib.impl&%0.restrict. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.take. fuel%vstd!seq.impl&%0.skip. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!seq.impl&%0.first. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.index_of. fuel%vstd!seq_lib.impl&%0.drop_last. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.impl&%0.insert. fuel%vstd!seq_lib.impl&%0.zip_with. fuel%vstd!seq_lib.impl&%0.fold_left. fuel%vstd!seq_lib.impl&%0.fold_left_alt. fuel%vstd!seq_lib.seq_to_set_is_finite. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.impl&%0.choose. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_choose_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!set.axiom_set_choose_len. fuel%vstd!set_lib.impl&%0.is_empty. fuel%vstd!set_lib.axiom_is_empty. fuel%lib!betree.Buffer_v.impl&%0.query. fuel%lib!betree.Buffer_v.impl&%1.query_internal. fuel%lib!betree.Buffer_v.impl&%1.insert. fuel%lib!betree.PivotBranchRefinement_v.impl&%0.i. fuel%lib!betree.PivotBranchRefinement_v.impl&%0.append_via_insert. fuel%lib!betree.PivotBranchRefinement_v.map_all_keys. fuel%lib!betree.PivotBranchRefinement_v.union_all_keys. fuel%lib!betree.PivotBranch_v.impl&%0.arrow_pivot_index. fuel%lib!betree.PivotBranch_v.impl&%0.arrow_SplitIndex_pivot. fuel%lib!betree.PivotBranch_v.impl&%0.arrow_SplitLeaf_pivot. fuel%lib!betree.PivotBranch_v.impl&%1.wf. fuel%lib!betree.PivotBranch_v.impl&%1.get_pivot. fuel%lib!betree.PivotBranch_v.impl&%2.arrow_pivots. fuel%lib!betree.PivotBranch_v.impl&%2.arrow_msgs. fuel%lib!betree.PivotBranch_v.impl&%2.arrow_keys. fuel%lib!betree.PivotBranch_v.impl&%2.arrow_children. fuel%lib!betree.PivotBranch_v.impl&%3.all_keys. fuel%lib!betree.PivotBranch_v.impl&%3.children_keys. fuel%lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound. fuel%lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound. fuel%lib!betree.PivotBranch_v.impl&%3.wf. fuel%lib!betree.PivotBranch_v.impl&%3.route. fuel%lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots. fuel%lib!betree.PivotBranch_v.impl&%3.route_ensures. fuel%lib!betree.PivotBranch_v.impl&%3.query. fuel%lib!betree.PivotBranch_v.impl&%3.insert_leaf. fuel%lib!betree.PivotBranch_v.impl&%3.insert. fuel%lib!betree.PivotBranch_v.impl&%3.grow. fuel%lib!betree.PivotBranch_v.impl&%3.append. fuel%lib!betree.PivotBranch_v.impl&%3.append_leaf. fuel%lib!betree.PivotBranch_v.impl&%3.split_leaf. fuel%lib!betree.PivotBranch_v.impl&%3.sub_index. fuel%lib!betree.PivotBranch_v.impl&%3.split_index. fuel%lib!betree.PivotBranch_v.impl&%3.split_node. fuel%lib!betree.PivotBranch_v.impl&%3.can_split_child_of_index. fuel%lib!betree.PivotBranch_v.impl&%3.split_child_of_index. fuel%lib!betree.PivotBranch_v.impl&%3.split. fuel%lib!betree.PivotBranch_v.impl&%4.subpath. fuel%lib!betree.PivotBranch_v.impl&%4.valid. fuel%lib!betree.PivotBranch_v.impl&%4.target. fuel%lib!betree.PivotBranch_v.impl&%4.replaced_children. fuel%lib!betree.PivotBranch_v.impl&%4.substitute. fuel%lib!betree.PivotBranch_v.impl&%4.path_equiv. fuel%lib!betree.Utils_v.union_seq_of_sets. fuel%lib!spec.KeyType_t.impl&%1.lte. fuel%lib!spec.KeyType_t.impl&%1.lt. fuel%lib!spec.KeyType_t.impl&%1.is_strictly_sorted. fuel%lib!spec.KeyType_t.impl&%1.largest_lte. fuel%lib!spec.KeyType_t.impl&%1.largest_lt. fuel%lib!spec.KeyType_t.impl&%1.map_pivoted_union. fuel%lib!spec.KeyType_t.impl&%1.is_sorted. fuel%lib!spec.Messages_t.nop_delta. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (fuel_bool_default fuel%vstd!seq_lib.seq_to_set_is_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_choose_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.) (fuel_bool_default fuel%vstd!set.axiom_set_choose_len.))))
(assert (=> (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!set_lib.axiom_is_empty.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.route_ensures.))
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. 0)
(declare-sort vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.KeyType_t.Key.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.Messages_t.Message.>. 0)
(declare-sort vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. 0)
(declare-sort vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>. 0)
(declare-sort vstd!set.Set<lib!spec.KeyType_t.Key.>. 0)
(declare-datatypes ((lib!betree.Buffer_v.SimpleBuffer. 0) (lib!betree.PivotBranchRefinement_v.QueryLabel. 0) (lib!betree.PivotBranchRefinement_v.InsertLabel. 0) (lib!betree.PivotBranchRefinement_v.AppendLabel. 0) (lib!betree.PivotBranchRefinement_v.InternalLabel. 0) (lib!betree.PivotBranch_v.SplitArg. 0) (lib!betree.PivotBranch_v.Node. 0) (lib!betree.PivotBranch_v.Path. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (tuple%0. 0) (tuple%2. 0)) (((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.))) ((lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/?key lib!spec.KeyType_t.Key.) (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/?msg lib!spec.Messages_t.Message.))) ((lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/?key lib!spec.KeyType_t.Key.) (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/?msg lib!spec.Messages_t.Message.) (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/?path lib!betree.PivotBranch_v.Path.))) ((lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/?keys vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/?msgs vstd!seq.Seq<lib!spec.Messages_t.Message.>.) (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/?path lib!betree.PivotBranch_v.Path.))) ((lib!betree.PivotBranchRefinement_v.InternalLabel./InternalLabel )) ((lib!betree.PivotBranch_v.SplitArg./SplitIndex (lib!betree.PivotBranch_v.SplitArg./SplitIndex/?pivot lib!spec.KeyType_t.Key.) (lib!betree.PivotBranch_v.SplitArg./SplitIndex/?pivot_index Int)) (lib!betree.PivotBranch_v.SplitArg./SplitLeaf (lib!betree.PivotBranch_v.SplitArg./SplitLeaf/?pivot lib!spec.KeyType_t.Key.))) ((lib!betree.PivotBranch_v.Node./Index (lib!betree.PivotBranch_v.Node./Index/?pivots vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (lib!betree.PivotBranch_v.Node./Index/?children vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>.)) (lib!betree.PivotBranch_v.Node./Leaf (lib!betree.PivotBranch_v.Node./Leaf/?keys vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (lib!betree.PivotBranch_v.Node./Leaf/?msgs vstd!seq.Seq<lib!spec.Messages_t.Message.>.))) ((lib!betree.PivotBranch_v.Path./Path (lib!betree.PivotBranch_v.Path./Path/?node lib!betree.PivotBranch_v.Node.) (lib!betree.PivotBranch_v.Path./Path/?key lib!spec.KeyType_t.Key.) (lib!betree.PivotBranch_v.Path./Path/?depth Int))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (lib!betree.Buffer_v.SimpleBuffer.) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/key (lib!betree.PivotBranchRefinement_v.QueryLabel.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/msg (lib!betree.PivotBranchRefinement_v.QueryLabel.) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/key (lib!betree.PivotBranchRefinement_v.InsertLabel.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/msg (lib!betree.PivotBranchRefinement_v.InsertLabel.) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/path (lib!betree.PivotBranchRefinement_v.InsertLabel.) lib!betree.PivotBranch_v.Path.)
(declare-fun lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/keys (lib!betree.PivotBranchRefinement_v.AppendLabel.) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/msgs (lib!betree.PivotBranchRefinement_v.AppendLabel.) vstd!seq.Seq<lib!spec.Messages_t.Message.>.)
(declare-fun lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/path (lib!betree.PivotBranchRefinement_v.AppendLabel.) lib!betree.PivotBranch_v.Path.)
(declare-fun lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot (lib!betree.PivotBranch_v.SplitArg.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot_index (lib!betree.PivotBranch_v.SplitArg.) Int)
(declare-fun lib!betree.PivotBranch_v.SplitArg./SplitLeaf/pivot (lib!betree.PivotBranch_v.SplitArg.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PivotBranch_v.Node./Index/pivots (lib!betree.PivotBranch_v.Node.) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.PivotBranch_v.Node./Index/children (lib!betree.PivotBranch_v.Node.) vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>.)
(declare-fun lib!betree.PivotBranch_v.Node./Leaf/keys (lib!betree.PivotBranch_v.Node.) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.PivotBranch_v.Node./Leaf/msgs (lib!betree.PivotBranch_v.Node.) vstd!seq.Seq<lib!spec.Messages_t.Message.>.)
(declare-fun lib!betree.PivotBranch_v.Path./Path/node (lib!betree.PivotBranch_v.Path.) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranch_v.Path./Path/key (lib!betree.PivotBranch_v.Path.) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PivotBranch_v.Path./Path/depth (lib!betree.PivotBranch_v.Path.) Int)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!betree.Buffer_v.SimpleBuffer. Type)
(declare-const TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel. Type)
(declare-const TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel. Type)
(declare-const TYPE%lib!betree.PivotBranchRefinement_v.AppendLabel. Type)
(declare-const TYPE%lib!betree.PivotBranchRefinement_v.InternalLabel. Type)
(declare-const TYPE%lib!betree.PivotBranch_v.SplitArg. Type)
(declare-const TYPE%lib!betree.PivotBranch_v.Node. Type)
(declare-const TYPE%lib!betree.PivotBranch_v.Path. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (Poly) vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (vstd!seq.Seq<lib!spec.Messages_t.Message.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (Poly) vstd!seq.Seq<lib!spec.Messages_t.Message.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (Poly) vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)
(declare-fun Poly%vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>. (vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>. (Poly) vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.Set<lib!spec.KeyType_t.Key.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.SimpleBuffer.) Poly)
(declare-fun %Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. (lib!betree.PivotBranchRefinement_v.QueryLabel.) Poly)
(declare-fun %Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. (Poly) lib!betree.PivotBranchRefinement_v.QueryLabel.)
(declare-fun Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. (lib!betree.PivotBranchRefinement_v.InsertLabel.) Poly)
(declare-fun %Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. (Poly) lib!betree.PivotBranchRefinement_v.InsertLabel.)
(declare-fun Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. (lib!betree.PivotBranchRefinement_v.AppendLabel.) Poly)
(declare-fun %Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. (Poly) lib!betree.PivotBranchRefinement_v.AppendLabel.)
(declare-fun Poly%lib!betree.PivotBranchRefinement_v.InternalLabel. (lib!betree.PivotBranchRefinement_v.InternalLabel.) Poly)
(declare-fun %Poly%lib!betree.PivotBranchRefinement_v.InternalLabel. (Poly) lib!betree.PivotBranchRefinement_v.InternalLabel.)
(declare-fun Poly%lib!betree.PivotBranch_v.SplitArg. (lib!betree.PivotBranch_v.SplitArg.) Poly)
(declare-fun %Poly%lib!betree.PivotBranch_v.SplitArg. (Poly) lib!betree.PivotBranch_v.SplitArg.)
(declare-fun Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Node.) Poly)
(declare-fun %Poly%lib!betree.PivotBranch_v.Node. (Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranch_v.Path.) Poly)
(declare-fun %Poly%lib!betree.PivotBranch_v.Path. (Poly) lib!betree.PivotBranch_v.Path.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)) )) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) ))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBranch_v.Node.)) (= x (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (%Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBranch_v.Node.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBranch_v.Node.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.PivotBranch_v.Node.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.)) (= x (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.Messages_t.Message.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.Messages_t.Message.)) (= x (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (%Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.Messages_t.Message.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) (= x (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (%Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)))) )))
(assert (forall ((x vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)))) )))
(assert (forall ((x vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>.)) (! (= x (%Poly%vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>. (Poly%vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>. x))) :pattern ((Poly%vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) (= x (Poly%vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>. (%Poly%vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)))) )))
(assert (forall ((x vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>.)) (! (has_type (Poly%vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) :pattern ((has_type (Poly%vstd!seq.Seq<tuple%2<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) (= x (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= x (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. x))) :pattern ((Poly%lib!betree.Buffer_v.SimpleBuffer. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (= x (Poly%lib!betree.Buffer_v.SimpleBuffer. (%Poly%lib!betree.Buffer_v.SimpleBuffer. x)))) :pattern ((has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map x)) :pattern ((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.) :pattern ((has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type y TYPE%lib!betree.Buffer_v.SimpleBuffer.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. x))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. y))))) (ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) :pattern ((ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.QueryLabel.)) (! (= x (%Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. (Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. x))) :pattern ((Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel.) (= x (Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. (%Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_msg! lib!spec.Messages_t.Message.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Message. _msg!) TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel _key! _msg!)) TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel.)) :pattern ((has_type (Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel _key! _msg!)) TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel.)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.QueryLabel.)) (! (= (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/key x) (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/?key x)) :pattern ((lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/key (%Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/key (%Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. x)) (has_type x TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel.)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.QueryLabel.)) (! (= (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/msg x) (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/?msg x)) :pattern ((lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/msg x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/msg (%Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/msg (%Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. x)) (has_type x TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel.) (has_type y TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel.) (= (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/key (%Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. x)) (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/key (%Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. y))) (= (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/msg (%Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. x)) (lib!betree.PivotBranchRefinement_v.QueryLabel./QueryLabel/msg (%Poly%lib!betree.PivotBranchRefinement_v.QueryLabel. y)))) (ext_eq deep TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel. x y)) :pattern ((ext_eq deep TYPE%lib!betree.PivotBranchRefinement_v.QueryLabel. x y)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.InsertLabel.)) (! (= x (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. (Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x))) :pattern ((Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.) (= x (Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_msg! lib!spec.Messages_t.Message.) (_path! lib!betree.PivotBranch_v.Path.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Message. _msg!) TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!betree.PivotBranch_v.Path. _path!) TYPE%lib!betree.PivotBranch_v.Path.)) (has_type (Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel _key! _msg! _path!)) TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.)) :pattern ((has_type (Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel _key! _msg! _path!)) TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.InsertLabel.)) (! (= (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/key x) (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/?key x)) :pattern ((lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/key (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/key (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x)) (has_type x TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.InsertLabel.)) (! (= (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/msg x) (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/?msg x)) :pattern ((lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/msg x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/msg (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x))) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/msg (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x)) (has_type x TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.InsertLabel.)) (! (= (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/path x) (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/?path x)) :pattern ((lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.) (has_type (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/path (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x))) TYPE%lib!betree.PivotBranch_v.Path.)) :pattern ((lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/path (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x)) (has_type x TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.) (has_type y TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel.) (= (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/key (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x)) (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/key (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. y))) (= (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/msg (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x)) (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/msg (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. y))) (ext_eq deep TYPE%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/path (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. x))) (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranchRefinement_v.InsertLabel./InsertLabel/path (%Poly%lib!betree.PivotBranchRefinement_v.InsertLabel. y))))) (ext_eq deep TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel. x y)) :pattern ((ext_eq deep TYPE%lib!betree.PivotBranchRefinement_v.InsertLabel. x y)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.AppendLabel.)) (! (= x (%Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. (Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. x))) :pattern ((Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranchRefinement_v.AppendLabel.) (= x (Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. (%Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBranchRefinement_v.AppendLabel.)) )))
(assert (forall ((_keys! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (_msgs! vstd!seq.Seq<lib!spec.Messages_t.Message.>.) (_path! lib!betree.PivotBranch_v.Path.)) (! (=> (has_type (Poly%lib!betree.PivotBranch_v.Path. _path!) TYPE%lib!betree.PivotBranch_v.Path.) (has_type (Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel _keys! _msgs! _path!)) TYPE%lib!betree.PivotBranchRefinement_v.AppendLabel.)) :pattern ((has_type (Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel _keys! _msgs! _path!)) TYPE%lib!betree.PivotBranchRefinement_v.AppendLabel.)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.AppendLabel.)) (! (= (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/keys x) (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/?keys x)) :pattern ((lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/keys x)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.AppendLabel.)) (! (= (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/msgs x) (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/?msgs x)) :pattern ((lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/msgs x)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.AppendLabel.)) (! (= (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/path x) (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/?path x)) :pattern ((lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/path x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranchRefinement_v.AppendLabel.) (has_type (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/path (%Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. x))) TYPE%lib!betree.PivotBranch_v.Path.)) :pattern ((lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/path (%Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. x)) (has_type x TYPE%lib!betree.PivotBranchRefinement_v.AppendLabel.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.PivotBranchRefinement_v.AppendLabel.) (has_type y TYPE%lib!betree.PivotBranchRefinement_v.AppendLabel.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.) (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/keys (%Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. x))) (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/keys (%Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. y)))) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.Messages_t.Message.) (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/msgs (%Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. x))) (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/msgs (%Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. y)))) (ext_eq deep TYPE%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/path (%Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. x))) (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranchRefinement_v.AppendLabel./AppendLabel/path (%Poly%lib!betree.PivotBranchRefinement_v.AppendLabel. y))))) (ext_eq deep TYPE%lib!betree.PivotBranchRefinement_v.AppendLabel. x y)) :pattern ((ext_eq deep TYPE%lib!betree.PivotBranchRefinement_v.AppendLabel. x y)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.InternalLabel.)) (! (= x (%Poly%lib!betree.PivotBranchRefinement_v.InternalLabel. (Poly%lib!betree.PivotBranchRefinement_v.InternalLabel. x))) :pattern ((Poly%lib!betree.PivotBranchRefinement_v.InternalLabel. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranchRefinement_v.InternalLabel.) (= x (Poly%lib!betree.PivotBranchRefinement_v.InternalLabel. (%Poly%lib!betree.PivotBranchRefinement_v.InternalLabel. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBranchRefinement_v.InternalLabel.)) )))
(assert (forall ((x lib!betree.PivotBranchRefinement_v.InternalLabel.)) (! (has_type (Poly%lib!betree.PivotBranchRefinement_v.InternalLabel. x) TYPE%lib!betree.PivotBranchRefinement_v.InternalLabel.) :pattern ((has_type (Poly%lib!betree.PivotBranchRefinement_v.InternalLabel. x) TYPE%lib!betree.PivotBranchRefinement_v.InternalLabel.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.PivotBranchRefinement_v.InternalLabel.) (has_type y TYPE%lib!betree.PivotBranchRefinement_v.InternalLabel.)) (ext_eq deep TYPE%lib!betree.PivotBranchRefinement_v.InternalLabel. x y)) :pattern ((ext_eq deep TYPE%lib!betree.PivotBranchRefinement_v.InternalLabel. x y)) )))
(assert (forall ((x lib!betree.PivotBranch_v.SplitArg.)) (! (= x (%Poly%lib!betree.PivotBranch_v.SplitArg. (Poly%lib!betree.PivotBranch_v.SplitArg. x))) :pattern ((Poly%lib!betree.PivotBranch_v.SplitArg. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranch_v.SplitArg.) (= x (Poly%lib!betree.PivotBranch_v.SplitArg. (%Poly%lib!betree.PivotBranch_v.SplitArg. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBranch_v.SplitArg.)) )))
(assert (forall ((_pivot! lib!spec.KeyType_t.Key.) (_pivot_index! Int)) (! (=> (has_type (Poly%lib!spec.KeyType_t.Key. _pivot!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!betree.PivotBranch_v.SplitArg. (lib!betree.PivotBranch_v.SplitArg./SplitIndex _pivot! _pivot_index!)) TYPE%lib!betree.PivotBranch_v.SplitArg.)) :pattern ((has_type (Poly%lib!betree.PivotBranch_v.SplitArg. (lib!betree.PivotBranch_v.SplitArg./SplitIndex _pivot! _pivot_index!)) TYPE%lib!betree.PivotBranch_v.SplitArg.)) )))
(assert (forall ((x lib!betree.PivotBranch_v.SplitArg.)) (! (= (lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot x) (lib!betree.PivotBranch_v.SplitArg./SplitIndex/?pivot x)) :pattern ((lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranch_v.SplitArg.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot (%Poly%lib!betree.PivotBranch_v.SplitArg. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot (%Poly%lib!betree.PivotBranch_v.SplitArg. x)) (has_type x TYPE%lib!betree.PivotBranch_v.SplitArg.)) )))
(assert (forall ((x lib!betree.PivotBranch_v.SplitArg.)) (! (= (lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot_index x) (lib!betree.PivotBranch_v.SplitArg./SplitIndex/?pivot_index x)) :pattern ((lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot_index x)) )))
(assert (forall ((_pivot! lib!spec.KeyType_t.Key.)) (! (=> (has_type (Poly%lib!spec.KeyType_t.Key. _pivot!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!betree.PivotBranch_v.SplitArg. (lib!betree.PivotBranch_v.SplitArg./SplitLeaf _pivot!)) TYPE%lib!betree.PivotBranch_v.SplitArg.)) :pattern ((has_type (Poly%lib!betree.PivotBranch_v.SplitArg. (lib!betree.PivotBranch_v.SplitArg./SplitLeaf _pivot!)) TYPE%lib!betree.PivotBranch_v.SplitArg.)) )))
(assert (forall ((x lib!betree.PivotBranch_v.SplitArg.)) (! (= (lib!betree.PivotBranch_v.SplitArg./SplitLeaf/pivot x) (lib!betree.PivotBranch_v.SplitArg./SplitLeaf/?pivot x)) :pattern ((lib!betree.PivotBranch_v.SplitArg./SplitLeaf/pivot x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranch_v.SplitArg.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranch_v.SplitArg./SplitLeaf/pivot (%Poly%lib!betree.PivotBranch_v.SplitArg. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PivotBranch_v.SplitArg./SplitLeaf/pivot (%Poly%lib!betree.PivotBranch_v.SplitArg. x)) (has_type x TYPE%lib!betree.PivotBranch_v.SplitArg.)) )))
(assert (forall ((x lib!betree.PivotBranch_v.Node.)) (! (= x (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. x))) :pattern ((Poly%lib!betree.PivotBranch_v.Node. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranch_v.Node.) (= x (Poly%lib!betree.PivotBranch_v.Node. (%Poly%lib!betree.PivotBranch_v.Node. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBranch_v.Node.)) )))
(assert (forall ((x lib!betree.PivotBranch_v.Node.)) (! (= (lib!betree.PivotBranch_v.Node./Index/pivots x) (lib!betree.PivotBranch_v.Node./Index/?pivots x)) :pattern ((lib!betree.PivotBranch_v.Node./Index/pivots x)) )))
(assert (forall ((x lib!betree.PivotBranch_v.Node.)) (! (= (lib!betree.PivotBranch_v.Node./Index/children x) (lib!betree.PivotBranch_v.Node./Index/?children x)) :pattern ((lib!betree.PivotBranch_v.Node./Index/children x)) )))
(assert (forall ((x lib!betree.PivotBranch_v.Node.)) (! (= (lib!betree.PivotBranch_v.Node./Leaf/keys x) (lib!betree.PivotBranch_v.Node./Leaf/?keys x)) :pattern ((lib!betree.PivotBranch_v.Node./Leaf/keys x)) )))
(assert (forall ((x lib!betree.PivotBranch_v.Node.)) (! (= (lib!betree.PivotBranch_v.Node./Leaf/msgs x) (lib!betree.PivotBranch_v.Node./Leaf/?msgs x)) :pattern ((lib!betree.PivotBranch_v.Node./Leaf/msgs x)) )))
(assert (forall ((x lib!betree.PivotBranch_v.Node.)) (! (has_type (Poly%lib!betree.PivotBranch_v.Node. x) TYPE%lib!betree.PivotBranch_v.Node.) :pattern ((has_type (Poly%lib!betree.PivotBranch_v.Node. x) TYPE%lib!betree.PivotBranch_v.Node.)) )))
(define-fun is-lib!betree.PivotBranch_v.Node./Index_ ((c lib!betree.PivotBranch_v.Node.)) Bool ((_ is lib!betree.PivotBranch_v.Node./Index) c))
(assert (forall ((x lib!betree.PivotBranch_v.Node.)) (! (=> (is-lib!betree.PivotBranch_v.Node./Index_ x) (height_lt (height (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children x))) (height (Poly%lib!betree.PivotBranch_v.Node. x)))) :pattern ((height (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children x)))) )))
(assert (forall ((x lib!betree.PivotBranch_v.Path.)) (! (= x (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. x))) :pattern ((Poly%lib!betree.PivotBranch_v.Path. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranch_v.Path.) (= x (Poly%lib!betree.PivotBranch_v.Path. (%Poly%lib!betree.PivotBranch_v.Path. x)))) :pattern ((has_type x TYPE%lib!betree.PivotBranch_v.Path.)) )))
(assert (forall ((_node! lib!betree.PivotBranch_v.Node.) (_key! lib!spec.KeyType_t.Key.) (_depth! Int)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (<= 0 _depth!)) (has_type (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranch_v.Path./Path _node! _key! _depth!)) TYPE%lib!betree.PivotBranch_v.Path.)) :pattern ((has_type (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranch_v.Path./Path _node! _key! _depth!)) TYPE%lib!betree.PivotBranch_v.Path.)) )))
(assert (forall ((x lib!betree.PivotBranch_v.Path.)) (! (= (lib!betree.PivotBranch_v.Path./Path/node x) (lib!betree.PivotBranch_v.Path./Path/?node x)) :pattern ((lib!betree.PivotBranch_v.Path./Path/node x)) )))
(assert (forall ((x lib!betree.PivotBranch_v.Path.)) (! (= (lib!betree.PivotBranch_v.Path./Path/key x) (lib!betree.PivotBranch_v.Path./Path/?key x)) :pattern ((lib!betree.PivotBranch_v.Path./Path/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranch_v.Path.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. x)) (has_type x TYPE%lib!betree.PivotBranch_v.Path.)) )))
(assert (forall ((x lib!betree.PivotBranch_v.Path.)) (! (= (lib!betree.PivotBranch_v.Path./Path/depth x) (lib!betree.PivotBranch_v.Path./Path/?depth x)) :pattern ((lib!betree.PivotBranch_v.Path./Path/depth x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.PivotBranch_v.Path.) (<= 0 (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. x)))) :pattern ((lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. x)) (has_type x TYPE%lib!betree.PivotBranch_v.Path.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.PivotBranch_v.Path.) (has_type y TYPE%lib!betree.PivotBranch_v.Path.) (= (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. x)) (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. y))) (= (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. x)) (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. y))) (= (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. x)) (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. y)))) (ext_eq deep TYPE%lib!betree.PivotBranch_v.Path. x y)) :pattern ((ext_eq deep TYPE%lib!betree.PivotBranch_v.Path. x y)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(declare-fun tr_bound%lib!betree.Buffer_v.Buffer. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!betree.Buffer_v.Buffer. Self%&. Self%&)) )))
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.impl&%0.take.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set_lib.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.restrict.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.KeyType_t.impl&%1.lte.? (Poly Poly) Bool)
(declare-fun lib!betree.Buffer_v.Buffer.query.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.query%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.Messages_t.nop_delta.? (Poly) lib!spec.Messages_t.Delta.)
(declare-fun lib!betree.Buffer_v.impl&%1.query_internal.? (Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.Buffer_v.impl&%1.insert.? (Poly Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun vstd!seq_lib.impl&%0.insert.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.index_of.? (Dcr Type Poly Poly) Int)
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.skip.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.first.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.drop_last.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.zip_with.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.fold_left.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.rec%fold_left.? (Dcr Type Dcr Type Poly Poly Poly Fuel) Poly)
(declare-fun vstd!seq_lib.impl&%0.fold_left_alt.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.rec%fold_left_alt.? (Dcr Type Dcr Type Poly Poly Poly Fuel) Poly)
(declare-fun lib!spec.KeyType_t.impl&%1.lt.? (Poly Poly) Bool)
(declare-fun lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? (Poly) Bool)
(declare-fun lib!betree.PivotBranch_v.impl&%2.arrow_children.? (Poly) vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>.)
(declare-fun lib!betree.PivotBranch_v.impl&%2.arrow_pivots.? (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.children_keys.? (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.rec%children_keys.? (Poly Fuel) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.all_keys.? (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.rec%all_keys.? (Poly Fuel) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound.? (Poly Poly) Bool)
(declare-fun lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound.? (Poly Poly) Bool)
(declare-fun lib!betree.PivotBranch_v.impl&%3.wf.? (Poly) Bool)
(declare-fun lib!betree.PivotBranch_v.impl&%3.rec%wf.? (Poly Fuel) Bool)
(declare-fun lib!betree.PivotBranch_v.impl&%2.arrow_keys.? (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots.? (Poly) vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!spec.KeyType_t.impl&%1.largest_lte.? (Poly Poly) Int)
(declare-fun lib!spec.KeyType_t.impl&%1.rec%largest_lte.? (Poly Poly Fuel) Int)
(declare-fun lib!betree.PivotBranch_v.impl&%3.route.? (Poly Poly) Int)
(declare-fun lib!spec.KeyType_t.impl&%1.is_sorted.? (Poly) Bool)
(declare-fun lib!betree.Utils_v.union_seq_of_sets.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.KeyType_t.impl&%1.largest_lt.? (Poly Poly) Int)
(declare-fun lib!spec.KeyType_t.impl&%1.rec%largest_lt.? (Poly Poly Fuel) Int)
(declare-fun lib!betree.PivotBranchRefinement_v.impl&%0.i.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.PivotBranchRefinement_v.impl&%0.rec%i.? (Poly Fuel) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.PivotBranch_v.impl&%4.subpath.? (Poly) lib!betree.PivotBranch_v.Path.)
(declare-fun lib!betree.PivotBranch_v.impl&%4.valid.? (Poly) Bool)
(declare-fun lib!betree.PivotBranch_v.impl&%4.rec%valid.? (Poly Fuel) Bool)
(declare-fun lib!betree.PivotBranch_v.impl&%4.target.? (Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranch_v.impl&%4.rec%target.? (Poly Fuel) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranch_v.impl&%4.path_equiv.? (Poly Poly) Bool)
(declare-fun lib!betree.PivotBranch_v.impl&%4.rec%path_equiv.? (Poly Poly Fuel) Bool)
(declare-fun lib!betree.PivotBranch_v.impl&%4.replaced_children.? (Poly Poly) vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>.)
(declare-fun lib!betree.PivotBranch_v.impl&%4.rec%replaced_children.? (Poly Poly Fuel) vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>.)
(declare-fun lib!betree.PivotBranch_v.impl&%4.substitute.? (Poly Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranch_v.impl&%4.rec%substitute.? (Poly Poly Fuel) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranch_v.impl&%2.arrow_msgs.? (Poly) vstd!seq.Seq<lib!spec.Messages_t.Message.>.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.insert_leaf.? (Poly Poly Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.insert.? (Poly Poly Poly Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranchRefinement_v.impl&%0.append_via_insert.? (Poly Poly Poly Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranchRefinement_v.map_all_keys.? (Poly) vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>.)
(declare-fun lib!betree.PivotBranchRefinement_v.union_all_keys.? (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.PivotBranch_v.impl&%0.arrow_pivot_index.? (Poly) Int)
(declare-fun lib!betree.PivotBranch_v.impl&%0.arrow_SplitIndex_pivot.? (Poly) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PivotBranch_v.impl&%0.arrow_SplitLeaf_pivot.? (Poly) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PivotBranch_v.impl&%1.wf.? (Poly Poly) Bool)
(declare-fun lib!betree.PivotBranch_v.impl&%1.get_pivot.? (Poly) lib!spec.KeyType_t.Key.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.query.? (Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.rec%query.? (Poly Poly Fuel) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.grow.? (Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.append_leaf.? (Poly Poly Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.append.? (Poly Poly Poly Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.split_leaf.? (Poly Poly) tuple%2.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.sub_index.? (Poly Poly Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.split_index.? (Poly Poly) tuple%2.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.split_node.? (Poly Poly) tuple%2.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.can_split_child_of_index.? (Poly Poly) Bool)
(declare-fun lib!betree.PivotBranch_v.impl&%3.split_child_of_index.? (Poly Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!betree.PivotBranch_v.impl&%3.split.? (Poly Poly Poly) lib!betree.PivotBranch_v.Node.)
(declare-fun lib!spec.KeyType_t.impl&%1.map_pivoted_union.? (Dcr Type Poly Poly Poly) Poly)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%0 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%5 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!)) ))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%0 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(assert (=> (fuel_bool fuel%vstd!seq_lib.seq_to_set_is_finite.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) ))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.take.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.take.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.take.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! (I 0) n!)) :pattern ((vstd!seq.impl&%0.take.? A&. A& self! n!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.take.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.take.? A&. A& self! n!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) ))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_choose_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_choose_len.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) ))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) ))))
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_empty.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_empty.? A&. A& self!) (= (vstd!set.impl&%0.len.? A&. A& self!) 0)) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& self!)) ))))
(assert (=> (fuel_bool fuel%vstd!set_lib.axiom_is_empty.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$)) )))) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& s!)) ))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) )))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.restrict.))
(declare-fun %%lambda%%3 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%4 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.restrict.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%3 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%4 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)) )))
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%6 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)) )))
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.lte.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.lte.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%1.lte.? a! b!) (<= (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. a!)) (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. b!)))) :pattern ((lib!spec.KeyType_t.impl&%1.lte.? a! b!)) ))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! Self%&) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!)) )))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.nop_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.nop_delta.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.nop_delta.? no%param) (lib!spec.Messages_t.Delta./Delta (%I (I 0)))) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? no%param)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) )))
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.query_internal.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.query_internal.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) key!) (%Poly%lib!spec.Messages_t.Message. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) key!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))))) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) )))
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.insert.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.insert.) (forall ((self! Poly) (key! Poly) (msg! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.insert.? self! key! msg!) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) key! msg!)))) :pattern ((lib!betree.Buffer_v.impl&%1.insert.? self! key! msg!)) ))))
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.query.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.query.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!) (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!))) :pattern ((lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!)) ))))
(assert (tr_bound%lib!betree.Buffer_v.Buffer. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))
(declare-fun req%vstd!seq_lib.impl&%0.insert. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!) (=> %%global_location_label%%7 (and (<= 0 (%I i!)) (<= (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.insert.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) a!) (vstd!seq.Seq.subrange.? A&. A& self! i! (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.index_of.))
(declare-fun %%choose%%1 (Type Int Int Dcr Type Poly Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Int) (%%hole%%2 Int) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Poly) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly)) (! (=> (exists ((i$ Poly)) (! (and (has_type i$ %%hole%%0) (and (and (<= %%hole%%1 (%I i$)) (< (%I i$) %%hole%%2)) (= (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 i$) %%hole%%6))) :pattern ((vstd!seq.Seq.index.? %%hole%%7 %%hole%%8 %%hole%%9 i$)) )) (exists ((i$ Poly)) (! (and (and (has_type i$ %%hole%%0) (and (and (<= %%hole%%1 (%I i$)) (< (%I i$) %%hole%%2)) (= (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 i$) %%hole%%6))) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) i$)) :pattern ((vstd!seq.Seq.index.? %%hole%%7 %%hole%%8 %%hole%%9 i$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.index_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.index_of.? A&. A& self! needle!) (%I (as_type (%%choose%%1 INT 0 (vstd!seq.Seq.len.? A&. A& self!) A&. A& self! needle! A&. A& self!) INT))) :pattern ((vstd!seq_lib.impl&%0.index_of.? A&. A& self! needle!)) ))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.skip.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.skip.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.skip.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! n! (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.skip.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)) )))
(declare-fun req%vstd!seq.impl&%0.first. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.impl&%0.first. A&. A& self!) (=> %%global_location_label%%8 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.impl&%0.first. A&. A& self!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.first.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.first.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.impl&%0.first.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I 0))) :pattern ((vstd!seq.impl&%0.first.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.impl&%0.first.? A&. A& self!) A&)) :pattern ((vstd!seq.impl&%0.first.? A&. A& self!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%5 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%5 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) )))
(declare-fun req%vstd!seq_lib.impl&%0.drop_last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!) (=> %%global_location_label%%9 (>= (vstd!seq.Seq.len.? A&. A& self!) 1))) :pattern ((req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.drop_last.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.drop_last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (vstd!seq.Seq.subrange.? A&. A& self! (I 0) (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!)) )))
(declare-fun req%vstd!seq_lib.impl&%0.zip_with. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (other! Poly)) (! (= (req%vstd!seq_lib.impl&%0.zip_with. A&. A& B&. B& self! other!) (=> %%global_location_label%%10 (= (vstd!seq.Seq.len.? A&. A& self!) (vstd!seq.Seq.len.? B&. B& other!)))) :pattern ((req%vstd!seq_lib.impl&%0.zip_with. A&. A& B&. B& self! other!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.zip_with.))
(declare-fun %%lambda%%6 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) i$) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$) (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 i$)))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.zip_with.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type other! (TYPE%vstd!seq.Seq. B&. B&))) (= (vstd!seq_lib.impl&%0.zip_with.? A&. A& B&. B& self! other!) (ite (not (= (vstd!seq.Seq.len.? A&. A& self!) (vstd!seq.Seq.len.? B&. B& other!))) (vstd!seq.Seq.empty.? $ (TYPE%tuple%2. A&. A& B&. B&)) (ite (= (vstd!seq.Seq.len.? A&. A& self!) 0) (vstd!seq.Seq.empty.? $ (TYPE%tuple%2. A&. A& B&. B&)) (vstd!seq.Seq.new.? $ (TYPE%tuple%2. A&. A& B&. B&) $ (TYPE%fun%1. $ INT $ (TYPE%tuple%2. A&. A& B&. B&)) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%6 A&. A& self! B&. B& other!)))))))) :pattern ((vstd!seq_lib.impl&%0.zip_with.? A&. A& B&. B& self! other!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type other! (TYPE%vstd!seq.Seq. B&. B&))) (has_type (vstd!seq_lib.impl&%0.zip_with.? A&. A& B&. B& self! other!) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. A&. A& B&. B&)))) :pattern ((vstd!seq_lib.impl&%0.zip_with.? A&. A& B&. B& self! other!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.fold_left.))
(declare-const fuel_nat%vstd!seq_lib.impl&%0.fold_left. Fuel)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (= (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! fuel%) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! zero)) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! fuel%)) )))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? A&. A& self!) 0) b! (%%apply%%1 (%Poly%fun%2. f!) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) b! f! fuel%) (vstd!seq.Seq.last.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.fold_left.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel_nat%vstd!seq_lib.impl&%0.fold_left.)))) :pattern ((vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!) B&)) :pattern ((vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.fold_left_alt.))
(declare-const fuel_nat%vstd!seq_lib.impl&%0.fold_left_alt. Fuel)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (= (vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! fuel%) (vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! zero)) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! fuel%)) )))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? A&. A& self!) 0) b! (vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& (vstd!seq.Seq.subrange.? A&. A& self! (I 1) (I (vstd!seq.Seq.len.? A&. A& self!))) (%%apply%%1 (%Poly%fun%2. f!) b! (vstd!seq.Seq.index.? A&. A& self! (I 0))) f! fuel%)))) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.fold_left_alt.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.fold_left_alt.? A&. A& B&. B& self! b! f!) (vstd!seq_lib.impl&%0.rec%fold_left_alt.? A&. A& B&. B& self! b! f! (succ fuel_nat%vstd!seq_lib.impl&%0.fold_left_alt.)))) :pattern ((vstd!seq_lib.impl&%0.fold_left_alt.? A&. A& B&. B& self! b! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.fold_left_alt.? A&. A& B&. B& self! b! f!) B&)) :pattern ((vstd!seq_lib.impl&%0.fold_left_alt.? A&. A& B&. B& self! b! f!)) )))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.lt.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.lt.) (forall ((a! Poly) (b! Poly)) (! (= (lib!spec.KeyType_t.impl&%1.lt.? a! b!) (and (lib!spec.KeyType_t.impl&%1.lte.? a! b!) (not (= a! b!)))) :pattern ((lib!spec.KeyType_t.impl&%1.lt.? a! b!)) ))))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.is_strictly_sorted.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.is_strictly_sorted.) (forall ((run! Poly)) (! (= (lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? run!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. run!))) (lib!spec.KeyType_t.impl&%1.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. run! j$)))) :pattern ((lib!spec.KeyType_t.impl&%1.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. run! j$))) ))) :pattern ((lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? run!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%2.arrow_children.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%2.arrow_children.) (forall ((self! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%2.arrow_children.? self!) (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))) :pattern ((lib!betree.PivotBranch_v.impl&%2.arrow_children.? self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%2.arrow_pivots.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%2.arrow_pivots.) (forall ((self! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%2.arrow_pivots.? self!) (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!))) :pattern ((lib!betree.PivotBranch_v.impl&%2.arrow_pivots.? self!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.children_keys. (Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.children_keys. self!) (and (=> %%global_location_label%%11 (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%12 (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!))))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.children_keys. self!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.children_keys.))
(declare-const fuel_nat%lib!betree.PivotBranch_v.impl&%3.children_keys. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBranch_v.impl&%3.rec%children_keys.? self! fuel%) (lib!betree.PivotBranch_v.impl&%3.rec%children_keys.? self! zero)) :pattern ((lib!betree.PivotBranch_v.impl&%3.rec%children_keys.? self! fuel%)) )))
(declare-fun %%lambda%%7 (Dcr Type Poly Type Int Int Dcr Type Poly Fuel Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Type) (%%hole%%4 Int) (%%hole%%5 Int) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Poly) (%%hole%%9 Fuel) (%%hole%%10 Dcr) (%%hole%%11 Type) (key$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11) key$) (B (exists ((i$ Poly)) (! (and (has_type i$ %%hole%%3) (and (and (<= %%hole%%4 (%I i$)) (< (%I i$) %%hole%%5)) (vstd!set.impl&%0.contains.? %%hole%%10 %%hole%%11 (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.impl&%3.rec%all_keys.? (vstd!seq.Seq.index.? %%hole%%6 %%hole%%7 %%hole%%8 i$) %%hole%%9)) key$))) :pattern ((vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)) )))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11) key$)))))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!))) (= (lib!betree.PivotBranch_v.impl&%3.rec%children_keys.? self! (succ fuel%)) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%7 $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))) INT 0 (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!)))) $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))) fuel% $ TYPE%lib!spec.KeyType_t.Key.))))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.rec%children_keys.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.children_keys.) (forall ((self! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!))) (= (lib!betree.PivotBranch_v.impl&%3.children_keys.? self!) (lib!betree.PivotBranch_v.impl&%3.rec%children_keys.? self! (succ (succ fuel_nat%lib!betree.PivotBranch_v.impl&%3.children_keys.))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.children_keys.? self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.all_keys.))
(declare-const fuel_nat%lib!betree.PivotBranch_v.impl&%3.all_keys. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBranch_v.impl&%3.rec%all_keys.? self! fuel%) (lib!betree.PivotBranch_v.impl&%3.rec%all_keys.? self! zero)) :pattern ((lib!betree.PivotBranch_v.impl&%3.rec%all_keys.? self! fuel%)) )))
(define-fun is-lib!betree.PivotBranch_v.Node./Leaf_ ((c lib!betree.PivotBranch_v.Node.)) Bool ((_ is lib!betree.PivotBranch_v.Node./Leaf) c))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (= (lib!betree.PivotBranch_v.impl&%3.rec%all_keys.? self! (succ fuel%)) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (ite (is-lib!betree.PivotBranch_v.Node./Leaf_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (let ((keys$ (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (let ((msgs$ (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys$)))) (let ((pivots$ (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (let ((children$ (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (vstd!set.impl&%0.union.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!seq_lib.impl&%0.to_set.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. pivots$)) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.impl&%3.rec%children_keys.? self! fuel%))))))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.rec%all_keys.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.all_keys.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (= (lib!betree.PivotBranch_v.impl&%3.all_keys.? self!) (lib!betree.PivotBranch_v.impl&%3.rec%all_keys.? self! (succ (succ fuel_nat%lib!betree.PivotBranch_v.impl&%3.all_keys.))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.all_keys.? self!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound. (Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound. self! i!) (and (=> %%global_location_label%%13 (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%14 (and (<= 0 (%I i!)) (< (%I i!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!)))) 1)))) (=> %%global_location_label%%15 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!))))))))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound. self! i!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound.? self! i!) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!spec.KeyType_t.Key.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.impl&%3.all_keys.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))) i!))) key$) (lib!spec.KeyType_t.impl&%1.lt.? key$ (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!))) i!)))) :pattern ((lib!spec.KeyType_t.impl&%1.lt.? key$ (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!))) i!))) ))) :pattern ((lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound.? self! i!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound. (Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound. self! i!) (and (=> %%global_location_label%%16 (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%17 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))))))) (=> %%global_location_label%%18 (let ((tmp%%$ (Sub (%I i!) 1))) (and (<= 0 tmp%%$) (< tmp%%$ (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!)))))))))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound. self! i!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound.? self! i!) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!spec.KeyType_t.Key.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.impl&%3.all_keys.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))) i!))) key$) (lib!spec.KeyType_t.impl&%1.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I (Sub (%I i!) 1))) key$))) :pattern ((lib!spec.KeyType_t.impl&%1.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I (Sub (%I i!) 1))) key$)) ))) :pattern ((lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound.? self! i!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.wf.))
(declare-const fuel_nat%lib!betree.PivotBranch_v.impl&%3.wf. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBranch_v.impl&%3.rec%wf.? self! fuel%) (lib!betree.PivotBranch_v.impl&%3.rec%wf.? self! zero)) :pattern ((lib!betree.PivotBranch_v.impl&%3.rec%wf.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (= (lib!betree.PivotBranch_v.impl&%3.rec%wf.? self! (succ fuel%)) (ite (is-lib!betree.PivotBranch_v.Node./Leaf_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (let ((keys$ (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (let ((msgs$ (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (and (and (> (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys$)) 0) (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys$)) (vstd!seq.Seq.len.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. msgs$)))) (lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys$))))) (let ((pivots$ (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (let ((children$ (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (and (and (and (and (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. pivots$)) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. children$)) 1)) (lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. pivots$))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. children$)))) (lib!betree.PivotBranch_v.impl&%3.rec%wf.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. children$) i$) fuel%))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. children$) i$)) ))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. children$)) 1))) (lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound.? self! i$))) :pattern ((lib!betree.PivotBranch_v.impl&%3.all_keys_below_bound.? self! i$)) ))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (< 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. children$)))) (lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound.? self! i$))) :pattern ((lib!betree.PivotBranch_v.impl&%3.all_keys_above_bound.? self! i$)) )))))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.rec%wf.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.wf.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (= (lib!betree.PivotBranch_v.impl&%3.wf.? self!) (lib!betree.PivotBranch_v.impl&%3.rec%wf.? self! (succ fuel_nat%lib!betree.PivotBranch_v.impl&%3.wf.)))) :pattern ((lib!betree.PivotBranch_v.impl&%3.wf.? self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%2.arrow_keys.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%2.arrow_keys.) (forall ((self! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%2.arrow_keys.? self!) (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!))) :pattern ((lib!betree.PivotBranch_v.impl&%2.arrow_keys.? self!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots. (Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots. self!) (=> %%global_location_label%%19 (lib!betree.PivotBranch_v.impl&%3.wf.? self!))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots. self!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots.) (forall ((self! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots.? self!) (ite (is-lib!betree.PivotBranch_v.Node./Leaf_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!)) (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!)))) :pattern ((lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.largest_lte.))
(declare-const fuel_nat%lib!spec.KeyType_t.impl&%1.largest_lte. Fuel)
(assert (forall ((run! Poly) (needle! Poly) (fuel% Fuel)) (! (= (lib!spec.KeyType_t.impl&%1.rec%largest_lte.? run! needle! fuel%) (lib!spec.KeyType_t.impl&%1.rec%largest_lte.? run! needle! zero)) :pattern ((lib!spec.KeyType_t.impl&%1.rec%largest_lte.? run! needle! fuel%)) )))
(assert (forall ((run! Poly) (needle! Poly) (fuel% Fuel)) (! (=> (and (has_type run! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.)) (has_type needle! TYPE%lib!spec.KeyType_t.Key.)) (= (lib!spec.KeyType_t.impl&%1.rec%largest_lte.? run! needle! (succ fuel%)) (ite (or (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. run!) 0) (lib!spec.KeyType_t.impl&%1.lt.? needle! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. run! (I 0)))) (Sub 0 1) (Add 1 (lib!spec.KeyType_t.impl&%1.rec%largest_lte.? (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Key. run! (I 1) (I (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. run!))) needle! fuel%))))) :pattern ((lib!spec.KeyType_t.impl&%1.rec%largest_lte.? run! needle! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.largest_lte.) (forall ((run! Poly) (needle! Poly)) (! (=> (and (has_type run! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.)) (has_type needle! TYPE%lib!spec.KeyType_t.Key.)) (= (lib!spec.KeyType_t.impl&%1.largest_lte.? run! needle!) (lib!spec.KeyType_t.impl&%1.rec%largest_lte.? run! needle! (succ fuel_nat%lib!spec.KeyType_t.impl&%1.largest_lte.)))) :pattern ((lib!spec.KeyType_t.impl&%1.largest_lte.? run! needle!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.route. (Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.route. self! key!) (=> %%global_location_label%%20 (lib!betree.PivotBranch_v.impl&%3.wf.? self!))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.route. self! key!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.route.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.route.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.route.? self! key!) (let ((s$ (ite (is-lib!betree.PivotBranch_v.Node./Leaf_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!)) (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!))))) (lib!spec.KeyType_t.impl&%1.largest_lte.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. s$) key!))) :pattern ((lib!betree.PivotBranch_v.impl&%3.route.? self! key!)) ))))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.is_sorted.))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.is_sorted.) (forall ((run! Poly)) (! (= (lib!spec.KeyType_t.impl&%1.is_sorted.? run!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (<= (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. run!))) (lib!spec.KeyType_t.impl&%1.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. run! j$)))) :pattern ((lib!spec.KeyType_t.impl&%1.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. run! i$) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. run! j$))) ))) :pattern ((lib!spec.KeyType_t.impl&%1.is_sorted.? run!)) ))))
(declare-fun req%lib!spec.KeyType_t.impl&%1.strictly_sorted_implies_sorted. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((run! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)) (! (= (req%lib!spec.KeyType_t.impl&%1.strictly_sorted_implies_sorted. run!) (=> %%global_location_label%%21 (lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!)))) :pattern ((req%lib!spec.KeyType_t.impl&%1.strictly_sorted_implies_sorted. run!)) )))
(declare-fun ens%lib!spec.KeyType_t.impl&%1.strictly_sorted_implies_sorted. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) Bool)
(assert (forall ((run! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.)) (! (= (ens%lib!spec.KeyType_t.impl&%1.strictly_sorted_implies_sorted. run!) (lib!spec.KeyType_t.impl&%1.is_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!))) :pattern ((ens%lib!spec.KeyType_t.impl&%1.strictly_sorted_implies_sorted. run!)) )))
(declare-fun req%lib!spec.KeyType_t.impl&%1.largest_lte_ensures. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>. lib!spec.KeyType_t.Key. Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((run! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (needle! lib!spec.KeyType_t.Key.) (out! Int)) (! (= (req%lib!spec.KeyType_t.impl&%1.largest_lte_ensures. run! needle! out!) (and (=> %%global_location_label%%22 (lib!spec.KeyType_t.impl&%1.is_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!))) (=> %%global_location_label%%23 (= out! (lib!spec.KeyType_t.impl&%1.largest_lte.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) (Poly%lib!spec.KeyType_t.Key. needle!)))))) :pattern ((req%lib!spec.KeyType_t.impl&%1.largest_lte_ensures. run! needle! out!)) )))
(declare-fun ens%lib!spec.KeyType_t.impl&%1.largest_lte_ensures. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>. lib!spec.KeyType_t.Key. Int) Bool)
(assert (forall ((run! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (needle! lib!spec.KeyType_t.Key.) (out! Int)) (! (= (ens%lib!spec.KeyType_t.impl&%1.largest_lte_ensures. run! needle! out!) (and (and (<= (Sub 0 1) out!) (< out! (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (<= (%I i$) out!)) (lib!spec.KeyType_t.impl&%1.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) i$) (Poly%lib!spec.KeyType_t.Key. needle!)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (< out! (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!)))) (lib!spec.KeyType_t.impl&%1.lt.? (Poly%lib!spec.KeyType_t.Key. needle!) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) i$)) )) (=> (vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) (Poly%lib!spec.KeyType_t.Key. needle!)) (and (<= 0 out!) (= (%Poly%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) (I out!))) needle!))))) :pattern ((ens%lib!spec.KeyType_t.impl&%1.largest_lte_ensures. run! needle! out!)) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.route_ensures.) (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (=> (lib!betree.PivotBranch_v.impl&%3.wf.? self!) (let ((s$ (lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots.? self!))) (and (and (and (let ((tmp%%$ (lib!betree.PivotBranch_v.impl&%3.route.? self! key!))) (and (<= (Sub 0 1) tmp%%$) (< tmp%%$ (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. s$))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (<= (%I i$) (lib!betree.PivotBranch_v.impl&%3.route.? self! key!))) (lib!spec.KeyType_t.impl&%1.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. s$) i$) key!))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. s$) i$)) ))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (< (lib!betree.PivotBranch_v.impl&%3.route.? self! key!) (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. s$)))) (lib!spec.KeyType_t.impl&%1.lt.? key! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. s$) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. s$) i$)) ))) (=> (vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. s$) key!) (and (<= 0 (lib!betree.PivotBranch_v.impl&%3.route.? self! key!)) (= (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. s$) (I (lib!betree.PivotBranch_v.impl&%3.route.? self! key!))) key!))))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.route.? self! key!)) ))))
(assert (fuel_bool_default fuel%lib!betree.Utils_v.union_seq_of_sets.))
(declare-fun %%lambda%%8 (Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (u$ Poly) (s$ Poly)) (! (= (%%apply%%1 (%%lambda%%8 %%hole%%0 %%hole%%1) u$ s$) (vstd!set.impl&%0.union.? %%hole%%0 %%hole%%1 u$ s$)) :pattern ((%%apply%%1 (%%lambda%%8 %%hole%%0 %%hole%%1) u$ s$)))))
(assert (=> (fuel_bool fuel%lib!betree.Utils_v.union_seq_of_sets.) (forall ((A&. Dcr) (A& Type) (sets! Poly)) (! (= (lib!betree.Utils_v.union_seq_of_sets.? A&. A& sets!) (vstd!seq_lib.impl&%0.fold_left.? $ (TYPE%vstd!set.Set. A&. A&) $ (TYPE%vstd!set.Set. A&. A&) sets! (vstd!set.impl&%0.empty.? A&. A&) (Poly%fun%2. (mk_fun (%%lambda%%8 A&. A&))))) :pattern ((lib!betree.Utils_v.union_seq_of_sets.? A&. A& sets!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (sets! Poly)) (! (=> (has_type sets! (TYPE%vstd!seq.Seq. $ (TYPE%vstd!set.Set. A&. A&))) (has_type (lib!betree.Utils_v.union_seq_of_sets.? A&. A& sets!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((lib!betree.Utils_v.union_seq_of_sets.? A&. A& sets!)) )))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.largest_lt.))
(declare-const fuel_nat%lib!spec.KeyType_t.impl&%1.largest_lt. Fuel)
(assert (forall ((run! Poly) (needle! Poly) (fuel% Fuel)) (! (= (lib!spec.KeyType_t.impl&%1.rec%largest_lt.? run! needle! fuel%) (lib!spec.KeyType_t.impl&%1.rec%largest_lt.? run! needle! zero)) :pattern ((lib!spec.KeyType_t.impl&%1.rec%largest_lt.? run! needle! fuel%)) )))
(assert (forall ((run! Poly) (needle! Poly) (fuel% Fuel)) (! (=> (and (has_type run! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.)) (has_type needle! TYPE%lib!spec.KeyType_t.Key.)) (= (lib!spec.KeyType_t.impl&%1.rec%largest_lt.? run! needle! (succ fuel%)) (ite (or (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. run!) 0) (lib!spec.KeyType_t.impl&%1.lte.? needle! (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. run! (I 0)))) (Sub 0 1) (Add 1 (lib!spec.KeyType_t.impl&%1.rec%largest_lt.? (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Key. run! (I 1) (I (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. run!))) needle! fuel%))))) :pattern ((lib!spec.KeyType_t.impl&%1.rec%largest_lt.? run! needle! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.largest_lt.) (forall ((run! Poly) (needle! Poly)) (! (=> (and (has_type run! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.KeyType_t.Key.)) (has_type needle! TYPE%lib!spec.KeyType_t.Key.)) (= (lib!spec.KeyType_t.impl&%1.largest_lt.? run! needle!) (lib!spec.KeyType_t.impl&%1.rec%largest_lt.? run! needle! (succ fuel_nat%lib!spec.KeyType_t.impl&%1.largest_lt.)))) :pattern ((lib!spec.KeyType_t.impl&%1.largest_lt.? run! needle!)) ))))
(declare-fun req%lib!betree.PivotBranchRefinement_v.impl&%0.i. (Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBranchRefinement_v.impl&%0.i. self!) (and (=> %%global_location_label%%24 (lib!betree.PivotBranch_v.impl&%3.wf.? self!)) (=> %%global_location_label%%25 (=> (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!spec.KeyType_t.Key.) (let ((tmp%%$ (Add (lib!betree.PivotBranch_v.impl&%3.route.? self! key$) 1))) (and (<= 0 tmp%%$) (< tmp%%$ (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!)))))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.route.? self! key$)) )))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.impl&%0.i. self!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranchRefinement_v.impl&%0.i.))
(declare-const fuel_nat%lib!betree.PivotBranchRefinement_v.impl&%0.i. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBranchRefinement_v.impl&%0.rec%i.? self! fuel%) (lib!betree.PivotBranchRefinement_v.impl&%0.rec%i.? self! zero)) :pattern ((lib!betree.PivotBranchRefinement_v.impl&%0.rec%i.? self! fuel%)) )))
(declare-fun %%lambda%%15 (Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (key$ Poly)) (! (= (%%apply%%0 (%%lambda%%15 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) key$) (vstd!seq.Seq.index.? %%hole%%1 %%hole%%2 %%hole%%3 (I (lib!betree.PivotBranch_v.impl&%3.route.? %%hole%%0 key$)))) :pattern ((%%apply%%0 (%%lambda%%15 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) key$)))))
(declare-fun %%lambda%%16 (Poly Int Dcr Type Poly Fuel Dcr Type Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Int) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Fuel) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (key$ Poly)) (! (= (%%apply%%0 (%%lambda%%16 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11) key$) (B (vstd!set.impl&%0.contains.? %%hole%%10 %%hole%%11 (vstd!map.impl&%0.dom.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBranchRefinement_v.impl&%0.rec%i.? (vstd!seq.Seq.index.? %%hole%%2 %%hole%%3 %%hole%%4 (I (Add (lib!betree.PivotBranch_v.impl&%3.route.? %%hole%%0 key$) %%hole%%1))) %%hole%%5)))))) key$))) :pattern ((%%apply%%0 (%%lambda%%16 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11) key$)))))
(declare-fun %%lambda%%17 (Poly Int Dcr Type Poly Fuel Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Int) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Fuel) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (key$ Poly)) (! (= (%%apply%%0 (%%lambda%%17 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) key$) (vstd!map.impl&%0.index.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBranchRefinement_v.impl&%0.rec%i.? (vstd!seq.Seq.index.? %%hole%%2 %%hole%%3 %%hole%%4 (I (Add (lib!betree.PivotBranch_v.impl&%3.route.? %%hole%%0 key$) %%hole%%1))) %%hole%%5))))) key$)) :pattern ((%%apply%%0 (%%lambda%%17 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) key$)))))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (=> (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!spec.KeyType_t.Key.) (let ((tmp%%$ (Add (lib!betree.PivotBranch_v.impl&%3.route.? self! key$) 1))) (and (<= 0 tmp%%$) (< tmp%%$ (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!)))))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.route.? self! key$)) )))) (= (lib!betree.PivotBranchRefinement_v.impl&%0.rec%i.? self! (succ fuel%)) (ite (is-lib!betree.PivotBranch_v.Node./Leaf_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (let ((keys$ (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (let ((msgs$ (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%fun%1. (mk_fun (%%lambda%%0 $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys$)))) (Poly%fun%1. (mk_fun (%%lambda%%15 self! $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. msgs$))))))))) (let ((pivots$ (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (let ((children$ (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%fun%1. (mk_fun (%%lambda%%16 self! 1 $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. children$) fuel% $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. $ TYPE%lib!spec.KeyType_t.Key.))) (Poly%fun%1. (mk_fun (%%lambda%%17 self! 1 $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. children$) fuel% $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))))))))))) :pattern ((lib!betree.PivotBranchRefinement_v.impl&%0.rec%i.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranchRefinement_v.impl&%0.i.) (forall ((self! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (=> (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!spec.KeyType_t.Key.) (let ((tmp%%$ (Add (lib!betree.PivotBranch_v.impl&%3.route.? self! key$) 1))) (and (<= 0 tmp%%$) (< tmp%%$ (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!)))))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.route.? self! key$)) )))) (= (lib!betree.PivotBranchRefinement_v.impl&%0.i.? self!) (lib!betree.PivotBranchRefinement_v.impl&%0.rec%i.? self! (succ fuel_nat%lib!betree.PivotBranchRefinement_v.impl&%0.i.)))) :pattern ((lib!betree.PivotBranchRefinement_v.impl&%0.i.? self!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%4.subpath. (Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%4.subpath. self!) (and (=> %%global_location_label%%26 (< 0 (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. self!)))) (=> %%global_location_label%%27 (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!))))) (=> %%global_location_label%%28 (is-lib!betree.PivotBranch_v.Node./Index_ (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!)))))) :pattern ((req%lib!betree.PivotBranch_v.impl&%4.subpath. self!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%4.subpath.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%4.subpath.) (forall ((self! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%4.subpath.? self!) (lib!betree.PivotBranch_v.Path./Path (%Poly%lib!betree.PivotBranch_v.Node. (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!)))))) (I (Add (lib!betree.PivotBranch_v.impl&%3.route.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. self!)))) 1)))) (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. self!)))) (%I (I (nClip (Sub (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. self!)) 1)))))) :pattern ((lib!betree.PivotBranch_v.impl&%4.subpath.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.Path.) (has_type (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranch_v.impl&%4.subpath.? self!)) TYPE%lib!betree.PivotBranch_v.Path.)) :pattern ((lib!betree.PivotBranch_v.impl&%4.subpath.? self!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%4.valid.))
(declare-const fuel_nat%lib!betree.PivotBranch_v.impl&%4.valid. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBranch_v.impl&%4.rec%valid.? self! fuel%) (lib!betree.PivotBranch_v.impl&%4.rec%valid.? self! zero)) :pattern ((lib!betree.PivotBranch_v.impl&%4.rec%valid.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.Path.) (= (lib!betree.PivotBranch_v.impl&%4.rec%valid.? self! (succ fuel%)) (and (and (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!)))) (=> (< 0 (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. self!))) (is-lib!betree.PivotBranch_v.Node./Index_ (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!))))) (=> (< 0 (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. self!))) (lib!betree.PivotBranch_v.impl&%4.rec%valid.? (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranch_v.impl&%4.subpath.? self!)) fuel%))))) :pattern ((lib!betree.PivotBranch_v.impl&%4.rec%valid.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%4.valid.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.Path.) (= (lib!betree.PivotBranch_v.impl&%4.valid.? self!) (lib!betree.PivotBranch_v.impl&%4.rec%valid.? self! (succ fuel_nat%lib!betree.PivotBranch_v.impl&%4.valid.)))) :pattern ((lib!betree.PivotBranch_v.impl&%4.valid.? self!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%4.target. (Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%4.target. self!) (=> %%global_location_label%%29 (lib!betree.PivotBranch_v.impl&%4.valid.? self!))) :pattern ((req%lib!betree.PivotBranch_v.impl&%4.target. self!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%4.target.))
(declare-const fuel_nat%lib!betree.PivotBranch_v.impl&%4.target. Fuel)
(assert (forall ((self! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBranch_v.impl&%4.rec%target.? self! fuel%) (lib!betree.PivotBranch_v.impl&%4.rec%target.? self! zero)) :pattern ((lib!betree.PivotBranch_v.impl&%4.rec%target.? self! fuel%)) )))
(assert (forall ((self! Poly) (fuel% Fuel)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.Path.) (= (lib!betree.PivotBranch_v.impl&%4.rec%target.? self! (succ fuel%)) (ite (= 0 (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. self!))) (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!)) (lib!betree.PivotBranch_v.impl&%4.rec%target.? (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranch_v.impl&%4.subpath.? self!)) fuel%)))) :pattern ((lib!betree.PivotBranch_v.impl&%4.rec%target.? self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%4.target.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.Path.) (= (lib!betree.PivotBranch_v.impl&%4.target.? self!) (lib!betree.PivotBranch_v.impl&%4.rec%target.? self! (succ fuel_nat%lib!betree.PivotBranch_v.impl&%4.target.)))) :pattern ((lib!betree.PivotBranch_v.impl&%4.target.? self!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%4.path_equiv. (Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((self! Poly) (other_key! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%4.path_equiv. self! other_key!) (=> %%global_location_label%%30 (lib!betree.PivotBranch_v.impl&%4.valid.? self!))) :pattern ((req%lib!betree.PivotBranch_v.impl&%4.path_equiv. self! other_key!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%4.path_equiv.))
(declare-const fuel_nat%lib!betree.PivotBranch_v.impl&%4.path_equiv. Fuel)
(assert (forall ((self! Poly) (other_key! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBranch_v.impl&%4.rec%path_equiv.? self! other_key! fuel%) (lib!betree.PivotBranch_v.impl&%4.rec%path_equiv.? self! other_key! zero)) :pattern ((lib!betree.PivotBranch_v.impl&%4.rec%path_equiv.? self! other_key! fuel%)) )))
(assert (forall ((self! Poly) (other_key! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Path.) (has_type other_key! TYPE%lib!spec.KeyType_t.Key.)) (= (lib!betree.PivotBranch_v.impl&%4.rec%path_equiv.? self! other_key! (succ fuel%)) (and (= (lib!betree.PivotBranch_v.impl&%3.route.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. self!)))) (lib!betree.PivotBranch_v.impl&%3.route.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!))) other_key!)) (=> (< 0 (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. self!))) (lib!betree.PivotBranch_v.impl&%4.rec%path_equiv.? (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranch_v.impl&%4.subpath.? self!)) other_key! fuel%))))) :pattern ((lib!betree.PivotBranch_v.impl&%4.rec%path_equiv.? self! other_key! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%4.path_equiv.) (forall ((self! Poly) (other_key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Path.) (has_type other_key! TYPE%lib!spec.KeyType_t.Key.)) (= (lib!betree.PivotBranch_v.impl&%4.path_equiv.? self! other_key!) (lib!betree.PivotBranch_v.impl&%4.rec%path_equiv.? self! other_key! (succ fuel_nat%lib!betree.PivotBranch_v.impl&%4.path_equiv.)))) :pattern ((lib!betree.PivotBranch_v.impl&%4.path_equiv.? self! other_key!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%4.replaced_children. (Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((self! Poly) (replacement! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%4.replaced_children. self! replacement!) (and (=> %%global_location_label%%31 (lib!betree.PivotBranch_v.impl&%4.valid.? self!)) (=> %%global_location_label%%32 (< 0 (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. self!)))))) :pattern ((req%lib!betree.PivotBranch_v.impl&%4.replaced_children. self! replacement!)) )))
(declare-fun req%lib!betree.PivotBranch_v.impl&%4.substitute. (Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((self! Poly) (replacement! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%4.substitute. self! replacement!) (=> %%global_location_label%%33 (lib!betree.PivotBranch_v.impl&%4.valid.? self!))) :pattern ((req%lib!betree.PivotBranch_v.impl&%4.substitute. self! replacement!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%4.replaced_children.))
(declare-const fuel_nat%lib!betree.PivotBranch_v.impl&%4.replaced_children. Fuel)
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBranch_v.impl&%4.rec%replaced_children.? self! replacement! fuel%) (lib!betree.PivotBranch_v.impl&%4.rec%replaced_children.? self! replacement! zero)) :pattern ((lib!betree.PivotBranch_v.impl&%4.rec%replaced_children.? self! replacement! fuel%)) )))
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Path.) (has_type replacement! TYPE%lib!betree.PivotBranch_v.Node.)) (= (lib!betree.PivotBranch_v.impl&%4.rec%replaced_children.? self! replacement! (succ fuel%)) (%Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (let ((new_child$ (lib!betree.PivotBranch_v.impl&%4.rec%substitute.? (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranch_v.impl&%4.subpath.? self!)) replacement! fuel%))) (vstd!seq.Seq.update.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!)))))) (I (Add (lib!betree.PivotBranch_v.impl&%3.route.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!))) (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. self!)))) 1)) (Poly%lib!betree.PivotBranch_v.Node. new_child$)))))) :pattern ((lib!betree.PivotBranch_v.impl&%4.rec%replaced_children.? self! replacement! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%4.replaced_children.) (forall ((self! Poly) (replacement! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Path.) (has_type replacement! TYPE%lib!betree.PivotBranch_v.Node.)) (= (lib!betree.PivotBranch_v.impl&%4.replaced_children.? self! replacement!) (lib!betree.PivotBranch_v.impl&%4.rec%replaced_children.? self! replacement! (succ (succ fuel_nat%lib!betree.PivotBranch_v.impl&%4.replaced_children.))))) :pattern ((lib!betree.PivotBranch_v.impl&%4.replaced_children.? self! replacement!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%4.substitute.))
(declare-const fuel_nat%lib!betree.PivotBranch_v.impl&%4.substitute. Fuel)
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBranch_v.impl&%4.rec%substitute.? self! replacement! fuel%) (lib!betree.PivotBranch_v.impl&%4.rec%substitute.? self! replacement! zero)) :pattern ((lib!betree.PivotBranch_v.impl&%4.rec%substitute.? self! replacement! fuel%)) )))
(assert (forall ((self! Poly) (replacement! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Path.) (has_type replacement! TYPE%lib!betree.PivotBranch_v.Node.)) (= (lib!betree.PivotBranch_v.impl&%4.rec%substitute.? self! replacement! (succ fuel%)) (ite (= 0 (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. self!))) (%Poly%lib!betree.PivotBranch_v.Node. replacement!) (lib!betree.PivotBranch_v.Node./Index (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. self!))))))) (%Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.impl&%4.rec%replaced_children.? self! replacement! fuel%))))))) :pattern ((lib!betree.PivotBranch_v.impl&%4.rec%substitute.? self! replacement! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%4.substitute.) (forall ((self! Poly) (replacement! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Path.) (has_type replacement! TYPE%lib!betree.PivotBranch_v.Node.)) (= (lib!betree.PivotBranch_v.impl&%4.substitute.? self! replacement!) (lib!betree.PivotBranch_v.impl&%4.rec%substitute.? self! replacement! (succ (succ fuel_nat%lib!betree.PivotBranch_v.impl&%4.substitute.))))) :pattern ((lib!betree.PivotBranch_v.impl&%4.substitute.? self! replacement!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%2.arrow_msgs.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%2.arrow_msgs.) (forall ((self! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%2.arrow_msgs.? self!) (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. self!))) :pattern ((lib!betree.PivotBranch_v.impl&%2.arrow_msgs.? self!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.insert_leaf. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((self! Poly) (key! Poly) (msg! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.insert_leaf. self! key! msg!) (and (=> %%global_location_label%%34 (is-lib!betree.PivotBranch_v.Node./Leaf_ (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%35 (lib!betree.PivotBranch_v.impl&%3.wf.? self!)))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.insert_leaf. self! key! msg!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.insert_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.insert_leaf.) (forall ((self! Poly) (key! Poly) (msg! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.insert_leaf.? self! key! msg!) (let ((r$ (lib!betree.PivotBranch_v.impl&%3.route.? self! key!))) (ite (and (<= 0 r$) (= (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I r$)) key!)) (lib!betree.PivotBranch_v.Node./Leaf (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (%Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (vstd!seq.Seq.update.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I r$) msg!))) (lib!betree.PivotBranch_v.Node./Leaf (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I (Add r$ 1)) key!)) (%Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I (Add r$ 1)) msg!)))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.insert_leaf.? self! key! msg!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.insert. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((self! Poly) (key! Poly) (msg! Poly) (path! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.insert. self! key! msg! path!) (and (=> %%global_location_label%%36 (lib!betree.PivotBranch_v.impl&%3.wf.? self!)) (=> %%global_location_label%%37 (lib!betree.PivotBranch_v.impl&%4.valid.? path!)) (=> %%global_location_label%%38 (= (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. path!)) (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%39 (= (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. path!)) (%Poly%lib!spec.KeyType_t.Key. key!))) (=> %%global_location_label%%40 (is-lib!betree.PivotBranch_v.Node./Leaf_ (lib!betree.PivotBranch_v.impl&%4.target.? path!))))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.insert. self! key! msg! path!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.insert.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.insert.) (forall ((self! Poly) (key! Poly) (msg! Poly) (path! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.insert.? self! key! msg! path!) (lib!betree.PivotBranch_v.impl&%4.substitute.? path! (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%3.insert_leaf.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? path!)) key! msg!)))) :pattern ((lib!betree.PivotBranch_v.impl&%3.insert.? self! key! msg! path!)) ))))
(declare-fun req%lib!betree.PivotBranchRefinement_v.impl&%0.append_via_insert. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((self! Poly) (keys! Poly) (msgs! Poly) (path! Poly)) (! (= (req%lib!betree.PivotBranchRefinement_v.impl&%0.append_via_insert. self! keys! msgs! path!) (and (=> %%global_location_label%%41 (lib!betree.PivotBranch_v.impl&%4.valid.? path!)) (=> %%global_location_label%%42 (= (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. path!)) (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%43 (> (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. keys!) 0)) (=> %%global_location_label%%44 (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. keys!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.Messages_t.Message. msgs!))) (=> %%global_location_label%%45 (lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? keys!)) (=> %%global_location_label%%46 (is-lib!betree.PivotBranch_v.Node./Leaf_ (lib!betree.PivotBranch_v.impl&%4.target.? path!))) (=> %%global_location_label%%47 (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? path!)))) (=> %%global_location_label%%48 (lib!spec.KeyType_t.impl&%1.lt.? (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? path!)))))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. keys! (I 0)))) (=> %%global_location_label%%49 (= (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. path!)) (%Poly%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. keys! (I 0))))) (=> %%global_location_label%%50 (lib!betree.PivotBranch_v.impl&%4.path_equiv.? path! (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. keys!))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.impl&%0.append_via_insert. self! keys! msgs! path!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranchRefinement_v.impl&%0.append_via_insert.))
(declare-fun %%lambda%%18 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (node$ Poly) (pair$ Poly)) (! (= (%%apply%%1 (%%lambda%%18 %%hole%%0) node$ pair$) (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%3.insert.? node$ (tuple%2./tuple%2/0 (%Poly%tuple%2. pair$)) (tuple%2./tuple%2/1 (%Poly%tuple%2. pair$)) (Poly%lib!betree.PivotBranch_v.Path. (lib!betree.PivotBranch_v.Path./Path (%Poly%lib!betree.PivotBranch_v.Node. node$) (%Poly%lib!spec.KeyType_t.Key. (tuple%2./tuple%2/0 (%Poly%tuple%2. pair$))) %%hole%%0))))) :pattern ((%%apply%%1 (%%lambda%%18 %%hole%%0) node$ pair$)))))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranchRefinement_v.impl&%0.append_via_insert.) (forall ((self! Poly) (keys! Poly) (msgs! Poly) (path! Poly)) (! (= (lib!betree.PivotBranchRefinement_v.impl&%0.append_via_insert.? self! keys! msgs! path!) (%Poly%lib!betree.PivotBranch_v.Node. (vstd!seq_lib.impl&%0.fold_left_alt.? $ (TYPE%tuple%2. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) $ TYPE%lib!betree.PivotBranch_v.Node. (vstd!seq_lib.impl&%0.zip_with.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. keys! msgs!) self! (Poly%fun%2. (mk_fun (%%lambda%%18 (%I (I (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. path!)))))))))) :pattern ((lib!betree.PivotBranchRefinement_v.impl&%0.append_via_insert.? self! keys! msgs! path!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranchRefinement_v.map_all_keys.))
(declare-fun %%lambda%%19 () %%Function%%)
(assert (forall ((i$ Poly) (child$ Poly)) (! (= (%%apply%%1 %%lambda%%19 i$ child$) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.impl&%3.all_keys.? child$))) :pattern ((%%apply%%1 %%lambda%%19 i$ child$)))))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranchRefinement_v.map_all_keys.) (forall ((children! Poly)) (! (= (lib!betree.PivotBranchRefinement_v.map_all_keys.? children!) (%Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!betree.PivotBranch_v.Node. $ (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.) children! (Poly%fun%2. (mk_fun %%lambda%%19))))) :pattern ((lib!betree.PivotBranchRefinement_v.map_all_keys.? children!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranchRefinement_v.union_all_keys.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranchRefinement_v.union_all_keys.) (forall ((children! Poly)) (! (= (lib!betree.PivotBranchRefinement_v.union_all_keys.? children!) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.Utils_v.union_seq_of_sets.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<vstd!set.Set<lib!spec.KeyType_t.Key.>.>. (lib!betree.PivotBranchRefinement_v.map_all_keys.? children!))))) :pattern ((lib!betree.PivotBranchRefinement_v.union_all_keys.? children!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%0.arrow_pivot_index.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%0.arrow_pivot_index.) (forall ((self! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%0.arrow_pivot_index.? self!) (lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot_index (%Poly%lib!betree.PivotBranch_v.SplitArg. self!))) :pattern ((lib!betree.PivotBranch_v.impl&%0.arrow_pivot_index.? self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%0.arrow_SplitIndex_pivot.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%0.arrow_SplitIndex_pivot.) (forall ((self! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%0.arrow_SplitIndex_pivot.? self!) (lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot (%Poly%lib!betree.PivotBranch_v.SplitArg. self!))) :pattern ((lib!betree.PivotBranch_v.impl&%0.arrow_SplitIndex_pivot.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.SplitArg.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranch_v.impl&%0.arrow_SplitIndex_pivot.? self!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PivotBranch_v.impl&%0.arrow_SplitIndex_pivot.? self!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%0.arrow_SplitLeaf_pivot.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%0.arrow_SplitLeaf_pivot.) (forall ((self! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%0.arrow_SplitLeaf_pivot.? self!) (lib!betree.PivotBranch_v.SplitArg./SplitLeaf/pivot (%Poly%lib!betree.PivotBranch_v.SplitArg. self!))) :pattern ((lib!betree.PivotBranch_v.impl&%0.arrow_SplitLeaf_pivot.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.SplitArg.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranch_v.impl&%0.arrow_SplitLeaf_pivot.? self!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PivotBranch_v.impl&%0.arrow_SplitLeaf_pivot.? self!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%1.wf.))
(define-fun is-lib!betree.PivotBranch_v.SplitArg./SplitLeaf_ ((c lib!betree.PivotBranch_v.SplitArg.)) Bool ((_ is lib!betree.PivotBranch_v.SplitArg./SplitLeaf) c))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%1.wf.) (forall ((self! Poly) (split_node! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%1.wf.? self! split_node!) (ite (is-lib!betree.PivotBranch_v.SplitArg./SplitLeaf_ (%Poly%lib!betree.PivotBranch_v.SplitArg. self!)) (let ((pivot$ (lib!betree.PivotBranch_v.SplitArg./SplitLeaf/pivot (%Poly%lib!betree.PivotBranch_v.SplitArg. self!)))) (and (and (is-lib!betree.PivotBranch_v.Node./Leaf_ (%Poly%lib!betree.PivotBranch_v.Node. split_node!)) (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. split_node!)))) (vstd!seq.Seq.len.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. split_node!)))))) (let ((tmp%%$ (Add (lib!spec.KeyType_t.impl&%1.largest_lt.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. split_node!))) (Poly%lib!spec.KeyType_t.Key. pivot$)) 1))) (and (< 0 tmp%%$) (< tmp%%$ (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. split_node!))))))))) (let ((pivot$ (lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot (%Poly%lib!betree.PivotBranch_v.SplitArg. self!)))) (let ((pivot_index$ (lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot_index (%Poly%lib!betree.PivotBranch_v.SplitArg. self!)))) (and (and (and (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. split_node!)) (lib!betree.PivotBranch_v.impl&%3.wf.? split_node!)) (and (<= 0 pivot_index$) (< pivot_index$ (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. split_node!))))))) (= (%Poly%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. split_node!))) (I pivot_index$))) pivot$)))))) :pattern ((lib!betree.PivotBranch_v.impl&%1.wf.? self! split_node!)) ))))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%1.get_pivot.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%1.get_pivot.) (forall ((self! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%1.get_pivot.? self!) (ite (is-lib!betree.PivotBranch_v.SplitArg./SplitLeaf_ (%Poly%lib!betree.PivotBranch_v.SplitArg. self!)) (lib!betree.PivotBranch_v.SplitArg./SplitLeaf/pivot (%Poly%lib!betree.PivotBranch_v.SplitArg. self!)) (lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot (%Poly%lib!betree.PivotBranch_v.SplitArg. self!)))) :pattern ((lib!betree.PivotBranch_v.impl&%1.get_pivot.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.PivotBranch_v.SplitArg.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranch_v.impl&%1.get_pivot.? self!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!betree.PivotBranch_v.impl&%1.get_pivot.? self!)) )))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.query. (Poly Poly) Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.query. self! key!) (and (=> %%global_location_label%%51 (lib!betree.PivotBranch_v.impl&%3.wf.? self!)) (=> %%global_location_label%%52 (=> (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (let ((tmp%%$ (Add (lib!betree.PivotBranch_v.impl&%3.route.? self! key!) 1))) (and (<= 0 tmp%%$) (< tmp%%$ (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))))))))))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.query. self! key!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.query.))
(declare-const fuel_nat%lib!betree.PivotBranch_v.impl&%3.query. Fuel)
(assert (forall ((self! Poly) (key! Poly) (fuel% Fuel)) (! (= (lib!betree.PivotBranch_v.impl&%3.rec%query.? self! key! fuel%) (lib!betree.PivotBranch_v.impl&%3.rec%query.? self! key! zero)) :pattern ((lib!betree.PivotBranch_v.impl&%3.rec%query.? self! key! fuel%)) )))
(assert (forall ((self! Poly) (key! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (has_type key! TYPE%lib!spec.KeyType_t.Key.) (=> (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (let ((tmp%%$ (Add (lib!betree.PivotBranch_v.impl&%3.route.? self! key!) 1))) (and (<= 0 tmp%%$) (< tmp%%$ (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))))))))) (= (lib!betree.PivotBranch_v.impl&%3.rec%query.? self! key! (succ fuel%)) (let ((r$ (lib!betree.PivotBranch_v.impl&%3.route.? self! key!))) (ite (is-lib!betree.PivotBranch_v.Node./Leaf_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (let ((keys$ (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (let ((msgs$ (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (ite (and (>= r$ 0) (= (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys$) (I r$)) key!)) (%Poly%lib!spec.Messages_t.Message. (vstd!seq.Seq.index.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. msgs$) (I r$))) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0)))))))) (let ((pivots$ (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (let ((children$ (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (lib!betree.PivotBranch_v.impl&%3.rec%query.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. children$) (I (Add r$ 1))) key! fuel%))))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.rec%query.? self! key! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.query.) (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (has_type key! TYPE%lib!spec.KeyType_t.Key.) (=> (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (let ((tmp%%$ (Add (lib!betree.PivotBranch_v.impl&%3.route.? self! key!) 1))) (and (<= 0 tmp%%$) (< tmp%%$ (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))))))))) (= (lib!betree.PivotBranch_v.impl&%3.query.? self! key!) (lib!betree.PivotBranch_v.impl&%3.rec%query.? self! key! (succ fuel_nat%lib!betree.PivotBranch_v.impl&%3.query.)))) :pattern ((lib!betree.PivotBranch_v.impl&%3.query.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.PivotBranch_v.impl&%3.query.? self! key!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.PivotBranch_v.impl&%3.query.? self! key!)) )))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.grow. (Poly) Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.grow. self!) (=> %%global_location_label%%53 (lib!betree.PivotBranch_v.impl&%3.wf.? self!))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.grow. self!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.grow.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.grow.) (forall ((self! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.grow.? self!) (lib!betree.PivotBranch_v.Node./Index (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (vstd!seq.Seq.empty.? $ TYPE%lib!spec.KeyType_t.Key.)) (%Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (vstd!seq.Seq.push.? $ TYPE%lib!betree.PivotBranch_v.Node. (vstd!seq.Seq.empty.? $ TYPE%lib!betree.PivotBranch_v.Node.) self!)))) :pattern ((lib!betree.PivotBranch_v.impl&%3.grow.? self!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.append_leaf. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((self! Poly) (keys! Poly) (msgs! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.append_leaf. self! keys! msgs!) (and (=> %%global_location_label%%54 (lib!betree.PivotBranch_v.impl&%3.wf.? self!)) (=> %%global_location_label%%55 (is-lib!betree.PivotBranch_v.Node./Leaf_ (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%56 (> (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. keys!) 0)) (=> %%global_location_label%%57 (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. keys!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.Messages_t.Message. msgs!))) (=> %%global_location_label%%58 (lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? keys!)) (=> %%global_location_label%%59 (lib!spec.KeyType_t.impl&%1.lt.? (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. keys! (I 0)))))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.append_leaf. self! keys! msgs!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.append_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.append_leaf.) (forall ((self! Poly) (keys! Poly) (msgs! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.append_leaf.? self! keys! msgs!) (lib!betree.PivotBranch_v.Node./Leaf (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (vstd!seq.Seq.add.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!))) keys!)) (%Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (vstd!seq.Seq.add.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. self!))) msgs!)))) :pattern ((lib!betree.PivotBranch_v.impl&%3.append_leaf.? self! keys! msgs!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.append. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(assert (forall ((self! Poly) (keys! Poly) (msgs! Poly) (path! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.append. self! keys! msgs! path!) (and (=> %%global_location_label%%60 (lib!betree.PivotBranch_v.impl&%4.valid.? path!)) (=> %%global_location_label%%61 (= (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. path!)) (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%62 (> (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. keys!) 0)) (=> %%global_location_label%%63 (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. keys!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.Messages_t.Message. msgs!))) (=> %%global_location_label%%64 (lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? keys!)) (=> %%global_location_label%%65 (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? path!)))) (=> %%global_location_label%%66 (is-lib!betree.PivotBranch_v.Node./Leaf_ (lib!betree.PivotBranch_v.impl&%4.target.? path!))) (=> %%global_location_label%%67 (lib!spec.KeyType_t.impl&%1.lt.? (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? path!)))))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. keys! (I 0)))) (=> %%global_location_label%%68 (= (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. path!)) (%Poly%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. keys! (I 0))))) (=> %%global_location_label%%69 (lib!betree.PivotBranch_v.impl&%4.path_equiv.? path! (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. keys!))))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.append. self! keys! msgs! path!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.append.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.append.) (forall ((self! Poly) (keys! Poly) (msgs! Poly) (path! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.append.? self! keys! msgs! path!) (lib!betree.PivotBranch_v.impl&%4.substitute.? path! (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%3.append_leaf.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? path!)) keys! msgs!)))) :pattern ((lib!betree.PivotBranch_v.impl&%3.append.? self! keys! msgs! path!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.split_leaf. (Poly Poly) Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((self! Poly) (split_arg! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.split_leaf. self! split_arg!) (and (=> %%global_location_label%%70 (is-lib!betree.PivotBranch_v.Node./Leaf_ (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%71 (lib!betree.PivotBranch_v.impl&%1.wf.? split_arg! self!)))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.split_leaf. self! split_arg!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.split_leaf.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.split_leaf.) (forall ((self! Poly) (split_arg! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.split_leaf.? self! split_arg!) (let ((pivot$ (lib!betree.PivotBranch_v.impl&%1.get_pivot.? split_arg!))) (let ((split_index$ (Add (lib!spec.KeyType_t.impl&%1.largest_lt.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!))) (Poly%lib!spec.KeyType_t.Key. pivot$)) 1))) (let ((left_leaf$ (lib!betree.PivotBranch_v.Node./Leaf (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I 0) (I split_index$))) (%Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I 0) (I split_index$)))))) (let ((right_leaf$ (lib!betree.PivotBranch_v.Node./Leaf (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I split_index$) (I (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. self!))))))) (%Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I split_index$) (I (vstd!seq.Seq.len.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. (lib!betree.PivotBranch_v.Node./Leaf/msgs (%Poly%lib!betree.PivotBranch_v.Node. self!)))))))))) (tuple%2./tuple%2 (Poly%lib!betree.PivotBranch_v.Node. left_leaf$) (Poly%lib!betree.PivotBranch_v.Node. right_leaf$))))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.split_leaf.? self! split_arg!)) ))))
(assert (forall ((self! Poly) (split_arg! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (has_type split_arg! TYPE%lib!betree.PivotBranch_v.SplitArg.)) (has_type (Poly%tuple%2. (lib!betree.PivotBranch_v.impl&%3.split_leaf.? self! split_arg!)) (TYPE%tuple%2. $ TYPE%lib!betree.PivotBranch_v.Node. $ TYPE%lib!betree.PivotBranch_v.Node.))) :pattern ((lib!betree.PivotBranch_v.impl&%3.split_leaf.? self! split_arg!)) )))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.sub_index. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(assert (forall ((self! Poly) (from! Poly) (to! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.sub_index. self! from! to!) (and (=> %%global_location_label%%72 (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%73 (= (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!)))) (nClip (Add (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!)))) 1)))) (=> %%global_location_label%%74 (and (and (<= 0 (%I from!)) (< (%I from!) (%I to!))) (<= (%I to!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))))))))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.sub_index. self! from! to!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.sub_index.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.sub_index.) (forall ((self! Poly) (from! Poly) (to! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.sub_index.? self! from! to!) (lib!betree.PivotBranch_v.Node./Index (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!))) from! (I (Sub (%I to!) 1)))) (%Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))) from! to!)))) :pattern ((lib!betree.PivotBranch_v.impl&%3.sub_index.? self! from! to!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.split_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(assert (forall ((self! Poly) (split_arg! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.split_index. self! split_arg!) (and (=> %%global_location_label%%75 (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%76 (lib!betree.PivotBranch_v.impl&%1.wf.? split_arg! self!)))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.split_index. self! split_arg!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.split_index.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.split_index.) (forall ((self! Poly) (split_arg! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.split_index.? self! split_arg!) (let ((pivot_index$ (lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot_index (%Poly%lib!betree.PivotBranch_v.SplitArg. split_arg!)))) (let ((left_index$ (lib!betree.PivotBranch_v.impl&%3.sub_index.? self! (I 0) (I (Add pivot_index$ 1))))) (let ((right_index$ (lib!betree.PivotBranch_v.impl&%3.sub_index.? self! (I (Add pivot_index$ 1)) (I (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!)))))))) (tuple%2./tuple%2 (Poly%lib!betree.PivotBranch_v.Node. left_index$) (Poly%lib!betree.PivotBranch_v.Node. right_index$)))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.split_index.? self! split_arg!)) ))))
(assert (forall ((self! Poly) (split_arg! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (has_type split_arg! TYPE%lib!betree.PivotBranch_v.SplitArg.)) (has_type (Poly%tuple%2. (lib!betree.PivotBranch_v.impl&%3.split_index.? self! split_arg!)) (TYPE%tuple%2. $ TYPE%lib!betree.PivotBranch_v.Node. $ TYPE%lib!betree.PivotBranch_v.Node.))) :pattern ((lib!betree.PivotBranch_v.impl&%3.split_index.? self! split_arg!)) )))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.split_node. (Poly Poly) Bool)
(declare-const %%global_location_label%%77 Bool)
(assert (forall ((self! Poly) (split_arg! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.split_node. self! split_arg!) (=> %%global_location_label%%77 (lib!betree.PivotBranch_v.impl&%1.wf.? split_arg! self!))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.split_node. self! split_arg!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.split_node.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.split_node.) (forall ((self! Poly) (split_arg! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.split_node.? self! split_arg!) (ite (is-lib!betree.PivotBranch_v.Node./Leaf_ (%Poly%lib!betree.PivotBranch_v.Node. self!)) (lib!betree.PivotBranch_v.impl&%3.split_leaf.? self! split_arg!) (lib!betree.PivotBranch_v.impl&%3.split_index.? self! split_arg!))) :pattern ((lib!betree.PivotBranch_v.impl&%3.split_node.? self! split_arg!)) ))))
(assert (forall ((self! Poly) (split_arg! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.PivotBranch_v.Node.) (has_type split_arg! TYPE%lib!betree.PivotBranch_v.SplitArg.)) (has_type (Poly%tuple%2. (lib!betree.PivotBranch_v.impl&%3.split_node.? self! split_arg!)) (TYPE%tuple%2. $ TYPE%lib!betree.PivotBranch_v.Node. $ TYPE%lib!betree.PivotBranch_v.Node.))) :pattern ((lib!betree.PivotBranch_v.impl&%3.split_node.? self! split_arg!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.can_split_child_of_index.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.can_split_child_of_index.) (forall ((self! Poly) (split_arg! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.can_split_child_of_index.? self! split_arg!) (and (and (lib!betree.PivotBranch_v.impl&%3.wf.? self!) (is-lib!betree.PivotBranch_v.Node./Index_ (%Poly%lib!betree.PivotBranch_v.Node. self!))) (let ((child_idx$ (Add (lib!betree.PivotBranch_v.impl&%3.route.? self! (Poly%lib!spec.KeyType_t.Key. (lib!betree.PivotBranch_v.impl&%1.get_pivot.? split_arg!))) 1))) (lib!betree.PivotBranch_v.impl&%1.wf.? split_arg! (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I child_idx$)))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.can_split_child_of_index.? self! split_arg!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.split_child_of_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%78 Bool)
(assert (forall ((self! Poly) (split_arg! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.split_child_of_index. self! split_arg!) (=> %%global_location_label%%78 (lib!betree.PivotBranch_v.impl&%3.can_split_child_of_index.? self! split_arg!))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.split_child_of_index. self! split_arg!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.split_child_of_index.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.split_child_of_index.) (forall ((self! Poly) (split_arg! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.split_child_of_index.? self! split_arg!) (let ((pivot$ (lib!betree.PivotBranch_v.impl&%1.get_pivot.? split_arg!))) (let ((child_idx$ (Add (lib!betree.PivotBranch_v.impl&%3.route.? self! (Poly%lib!spec.KeyType_t.Key. pivot$)) 1))) (let ((tmp%%$ (lib!betree.PivotBranch_v.impl&%3.split_node.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I child_idx$)) split_arg!))) (let ((left_node$ (%Poly%lib!betree.PivotBranch_v.Node. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((right_node$ (%Poly%lib!betree.PivotBranch_v.Node. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (lib!betree.PivotBranch_v.Node./Index (%Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Index/pivots (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I child_idx$) (Poly%lib!spec.KeyType_t.Key. pivot$))) (%Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!betree.PivotBranch_v.Node. (vstd!seq.Seq.update.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. self!))) (I child_idx$) (Poly%lib!betree.PivotBranch_v.Node. left_node$)) (I (Add child_idx$ 1)) (Poly%lib!betree.PivotBranch_v.Node. right_node$)))))))))) :pattern ((lib!betree.PivotBranch_v.impl&%3.split_child_of_index.? self! split_arg!)) ))))
(declare-fun req%lib!betree.PivotBranch_v.impl&%3.split. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(assert (forall ((self! Poly) (path! Poly) (split_arg! Poly)) (! (= (req%lib!betree.PivotBranch_v.impl&%3.split. self! path! split_arg!) (and (=> %%global_location_label%%79 (lib!betree.PivotBranch_v.impl&%3.wf.? self!)) (=> %%global_location_label%%80 (lib!betree.PivotBranch_v.impl&%4.valid.? path!)) (=> %%global_location_label%%81 (= (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. path!)) (%Poly%lib!betree.PivotBranch_v.Node. self!))) (=> %%global_location_label%%82 (= (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. path!)) (lib!betree.PivotBranch_v.impl&%1.get_pivot.? split_arg!))) (=> %%global_location_label%%83 (lib!betree.PivotBranch_v.impl&%3.can_split_child_of_index.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? path!)) split_arg!)))) :pattern ((req%lib!betree.PivotBranch_v.impl&%3.split. self! path! split_arg!)) )))
(assert (fuel_bool_default fuel%lib!betree.PivotBranch_v.impl&%3.split.))
(assert (=> (fuel_bool fuel%lib!betree.PivotBranch_v.impl&%3.split.) (forall ((self! Poly) (path! Poly) (split_arg! Poly)) (! (= (lib!betree.PivotBranch_v.impl&%3.split.? self! path! split_arg!) (lib!betree.PivotBranch_v.impl&%4.substitute.? path! (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%3.split_child_of_index.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? path!)) split_arg!)))) :pattern ((lib!betree.PivotBranch_v.impl&%3.split.? self! path! split_arg!)) ))))
(assert (fuel_bool_default fuel%lib!spec.KeyType_t.impl&%1.map_pivoted_union.))
(declare-fun %%lambda%%20 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (key$ Poly)) (! (= (%%apply%%0 (%%lambda%%20 %%hole%%0) key$) (B (lib!spec.KeyType_t.impl&%1.lt.? key$ %%hole%%0))) :pattern ((%%apply%%0 (%%lambda%%20 %%hole%%0) key$)))))
(declare-fun %%lambda%%21 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (key$ Poly)) (! (= (%%apply%%0 (%%lambda%%21 %%hole%%0) key$) (B (lib!spec.KeyType_t.impl&%1.lte.? %%hole%%0 key$))) :pattern ((%%apply%%0 (%%lambda%%21 %%hole%%0) key$)))))
(assert (=> (fuel_bool fuel%lib!spec.KeyType_t.impl&%1.map_pivoted_union.) (forall ((V&. Dcr) (V& Type) (left! Poly) (pivot! Poly) (right! Poly)) (! (= (lib!spec.KeyType_t.impl&%1.map_pivoted_union.? V&. V& left! pivot! right!) (let ((restricted_left$ (vstd!map_lib.impl&%0.restrict.? $ TYPE%lib!spec.KeyType_t.Key. V&. V& left! (vstd!set.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%20 pivot!))))))) (let ((restricted_right$ (vstd!map_lib.impl&%0.restrict.? $ TYPE%lib!spec.KeyType_t.Key. V&. V& right! (vstd!set.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%21 pivot!))))))) (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!spec.KeyType_t.Key. V&. V& restricted_left$ restricted_right$)))) :pattern ((lib!spec.KeyType_t.impl&%1.map_pivoted_union.? V&. V& left! pivot! right!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (left! Poly) (pivot! Poly) (right! Poly)) (! (=> (and (has_type left! (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. V&. V&)) (has_type pivot! TYPE%lib!spec.KeyType_t.Key.) (has_type right! (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. V&. V&))) (has_type (lib!spec.KeyType_t.impl&%1.map_pivoted_union.? V&. V& left! pivot! right!) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. V&. V&))) :pattern ((lib!spec.KeyType_t.impl&%1.map_pivoted_union.? V&. V& left! pivot! right!)) )))
(declare-fun req%lib!betree.Utils_v.lemma_set_subset_of_union_seq_of_sets. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%84 Bool)
(assert (forall ((A&. Dcr) (A& Type) (sets! Poly) (a! Poly)) (! (= (req%lib!betree.Utils_v.lemma_set_subset_of_union_seq_of_sets. A&. A& sets! a!) (=> %%global_location_label%%84 (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!set.Set. A&. A&) sets!))) (vstd!set.impl&%0.contains.? A&. A& (vstd!seq.Seq.index.? $ (TYPE%vstd!set.Set. A&. A&) sets! i$) a!))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!set.Set. A&. A&) sets! i$)) )))) :pattern ((req%lib!betree.Utils_v.lemma_set_subset_of_union_seq_of_sets. A&. A& sets! a!)) )))
(declare-fun ens%lib!betree.Utils_v.lemma_set_subset_of_union_seq_of_sets. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (sets! Poly) (a! Poly)) (! (= (ens%lib!betree.Utils_v.lemma_set_subset_of_union_seq_of_sets. A&. A& sets! a!) (vstd!set.impl&%0.contains.? A&. A& (lib!betree.Utils_v.union_seq_of_sets.? A&. A& sets!) a!)) :pattern ((ens%lib!betree.Utils_v.lemma_set_subset_of_union_seq_of_sets. A&. A& sets! a!)) )))
(declare-fun req%lib!betree.Utils_v.lemma_union_seq_of_sets_contains. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%85 Bool)
(assert (forall ((A&. Dcr) (A& Type) (sets! Poly) (a! Poly)) (! (= (req%lib!betree.Utils_v.lemma_union_seq_of_sets_contains. A&. A& sets! a!) (=> %%global_location_label%%85 (vstd!set.impl&%0.contains.? A&. A& (lib!betree.Utils_v.union_seq_of_sets.? A&. A& sets!) a!))) :pattern ((req%lib!betree.Utils_v.lemma_union_seq_of_sets_contains. A&. A& sets! a!)) )))
(declare-fun ens%lib!betree.Utils_v.lemma_union_seq_of_sets_contains. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (sets! Poly) (a! Poly)) (! (= (ens%lib!betree.Utils_v.lemma_union_seq_of_sets_contains. A&. A& sets! a!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!set.Set. A&. A&) sets!))) (vstd!set.impl&%0.contains.? A&. A& (vstd!seq.Seq.index.? $ (TYPE%vstd!set.Set. A&. A&) sets! i$) a!))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!set.Set. A&. A&) sets! i$)) ))) :pattern ((ens%lib!betree.Utils_v.lemma_union_seq_of_sets_contains. A&. A& sets! a!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_children_keys_equivalence. (lib!betree.PivotBranch_v.Node.) Bool)
(declare-const %%global_location_label%%86 Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_children_keys_equivalence. node!) (=> %%global_location_label%%86 (is-lib!betree.PivotBranch_v.Node./Index_ node!))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_children_keys_equivalence. node!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_children_keys_equivalence. (lib!betree.PivotBranch_v.Node.) Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_children_keys_equivalence. node!) (= (lib!betree.PivotBranch_v.impl&%3.children_keys.? (Poly%lib!betree.PivotBranch_v.Node. node!)) (lib!betree.PivotBranchRefinement_v.union_all_keys.? (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. node!))))))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_children_keys_equivalence. node!)) )))
(declare-fun req%lib!betree.Utils_v.lemma_union_seq_of_sets_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%87 Bool)
(assert (forall ((A&. Dcr) (A& Type) (sets! Poly)) (! (= (req%lib!betree.Utils_v.lemma_union_seq_of_sets_finite. A&. A& sets!) (=> %%global_location_label%%87 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!set.Set. A&. A&) sets!))) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq.Seq.index.? $ (TYPE%vstd!set.Set. A&. A&) sets! i$)))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!set.Set. A&. A&) sets! i$)) )))) :pattern ((req%lib!betree.Utils_v.lemma_union_seq_of_sets_finite. A&. A& sets!)) )))
(declare-fun ens%lib!betree.Utils_v.lemma_union_seq_of_sets_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (sets! Poly)) (! (= (ens%lib!betree.Utils_v.lemma_union_seq_of_sets_finite. A&. A& sets!) (vstd!set.impl&%0.finite.? A&. A& (lib!betree.Utils_v.union_seq_of_sets.? A&. A& sets!))) :pattern ((ens%lib!betree.Utils_v.lemma_union_seq_of_sets_finite. A&. A& sets!)) )))
(declare-fun req%lib!spec.KeyType_t.impl&%1.largest_lte_is_lemma. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>. lib!spec.KeyType_t.Key. Int) Bool)
(declare-const %%global_location_label%%88 Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(declare-const %%global_location_label%%91 Bool)
(assert (forall ((run! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (key! lib!spec.KeyType_t.Key.) (r! Int)) (! (= (req%lib!spec.KeyType_t.impl&%1.largest_lte_is_lemma. run! key! r!) (and (=> %%global_location_label%%88 (and (<= (Sub 0 1) r!) (< r! (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!))))) (=> %%global_location_label%%89 (lib!spec.KeyType_t.impl&%1.is_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!))) (=> %%global_location_label%%90 (or (= r! (Sub 0 1)) (lib!spec.KeyType_t.impl&%1.lte.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) (I r!)) (Poly%lib!spec.KeyType_t.Key. key!)))) (=> %%global_location_label%%91 (or (= r! (Sub (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!)) 1)) (lib!spec.KeyType_t.impl&%1.lt.? (Poly%lib!spec.KeyType_t.Key. key!) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) (I (Add r! 1)))))))) :pattern ((req%lib!spec.KeyType_t.impl&%1.largest_lte_is_lemma. run! key! r!)) )))
(declare-fun ens%lib!spec.KeyType_t.impl&%1.largest_lte_is_lemma. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>. lib!spec.KeyType_t.Key. Int) Bool)
(assert (forall ((run! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (key! lib!spec.KeyType_t.Key.) (r! Int)) (! (= (ens%lib!spec.KeyType_t.impl&%1.largest_lte_is_lemma. run! key! r!) (= (lib!spec.KeyType_t.impl&%1.largest_lte.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) (Poly%lib!spec.KeyType_t.Key. key!)) r!)) :pattern ((ens%lib!spec.KeyType_t.impl&%1.largest_lte_is_lemma. run! key! r!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_insert_leaf_is_correct. (lib!betree.PivotBranch_v.Node. lib!spec.KeyType_t.Key. lib!spec.Messages_t.Message.) Bool)
(declare-const %%global_location_label%%92 Bool)
(declare-const %%global_location_label%%93 Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (key! lib!spec.KeyType_t.Key.) (msg! lib!spec.Messages_t.Message.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_insert_leaf_is_correct. node! key! msg!) (and (=> %%global_location_label%%92 (is-lib!betree.PivotBranch_v.Node./Leaf_ node!)) (=> %%global_location_label%%93 (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. node!))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_insert_leaf_is_correct. node! key! msg!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_insert_leaf_is_correct. (lib!betree.PivotBranch_v.Node. lib!spec.KeyType_t.Key. lib!spec.Messages_t.Message.) Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (key! lib!spec.KeyType_t.Key.) (msg! lib!spec.Messages_t.Message.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_insert_leaf_is_correct. node! key! msg!) (and (= (lib!betree.PivotBranchRefinement_v.impl&%0.i.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%3.insert_leaf.? (Poly%lib!betree.PivotBranch_v.Node. node!) (Poly%lib!spec.KeyType_t.Key. key!) (Poly%lib!spec.Messages_t.Message. msg!)))) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.PivotBranchRefinement_v.impl&%0.i.? (Poly%lib!betree.PivotBranch_v.Node. node!)))))) (Poly%lib!spec.KeyType_t.Key. key!) (Poly%lib!spec.Messages_t.Message. msg!))))) (= (lib!betree.PivotBranch_v.impl&%3.all_keys.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%3.insert_leaf.? (Poly%lib!betree.PivotBranch_v.Node. node!) (Poly%lib!spec.KeyType_t.Key. key!) (Poly%lib!spec.Messages_t.Message. msg!)))) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.impl&%3.all_keys.? (Poly%lib!betree.PivotBranch_v.Node. node!))) (Poly%lib!spec.KeyType_t.Key. key!)))))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_insert_leaf_is_correct. node! key! msg!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_insert_inserts_to_all_keys. (lib!betree.PivotBranch_v.Node. lib!spec.KeyType_t.Key. lib!spec.Messages_t.Message. lib!betree.PivotBranch_v.Path.) Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(declare-const %%global_location_label%%98 Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (key! lib!spec.KeyType_t.Key.) (msg! lib!spec.Messages_t.Message.) (path! lib!betree.PivotBranch_v.Path.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_insert_inserts_to_all_keys. node! key! msg! path!) (and (=> %%global_location_label%%94 (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. node!))) (=> %%global_location_label%%95 (lib!betree.PivotBranch_v.impl&%4.valid.? (Poly%lib!betree.PivotBranch_v.Path. path!))) (=> %%global_location_label%%96 (= (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!))) node!)) (=> %%global_location_label%%97 (= (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!))) key!)) (=> %%global_location_label%%98 (is-lib!betree.PivotBranch_v.Node./Leaf_ (lib!betree.PivotBranch_v.impl&%4.target.? (Poly%lib!betree.PivotBranch_v.Path. path!)))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_insert_inserts_to_all_keys. node! key! msg! path!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_insert_inserts_to_all_keys. (lib!betree.PivotBranch_v.Node. lib!spec.KeyType_t.Key. lib!spec.Messages_t.Message. lib!betree.PivotBranch_v.Path.) Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (key! lib!spec.KeyType_t.Key.) (msg! lib!spec.Messages_t.Message.) (path! lib!betree.PivotBranch_v.Path.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_insert_inserts_to_all_keys. node! key! msg! path!) (= (lib!betree.PivotBranch_v.impl&%3.all_keys.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%3.insert.? (Poly%lib!betree.PivotBranch_v.Node. node!) (Poly%lib!spec.KeyType_t.Key. key!) (Poly%lib!spec.Messages_t.Message. msg!) (Poly%lib!betree.PivotBranch_v.Path. path!)))) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.impl&%3.all_keys.? (Poly%lib!betree.PivotBranch_v.Node. node!))) (Poly%lib!spec.KeyType_t.Key. key!))))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_insert_inserts_to_all_keys. node! key! msg! path!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_insert_preserves_wf. (lib!betree.PivotBranch_v.Node. lib!spec.KeyType_t.Key. lib!spec.Messages_t.Message. lib!betree.PivotBranch_v.Path.) Bool)
(declare-const %%global_location_label%%99 Bool)
(declare-const %%global_location_label%%100 Bool)
(declare-const %%global_location_label%%101 Bool)
(declare-const %%global_location_label%%102 Bool)
(declare-const %%global_location_label%%103 Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (key! lib!spec.KeyType_t.Key.) (msg! lib!spec.Messages_t.Message.) (path! lib!betree.PivotBranch_v.Path.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_insert_preserves_wf. node! key! msg! path!) (and (=> %%global_location_label%%99 (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. node!))) (=> %%global_location_label%%100 (lib!betree.PivotBranch_v.impl&%4.valid.? (Poly%lib!betree.PivotBranch_v.Path. path!))) (=> %%global_location_label%%101 (= (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!))) node!)) (=> %%global_location_label%%102 (= (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!))) key!)) (=> %%global_location_label%%103 (is-lib!betree.PivotBranch_v.Node./Leaf_ (lib!betree.PivotBranch_v.impl&%4.target.? (Poly%lib!betree.PivotBranch_v.Path. path!)))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_insert_preserves_wf. node! key! msg! path!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_insert_preserves_wf. (lib!betree.PivotBranch_v.Node. lib!spec.KeyType_t.Key. lib!spec.Messages_t.Message. lib!betree.PivotBranch_v.Path.) Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (key! lib!spec.KeyType_t.Key.) (msg! lib!spec.Messages_t.Message.) (path! lib!betree.PivotBranch_v.Path.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_insert_preserves_wf. node! key! msg! path!) (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%3.insert.? (Poly%lib!betree.PivotBranch_v.Node. node!) (Poly%lib!spec.KeyType_t.Key. key!) (Poly%lib!spec.Messages_t.Message. msg!) (Poly%lib!betree.PivotBranch_v.Path. path!))))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_insert_preserves_wf. node! key! msg! path!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_path_target_is_wf. (lib!betree.PivotBranch_v.Path.) Bool)
(declare-const %%global_location_label%%104 Bool)
(assert (forall ((path! lib!betree.PivotBranch_v.Path.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_path_target_is_wf. path!) (=> %%global_location_label%%104 (lib!betree.PivotBranch_v.impl&%4.valid.? (Poly%lib!betree.PivotBranch_v.Path. path!)))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_path_target_is_wf. path!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_path_target_is_wf. (lib!betree.PivotBranch_v.Path.) Bool)
(assert (forall ((path! lib!betree.PivotBranch_v.Path.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_path_target_is_wf. path!) (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? (Poly%lib!betree.PivotBranch_v.Path. path!))))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_path_target_is_wf. path!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_route_to_end. (lib!betree.PivotBranch_v.Node. lib!spec.KeyType_t.Key.) Bool)
(declare-const %%global_location_label%%105 Bool)
(declare-const %%global_location_label%%106 Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (key! lib!spec.KeyType_t.Key.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_route_to_end. node! key!) (and (=> %%global_location_label%%105 (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. node!))) (=> %%global_location_label%%106 (lib!spec.KeyType_t.impl&%1.lte.? (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots.? (Poly%lib!betree.PivotBranch_v.Node. node!)))) (Poly%lib!spec.KeyType_t.Key. key!))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_route_to_end. node! key!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_route_to_end. (lib!betree.PivotBranch_v.Node. lib!spec.KeyType_t.Key.) Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (key! lib!spec.KeyType_t.Key.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_route_to_end. node! key!) (= (lib!betree.PivotBranch_v.impl&%3.route.? (Poly%lib!betree.PivotBranch_v.Node. node!) (Poly%lib!spec.KeyType_t.Key. key!)) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.impl&%3.get_keys_or_pivots.? (Poly%lib!betree.PivotBranch_v.Node. node!)))) 1))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_route_to_end. node! key!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_key_lte_implies_route_lte. (lib!betree.PivotBranch_v.Node. lib!spec.KeyType_t.Key. lib!spec.KeyType_t.Key.) Bool)
(declare-const %%global_location_label%%107 Bool)
(declare-const %%global_location_label%%108 Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (key1! lib!spec.KeyType_t.Key.) (key2! lib!spec.KeyType_t.Key.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_key_lte_implies_route_lte. node! key1! key2!) (and (=> %%global_location_label%%107 (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. node!))) (=> %%global_location_label%%108 (lib!spec.KeyType_t.impl&%1.lte.? (Poly%lib!spec.KeyType_t.Key. key1!) (Poly%lib!spec.KeyType_t.Key. key2!))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_key_lte_implies_route_lte. node! key1! key2!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_key_lte_implies_route_lte. (lib!betree.PivotBranch_v.Node. lib!spec.KeyType_t.Key. lib!spec.KeyType_t.Key.) Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (key1! lib!spec.KeyType_t.Key.) (key2! lib!spec.KeyType_t.Key.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_key_lte_implies_route_lte. node! key1! key2!) (<= (lib!betree.PivotBranch_v.impl&%3.route.? (Poly%lib!betree.PivotBranch_v.Node. node!) (Poly%lib!spec.KeyType_t.Key. key1!)) (lib!betree.PivotBranch_v.impl&%3.route.? (Poly%lib!betree.PivotBranch_v.Node. node!) (Poly%lib!spec.KeyType_t.Key. key2!)))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_key_lte_implies_route_lte. node! key1! key2!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_append_keys_are_path_equiv. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>. lib!betree.PivotBranch_v.Path.) Bool)
(declare-const %%global_location_label%%109 Bool)
(declare-const %%global_location_label%%110 Bool)
(declare-const %%global_location_label%%111 Bool)
(declare-const %%global_location_label%%112 Bool)
(declare-const %%global_location_label%%113 Bool)
(assert (forall ((keys! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (path! lib!betree.PivotBranch_v.Path.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_append_keys_are_path_equiv. keys! path!) (and (=> %%global_location_label%%109 (lib!betree.PivotBranch_v.impl&%4.valid.? (Poly%lib!betree.PivotBranch_v.Path. path!))) (=> %%global_location_label%%110 (> (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys!)) 0)) (=> %%global_location_label%%111 (lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys!))) (=> %%global_location_label%%112 (= (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!))) (%Poly%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys!) (I 0))))) (=> %%global_location_label%%113 (lib!betree.PivotBranch_v.impl&%4.path_equiv.? (Poly%lib!betree.PivotBranch_v.Path. path!) (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys!)))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_append_keys_are_path_equiv. keys! path!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_append_keys_are_path_equiv. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>. lib!betree.PivotBranch_v.Path.) Bool)
(assert (forall ((keys! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (path! lib!betree.PivotBranch_v.Path.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_append_keys_are_path_equiv. keys! path!) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!spec.KeyType_t.Key.) (=> (vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys!) key$) (lib!betree.PivotBranch_v.impl&%4.path_equiv.? (Poly%lib!betree.PivotBranch_v.Path. path!) key$))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. keys!) key$)) :pattern ((lib!betree.PivotBranch_v.impl&%4.path_equiv.? (Poly%lib!betree.PivotBranch_v.Path. path!) key$)) ))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_append_keys_are_path_equiv. keys! path!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_path. (lib!betree.PivotBranch_v.Path. vstd!seq.Seq<lib!spec.KeyType_t.Key.>. vstd!seq.Seq<lib!spec.Messages_t.Message.>.) Bool)
(declare-const %%global_location_label%%114 Bool)
(declare-const %%global_location_label%%115 Bool)
(declare-const %%global_location_label%%116 Bool)
(declare-const %%global_location_label%%117 Bool)
(declare-const %%global_location_label%%118 Bool)
(declare-const %%global_location_label%%119 Bool)
(declare-const %%global_location_label%%120 Bool)
(declare-const %%global_location_label%%121 Bool)
(assert (forall ((path! lib!betree.PivotBranch_v.Path.) (new_keys! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (new_msgs! vstd!seq.Seq<lib!spec.Messages_t.Message.>.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_path. path! new_keys! new_msgs!) (and (=> %%global_location_label%%114 (lib!betree.PivotBranch_v.impl&%4.valid.? (Poly%lib!betree.PivotBranch_v.Path. path!))) (=> %%global_location_label%%115 (> (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!)) 1)) (=> %%global_location_label%%116 (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!)) (vstd!seq.Seq.len.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. new_msgs!)))) (=> %%global_location_label%%117 (lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!))) (=> %%global_location_label%%118 (is-lib!betree.PivotBranch_v.Node./Leaf_ (lib!betree.PivotBranch_v.impl&%4.target.? (Poly%lib!betree.PivotBranch_v.Path. path!)))) (=> %%global_location_label%%119 (lib!spec.KeyType_t.impl&%1.lt.? (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? (Poly%lib!betree.PivotBranch_v.Path. path!))))))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 0)))) (=> %%global_location_label%%120 (= (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!))) (%Poly%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 0))))) (=> %%global_location_label%%121 (lib!betree.PivotBranch_v.impl&%4.path_equiv.? (Poly%lib!betree.PivotBranch_v.Path. path!) (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!)))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_path. path! new_keys! new_msgs!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_path. (lib!betree.PivotBranch_v.Path. vstd!seq.Seq<lib!spec.KeyType_t.Key.>. vstd!seq.Seq<lib!spec.Messages_t.Message.>.) Bool)
(assert (forall ((path! lib!betree.PivotBranch_v.Path.) (new_keys! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (new_msgs! vstd!seq.Seq<lib!spec.Messages_t.Message.>.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_path. path! new_keys! new_msgs!) (let ((path1$ (lib!betree.PivotBranch_v.Path./Path (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%3.insert.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!)))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 0)) (vstd!seq.Seq.index.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. new_msgs!) (I 0)) (Poly%lib!betree.PivotBranch_v.Path. path!)))) (%Poly%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 1))) (%I (I (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!)))))))) (and (and (lib!betree.PivotBranch_v.impl&%4.valid.? (Poly%lib!betree.PivotBranch_v.Path. path1$)) (= (lib!betree.PivotBranch_v.impl&%4.target.? (Poly%lib!betree.PivotBranch_v.Path. path1$)) (lib!betree.PivotBranch_v.impl&%3.insert_leaf.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? (Poly%lib!betree.PivotBranch_v.Path. path!))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 0)) (vstd!seq.Seq.index.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. new_msgs!) (I 0))))) (lib!betree.PivotBranch_v.impl&%4.path_equiv.? (Poly%lib!betree.PivotBranch_v.Path. path1$) (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!)))))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_path. path! new_keys! new_msgs!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_append_incremental. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>. vstd!seq.Seq<lib!spec.Messages_t.Message.>. lib!betree.PivotBranch_v.Path. lib!betree.PivotBranch_v.Path.) Bool)
(declare-const %%global_location_label%%122 Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(declare-const %%global_location_label%%125 Bool)
(declare-const %%global_location_label%%126 Bool)
(declare-const %%global_location_label%%127 Bool)
(declare-const %%global_location_label%%128 Bool)
(declare-const %%global_location_label%%129 Bool)
(declare-const %%global_location_label%%130 Bool)
(assert (forall ((new_keys! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (new_msgs! vstd!seq.Seq<lib!spec.Messages_t.Message.>.) (path! lib!betree.PivotBranch_v.Path.) (path1! lib!betree.PivotBranch_v.Path.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_append_incremental. new_keys! new_msgs! path! path1!) (and (=> %%global_location_label%%122 (lib!betree.PivotBranch_v.impl&%4.valid.? (Poly%lib!betree.PivotBranch_v.Path. path!))) (=> %%global_location_label%%123 (> (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!)) 1)) (=> %%global_location_label%%124 (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!)) (vstd!seq.Seq.len.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. new_msgs!)))) (=> %%global_location_label%%125 (lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!))) (=> %%global_location_label%%126 (is-lib!betree.PivotBranch_v.Node./Leaf_ (lib!betree.PivotBranch_v.impl&%4.target.? (Poly%lib!betree.PivotBranch_v.Path. path!)))) (=> %%global_location_label%%127 (lib!spec.KeyType_t.impl&%1.lt.? (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? (Poly%lib!betree.PivotBranch_v.Path. path!))))))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 0)))) (=> %%global_location_label%%128 (= (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!))) (%Poly%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 0))))) (=> %%global_location_label%%129 (lib!betree.PivotBranch_v.impl&%4.path_equiv.? (Poly%lib!betree.PivotBranch_v.Path. path!) (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!)))) (=> %%global_location_label%%130 (= path1! (lib!betree.PivotBranch_v.Path./Path (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%3.append.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!)))) (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 0) (I 1)) (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. new_msgs!) (I 0) (I 1)) (Poly%lib!betree.PivotBranch_v.Path. path!)))) (%Poly%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 1))) (%I (I (lib!betree.PivotBranch_v.Path./Path/depth (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!)))))))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_append_incremental. new_keys! new_msgs! path! path1!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_append_incremental. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>. vstd!seq.Seq<lib!spec.Messages_t.Message.>. lib!betree.PivotBranch_v.Path. lib!betree.PivotBranch_v.Path.) Bool)
(assert (forall ((new_keys! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (new_msgs! vstd!seq.Seq<lib!spec.Messages_t.Message.>.) (path! lib!betree.PivotBranch_v.Path.) (path1! lib!betree.PivotBranch_v.Path.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_append_incremental. new_keys! new_msgs! path! path1!) (= (lib!betree.PivotBranch_v.impl&%3.append.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!)))) (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. new_msgs!) (Poly%lib!betree.PivotBranch_v.Path. path!)) (lib!betree.PivotBranch_v.impl&%3.append.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path1!)))) (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 1) (I (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!)))) (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. new_msgs!) (I 1) (I (vstd!seq.Seq.len.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. new_msgs!)))) (Poly%lib!betree.PivotBranch_v.Path. path1!)))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_append_incremental. new_keys! new_msgs! path! path1!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_equiv. (lib!betree.PivotBranch_v.Node. vstd!seq.Seq<lib!spec.KeyType_t.Key.>. vstd!seq.Seq<lib!spec.Messages_t.Message.>. lib!betree.PivotBranch_v.Path.) Bool)
(declare-const %%global_location_label%%131 Bool)
(declare-const %%global_location_label%%132 Bool)
(declare-const %%global_location_label%%133 Bool)
(declare-const %%global_location_label%%134 Bool)
(declare-const %%global_location_label%%135 Bool)
(declare-const %%global_location_label%%136 Bool)
(declare-const %%global_location_label%%137 Bool)
(declare-const %%global_location_label%%138 Bool)
(declare-const %%global_location_label%%139 Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (new_keys! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (new_msgs! vstd!seq.Seq<lib!spec.Messages_t.Message.>.) (path! lib!betree.PivotBranch_v.Path.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_equiv. node! new_keys! new_msgs! path!) (and (=> %%global_location_label%%131 (lib!betree.PivotBranch_v.impl&%4.valid.? (Poly%lib!betree.PivotBranch_v.Path. path!))) (=> %%global_location_label%%132 (= (lib!betree.PivotBranch_v.Path./Path/node (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!))) node!)) (=> %%global_location_label%%133 (> (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!)) 0)) (=> %%global_location_label%%134 (= (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!)) (vstd!seq.Seq.len.? $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. new_msgs!)))) (=> %%global_location_label%%135 (lib!spec.KeyType_t.impl&%1.is_strictly_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!))) (=> %%global_location_label%%136 (is-lib!betree.PivotBranch_v.Node./Leaf_ (lib!betree.PivotBranch_v.impl&%4.target.? (Poly%lib!betree.PivotBranch_v.Path. path!)))) (=> %%global_location_label%%137 (lib!spec.KeyType_t.impl&%1.lt.? (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. (lib!betree.PivotBranch_v.Node./Leaf/keys (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%4.target.? (Poly%lib!betree.PivotBranch_v.Path. path!))))))) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 0)))) (=> %%global_location_label%%138 (= (lib!betree.PivotBranch_v.Path./Path/key (%Poly%lib!betree.PivotBranch_v.Path. (Poly%lib!betree.PivotBranch_v.Path. path!))) (%Poly%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (I 0))))) (=> %%global_location_label%%139 (lib!betree.PivotBranch_v.impl&%4.path_equiv.? (Poly%lib!betree.PivotBranch_v.Path. path!) (vstd!seq.Seq.last.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!)))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_equiv. node! new_keys! new_msgs! path!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_equiv. (lib!betree.PivotBranch_v.Node. vstd!seq.Seq<lib!spec.KeyType_t.Key.>. vstd!seq.Seq<lib!spec.Messages_t.Message.>. lib!betree.PivotBranch_v.Path.) Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (new_keys! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (new_msgs! vstd!seq.Seq<lib!spec.Messages_t.Message.>.) (path! lib!betree.PivotBranch_v.Path.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_equiv. node! new_keys! new_msgs! path!) (= (lib!betree.PivotBranch_v.impl&%3.append.? (Poly%lib!betree.PivotBranch_v.Node. node!) (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. new_msgs!) (Poly%lib!betree.PivotBranch_v.Path. path!)) (lib!betree.PivotBranchRefinement_v.impl&%0.append_via_insert.? (Poly%lib!betree.PivotBranch_v.Node. node!) (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. new_keys!) (Poly%vstd!seq.Seq<lib!spec.Messages_t.Message.>. new_msgs!) (Poly%lib!betree.PivotBranch_v.Path. path!)))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_append_via_insert_equiv. node! new_keys! new_msgs! path!)) )))
(declare-fun req%lib!spec.KeyType_t.impl&%1.largest_lt_ensures. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>. lib!spec.KeyType_t.Key. Int) Bool)
(declare-const %%global_location_label%%140 Bool)
(declare-const %%global_location_label%%141 Bool)
(assert (forall ((run! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (needle! lib!spec.KeyType_t.Key.) (out! Int)) (! (= (req%lib!spec.KeyType_t.impl&%1.largest_lt_ensures. run! needle! out!) (and (=> %%global_location_label%%140 (lib!spec.KeyType_t.impl&%1.is_sorted.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!))) (=> %%global_location_label%%141 (= out! (lib!spec.KeyType_t.impl&%1.largest_lt.? (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) (Poly%lib!spec.KeyType_t.Key. needle!)))))) :pattern ((req%lib!spec.KeyType_t.impl&%1.largest_lt_ensures. run! needle! out!)) )))
(declare-fun ens%lib!spec.KeyType_t.impl&%1.largest_lt_ensures. (vstd!seq.Seq<lib!spec.KeyType_t.Key.>. lib!spec.KeyType_t.Key. Int) Bool)
(assert (forall ((run! vstd!seq.Seq<lib!spec.KeyType_t.Key.>.) (needle! lib!spec.KeyType_t.Key.) (out! Int)) (! (= (ens%lib!spec.KeyType_t.impl&%1.largest_lt_ensures. run! needle! out!) (and (and (<= (Sub 0 1) out!) (< out! (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (<= (%I i$) out!)) (lib!spec.KeyType_t.impl&%1.lt.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) i$) (Poly%lib!spec.KeyType_t.Key. needle!)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (< out! (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!)))) (lib!spec.KeyType_t.impl&%1.lte.? (Poly%lib!spec.KeyType_t.Key. needle!) (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) i$)) )) (=> (vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) (Poly%lib!spec.KeyType_t.Key. needle!)) (and (< (Add out! 1) (vstd!seq.Seq.len.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!))) (= (%Poly%lib!spec.KeyType_t.Key. (vstd!seq.Seq.index.? $ TYPE%lib!spec.KeyType_t.Key. (Poly%vstd!seq.Seq<lib!spec.KeyType_t.Key.>. run!) (I (Add out! 1)))) needle!))))) :pattern ((ens%lib!spec.KeyType_t.impl&%1.largest_lt_ensures. run! needle! out!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_sub_index_preserves_wf. (lib!betree.PivotBranch_v.Node. Int Int) Bool)
(declare-const %%global_location_label%%142 Bool)
(declare-const %%global_location_label%%143 Bool)
(declare-const %%global_location_label%%144 Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (from! Int) (to! Int)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_sub_index_preserves_wf. node! from! to!) (and (=> %%global_location_label%%142 (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. node!))) (=> %%global_location_label%%143 (is-lib!betree.PivotBranch_v.Node./Index_ node!)) (=> %%global_location_label%%144 (and (and (<= 0 from!) (< from! to!)) (<= to! (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. node!)))))))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_sub_index_preserves_wf. node! from! to!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_sub_index_preserves_wf. (lib!betree.PivotBranch_v.Node. Int Int) Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (from! Int) (to! Int)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_sub_index_preserves_wf. node! from! to!) (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. (lib!betree.PivotBranch_v.impl&%3.sub_index.? (Poly%lib!betree.PivotBranch_v.Node. node!) (I from!) (I to!))))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_sub_index_preserves_wf. node! from! to!)) )))
(declare-fun req%lib!betree.PivotBranchRefinement_v.lemma_split_node_preserves_wf. (lib!betree.PivotBranch_v.Node. lib!betree.PivotBranch_v.SplitArg.) Bool)
(declare-const %%global_location_label%%145 Bool)
(declare-const %%global_location_label%%146 Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (split_arg! lib!betree.PivotBranch_v.SplitArg.)) (! (= (req%lib!betree.PivotBranchRefinement_v.lemma_split_node_preserves_wf. node! split_arg!) (and (=> %%global_location_label%%145 (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. node!))) (=> %%global_location_label%%146 (lib!betree.PivotBranch_v.impl&%1.wf.? (Poly%lib!betree.PivotBranch_v.SplitArg. split_arg!) (Poly%lib!betree.PivotBranch_v.Node. node!))))) :pattern ((req%lib!betree.PivotBranchRefinement_v.lemma_split_node_preserves_wf. node! split_arg!)) )))
(declare-fun ens%lib!betree.PivotBranchRefinement_v.lemma_split_node_preserves_wf. (lib!betree.PivotBranch_v.Node. lib!betree.PivotBranch_v.SplitArg.) Bool)
(assert (forall ((node! lib!betree.PivotBranch_v.Node.) (split_arg! lib!betree.PivotBranch_v.SplitArg.)) (! (= (ens%lib!betree.PivotBranchRefinement_v.lemma_split_node_preserves_wf. node! split_arg!) (let ((tmp%%$ (lib!betree.PivotBranch_v.impl&%3.split_node.? (Poly%lib!betree.PivotBranch_v.Node. node!) (Poly%lib!betree.PivotBranch_v.SplitArg. split_arg!)))) (let ((left_node$ (%Poly%lib!betree.PivotBranch_v.Node. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((right_node$ (%Poly%lib!betree.PivotBranch_v.Node. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. left_node$)) (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. right_node$))))))) :pattern ((ens%lib!betree.PivotBranchRefinement_v.lemma_split_node_preserves_wf. node! split_arg!)) )))
(declare-const node! lib!betree.PivotBranch_v.Node.)
(declare-const split_arg! lib!betree.PivotBranch_v.SplitArg.)
(declare-const tmp%1 Int)
(declare-const tmp%2 Int)
(declare-const tmp%3 Int)
(declare-const pivot_index@ Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!betree.PivotBranch_v.SplitArg. split_arg!) TYPE%lib!betree.PivotBranch_v.SplitArg.))
(assert (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. node!)))
(assert (lib!betree.PivotBranch_v.impl&%1.wf.? (Poly%lib!betree.PivotBranch_v.SplitArg. split_arg!) (Poly%lib!betree.PivotBranch_v.Node. node!)))
(declare-const %%switch_label%%0 Bool)
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(assert (not (or (and (=> (is-lib!betree.PivotBranch_v.Node./Index_ node!) (=> (= pivot_index@ (lib!betree.PivotBranch_v.SplitArg./SplitIndex/pivot_index (%Poly%lib!betree.PivotBranch_v.SplitArg. (Poly%lib!betree.PivotBranch_v.SplitArg. split_arg!)))) (=> (= tmp%1 (Add pivot_index@ 1)) (and (=> %%location_label%%0 (req%lib!betree.PivotBranchRefinement_v.lemma_sub_index_preserves_wf. node! 0 tmp%1)) (=> (ens%lib!betree.PivotBranchRefinement_v.lemma_sub_index_preserves_wf. node! 0 tmp%1) (=> (= tmp%2 (Add pivot_index@ 1)) (=> (= tmp%3 (vstd!seq.Seq.len.? $ TYPE%lib!betree.PivotBranch_v.Node. (Poly%vstd!seq.Seq<lib!betree.PivotBranch_v.Node.>. (lib!betree.PivotBranch_v.Node./Index/children (%Poly%lib!betree.PivotBranch_v.Node. (Poly%lib!betree.PivotBranch_v.Node. node!)))))) (and (=> %%location_label%%1 (req%lib!betree.PivotBranchRefinement_v.lemma_sub_index_preserves_wf. node! tmp%2 tmp%3)) (=> (ens%lib!betree.PivotBranchRefinement_v.lemma_sub_index_preserves_wf. node! tmp%2 tmp%3) %%switch_label%%0))))))))) (=> (not (is-lib!betree.PivotBranch_v.Node./Index_ node!)) %%switch_label%%0)) (and (not %%switch_label%%0) (=> %%location_label%%2 (let ((tmp%%$ (lib!betree.PivotBranch_v.impl&%3.split_node.? (Poly%lib!betree.PivotBranch_v.Node. node!) (Poly%lib!betree.PivotBranch_v.SplitArg. split_arg!)))) (let ((left_node$ (%Poly%lib!betree.PivotBranch_v.Node. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((right_node$ (%Poly%lib!betree.PivotBranch_v.Node. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. left_node$)) (lib!betree.PivotBranch_v.impl&%3.wf.? (Poly%lib!betree.PivotBranch_v.Node. right_node$)))))))))))
(check-sat)
(exit)
