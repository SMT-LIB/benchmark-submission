(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project SplinterDB 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!std_specs.vec.axiom_spec_len. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%40.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!disk.GenericDisk_v.impl&%1.view. FuelId)
(declare-const fuel%lib!spec.ImplDisk_t.impl&%0.view. FuelId)
(declare-const fuel%lib!spec.ImplDisk_t.impl&%0.wf. FuelId)
(declare-const fuel%lib!spec.ImplDisk_t.impl&%1.arrow_from. FuelId)
(declare-const fuel%lib!spec.ImplDisk_t.impl&%1.arrow_to. FuelId)
(declare-const fuel%lib!spec.ImplDisk_t.impl&%3.view. FuelId)
(declare-const fuel%lib!spec.ImplDisk_t.impl&%4.view. FuelId)
(declare-const fuel%lib!spec.AppIO_t.to_disk_reqs. FuelId)
(declare-const fuel%lib!spec.AppIO_t.to_disk_resps. FuelId)
(declare-const fuel%lib!spec.AppIO_t.impl&%2.init. FuelId)
(declare-const fuel%lib!spec.AppIO_t.impl&%2.next. FuelId)
(declare-const fuel%lib!spec.AppIO_t.impl&%3.view. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.vec.axiom_spec_len. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%40.view. fuel%vstd!view.impl&%42.view. fuel%lib!disk.GenericDisk_v.impl&%1.view. fuel%lib!spec.ImplDisk_t.impl&%0.view. fuel%lib!spec.ImplDisk_t.impl&%0.wf. fuel%lib!spec.ImplDisk_t.impl&%1.arrow_from. fuel%lib!spec.ImplDisk_t.impl&%1.arrow_to. fuel%lib!spec.ImplDisk_t.impl&%3.view. fuel%lib!spec.ImplDisk_t.impl&%4.view. fuel%lib!spec.AppIO_t.to_disk_reqs. fuel%lib!spec.AppIO_t.to_disk_resps. fuel%lib!spec.AppIO_t.impl&%2.init. fuel%lib!spec.AppIO_t.impl&%2.next. fuel%lib!spec.AppIO_t.impl&%3.view. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.axiom_spec_len.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%lib!spec.AppIO_t.ProgramModel./State (Dcr Type) Dcr)
(declare-fun proj%lib!spec.AppIO_t.ProgramModel./State (Dcr Type) Type)
(declare-sort alloc!vec.Vec<u64./allocator_global%.>. 0)
(declare-sort alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. 0)
(declare-sort alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>. 0)
(declare-sort lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>. 0)
(declare-sort vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. 0)
(declare-sort vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<u64.>. 0)
(declare-sort vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. 0)
(declare-sort vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!marker.PhantomData. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!spec.AsyncDisk_t.AsyncDisk.Label. 0) (lib!spec.AsyncDisk_t.Address. 0) (lib!spec.AsyncDisk_t.DiskRequest. 0) (lib!spec.AsyncDisk_t.DiskResponse. 0) (lib!spec.ImplDisk_t.IAddress. 0) (lib!spec.ImplDisk_t.IDiskRequest. 0) (lib!spec.ImplDisk_t.IDiskResponse. 0) (lib!spec.SystemModel_t.ProgramLabel. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.MapSpec_t.Input. 0) (lib!spec.MapSpec_t.Output. 0) (lib!spec.MapSpec_t.Request. 0) (lib!spec.MapSpec_t.Reply. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.AppIO_t.TrustedAPI. 0) (lib!spec.AppIO_t.ConcreteProgramModelState. 0) (lib!spec.AppIO_t.ConcreteProgramModel. 0) (lib!spec.AppIO_t.Program. 0) (tuple%0. 0) (tuple%1. 0) (tuple%2. 0)) (((core!marker.PhantomData./PhantomData )) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps (lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps/?requests vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.) (lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps/?responses vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)) (lib!spec.AsyncDisk_t.AsyncDisk.Label./Internal ) (lib!spec.AsyncDisk_t.AsyncDisk.Label./Crash )) ((lib!spec.AsyncDisk_t.Address./Address (lib!spec.AsyncDisk_t.Address./Address/?au Int) (lib!spec.AsyncDisk_t.Address./Address/?page Int))) ((lib!spec.AsyncDisk_t.DiskRequest./ReadReq (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/?from lib!spec.AsyncDisk_t.Address.)) (lib!spec.AsyncDisk_t.DiskRequest./WriteReq (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/?to lib!spec.AsyncDisk_t.Address.) (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/?data vstd!seq.Seq<u8.>.))) ((lib!spec.AsyncDisk_t.DiskResponse./ReadResp (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/?from lib!spec.AsyncDisk_t.Address.) (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/?data vstd!seq.Seq<u8.>.)) (lib!spec.AsyncDisk_t.DiskResponse./WriteResp (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/?to lib!spec.AsyncDisk_t.Address.))) ((lib!spec.ImplDisk_t.IAddress./IAddress (lib!spec.ImplDisk_t.IAddress./IAddress/?au Int) (lib!spec.ImplDisk_t.IAddress./IAddress/?page Int))) ((lib!spec.ImplDisk_t.IDiskRequest./ReadReq (lib!spec.ImplDisk_t.IDiskRequest./ReadReq/?from lib!spec.ImplDisk_t.IAddress.)) (lib!spec.ImplDisk_t.IDiskRequest./WriteReq (lib!spec.ImplDisk_t.IDiskRequest./WriteReq/?to lib!spec.ImplDisk_t.IAddress.) (lib!spec.ImplDisk_t.IDiskRequest./WriteReq/?data vstd!seq.Seq<u8.>.))) ((lib!spec.ImplDisk_t.IDiskResponse./ReadResp (lib!spec.ImplDisk_t.IDiskResponse./ReadResp/?from lib!spec.ImplDisk_t.IAddress.) (lib!spec.ImplDisk_t.IDiskResponse./ReadResp/?data vstd!seq.Seq<u8.>.)) (lib!spec.ImplDisk_t.IDiskResponse./WriteResp (lib!spec.ImplDisk_t.IDiskResponse./WriteResp/?to lib!spec.ImplDisk_t.IAddress.))) ((lib!spec.SystemModel_t.ProgramLabel./AcceptRequest (lib!spec.SystemModel_t.ProgramLabel./AcceptRequest/?req lib!spec.MapSpec_t.Request.)) (lib!spec.SystemModel_t.ProgramLabel./DeliverReply (lib!spec.SystemModel_t.ProgramLabel./DeliverReply/?reply lib!spec.MapSpec_t.Reply.)) (lib!spec.SystemModel_t.ProgramLabel./Execute (lib!spec.SystemModel_t.ProgramLabel./Execute/?req lib!spec.MapSpec_t.Request.) (lib!spec.SystemModel_t.ProgramLabel./Execute/?reply lib!spec.MapSpec_t.Reply.)) (lib!spec.SystemModel_t.ProgramLabel./DiskIO (lib!spec.SystemModel_t.ProgramLabel./DiskIO/?disk_lbl lib!spec.AsyncDisk_t.AsyncDisk.Label.)) (lib!spec.SystemModel_t.ProgramLabel./Internal ) (lib!spec.SystemModel_t.ProgramLabel./ReqSync (lib!spec.SystemModel_t.ProgramLabel./ReqSync/?sync_req_id Int)) (lib!spec.SystemModel_t.ProgramLabel./ReplySync (lib!spec.SystemModel_t.ProgramLabel./ReplySync/?sync_req_id Int)) (lib!spec.SystemModel_t.ProgramLabel./Crash )) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.MapSpec_t.Input./QueryInput (lib!spec.MapSpec_t.Input./QueryInput/?key lib!spec.KeyType_t.Key.)) (lib!spec.MapSpec_t.Input./PutInput (lib!spec.MapSpec_t.Input./PutInput/?key lib!spec.KeyType_t.Key.) (lib!spec.MapSpec_t.Input./PutInput/?value lib!spec.Messages_t.Value.)) (lib!spec.MapSpec_t.Input./NoopInput )) ((lib!spec.MapSpec_t.Output./QueryOutput (lib!spec.MapSpec_t.Output./QueryOutput/?value lib!spec.Messages_t.Value.)) (lib!spec.MapSpec_t.Output./PutOutput ) (lib!spec.MapSpec_t.Output./NoopOutput )) ((lib!spec.MapSpec_t.Request./Request (lib!spec.MapSpec_t.Request./Request/?input lib!spec.MapSpec_t.Input.) (lib!spec.MapSpec_t.Request./Request/?id Int))) ((lib!spec.MapSpec_t.Reply./Reply (lib!spec.MapSpec_t.Reply./Reply/?output lib!spec.MapSpec_t.Output.) (lib!spec.MapSpec_t.Reply./Reply/?id Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.AppIO_t.TrustedAPI./TrustedAPI (lib!spec.AppIO_t.TrustedAPI./TrustedAPI/?_p core!marker.PhantomData.))) ((lib!spec.AppIO_t.ConcreteProgramModelState./ConcreteProgramModelState )) ((lib!spec.AppIO_t.ConcreteProgramModel./ConcreteProgramModel )) ((lib!spec.AppIO_t.Program./Program )) ((tuple%0./tuple%0 )) ((tuple%1./tuple%1 (tuple%1./tuple%1/?0 Poly))) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps/requests (lib!spec.AsyncDisk_t.AsyncDisk.Label.) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)
(declare-fun lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps/responses (lib!spec.AsyncDisk_t.AsyncDisk.Label.) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/au (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/page (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (lib!spec.AsyncDisk_t.DiskRequest.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (lib!spec.AsyncDisk_t.DiskRequest.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!spec.AsyncDisk_t.DiskRequest./WriteReq/data (lib!spec.AsyncDisk_t.DiskRequest.) vstd!seq.Seq<u8.>.)
(declare-fun lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (lib!spec.AsyncDisk_t.DiskResponse.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!spec.AsyncDisk_t.DiskResponse./ReadResp/data (lib!spec.AsyncDisk_t.DiskResponse.) vstd!seq.Seq<u8.>.)
(declare-fun lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (lib!spec.AsyncDisk_t.DiskResponse.) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!spec.ImplDisk_t.IAddress./IAddress/au (lib!spec.ImplDisk_t.IAddress.) Int)
(declare-fun lib!spec.ImplDisk_t.IAddress./IAddress/page (lib!spec.ImplDisk_t.IAddress.) Int)
(declare-fun lib!spec.ImplDisk_t.IDiskRequest./ReadReq/from (lib!spec.ImplDisk_t.IDiskRequest.) lib!spec.ImplDisk_t.IAddress.)
(declare-fun lib!spec.ImplDisk_t.IDiskRequest./WriteReq/to (lib!spec.ImplDisk_t.IDiskRequest.) lib!spec.ImplDisk_t.IAddress.)
(declare-fun lib!spec.ImplDisk_t.IDiskRequest./WriteReq/data (lib!spec.ImplDisk_t.IDiskRequest.) vstd!seq.Seq<u8.>.)
(declare-fun lib!spec.ImplDisk_t.IDiskResponse./ReadResp/from (lib!spec.ImplDisk_t.IDiskResponse.) lib!spec.ImplDisk_t.IAddress.)
(declare-fun lib!spec.ImplDisk_t.IDiskResponse./ReadResp/data (lib!spec.ImplDisk_t.IDiskResponse.) vstd!seq.Seq<u8.>.)
(declare-fun lib!spec.ImplDisk_t.IDiskResponse./WriteResp/to (lib!spec.ImplDisk_t.IDiskResponse.) lib!spec.ImplDisk_t.IAddress.)
(declare-fun lib!spec.SystemModel_t.ProgramLabel./AcceptRequest/req (lib!spec.SystemModel_t.ProgramLabel.) lib!spec.MapSpec_t.Request.)
(declare-fun lib!spec.SystemModel_t.ProgramLabel./DeliverReply/reply (lib!spec.SystemModel_t.ProgramLabel.) lib!spec.MapSpec_t.Reply.)
(declare-fun lib!spec.SystemModel_t.ProgramLabel./Execute/req (lib!spec.SystemModel_t.ProgramLabel.) lib!spec.MapSpec_t.Request.)
(declare-fun lib!spec.SystemModel_t.ProgramLabel./Execute/reply (lib!spec.SystemModel_t.ProgramLabel.) lib!spec.MapSpec_t.Reply.)
(declare-fun lib!spec.SystemModel_t.ProgramLabel./DiskIO/disk_lbl (lib!spec.SystemModel_t.ProgramLabel.) lib!spec.AsyncDisk_t.AsyncDisk.Label.)
(declare-fun lib!spec.SystemModel_t.ProgramLabel./ReqSync/sync_req_id (lib!spec.SystemModel_t.ProgramLabel.) Int)
(declare-fun lib!spec.SystemModel_t.ProgramLabel./ReplySync/sync_req_id (lib!spec.SystemModel_t.ProgramLabel.) Int)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.MapSpec_t.Input./QueryInput/key (lib!spec.MapSpec_t.Input.) lib!spec.KeyType_t.Key.)
(declare-fun lib!spec.MapSpec_t.Input./PutInput/key (lib!spec.MapSpec_t.Input.) lib!spec.KeyType_t.Key.)
(declare-fun lib!spec.MapSpec_t.Input./PutInput/value (lib!spec.MapSpec_t.Input.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.MapSpec_t.Output./QueryOutput/value (lib!spec.MapSpec_t.Output.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.MapSpec_t.Request./Request/input (lib!spec.MapSpec_t.Request.) lib!spec.MapSpec_t.Input.)
(declare-fun lib!spec.MapSpec_t.Request./Request/id (lib!spec.MapSpec_t.Request.) Int)
(declare-fun lib!spec.MapSpec_t.Reply./Reply/output (lib!spec.MapSpec_t.Reply.) lib!spec.MapSpec_t.Output.)
(declare-fun lib!spec.MapSpec_t.Reply./Reply/id (lib!spec.MapSpec_t.Reply.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.AppIO_t.TrustedAPI./TrustedAPI/_p (lib!spec.AppIO_t.TrustedAPI.) core!marker.PhantomData.)
(declare-fun tuple%1./tuple%1/0 (tuple%1.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%core!marker.PhantomData. (Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.AsyncDisk.Label. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.Address. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.DiskRequest. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.DiskResponse. Type)
(declare-const TYPE%lib!spec.ImplDisk_t.IAddress. Type)
(declare-const TYPE%lib!spec.ImplDisk_t.IDiskRequest. Type)
(declare-const TYPE%lib!spec.ImplDisk_t.IDiskResponse. Type)
(declare-const TYPE%lib!spec.SystemModel_t.ProgramLabel. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.MapSpec_t.Input. Type)
(declare-const TYPE%lib!spec.MapSpec_t.Output. Type)
(declare-const TYPE%lib!spec.MapSpec_t.Request. Type)
(declare-const TYPE%lib!spec.MapSpec_t.Reply. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-fun TYPE%lib!spec.AppIO_t.TrustedAPI. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.AppIO_t.Token. (Dcr Type) Type)
(declare-const TYPE%lib!spec.AppIO_t.ConcreteProgramModelState. Type)
(declare-const TYPE%lib!spec.AppIO_t.ConcreteProgramModel. Type)
(declare-const TYPE%lib!spec.AppIO_t.Program. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%1. (Dcr Type) Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%alloc!vec.Vec<u64./allocator_global%.>. (alloc!vec.Vec<u64./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u64./allocator_global%.>. (Poly) alloc!vec.Vec<u64./allocator_global%.>.)
(declare-fun Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. (alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. (Poly) alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>.)
(declare-fun Poly%alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>. (alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>. (Poly) alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>.)
(declare-fun Poly%lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>. (lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>.) Poly)
(declare-fun %Poly%lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>. (Poly) lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>.)
(declare-fun Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.) Poly)
(declare-fun %Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (Poly) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)
(declare-fun Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.) Poly)
(declare-fun %Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (Poly) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq<u64.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u64.>. (Poly) vstd!seq.Seq<u64.>.)
(declare-fun Poly%vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. (vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. (Poly) vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>.)
(declare-fun Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. (vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. (Poly) vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!marker.PhantomData. (core!marker.PhantomData.) Poly)
(declare-fun %Poly%core!marker.PhantomData. (Poly) core!marker.PhantomData.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!spec.AsyncDisk_t.AsyncDisk.Label. (lib!spec.AsyncDisk_t.AsyncDisk.Label.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.AsyncDisk.Label. (Poly) lib!spec.AsyncDisk_t.AsyncDisk.Label.)
(declare-fun Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.Address. (Poly) lib!spec.AsyncDisk_t.Address.)
(declare-fun Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.AsyncDisk_t.DiskRequest.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.DiskRequest. (Poly) lib!spec.AsyncDisk_t.DiskRequest.)
(declare-fun Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.AsyncDisk_t.DiskResponse.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.DiskResponse. (Poly) lib!spec.AsyncDisk_t.DiskResponse.)
(declare-fun Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IAddress.) Poly)
(declare-fun %Poly%lib!spec.ImplDisk_t.IAddress. (Poly) lib!spec.ImplDisk_t.IAddress.)
(declare-fun Poly%lib!spec.ImplDisk_t.IDiskRequest. (lib!spec.ImplDisk_t.IDiskRequest.) Poly)
(declare-fun %Poly%lib!spec.ImplDisk_t.IDiskRequest. (Poly) lib!spec.ImplDisk_t.IDiskRequest.)
(declare-fun Poly%lib!spec.ImplDisk_t.IDiskResponse. (lib!spec.ImplDisk_t.IDiskResponse.) Poly)
(declare-fun %Poly%lib!spec.ImplDisk_t.IDiskResponse. (Poly) lib!spec.ImplDisk_t.IDiskResponse.)
(declare-fun Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel.) Poly)
(declare-fun %Poly%lib!spec.SystemModel_t.ProgramLabel. (Poly) lib!spec.SystemModel_t.ProgramLabel.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Input.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.Input. (Poly) lib!spec.MapSpec_t.Input.)
(declare-fun Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.Output.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.Output. (Poly) lib!spec.MapSpec_t.Output.)
(declare-fun Poly%lib!spec.MapSpec_t.Request. (lib!spec.MapSpec_t.Request.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.Request. (Poly) lib!spec.MapSpec_t.Request.)
(declare-fun Poly%lib!spec.MapSpec_t.Reply. (lib!spec.MapSpec_t.Reply.) Poly)
(declare-fun %Poly%lib!spec.MapSpec_t.Reply. (Poly) lib!spec.MapSpec_t.Reply.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.AppIO_t.TrustedAPI. (lib!spec.AppIO_t.TrustedAPI.) Poly)
(declare-fun %Poly%lib!spec.AppIO_t.TrustedAPI. (Poly) lib!spec.AppIO_t.TrustedAPI.)
(declare-fun Poly%lib!spec.AppIO_t.ConcreteProgramModelState. (lib!spec.AppIO_t.ConcreteProgramModelState.) Poly)
(declare-fun %Poly%lib!spec.AppIO_t.ConcreteProgramModelState. (Poly) lib!spec.AppIO_t.ConcreteProgramModelState.)
(declare-fun Poly%lib!spec.AppIO_t.ConcreteProgramModel. (lib!spec.AppIO_t.ConcreteProgramModel.) Poly)
(declare-fun %Poly%lib!spec.AppIO_t.ConcreteProgramModel. (Poly) lib!spec.AppIO_t.ConcreteProgramModel.)
(declare-fun Poly%lib!spec.AppIO_t.Program. (lib!spec.AppIO_t.Program.) Poly)
(declare-fun %Poly%lib!spec.AppIO_t.Program. (Poly) lib!spec.AppIO_t.Program.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%1. (tuple%1.) Poly)
(declare-fun %Poly%tuple%1. (Poly) tuple%1.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x alloc!vec.Vec<u64./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u64./allocator_global%.>. (Poly%alloc!vec.Vec<u64./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u64./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u64./allocator_global%.>. (%Poly%alloc!vec.Vec<u64./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<u64./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u64./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u64./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. (Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. (%Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>. (Poly%alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>. (%Poly%alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>.)) (! (= x (%Poly%lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>. (Poly%lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>. x))) :pattern ((Poly%lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%lib!spec.AppIO_t.Token. $ TYPE%lib!spec.AppIO_t.ConcreteProgramModel.)) (= x (Poly%lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>. (%Poly%lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>. x)))) :pattern ((has_type x (TYPE%lib!spec.AppIO_t.Token. $ TYPE%lib!spec.AppIO_t.ConcreteProgramModel.))) )))
(assert (forall ((x lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>.)) (! (has_type (Poly%lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>. x) (TYPE%lib!spec.AppIO_t.Token. $ TYPE%lib!spec.AppIO_t.ConcreteProgramModel.)) :pattern ((has_type (Poly%lib!spec.AppIO_t.Token<lib!spec.AppIO_t.ConcreteProgramModel.>. x) (TYPE%lib!spec.AppIO_t.Token. $ TYPE%lib!spec.AppIO_t.ConcreteProgramModel.))) )))
(assert (forall ((x vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)) (! (= x (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. x))) :pattern ((Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) (= x (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.))) )))
(assert (forall ((x vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)) (! (has_type (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. x) (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) :pattern ((has_type (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. x) (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.))) )))
(assert (forall ((x vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)) (! (= x (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. x))) :pattern ((Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) (= x (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))) )))
(assert (forall ((x vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)) (! (has_type (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. x) (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) :pattern ((has_type (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. x) (TYPE%vstd!map.Map. $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (= x (%Poly%vstd!seq.Seq<u64.>. (Poly%vstd!seq.Seq<u64.>. x))) :pattern ((Poly%vstd!seq.Seq<u64.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 64))) (= x (Poly%vstd!seq.Seq<u64.>. (%Poly%vstd!seq.Seq<u64.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 64)))) )))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64))) :pattern ((has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64)))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. (Poly%vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest.)) (= x (Poly%vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. (%Poly%vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest.))) )))
(assert (forall ((x vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest.))) )))
(assert (forall ((x vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>.)) (! (= x (%Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. (Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. x))) :pattern ((Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.))) (= x (Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. (%Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.)))) )))
(assert (forall ((x vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>.)) (! (has_type (Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.))) :pattern ((has_type (Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.)))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!marker.PhantomData.)) (! (= x (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. x))) :pattern ((Poly%core!marker.PhantomData. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!marker.PhantomData. V&. V&)) (= x (Poly%core!marker.PhantomData. (%Poly%core!marker.PhantomData. x)))) :pattern ((has_type x (TYPE%core!marker.PhantomData. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (x core!marker.PhantomData.)) (! (has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&)) :pattern ((has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&))) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.AsyncDisk.Label.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.AsyncDisk.Label. (Poly%lib!spec.AsyncDisk_t.AsyncDisk.Label. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.AsyncDisk.Label. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.AsyncDisk.Label.) (= x (Poly%lib!spec.AsyncDisk_t.AsyncDisk.Label. (%Poly%lib!spec.AsyncDisk_t.AsyncDisk.Label. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.AsyncDisk.Label.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.AsyncDisk.Label.)) (! (= (lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps/requests x) (lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps/?requests x)) :pattern ((lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps/requests x)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.AsyncDisk.Label.)) (! (= (lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps/responses x) (lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps/?responses x)) :pattern ((lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps/responses x)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.AsyncDisk.Label.)) (! (has_type (Poly%lib!spec.AsyncDisk_t.AsyncDisk.Label. x) TYPE%lib!spec.AsyncDisk_t.AsyncDisk.Label.) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.AsyncDisk.Label. x) TYPE%lib!spec.AsyncDisk_t.AsyncDisk.Label.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.Address. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (= x (Poly%lib!spec.AsyncDisk_t.Address. (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((_au! Int) (_page! Int)) (! (=> (and (<= 0 _au!) (<= 0 _page!)) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/au x) (lib!spec.AsyncDisk_t.Address./Address/?au x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/page x) (lib!spec.AsyncDisk_t.Address./Address/?page x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskRequest.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.DiskRequest. (Poly%lib!spec.AsyncDisk_t.DiskRequest. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.DiskRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (= x (Poly%lib!spec.AsyncDisk_t.DiskRequest. (%Poly%lib!spec.AsyncDisk_t.DiskRequest. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) )))
(assert (forall ((_from! lib!spec.AsyncDisk_t.Address.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _from!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq _from!)) TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq _from!)) TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskRequest.)) (! (= (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from x) (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/?from x)) :pattern ((lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.DiskRequest./ReadReq/from (%Poly%lib!spec.AsyncDisk_t.DiskRequest. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) )))
(assert (forall ((_to! lib!spec.AsyncDisk_t.Address.) (_data! vstd!seq.Seq<u8.>.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _to!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq _to! _data!)) TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq _to! _data!)) TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskRequest.)) (! (= (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to x) (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/?to x)) :pattern ((lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.DiskRequest./WriteReq/to (%Poly%lib!spec.AsyncDisk_t.DiskRequest. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskRequest.)) (! (= (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/data x) (lib!spec.AsyncDisk_t.DiskRequest./WriteReq/?data x)) :pattern ((lib!spec.AsyncDisk_t.DiskRequest./WriteReq/data x)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskResponse.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.DiskResponse. (Poly%lib!spec.AsyncDisk_t.DiskResponse. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.DiskResponse. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (= x (Poly%lib!spec.AsyncDisk_t.DiskResponse. (%Poly%lib!spec.AsyncDisk_t.DiskResponse. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) )))
(assert (forall ((_from! lib!spec.AsyncDisk_t.Address.) (_data! vstd!seq.Seq<u8.>.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _from!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp _from! _data!)) TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp _from! _data!)) TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskResponse.)) (! (= (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from x) (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/?from x)) :pattern ((lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.DiskResponse./ReadResp/from (%Poly%lib!spec.AsyncDisk_t.DiskResponse. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskResponse.)) (! (= (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/data x) (lib!spec.AsyncDisk_t.DiskResponse./ReadResp/?data x)) :pattern ((lib!spec.AsyncDisk_t.DiskResponse./ReadResp/data x)) )))
(assert (forall ((_to! lib!spec.AsyncDisk_t.Address.)) (! (=> (has_type (Poly%lib!spec.AsyncDisk_t.Address. _to!) TYPE%lib!spec.AsyncDisk_t.Address.) (has_type (Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp _to!)) TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp _to!)) TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.DiskResponse.)) (! (= (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to x) (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/?to x)) :pattern ((lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. x))) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.AsyncDisk_t.DiskResponse./WriteResp/to (%Poly%lib!spec.AsyncDisk_t.DiskResponse. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IAddress.)) (! (= x (%Poly%lib!spec.ImplDisk_t.IAddress. (Poly%lib!spec.ImplDisk_t.IAddress. x))) :pattern ((Poly%lib!spec.ImplDisk_t.IAddress. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IAddress.) (= x (Poly%lib!spec.ImplDisk_t.IAddress. (%Poly%lib!spec.ImplDisk_t.IAddress. x)))) :pattern ((has_type x TYPE%lib!spec.ImplDisk_t.IAddress.)) )))
(assert (forall ((_au! Int) (_page! Int)) (! (=> (and (uInv 32 _au!) (uInv 32 _page!)) (has_type (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IAddress./IAddress _au! _page!)) TYPE%lib!spec.ImplDisk_t.IAddress.)) :pattern ((has_type (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IAddress./IAddress _au! _page!)) TYPE%lib!spec.ImplDisk_t.IAddress.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IAddress.)) (! (= (lib!spec.ImplDisk_t.IAddress./IAddress/au x) (lib!spec.ImplDisk_t.IAddress./IAddress/?au x)) :pattern ((lib!spec.ImplDisk_t.IAddress./IAddress/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IAddress.) (uInv 32 (lib!spec.ImplDisk_t.IAddress./IAddress/au (%Poly%lib!spec.ImplDisk_t.IAddress. x)))) :pattern ((lib!spec.ImplDisk_t.IAddress./IAddress/au (%Poly%lib!spec.ImplDisk_t.IAddress. x)) (has_type x TYPE%lib!spec.ImplDisk_t.IAddress.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IAddress.)) (! (= (lib!spec.ImplDisk_t.IAddress./IAddress/page x) (lib!spec.ImplDisk_t.IAddress./IAddress/?page x)) :pattern ((lib!spec.ImplDisk_t.IAddress./IAddress/page x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IAddress.) (uInv 32 (lib!spec.ImplDisk_t.IAddress./IAddress/page (%Poly%lib!spec.ImplDisk_t.IAddress. x)))) :pattern ((lib!spec.ImplDisk_t.IAddress./IAddress/page (%Poly%lib!spec.ImplDisk_t.IAddress. x)) (has_type x TYPE%lib!spec.ImplDisk_t.IAddress.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IDiskRequest.)) (! (= x (%Poly%lib!spec.ImplDisk_t.IDiskRequest. (Poly%lib!spec.ImplDisk_t.IDiskRequest. x))) :pattern ((Poly%lib!spec.ImplDisk_t.IDiskRequest. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IDiskRequest.) (= x (Poly%lib!spec.ImplDisk_t.IDiskRequest. (%Poly%lib!spec.ImplDisk_t.IDiskRequest. x)))) :pattern ((has_type x TYPE%lib!spec.ImplDisk_t.IDiskRequest.)) )))
(assert (forall ((_from! lib!spec.ImplDisk_t.IAddress.)) (! (=> (has_type (Poly%lib!spec.ImplDisk_t.IAddress. _from!) TYPE%lib!spec.ImplDisk_t.IAddress.) (has_type (Poly%lib!spec.ImplDisk_t.IDiskRequest. (lib!spec.ImplDisk_t.IDiskRequest./ReadReq _from!)) TYPE%lib!spec.ImplDisk_t.IDiskRequest.)) :pattern ((has_type (Poly%lib!spec.ImplDisk_t.IDiskRequest. (lib!spec.ImplDisk_t.IDiskRequest./ReadReq _from!)) TYPE%lib!spec.ImplDisk_t.IDiskRequest.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IDiskRequest.)) (! (= (lib!spec.ImplDisk_t.IDiskRequest./ReadReq/from x) (lib!spec.ImplDisk_t.IDiskRequest./ReadReq/?from x)) :pattern ((lib!spec.ImplDisk_t.IDiskRequest./ReadReq/from x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IDiskRequest.) (has_type (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IDiskRequest./ReadReq/from (%Poly%lib!spec.ImplDisk_t.IDiskRequest. x))) TYPE%lib!spec.ImplDisk_t.IAddress.)) :pattern ((lib!spec.ImplDisk_t.IDiskRequest./ReadReq/from (%Poly%lib!spec.ImplDisk_t.IDiskRequest. x)) (has_type x TYPE%lib!spec.ImplDisk_t.IDiskRequest.)) )))
(assert (forall ((_to! lib!spec.ImplDisk_t.IAddress.) (_data! vstd!seq.Seq<u8.>.)) (! (=> (has_type (Poly%lib!spec.ImplDisk_t.IAddress. _to!) TYPE%lib!spec.ImplDisk_t.IAddress.) (has_type (Poly%lib!spec.ImplDisk_t.IDiskRequest. (lib!spec.ImplDisk_t.IDiskRequest./WriteReq _to! _data!)) TYPE%lib!spec.ImplDisk_t.IDiskRequest.)) :pattern ((has_type (Poly%lib!spec.ImplDisk_t.IDiskRequest. (lib!spec.ImplDisk_t.IDiskRequest./WriteReq _to! _data!)) TYPE%lib!spec.ImplDisk_t.IDiskRequest.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IDiskRequest.)) (! (= (lib!spec.ImplDisk_t.IDiskRequest./WriteReq/to x) (lib!spec.ImplDisk_t.IDiskRequest./WriteReq/?to x)) :pattern ((lib!spec.ImplDisk_t.IDiskRequest./WriteReq/to x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IDiskRequest.) (has_type (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IDiskRequest./WriteReq/to (%Poly%lib!spec.ImplDisk_t.IDiskRequest. x))) TYPE%lib!spec.ImplDisk_t.IAddress.)) :pattern ((lib!spec.ImplDisk_t.IDiskRequest./WriteReq/to (%Poly%lib!spec.ImplDisk_t.IDiskRequest. x)) (has_type x TYPE%lib!spec.ImplDisk_t.IDiskRequest.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IDiskRequest.)) (! (= (lib!spec.ImplDisk_t.IDiskRequest./WriteReq/data x) (lib!spec.ImplDisk_t.IDiskRequest./WriteReq/?data x)) :pattern ((lib!spec.ImplDisk_t.IDiskRequest./WriteReq/data x)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IDiskResponse.)) (! (= x (%Poly%lib!spec.ImplDisk_t.IDiskResponse. (Poly%lib!spec.ImplDisk_t.IDiskResponse. x))) :pattern ((Poly%lib!spec.ImplDisk_t.IDiskResponse. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IDiskResponse.) (= x (Poly%lib!spec.ImplDisk_t.IDiskResponse. (%Poly%lib!spec.ImplDisk_t.IDiskResponse. x)))) :pattern ((has_type x TYPE%lib!spec.ImplDisk_t.IDiskResponse.)) )))
(assert (forall ((_from! lib!spec.ImplDisk_t.IAddress.) (_data! vstd!seq.Seq<u8.>.)) (! (=> (has_type (Poly%lib!spec.ImplDisk_t.IAddress. _from!) TYPE%lib!spec.ImplDisk_t.IAddress.) (has_type (Poly%lib!spec.ImplDisk_t.IDiskResponse. (lib!spec.ImplDisk_t.IDiskResponse./ReadResp _from! _data!)) TYPE%lib!spec.ImplDisk_t.IDiskResponse.)) :pattern ((has_type (Poly%lib!spec.ImplDisk_t.IDiskResponse. (lib!spec.ImplDisk_t.IDiskResponse./ReadResp _from! _data!)) TYPE%lib!spec.ImplDisk_t.IDiskResponse.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IDiskResponse.)) (! (= (lib!spec.ImplDisk_t.IDiskResponse./ReadResp/from x) (lib!spec.ImplDisk_t.IDiskResponse./ReadResp/?from x)) :pattern ((lib!spec.ImplDisk_t.IDiskResponse./ReadResp/from x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IDiskResponse.) (has_type (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IDiskResponse./ReadResp/from (%Poly%lib!spec.ImplDisk_t.IDiskResponse. x))) TYPE%lib!spec.ImplDisk_t.IAddress.)) :pattern ((lib!spec.ImplDisk_t.IDiskResponse./ReadResp/from (%Poly%lib!spec.ImplDisk_t.IDiskResponse. x)) (has_type x TYPE%lib!spec.ImplDisk_t.IDiskResponse.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IDiskResponse.)) (! (= (lib!spec.ImplDisk_t.IDiskResponse./ReadResp/data x) (lib!spec.ImplDisk_t.IDiskResponse./ReadResp/?data x)) :pattern ((lib!spec.ImplDisk_t.IDiskResponse./ReadResp/data x)) )))
(assert (forall ((_to! lib!spec.ImplDisk_t.IAddress.)) (! (=> (has_type (Poly%lib!spec.ImplDisk_t.IAddress. _to!) TYPE%lib!spec.ImplDisk_t.IAddress.) (has_type (Poly%lib!spec.ImplDisk_t.IDiskResponse. (lib!spec.ImplDisk_t.IDiskResponse./WriteResp _to!)) TYPE%lib!spec.ImplDisk_t.IDiskResponse.)) :pattern ((has_type (Poly%lib!spec.ImplDisk_t.IDiskResponse. (lib!spec.ImplDisk_t.IDiskResponse./WriteResp _to!)) TYPE%lib!spec.ImplDisk_t.IDiskResponse.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IDiskResponse.)) (! (= (lib!spec.ImplDisk_t.IDiskResponse./WriteResp/to x) (lib!spec.ImplDisk_t.IDiskResponse./WriteResp/?to x)) :pattern ((lib!spec.ImplDisk_t.IDiskResponse./WriteResp/to x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IDiskResponse.) (has_type (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IDiskResponse./WriteResp/to (%Poly%lib!spec.ImplDisk_t.IDiskResponse. x))) TYPE%lib!spec.ImplDisk_t.IAddress.)) :pattern ((lib!spec.ImplDisk_t.IDiskResponse./WriteResp/to (%Poly%lib!spec.ImplDisk_t.IDiskResponse. x)) (has_type x TYPE%lib!spec.ImplDisk_t.IDiskResponse.)) )))
(assert (forall ((x lib!spec.SystemModel_t.ProgramLabel.)) (! (= x (%Poly%lib!spec.SystemModel_t.ProgramLabel. (Poly%lib!spec.SystemModel_t.ProgramLabel. x))) :pattern ((Poly%lib!spec.SystemModel_t.ProgramLabel. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.) (= x (Poly%lib!spec.SystemModel_t.ProgramLabel. (%Poly%lib!spec.SystemModel_t.ProgramLabel. x)))) :pattern ((has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((_req! lib!spec.MapSpec_t.Request.)) (! (=> (has_type (Poly%lib!spec.MapSpec_t.Request. _req!) TYPE%lib!spec.MapSpec_t.Request.) (has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./AcceptRequest _req!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.)) :pattern ((has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./AcceptRequest _req!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((x lib!spec.SystemModel_t.ProgramLabel.)) (! (= (lib!spec.SystemModel_t.ProgramLabel./AcceptRequest/req x) (lib!spec.SystemModel_t.ProgramLabel./AcceptRequest/?req x)) :pattern ((lib!spec.SystemModel_t.ProgramLabel./AcceptRequest/req x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.) (has_type (Poly%lib!spec.MapSpec_t.Request. (lib!spec.SystemModel_t.ProgramLabel./AcceptRequest/req (%Poly%lib!spec.SystemModel_t.ProgramLabel. x))) TYPE%lib!spec.MapSpec_t.Request.)) :pattern ((lib!spec.SystemModel_t.ProgramLabel./AcceptRequest/req (%Poly%lib!spec.SystemModel_t.ProgramLabel. x)) (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((_reply! lib!spec.MapSpec_t.Reply.)) (! (=> (has_type (Poly%lib!spec.MapSpec_t.Reply. _reply!) TYPE%lib!spec.MapSpec_t.Reply.) (has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./DeliverReply _reply!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.)) :pattern ((has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./DeliverReply _reply!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((x lib!spec.SystemModel_t.ProgramLabel.)) (! (= (lib!spec.SystemModel_t.ProgramLabel./DeliverReply/reply x) (lib!spec.SystemModel_t.ProgramLabel./DeliverReply/?reply x)) :pattern ((lib!spec.SystemModel_t.ProgramLabel./DeliverReply/reply x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.) (has_type (Poly%lib!spec.MapSpec_t.Reply. (lib!spec.SystemModel_t.ProgramLabel./DeliverReply/reply (%Poly%lib!spec.SystemModel_t.ProgramLabel. x))) TYPE%lib!spec.MapSpec_t.Reply.)) :pattern ((lib!spec.SystemModel_t.ProgramLabel./DeliverReply/reply (%Poly%lib!spec.SystemModel_t.ProgramLabel. x)) (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((_req! lib!spec.MapSpec_t.Request.) (_reply! lib!spec.MapSpec_t.Reply.)) (! (=> (and (has_type (Poly%lib!spec.MapSpec_t.Request. _req!) TYPE%lib!spec.MapSpec_t.Request.) (has_type (Poly%lib!spec.MapSpec_t.Reply. _reply!) TYPE%lib!spec.MapSpec_t.Reply.)) (has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./Execute _req! _reply!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.)) :pattern ((has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./Execute _req! _reply!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((x lib!spec.SystemModel_t.ProgramLabel.)) (! (= (lib!spec.SystemModel_t.ProgramLabel./Execute/req x) (lib!spec.SystemModel_t.ProgramLabel./Execute/?req x)) :pattern ((lib!spec.SystemModel_t.ProgramLabel./Execute/req x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.) (has_type (Poly%lib!spec.MapSpec_t.Request. (lib!spec.SystemModel_t.ProgramLabel./Execute/req (%Poly%lib!spec.SystemModel_t.ProgramLabel. x))) TYPE%lib!spec.MapSpec_t.Request.)) :pattern ((lib!spec.SystemModel_t.ProgramLabel./Execute/req (%Poly%lib!spec.SystemModel_t.ProgramLabel. x)) (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((x lib!spec.SystemModel_t.ProgramLabel.)) (! (= (lib!spec.SystemModel_t.ProgramLabel./Execute/reply x) (lib!spec.SystemModel_t.ProgramLabel./Execute/?reply x)) :pattern ((lib!spec.SystemModel_t.ProgramLabel./Execute/reply x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.) (has_type (Poly%lib!spec.MapSpec_t.Reply. (lib!spec.SystemModel_t.ProgramLabel./Execute/reply (%Poly%lib!spec.SystemModel_t.ProgramLabel. x))) TYPE%lib!spec.MapSpec_t.Reply.)) :pattern ((lib!spec.SystemModel_t.ProgramLabel./Execute/reply (%Poly%lib!spec.SystemModel_t.ProgramLabel. x)) (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((_disk_lbl! lib!spec.AsyncDisk_t.AsyncDisk.Label.)) (! (has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./DiskIO _disk_lbl!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.) :pattern ((has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./DiskIO _disk_lbl!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((x lib!spec.SystemModel_t.ProgramLabel.)) (! (= (lib!spec.SystemModel_t.ProgramLabel./DiskIO/disk_lbl x) (lib!spec.SystemModel_t.ProgramLabel./DiskIO/?disk_lbl x)) :pattern ((lib!spec.SystemModel_t.ProgramLabel./DiskIO/disk_lbl x)) )))
(assert (has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. lib!spec.SystemModel_t.ProgramLabel./Internal) TYPE%lib!spec.SystemModel_t.ProgramLabel.))
(assert (forall ((_sync_req_id! Int)) (! (=> (<= 0 _sync_req_id!) (has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./ReqSync _sync_req_id!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.)) :pattern ((has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./ReqSync _sync_req_id!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((x lib!spec.SystemModel_t.ProgramLabel.)) (! (= (lib!spec.SystemModel_t.ProgramLabel./ReqSync/sync_req_id x) (lib!spec.SystemModel_t.ProgramLabel./ReqSync/?sync_req_id x)) :pattern ((lib!spec.SystemModel_t.ProgramLabel./ReqSync/sync_req_id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.) (<= 0 (lib!spec.SystemModel_t.ProgramLabel./ReqSync/sync_req_id (%Poly%lib!spec.SystemModel_t.ProgramLabel. x)))) :pattern ((lib!spec.SystemModel_t.ProgramLabel./ReqSync/sync_req_id (%Poly%lib!spec.SystemModel_t.ProgramLabel. x)) (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((_sync_req_id! Int)) (! (=> (<= 0 _sync_req_id!) (has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./ReplySync _sync_req_id!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.)) :pattern ((has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./ReplySync _sync_req_id!)) TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (forall ((x lib!spec.SystemModel_t.ProgramLabel.)) (! (= (lib!spec.SystemModel_t.ProgramLabel./ReplySync/sync_req_id x) (lib!spec.SystemModel_t.ProgramLabel./ReplySync/?sync_req_id x)) :pattern ((lib!spec.SystemModel_t.ProgramLabel./ReplySync/sync_req_id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.) (<= 0 (lib!spec.SystemModel_t.ProgramLabel./ReplySync/sync_req_id (%Poly%lib!spec.SystemModel_t.ProgramLabel. x)))) :pattern ((lib!spec.SystemModel_t.ProgramLabel./ReplySync/sync_req_id (%Poly%lib!spec.SystemModel_t.ProgramLabel. x)) (has_type x TYPE%lib!spec.SystemModel_t.ProgramLabel.)) )))
(assert (has_type (Poly%lib!spec.SystemModel_t.ProgramLabel. lib!spec.SystemModel_t.ProgramLabel./Crash) TYPE%lib!spec.SystemModel_t.ProgramLabel.))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Input.)) (! (= x (%Poly%lib!spec.MapSpec_t.Input. (Poly%lib!spec.MapSpec_t.Input. x))) :pattern ((Poly%lib!spec.MapSpec_t.Input. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Input.) (= x (Poly%lib!spec.MapSpec_t.Input. (%Poly%lib!spec.MapSpec_t.Input. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.)) (! (=> (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Input./QueryInput _key!)) TYPE%lib!spec.MapSpec_t.Input.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Input./QueryInput _key!)) TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Input.)) (! (= (lib!spec.MapSpec_t.Input./QueryInput/key x) (lib!spec.MapSpec_t.Input./QueryInput/?key x)) :pattern ((lib!spec.MapSpec_t.Input./QueryInput/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.MapSpec_t.Input./QueryInput/key (%Poly%lib!spec.MapSpec_t.Input. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!spec.MapSpec_t.Input./QueryInput/key (%Poly%lib!spec.MapSpec_t.Input. x)) (has_type x TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (forall ((_key! lib!spec.KeyType_t.Key.) (_value! lib!spec.Messages_t.Value.)) (! (=> (and (has_type (Poly%lib!spec.KeyType_t.Key. _key!) TYPE%lib!spec.KeyType_t.Key.) (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Input./PutInput _key! _value!)) TYPE%lib!spec.MapSpec_t.Input.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Input./PutInput _key! _value!)) TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Input.)) (! (= (lib!spec.MapSpec_t.Input./PutInput/key x) (lib!spec.MapSpec_t.Input./PutInput/?key x)) :pattern ((lib!spec.MapSpec_t.Input./PutInput/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.MapSpec_t.Input./PutInput/key (%Poly%lib!spec.MapSpec_t.Input. x))) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((lib!spec.MapSpec_t.Input./PutInput/key (%Poly%lib!spec.MapSpec_t.Input. x)) (has_type x TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Input.)) (! (= (lib!spec.MapSpec_t.Input./PutInput/value x) (lib!spec.MapSpec_t.Input./PutInput/?value x)) :pattern ((lib!spec.MapSpec_t.Input./PutInput/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Input.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.MapSpec_t.Input./PutInput/value (%Poly%lib!spec.MapSpec_t.Input. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.MapSpec_t.Input./PutInput/value (%Poly%lib!spec.MapSpec_t.Input. x)) (has_type x TYPE%lib!spec.MapSpec_t.Input.)) )))
(assert (has_type (Poly%lib!spec.MapSpec_t.Input. lib!spec.MapSpec_t.Input./NoopInput) TYPE%lib!spec.MapSpec_t.Input.))
(assert (forall ((x lib!spec.MapSpec_t.Output.)) (! (= x (%Poly%lib!spec.MapSpec_t.Output. (Poly%lib!spec.MapSpec_t.Output. x))) :pattern ((Poly%lib!spec.MapSpec_t.Output. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Output.) (= x (Poly%lib!spec.MapSpec_t.Output. (%Poly%lib!spec.MapSpec_t.Output. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.Output.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.Output./QueryOutput _value!)) TYPE%lib!spec.MapSpec_t.Output.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.Output./QueryOutput _value!)) TYPE%lib!spec.MapSpec_t.Output.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Output.)) (! (= (lib!spec.MapSpec_t.Output./QueryOutput/value x) (lib!spec.MapSpec_t.Output./QueryOutput/?value x)) :pattern ((lib!spec.MapSpec_t.Output./QueryOutput/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Output.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.MapSpec_t.Output./QueryOutput/value (%Poly%lib!spec.MapSpec_t.Output. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.MapSpec_t.Output./QueryOutput/value (%Poly%lib!spec.MapSpec_t.Output. x)) (has_type x TYPE%lib!spec.MapSpec_t.Output.)) )))
(assert (has_type (Poly%lib!spec.MapSpec_t.Output. lib!spec.MapSpec_t.Output./PutOutput) TYPE%lib!spec.MapSpec_t.Output.))
(assert (has_type (Poly%lib!spec.MapSpec_t.Output. lib!spec.MapSpec_t.Output./NoopOutput) TYPE%lib!spec.MapSpec_t.Output.))
(assert (forall ((x lib!spec.MapSpec_t.Request.)) (! (= x (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. x))) :pattern ((Poly%lib!spec.MapSpec_t.Request. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Request.) (= x (Poly%lib!spec.MapSpec_t.Request. (%Poly%lib!spec.MapSpec_t.Request. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.Request.)) )))
(assert (forall ((_input! lib!spec.MapSpec_t.Input.) (_id! Int)) (! (=> (and (has_type (Poly%lib!spec.MapSpec_t.Input. _input!) TYPE%lib!spec.MapSpec_t.Input.) (uInv 64 _id!)) (has_type (Poly%lib!spec.MapSpec_t.Request. (lib!spec.MapSpec_t.Request./Request _input! _id!)) TYPE%lib!spec.MapSpec_t.Request.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.Request. (lib!spec.MapSpec_t.Request./Request _input! _id!)) TYPE%lib!spec.MapSpec_t.Request.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Request.)) (! (= (lib!spec.MapSpec_t.Request./Request/input x) (lib!spec.MapSpec_t.Request./Request/?input x)) :pattern ((lib!spec.MapSpec_t.Request./Request/input x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Request.) (has_type (Poly%lib!spec.MapSpec_t.Input. (lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. x))) TYPE%lib!spec.MapSpec_t.Input.)) :pattern ((lib!spec.MapSpec_t.Request./Request/input (%Poly%lib!spec.MapSpec_t.Request. x)) (has_type x TYPE%lib!spec.MapSpec_t.Request.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Request.)) (! (= (lib!spec.MapSpec_t.Request./Request/id x) (lib!spec.MapSpec_t.Request./Request/?id x)) :pattern ((lib!spec.MapSpec_t.Request./Request/id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Request.) (uInv 64 (lib!spec.MapSpec_t.Request./Request/id (%Poly%lib!spec.MapSpec_t.Request. x)))) :pattern ((lib!spec.MapSpec_t.Request./Request/id (%Poly%lib!spec.MapSpec_t.Request. x)) (has_type x TYPE%lib!spec.MapSpec_t.Request.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Reply.)) (! (= x (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. x))) :pattern ((Poly%lib!spec.MapSpec_t.Reply. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Reply.) (= x (Poly%lib!spec.MapSpec_t.Reply. (%Poly%lib!spec.MapSpec_t.Reply. x)))) :pattern ((has_type x TYPE%lib!spec.MapSpec_t.Reply.)) )))
(assert (forall ((_output! lib!spec.MapSpec_t.Output.) (_id! Int)) (! (=> (and (has_type (Poly%lib!spec.MapSpec_t.Output. _output!) TYPE%lib!spec.MapSpec_t.Output.) (uInv 64 _id!)) (has_type (Poly%lib!spec.MapSpec_t.Reply. (lib!spec.MapSpec_t.Reply./Reply _output! _id!)) TYPE%lib!spec.MapSpec_t.Reply.)) :pattern ((has_type (Poly%lib!spec.MapSpec_t.Reply. (lib!spec.MapSpec_t.Reply./Reply _output! _id!)) TYPE%lib!spec.MapSpec_t.Reply.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Reply.)) (! (= (lib!spec.MapSpec_t.Reply./Reply/output x) (lib!spec.MapSpec_t.Reply./Reply/?output x)) :pattern ((lib!spec.MapSpec_t.Reply./Reply/output x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Reply.) (has_type (Poly%lib!spec.MapSpec_t.Output. (lib!spec.MapSpec_t.Reply./Reply/output (%Poly%lib!spec.MapSpec_t.Reply. x))) TYPE%lib!spec.MapSpec_t.Output.)) :pattern ((lib!spec.MapSpec_t.Reply./Reply/output (%Poly%lib!spec.MapSpec_t.Reply. x)) (has_type x TYPE%lib!spec.MapSpec_t.Reply.)) )))
(assert (forall ((x lib!spec.MapSpec_t.Reply.)) (! (= (lib!spec.MapSpec_t.Reply./Reply/id x) (lib!spec.MapSpec_t.Reply./Reply/?id x)) :pattern ((lib!spec.MapSpec_t.Reply./Reply/id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.MapSpec_t.Reply.) (uInv 64 (lib!spec.MapSpec_t.Reply./Reply/id (%Poly%lib!spec.MapSpec_t.Reply. x)))) :pattern ((lib!spec.MapSpec_t.Reply./Reply/id (%Poly%lib!spec.MapSpec_t.Reply. x)) (has_type x TYPE%lib!spec.MapSpec_t.Reply.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.AppIO_t.TrustedAPI.)) (! (= x (%Poly%lib!spec.AppIO_t.TrustedAPI. (Poly%lib!spec.AppIO_t.TrustedAPI. x))) :pattern ((Poly%lib!spec.AppIO_t.TrustedAPI. x)) )))
(assert (forall ((P&. Dcr) (P& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.AppIO_t.TrustedAPI. P&. P&)) (= x (Poly%lib!spec.AppIO_t.TrustedAPI. (%Poly%lib!spec.AppIO_t.TrustedAPI. x)))) :pattern ((has_type x (TYPE%lib!spec.AppIO_t.TrustedAPI. P&. P&))) )))
(assert (forall ((x lib!spec.AppIO_t.TrustedAPI.)) (! (= (lib!spec.AppIO_t.TrustedAPI./TrustedAPI/_p x) (lib!spec.AppIO_t.TrustedAPI./TrustedAPI/?_p x)) :pattern ((lib!spec.AppIO_t.TrustedAPI./TrustedAPI/_p x)) )))
(assert (forall ((P&. Dcr) (P& Type) (x lib!spec.AppIO_t.TrustedAPI.)) (! (has_type (Poly%lib!spec.AppIO_t.TrustedAPI. x) (TYPE%lib!spec.AppIO_t.TrustedAPI. P&. P&)) :pattern ((has_type (Poly%lib!spec.AppIO_t.TrustedAPI. x) (TYPE%lib!spec.AppIO_t.TrustedAPI. P&. P&))) )))
(define-fun is-lib!spec.AppIO_t.TrustedAPI./TrustedAPI_ ((c lib!spec.AppIO_t.TrustedAPI.)) Bool ((_ is lib!spec.AppIO_t.TrustedAPI./TrustedAPI) c))
(assert (forall ((x lib!spec.AppIO_t.TrustedAPI.)) (! (=> (is-lib!spec.AppIO_t.TrustedAPI./TrustedAPI_ x) (height_lt (height (Poly%core!marker.PhantomData. (lib!spec.AppIO_t.TrustedAPI./TrustedAPI/_p x))) (height (Poly%lib!spec.AppIO_t.TrustedAPI. x)))) :pattern ((height (Poly%core!marker.PhantomData. (lib!spec.AppIO_t.TrustedAPI./TrustedAPI/_p x)))) )))
(assert (forall ((x lib!spec.AppIO_t.ConcreteProgramModelState.)) (! (= x (%Poly%lib!spec.AppIO_t.ConcreteProgramModelState. (Poly%lib!spec.AppIO_t.ConcreteProgramModelState. x))) :pattern ((Poly%lib!spec.AppIO_t.ConcreteProgramModelState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AppIO_t.ConcreteProgramModelState.) (= x (Poly%lib!spec.AppIO_t.ConcreteProgramModelState. (%Poly%lib!spec.AppIO_t.ConcreteProgramModelState. x)))) :pattern ((has_type x TYPE%lib!spec.AppIO_t.ConcreteProgramModelState.)) )))
(assert (forall ((x lib!spec.AppIO_t.ConcreteProgramModelState.)) (! (has_type (Poly%lib!spec.AppIO_t.ConcreteProgramModelState. x) TYPE%lib!spec.AppIO_t.ConcreteProgramModelState.) :pattern ((has_type (Poly%lib!spec.AppIO_t.ConcreteProgramModelState. x) TYPE%lib!spec.AppIO_t.ConcreteProgramModelState.)) )))
(assert (forall ((x lib!spec.AppIO_t.ConcreteProgramModel.)) (! (= x (%Poly%lib!spec.AppIO_t.ConcreteProgramModel. (Poly%lib!spec.AppIO_t.ConcreteProgramModel. x))) :pattern ((Poly%lib!spec.AppIO_t.ConcreteProgramModel. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AppIO_t.ConcreteProgramModel.) (= x (Poly%lib!spec.AppIO_t.ConcreteProgramModel. (%Poly%lib!spec.AppIO_t.ConcreteProgramModel. x)))) :pattern ((has_type x TYPE%lib!spec.AppIO_t.ConcreteProgramModel.)) )))
(assert (forall ((x lib!spec.AppIO_t.ConcreteProgramModel.)) (! (has_type (Poly%lib!spec.AppIO_t.ConcreteProgramModel. x) TYPE%lib!spec.AppIO_t.ConcreteProgramModel.) :pattern ((has_type (Poly%lib!spec.AppIO_t.ConcreteProgramModel. x) TYPE%lib!spec.AppIO_t.ConcreteProgramModel.)) )))
(assert (forall ((x lib!spec.AppIO_t.Program.)) (! (= x (%Poly%lib!spec.AppIO_t.Program. (Poly%lib!spec.AppIO_t.Program. x))) :pattern ((Poly%lib!spec.AppIO_t.Program. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AppIO_t.Program.) (= x (Poly%lib!spec.AppIO_t.Program. (%Poly%lib!spec.AppIO_t.Program. x)))) :pattern ((has_type x TYPE%lib!spec.AppIO_t.Program.)) )))
(assert (forall ((x lib!spec.AppIO_t.Program.)) (! (has_type (Poly%lib!spec.AppIO_t.Program. x) TYPE%lib!spec.AppIO_t.Program.) :pattern ((has_type (Poly%lib!spec.AppIO_t.Program. x) TYPE%lib!spec.AppIO_t.Program.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%1.)) (! (= x (%Poly%tuple%1. (Poly%tuple%1. x))) :pattern ((Poly%tuple%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (= x (Poly%tuple%1. (%Poly%tuple%1. x)))) :pattern ((has_type x (TYPE%tuple%1. T%0&. T%0&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (_0! Poly)) (! (=> (has_type _0! T%0&) (has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) :pattern ((has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) )))
(assert (forall ((x tuple%1.)) (! (= (tuple%1./tuple%1/0 x) (tuple%1./tuple%1/?0 x)) :pattern ((tuple%1./tuple%1/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) T%0&)) :pattern ((tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (has_type x (TYPE%tuple%1. T%0&. T%0&))) )))
(define-fun is-tuple%1./tuple%1_ ((c tuple%1.)) Bool ((_ is tuple%1./tuple%1) c))
(assert (forall ((x tuple%1.)) (! (=> (is-tuple%1./tuple%1_ x) (height_lt (height (tuple%1./tuple%1/0 x)) (height (Poly%tuple%1. x)))) :pattern ((height (tuple%1./tuple%1/0 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type y (TYPE%tuple%1. T%0&. T%0&)) (ext_eq deep T%0& (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (tuple%1./tuple%1/0 (%Poly%tuple%1. y)))) (ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) :pattern ((ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%lib!spec.AppIO_t.ProgramModel. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!spec.AppIO_t.ProgramModel. Self%&. Self%&)) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))) )))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) (TYPE%tuple%1. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (= (proj%%lib!spec.AppIO_t.ProgramModel./State $ TYPE%lib!spec.AppIO_t.ConcreteProgramModel.) $))
(assert (= (proj%lib!spec.AppIO_t.ProgramModel./State $ TYPE%lib!spec.AppIO_t.ConcreteProgramModel.) TYPE%lib!spec.AppIO_t.ConcreteProgramModelState.))
(assert (= (proj%%vstd!view.View./V $ TYPE%lib!spec.ImplDisk_t.IAddress.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%lib!spec.ImplDisk_t.IAddress.) TYPE%lib!spec.AsyncDisk_t.Address.))
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!spec.ImplDisk_t.ipage_count.? (Poly) Int)
(declare-fun lib!spec.ImplDisk_t.iau_count.? (Poly) Int)
(declare-fun lib!spec.AppIO_t.ProgramModel.init.? (Dcr Type) Poly)
(declare-fun lib!spec.AppIO_t.ProgramModel.init%default%.? (Dcr Type) Poly)
(declare-fun lib!spec.AppIO_t.ProgramModel.next.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!spec.AppIO_t.ProgramModel.next%default%.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!spec.AppIO_t.impl&%0.view.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.ImplDisk_t.impl&%0.wf.? (Poly) Bool)
(declare-fun lib!spec.ImplDisk_t.impl&%1.arrow_from.? (Poly) lib!spec.ImplDisk_t.IAddress.)
(declare-fun lib!spec.ImplDisk_t.impl&%1.arrow_to.? (Poly) lib!spec.ImplDisk_t.IAddress.)
(declare-fun lib!spec.ImplDisk_t.impl&%0.view.? (Poly) lib!spec.AsyncDisk_t.Address.)
(declare-fun lib!spec.ImplDisk_t.impl&%3.view.? (Poly) lib!spec.AsyncDisk_t.DiskRequest.)
(declare-fun lib!spec.AppIO_t.to_disk_reqs.? (Poly Poly) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)
(declare-fun lib!spec.AppIO_t.rec%to_disk_reqs.? (Poly Poly Fuel) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>.)
(declare-fun lib!spec.ImplDisk_t.impl&%4.view.? (Poly) lib!spec.AsyncDisk_t.DiskResponse.)
(declare-fun lib!spec.AppIO_t.to_disk_resps.? (Poly) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)
(declare-fun lib!spec.AppIO_t.rec%to_disk_resps.? (Poly Fuel) vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)
(declare-fun lib!spec.AppIO_t.impl&%3.view.? (Poly) lib!spec.AppIO_t.ConcreteProgramModelState.)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%0 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)) )))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_spec_len.) (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (uInv 32 (lib!spec.ImplDisk_t.ipage_count.? no%param))) :pattern ((lib!spec.ImplDisk_t.ipage_count.? no%param)) )))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (uInv 32 (lib!spec.ImplDisk_t.iau_count.? no%param))) :pattern ((lib!spec.ImplDisk_t.iau_count.? no%param)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!spec.AppIO_t.ProgramModel.init.? Self%&. Self%&) (proj%lib!spec.AppIO_t.ProgramModel./State Self%&. Self%&)) :pattern ((lib!spec.AppIO_t.ProgramModel.init.? Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre! Poly) (post! Poly) (lbl! Poly)) (! (=> (and (has_type pre! (proj%lib!spec.AppIO_t.ProgramModel./State Self%&. Self%&)) (has_type post! (proj%lib!spec.AppIO_t.ProgramModel./State Self%&. Self%&)) (has_type lbl! TYPE%lib!spec.SystemModel_t.ProgramLabel.)) (has_type (lib!spec.AppIO_t.ProgramModel.next.? Self%&. Self%& pre! post! lbl!) BOOL)) :pattern ((lib!spec.AppIO_t.ProgramModel.next.? Self%&. Self%& pre! post! lbl!)) )))
(declare-fun ens%lib!spec.AppIO_t.ProgramModel.accept_request_always_enabled. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (pre! Poly) (req! Poly) (post! Poly)) (! (= (ens%lib!spec.AppIO_t.ProgramModel.accept_request_always_enabled. Self%&. Self%& pre! req! post!) (and (has_type post! (proj%lib!spec.AppIO_t.ProgramModel./State Self%&. Self%&)) (%B (lib!spec.AppIO_t.ProgramModel.next.? Self%&. Self%& pre! post! (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./AcceptRequest (%Poly%lib!spec.MapSpec_t.Request. req!))))))) :pattern ((ens%lib!spec.AppIO_t.ProgramModel.accept_request_always_enabled. Self%&. Self%& pre! req! post!)) )))
(assert (forall ((P&. Dcr) (P& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.AppIO_t.Token. P&. P&)) (has_type (lib!spec.AppIO_t.impl&%0.view.? P&. P& self!) (proj%lib!spec.AppIO_t.ProgramModel./State P&. P&))) :pattern ((lib!spec.AppIO_t.impl&%0.view.? P&. P& self!)) )))
(declare-fun ens%lib!spec.AppIO_t.impl&%1.receive_request. (Dcr Type lib!spec.AppIO_t.TrustedAPI. Poly tuple%2.) Bool)
(assert (forall ((P&. Dcr) (P& Type) (self! lib!spec.AppIO_t.TrustedAPI.) (pre! Poly) (req_post! tuple%2.)) (! (= (ens%lib!spec.AppIO_t.impl&%1.receive_request. P&. P& self! pre! req_post!) (and (has_type (Poly%tuple%2. req_post!) (TYPE%tuple%2. $ TYPE%lib!spec.MapSpec_t.Request. (TRACKED $) (TYPE%lib!spec.AppIO_t.Token. P&. P&))) (%B (lib!spec.AppIO_t.ProgramModel.next.? P&. P& (lib!spec.AppIO_t.impl&%0.view.? P&. P& pre!) (lib!spec.AppIO_t.impl&%0.view.? P&. P& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. req_post!)))) (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./AcceptRequest (%Poly%lib!spec.MapSpec_t.Request. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. req_post!)))))))))) :pattern ((ens%lib!spec.AppIO_t.impl&%1.receive_request. P&. P& self! pre! req_post!)) )))
(declare-fun req%lib!spec.AppIO_t.impl&%1.execute. (Dcr Type lib!spec.AppIO_t.TrustedAPI. Poly Poly lib!spec.MapSpec_t.Request. lib!spec.MapSpec_t.Reply.) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((P&. Dcr) (P& Type) (self! lib!spec.AppIO_t.TrustedAPI.) (pre! Poly) (post! Poly) (req! lib!spec.MapSpec_t.Request.) (reply! lib!spec.MapSpec_t.Reply.)) (! (= (req%lib!spec.AppIO_t.impl&%1.execute. P&. P& self! pre! post! req! reply!) (=> %%global_location_label%%5 (%B (lib!spec.AppIO_t.ProgramModel.next.? P&. P& (lib!spec.AppIO_t.impl&%0.view.? P&. P& pre!) post! (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./Execute (%Poly%lib!spec.MapSpec_t.Request. (Poly%lib!spec.MapSpec_t.Request. req!)) (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. reply!)))))))) :pattern ((req%lib!spec.AppIO_t.impl&%1.execute. P&. P& self! pre! post! req! reply!)) )))
(declare-fun ens%lib!spec.AppIO_t.impl&%1.execute. (Dcr Type lib!spec.AppIO_t.TrustedAPI. Poly Poly lib!spec.MapSpec_t.Request. lib!spec.MapSpec_t.Reply. Poly) Bool)
(assert (forall ((P&. Dcr) (P& Type) (self! lib!spec.AppIO_t.TrustedAPI.) (pre! Poly) (post! Poly) (req! lib!spec.MapSpec_t.Request.) (reply! lib!spec.MapSpec_t.Reply.) (out! Poly)) (! (= (ens%lib!spec.AppIO_t.impl&%1.execute. P&. P& self! pre! post! req! reply! out!) (and (has_type out! (TYPE%lib!spec.AppIO_t.Token. P&. P&)) (= post! (lib!spec.AppIO_t.impl&%0.view.? P&. P& out!)))) :pattern ((ens%lib!spec.AppIO_t.impl&%1.execute. P&. P& self! pre! post! req! reply! out!)) )))
(declare-fun req%lib!spec.AppIO_t.impl&%1.send_reply. (Dcr Type lib!spec.AppIO_t.TrustedAPI. lib!spec.MapSpec_t.Reply. Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((P&. Dcr) (P& Type) (self! lib!spec.AppIO_t.TrustedAPI.) (reply! lib!spec.MapSpec_t.Reply.) (pre! Poly) (post! Poly)) (! (= (req%lib!spec.AppIO_t.impl&%1.send_reply. P&. P& self! reply! pre! post!) (=> %%global_location_label%%6 (%B (lib!spec.AppIO_t.ProgramModel.next.? P&. P& (lib!spec.AppIO_t.impl&%0.view.? P&. P& pre!) post! (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./DeliverReply (%Poly%lib!spec.MapSpec_t.Reply. (Poly%lib!spec.MapSpec_t.Reply. reply!)))))))) :pattern ((req%lib!spec.AppIO_t.impl&%1.send_reply. P&. P& self! reply! pre! post!)) )))
(declare-fun ens%lib!spec.AppIO_t.impl&%1.send_reply. (Dcr Type lib!spec.AppIO_t.TrustedAPI. lib!spec.MapSpec_t.Reply. Poly Poly Poly) Bool)
(assert (forall ((P&. Dcr) (P& Type) (self! lib!spec.AppIO_t.TrustedAPI.) (reply! lib!spec.MapSpec_t.Reply.) (pre! Poly) (post! Poly) (out! Poly)) (! (= (ens%lib!spec.AppIO_t.impl&%1.send_reply. P&. P& self! reply! pre! post! out!) (and (has_type out! (TYPE%lib!spec.AppIO_t.Token. P&. P&)) (= post! (lib!spec.AppIO_t.impl&%0.view.? P&. P& out!)))) :pattern ((ens%lib!spec.AppIO_t.impl&%1.send_reply. P&. P& self! reply! pre! post! out!)) )))
(assert (fuel_bool_default fuel%lib!spec.ImplDisk_t.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!spec.ImplDisk_t.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!spec.ImplDisk_t.impl&%0.wf.? self!) (and (< (lib!spec.ImplDisk_t.IAddress./IAddress/au (%Poly%lib!spec.ImplDisk_t.IAddress. self!)) (lib!spec.ImplDisk_t.iau_count.? (I 0))) (< (lib!spec.ImplDisk_t.IAddress./IAddress/page (%Poly%lib!spec.ImplDisk_t.IAddress. self!)) (lib!spec.ImplDisk_t.ipage_count.? (I 0))))) :pattern ((lib!spec.ImplDisk_t.impl&%0.wf.? self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.ImplDisk_t.impl&%1.arrow_from.))
(assert (=> (fuel_bool fuel%lib!spec.ImplDisk_t.impl&%1.arrow_from.) (forall ((self! Poly)) (! (= (lib!spec.ImplDisk_t.impl&%1.arrow_from.? self!) (lib!spec.ImplDisk_t.IDiskRequest./ReadReq/from (%Poly%lib!spec.ImplDisk_t.IDiskRequest. self!))) :pattern ((lib!spec.ImplDisk_t.impl&%1.arrow_from.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.ImplDisk_t.IDiskRequest.) (has_type (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.impl&%1.arrow_from.? self!)) TYPE%lib!spec.ImplDisk_t.IAddress.)) :pattern ((lib!spec.ImplDisk_t.impl&%1.arrow_from.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.ImplDisk_t.impl&%1.arrow_to.))
(assert (=> (fuel_bool fuel%lib!spec.ImplDisk_t.impl&%1.arrow_to.) (forall ((self! Poly)) (! (= (lib!spec.ImplDisk_t.impl&%1.arrow_to.? self!) (lib!spec.ImplDisk_t.IDiskRequest./WriteReq/to (%Poly%lib!spec.ImplDisk_t.IDiskRequest. self!))) :pattern ((lib!spec.ImplDisk_t.impl&%1.arrow_to.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.ImplDisk_t.IDiskRequest.) (has_type (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.impl&%1.arrow_to.? self!)) TYPE%lib!spec.ImplDisk_t.IAddress.)) :pattern ((lib!spec.ImplDisk_t.impl&%1.arrow_to.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.ImplDisk_t.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!spec.ImplDisk_t.impl&%0.view.) (forall ((self! Poly)) (! (= (lib!spec.ImplDisk_t.impl&%0.view.? self!) (lib!spec.AsyncDisk_t.Address./Address (%I (I (lib!spec.ImplDisk_t.IAddress./IAddress/au (%Poly%lib!spec.ImplDisk_t.IAddress. self!)))) (%I (I (lib!spec.ImplDisk_t.IAddress./IAddress/page (%Poly%lib!spec.ImplDisk_t.IAddress. self!)))))) :pattern ((lib!spec.ImplDisk_t.impl&%0.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.ImplDisk_t.IAddress.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.ImplDisk_t.impl&%0.view.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.ImplDisk_t.impl&%0.view.? self!)) )))
(assert (fuel_bool_default fuel%lib!spec.ImplDisk_t.impl&%3.view.))
(define-fun is-lib!spec.ImplDisk_t.IDiskRequest./ReadReq_ ((c lib!spec.ImplDisk_t.IDiskRequest.)) Bool ((_ is lib!spec.ImplDisk_t.IDiskRequest./ReadReq) c))
(assert (=> (fuel_bool fuel%lib!spec.ImplDisk_t.impl&%3.view.) (forall ((self! Poly)) (! (= (lib!spec.ImplDisk_t.impl&%3.view.? self!) (ite (is-lib!spec.ImplDisk_t.IDiskRequest./ReadReq_ (%Poly%lib!spec.ImplDisk_t.IDiskRequest. self!)) (let ((from$ (lib!spec.ImplDisk_t.IDiskRequest./ReadReq/from (%Poly%lib!spec.ImplDisk_t.IDiskRequest. self!)))) (lib!spec.AsyncDisk_t.DiskRequest./ReadReq (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.ImplDisk_t.impl&%0.view.? (Poly%lib!spec.ImplDisk_t.IAddress. from$)))))) (let ((to$ (lib!spec.ImplDisk_t.IDiskRequest./WriteReq/to (%Poly%lib!spec.ImplDisk_t.IDiskRequest. self!)))) (let ((data$ (lib!spec.ImplDisk_t.IDiskRequest./WriteReq/data (%Poly%lib!spec.ImplDisk_t.IDiskRequest. self!)))) (lib!spec.AsyncDisk_t.DiskRequest./WriteReq (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.ImplDisk_t.impl&%0.view.? (Poly%lib!spec.ImplDisk_t.IAddress. to$)))) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. data$))))))) :pattern ((lib!spec.ImplDisk_t.impl&%3.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.ImplDisk_t.IDiskRequest.) (has_type (Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.ImplDisk_t.impl&%3.view.? self!)) TYPE%lib!spec.AsyncDisk_t.DiskRequest.)) :pattern ((lib!spec.ImplDisk_t.impl&%3.view.? self!)) )))
(declare-fun req%lib!spec.AppIO_t.to_disk_reqs. (Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((ids! Poly) (reqs! Poly)) (! (= (req%lib!spec.AppIO_t.to_disk_reqs. ids! reqs!) (=> %%global_location_label%%7 (= (vstd!seq.Seq.len.? $ (UINT 64) ids!) (vstd!seq.Seq.len.? $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. reqs!)))) :pattern ((req%lib!spec.AppIO_t.to_disk_reqs. ids! reqs!)) )))
(assert (fuel_bool_default fuel%lib!spec.AppIO_t.to_disk_reqs.))
(declare-const fuel_nat%lib!spec.AppIO_t.to_disk_reqs. Fuel)
(assert (forall ((ids! Poly) (reqs! Poly) (fuel% Fuel)) (! (= (lib!spec.AppIO_t.rec%to_disk_reqs.? ids! reqs! fuel%) (lib!spec.AppIO_t.rec%to_disk_reqs.? ids! reqs! zero)) :pattern ((lib!spec.AppIO_t.rec%to_disk_reqs.? ids! reqs! fuel%)) )))
(assert (forall ((ids! Poly) (reqs! Poly) (fuel% Fuel)) (! (=> (and (has_type ids! (TYPE%vstd!seq.Seq. $ (UINT 64))) (has_type reqs! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest.))) (= (lib!spec.AppIO_t.rec%to_disk_reqs.? ids! reqs! (succ fuel%)) (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (ite (> (vstd!seq.Seq.len.? $ (UINT 64) ids!) 0) (let ((sub_ids$ (%Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq.subrange.? $ (UINT 64) ids! (I 1) (I (vstd!seq.Seq.len.? $ (UINT 64) ids!)))))) (let ((sub_reqs$ (%Poly%vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. reqs! (I 1) (I (vstd!seq.Seq.len.? $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. reqs!)))))) (vstd!map.impl&%0.insert.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (lib!spec.AppIO_t.rec%to_disk_reqs.? (Poly%vstd!seq.Seq<u64.>. sub_ids$) (Poly%vstd!seq.Seq<lib!spec.ImplDisk_t.IDiskRequest.>. sub_reqs$) fuel%)) (vstd!seq.Seq.index.? $ (UINT 64) ids! (I 0)) (Poly%lib!spec.AsyncDisk_t.DiskRequest. (lib!spec.ImplDisk_t.impl&%3.view.? (vstd!seq.Seq.index.? $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. reqs! (I 0))))))) (vstd!map.impl&%0.empty.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskRequest.))))) :pattern ((lib!spec.AppIO_t.rec%to_disk_reqs.? ids! reqs! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.AppIO_t.to_disk_reqs.) (forall ((ids! Poly) (reqs! Poly)) (! (=> (and (has_type ids! (TYPE%vstd!seq.Seq. $ (UINT 64))) (has_type reqs! (TYPE%vstd!seq.Seq. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest.))) (= (lib!spec.AppIO_t.to_disk_reqs.? ids! reqs!) (lib!spec.AppIO_t.rec%to_disk_reqs.? ids! reqs! (succ fuel_nat%lib!spec.AppIO_t.to_disk_reqs.)))) :pattern ((lib!spec.AppIO_t.to_disk_reqs.? ids! reqs!)) ))))
(declare-fun req%lib!spec.AppIO_t.impl&%1.send_disk_requests. (Dcr Type lib!spec.AppIO_t.TrustedAPI. Poly alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>.) Bool)
(declare-const %%global_location_label%%8 Bool)
(define-fun is-lib!spec.ImplDisk_t.IDiskRequest./WriteReq_ ((c lib!spec.ImplDisk_t.IDiskRequest.)) Bool ((_ is lib!spec.ImplDisk_t.IDiskRequest./WriteReq) c))
(assert (forall ((P&. Dcr) (P& Type) (self! lib!spec.AppIO_t.TrustedAPI.) (pre! Poly) (requests! alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>.)) (! (= (req%lib!spec.AppIO_t.impl&%1.send_disk_requests. P&. P& self! pre! requests!) (=> %%global_location_label%%8 (forall ((req$ Poly)) (! (=> (has_type req$ TYPE%lib!spec.ImplDisk_t.IDiskRequest.) (=> (vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. requests!)) req$) (and (=> (is-lib!spec.ImplDisk_t.IDiskRequest./ReadReq_ (%Poly%lib!spec.ImplDisk_t.IDiskRequest. req$)) (lib!spec.ImplDisk_t.impl&%0.wf.? (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IDiskRequest./ReadReq/from (%Poly%lib!spec.ImplDisk_t.IDiskRequest. req$))))) (=> (is-lib!spec.ImplDisk_t.IDiskRequest./WriteReq_ (%Poly%lib!spec.ImplDisk_t.IDiskRequest. req$)) (lib!spec.ImplDisk_t.impl&%0.wf.? (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IDiskRequest./WriteReq/to (%Poly%lib!spec.ImplDisk_t.IDiskRequest. req$)))))))) :pattern ((vstd!seq_lib.impl&%0.contains.? $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. requests!)) req$)) )))) :pattern ((req%lib!spec.AppIO_t.impl&%1.send_disk_requests. P&. P& self! pre! requests!)) )))
(declare-fun ens%lib!spec.AppIO_t.impl&%1.send_disk_requests. (Dcr Type lib!spec.AppIO_t.TrustedAPI. Poly alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. tuple%2.) Bool)
(assert (forall ((P&. Dcr) (P& Type) (self! lib!spec.AppIO_t.TrustedAPI.) (pre! Poly) (requests! alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>.) (out! tuple%2.)) (! (= (ens%lib!spec.AppIO_t.impl&%1.send_disk_requests. P&. P& self! pre! requests! out!) (and (has_type (Poly%tuple%2. out!) (TYPE%tuple%2. $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (TRACKED $) (TYPE%lib!spec.AppIO_t.Token. P&. P&))) (= (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. requests!)) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 64) $ ALLOCATOR_GLOBAL (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. out!))))) (%B (let ((disk_lbl$ (lib!spec.AsyncDisk_t.AsyncDisk.Label./DiskOps (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskRequest.>. (lib!spec.AppIO_t.to_disk_reqs.? (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 64) $ ALLOCATOR_GLOBAL) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. out!)))) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!spec.ImplDisk_t.IDiskRequest. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!spec.ImplDisk_t.IDiskRequest./allocator_global%.>. requests!))))) (%Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. (vstd!map.impl&%0.empty.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.))))) (lib!spec.AppIO_t.ProgramModel.next.? P&. P& (lib!spec.AppIO_t.impl&%0.view.? P&. P& pre!) (lib!spec.AppIO_t.impl&%0.view.? P&. P& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. out!)))) (Poly%lib!spec.SystemModel_t.ProgramLabel. (lib!spec.SystemModel_t.ProgramLabel./DiskIO (%Poly%lib!spec.AsyncDisk_t.AsyncDisk.Label. (Poly%lib!spec.AsyncDisk_t.AsyncDisk.Label. disk_lbl$))))))))) :pattern ((ens%lib!spec.AppIO_t.impl&%1.send_disk_requests. P&. P& self! pre! requests! out!)) )))
(assert (fuel_bool_default fuel%lib!spec.ImplDisk_t.impl&%4.view.))
(define-fun is-lib!spec.ImplDisk_t.IDiskResponse./ReadResp_ ((c lib!spec.ImplDisk_t.IDiskResponse.)) Bool ((_ is lib!spec.ImplDisk_t.IDiskResponse./ReadResp) c))
(assert (=> (fuel_bool fuel%lib!spec.ImplDisk_t.impl&%4.view.) (forall ((self! Poly)) (! (= (lib!spec.ImplDisk_t.impl&%4.view.? self!) (ite (is-lib!spec.ImplDisk_t.IDiskResponse./ReadResp_ (%Poly%lib!spec.ImplDisk_t.IDiskResponse. self!)) (let ((from$ (lib!spec.ImplDisk_t.IDiskResponse./ReadResp/from (%Poly%lib!spec.ImplDisk_t.IDiskResponse. self!)))) (let ((data$ (lib!spec.ImplDisk_t.IDiskResponse./ReadResp/data (%Poly%lib!spec.ImplDisk_t.IDiskResponse. self!)))) (lib!spec.AsyncDisk_t.DiskResponse./ReadResp (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.ImplDisk_t.impl&%0.view.? (Poly%lib!spec.ImplDisk_t.IAddress. from$)))) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. data$))))) (let ((to$ (lib!spec.ImplDisk_t.IDiskResponse./WriteResp/to (%Poly%lib!spec.ImplDisk_t.IDiskResponse. self!)))) (lib!spec.AsyncDisk_t.DiskResponse./WriteResp (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.ImplDisk_t.impl&%0.view.? (Poly%lib!spec.ImplDisk_t.IAddress. to$)))))))) :pattern ((lib!spec.ImplDisk_t.impl&%4.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.ImplDisk_t.IDiskResponse.) (has_type (Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.ImplDisk_t.impl&%4.view.? self!)) TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) :pattern ((lib!spec.ImplDisk_t.impl&%4.view.? self!)) )))
(declare-const id_resps! Poly)
(declare-const tmp%1 vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>.)
(declare-const sub_id_resps@ vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>.)
(declare-const tmp%2 Poly)
(declare-const decrease%init0 Int)
(assert fuel_defaults)
(assert (has_type id_resps! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.))))
(declare-const %%switch_label%%0 Bool)
(declare-const %%location_label%%0 Bool)
(assert (not (=> (= decrease%init0 (vstd!seq.Seq.len.? $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) id_resps!)) (or (and (=> (> (vstd!seq.Seq.len.? $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) id_resps!) 0) (=> (= sub_id_resps@ (%Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. (vstd!seq.Seq.subrange.? $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) id_resps! (I 1) (I (vstd!seq.Seq.len.? $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) id_resps!))))) (and (=> %%location_label%%0 (check_decrease_int (let ((id_resps!$0 sub_id_resps@)) (vstd!seq.Seq.len.? $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) (Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. id_resps!$0))) decrease%init0 false)) (=> (= tmp%1 (lib!spec.AppIO_t.to_disk_resps.? (Poly%vstd!seq.Seq<tuple%2<u64./lib!spec.ImplDisk_t.IDiskResponse.>.>. sub_id_resps@))) (=> (= tmp%2 (vstd!map.impl&%0.insert.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse. (Poly%vstd!map.Map<u64./lib!spec.AsyncDisk_t.DiskResponse.>. tmp%1) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!seq.Seq.index.? $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) id_resps! (I 0)))) (Poly%lib!spec.AsyncDisk_t.DiskResponse. (lib!spec.ImplDisk_t.impl&%4.view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!seq.Seq.index.? $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) id_resps! (I 0)))))))) %%switch_label%%0))))) (=> (not (> (vstd!seq.Seq.len.? $ (TYPE%tuple%2. $ (UINT 64) $ TYPE%lib!spec.ImplDisk_t.IDiskResponse.) id_resps!) 0)) (=> (= tmp%2 (vstd!map.impl&%0.empty.? $ (UINT 64) $ TYPE%lib!spec.AsyncDisk_t.DiskResponse.)) %%switch_label%%0))) (not %%switch_label%%0)))))
(check-sat)
(exit)
