(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project SplinterDB 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.empty. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.len. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.slice. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.drop_first. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.query_from. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.query. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.apply_filter. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.extend. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.update_subrange. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.i_from. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.i. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered. FuelId)
(declare-const fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%0.query. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.query_internal. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.apply_filter. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.merge. FuelId)
(declare-const fuel%lib!betree.Buffer_v.impl&%1.empty. FuelId)
(declare-const fuel%lib!betree.Buffer_v.total_keys. FuelId)
(declare-const fuel%lib!betree.OffsetMap_v.impl&%0.is_total. FuelId)
(declare-const fuel%lib!betree.OffsetMap_v.impl&%0.active_keys. FuelId)
(declare-const fuel%lib!spec.Messages_t.nop_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.combine_deltas. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.apply_delta. FuelId)
(declare-const fuel%lib!spec.Messages_t.impl&%1.merge. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%lib!betree.BufferSeq_v.impl&%0.empty. fuel%lib!betree.BufferSeq_v.impl&%0.len. fuel%lib!betree.BufferSeq_v.impl&%0.spec_index. fuel%lib!betree.BufferSeq_v.impl&%0.slice. fuel%lib!betree.BufferSeq_v.impl&%0.drop_first. fuel%lib!betree.BufferSeq_v.impl&%0.query_from. fuel%lib!betree.BufferSeq_v.impl&%0.query. fuel%lib!betree.BufferSeq_v.impl&%0.apply_filter. fuel%lib!betree.BufferSeq_v.impl&%0.extend. fuel%lib!betree.BufferSeq_v.impl&%0.update_subrange. fuel%lib!betree.BufferSeq_v.impl&%0.i_from. fuel%lib!betree.BufferSeq_v.impl&%0.i. fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer. fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered. fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. fuel%lib!betree.Buffer_v.impl&%0.query. fuel%lib!betree.Buffer_v.impl&%1.query_internal. fuel%lib!betree.Buffer_v.impl&%1.apply_filter. fuel%lib!betree.Buffer_v.impl&%1.merge. fuel%lib!betree.Buffer_v.impl&%1.empty. fuel%lib!betree.Buffer_v.total_keys. fuel%lib!betree.OffsetMap_v.impl&%0.is_total. fuel%lib!betree.OffsetMap_v.impl&%0.active_keys. fuel%lib!spec.Messages_t.nop_delta. fuel%lib!spec.Messages_t.impl&%1.combine_deltas. fuel%lib!spec.Messages_t.impl&%1.apply_delta. fuel%lib!spec.Messages_t.impl&%1.merge. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. 0)
(declare-sort vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. 0)
(declare-sort vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. 0)
(declare-sort vstd!set.Set<lib!spec.KeyType_t.Key.>. 0)
(declare-datatypes ((lib!betree.BufferSeq_v.BufferSeq. 0) (lib!betree.Buffer_v.SimpleBuffer. 0) (lib!betree.OffsetMap_v.OffsetMap. 0) (lib!spec.KeyType_t.Key. 0) (lib!spec.Messages_t.Value. 0) (lib!spec.Messages_t.Delta. 0) (lib!spec.Messages_t.Message. 0) (tuple%0. 0) (tuple%2. 0)) (((lib!betree.BufferSeq_v.BufferSeq./BufferSeq (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/?buffers vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.))) ((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.))) ((lib!betree.OffsetMap_v.OffsetMap./OffsetMap (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/?offsets vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.))) ((lib!spec.KeyType_t.Key./Key (lib!spec.KeyType_t.Key./Key/?0 Int))) ((lib!spec.Messages_t.Value./Value (lib!spec.Messages_t.Value./Value/?0 Int))) ((lib!spec.Messages_t.Delta./Delta (lib!spec.Messages_t.Delta./Delta/?0 Int))) ((lib!spec.Messages_t.Message./Define (lib!spec.Messages_t.Message./Define/?value lib!spec.Messages_t.Value.)) (lib!spec.Messages_t.Message./Update (lib!spec.Messages_t.Message./Update/?delta lib!spec.Messages_t.Delta.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (lib!betree.BufferSeq_v.BufferSeq.) vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)
(declare-fun lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (lib!betree.Buffer_v.SimpleBuffer.) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (lib!betree.OffsetMap_v.OffsetMap.) vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)
(declare-fun lib!spec.KeyType_t.Key./Key/0 (lib!spec.KeyType_t.Key.) Int)
(declare-fun lib!spec.Messages_t.Value./Value/0 (lib!spec.Messages_t.Value.) Int)
(declare-fun lib!spec.Messages_t.Delta./Delta/0 (lib!spec.Messages_t.Delta.) Int)
(declare-fun lib!spec.Messages_t.Message./Define/value (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.Message./Update/delta (lib!spec.Messages_t.Message.) lib!spec.Messages_t.Delta.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!betree.BufferSeq_v.BufferSeq. Type)
(declare-const TYPE%lib!betree.Buffer_v.SimpleBuffer. Type)
(declare-const TYPE%lib!betree.OffsetMap_v.OffsetMap. Type)
(declare-const TYPE%lib!spec.KeyType_t.Key. Type)
(declare-const TYPE%lib!spec.Messages_t.Value. Type)
(declare-const TYPE%lib!spec.Messages_t.Delta. Type)
(declare-const TYPE%lib!spec.Messages_t.Message. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)
(declare-fun Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly) vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)
(declare-fun Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (Poly) vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.Set<lib!spec.KeyType_t.Key.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun Poly%lib!betree.BufferSeq_v.BufferSeq. (lib!betree.BufferSeq_v.BufferSeq.) Poly)
(declare-fun %Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly) lib!betree.BufferSeq_v.BufferSeq.)
(declare-fun Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.SimpleBuffer.) Poly)
(declare-fun %Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun Poly%lib!betree.OffsetMap_v.OffsetMap. (lib!betree.OffsetMap_v.OffsetMap.) Poly)
(declare-fun %Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly) lib!betree.OffsetMap_v.OffsetMap.)
(declare-fun Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key.) Poly)
(declare-fun %Poly%lib!spec.KeyType_t.Key. (Poly) lib!spec.KeyType_t.Key.)
(declare-fun Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Value. (Poly) lib!spec.Messages_t.Value.)
(declare-fun Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Delta. (Poly) lib!spec.Messages_t.Delta.)
(declare-fun Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message.) Poly)
(declare-fun %Poly%lib!spec.Messages_t.Message. (Poly) lib!spec.Messages_t.Message.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./nat.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (= x (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x))) :pattern ((Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) (= x (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>.)) (! (has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) (= x (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) )))
(assert (forall ((x vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) (= x (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.KeyType_t.Key.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.KeyType_t.Key.))) )))
(assert (forall ((x lib!betree.BufferSeq_v.BufferSeq.)) (! (= x (%Poly%lib!betree.BufferSeq_v.BufferSeq. (Poly%lib!betree.BufferSeq_v.BufferSeq. x))) :pattern ((Poly%lib!betree.BufferSeq_v.BufferSeq. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.BufferSeq_v.BufferSeq.) (= x (Poly%lib!betree.BufferSeq_v.BufferSeq. (%Poly%lib!betree.BufferSeq_v.BufferSeq. x)))) :pattern ((has_type x TYPE%lib!betree.BufferSeq_v.BufferSeq.)) )))
(assert (forall ((x lib!betree.BufferSeq_v.BufferSeq.)) (! (= (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers x) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/?buffers x)) :pattern ((lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers x)) )))
(assert (forall ((x lib!betree.BufferSeq_v.BufferSeq.)) (! (has_type (Poly%lib!betree.BufferSeq_v.BufferSeq. x) TYPE%lib!betree.BufferSeq_v.BufferSeq.) :pattern ((has_type (Poly%lib!betree.BufferSeq_v.BufferSeq. x) TYPE%lib!betree.BufferSeq_v.BufferSeq.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type y TYPE%lib!betree.BufferSeq_v.BufferSeq.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.) (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. x))) (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. y))))) (ext_eq deep TYPE%lib!betree.BufferSeq_v.BufferSeq. x y)) :pattern ((ext_eq deep TYPE%lib!betree.BufferSeq_v.BufferSeq. x y)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= x (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. x))) :pattern ((Poly%lib!betree.Buffer_v.SimpleBuffer. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (= x (Poly%lib!betree.Buffer_v.SimpleBuffer. (%Poly%lib!betree.Buffer_v.SimpleBuffer. x)))) :pattern ((has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (= (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/?map x)) :pattern ((lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map x)) )))
(assert (forall ((x lib!betree.Buffer_v.SimpleBuffer.)) (! (has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.) :pattern ((has_type (Poly%lib!betree.Buffer_v.SimpleBuffer. x) TYPE%lib!betree.Buffer_v.SimpleBuffer.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type y TYPE%lib!betree.Buffer_v.SimpleBuffer.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. x))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. y))))) (ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) :pattern ((ext_eq deep TYPE%lib!betree.Buffer_v.SimpleBuffer. x y)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (= x (%Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly%lib!betree.OffsetMap_v.OffsetMap. x))) :pattern ((Poly%lib!betree.OffsetMap_v.OffsetMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.) (= x (Poly%lib!betree.OffsetMap_v.OffsetMap. (%Poly%lib!betree.OffsetMap_v.OffsetMap. x)))) :pattern ((has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (= (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets x) (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/?offsets x)) :pattern ((lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets x)) )))
(assert (forall ((x lib!betree.OffsetMap_v.OffsetMap.)) (! (has_type (Poly%lib!betree.OffsetMap_v.OffsetMap. x) TYPE%lib!betree.OffsetMap_v.OffsetMap.) :pattern ((has_type (Poly%lib!betree.OffsetMap_v.OffsetMap. x) TYPE%lib!betree.OffsetMap_v.OffsetMap.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!betree.OffsetMap_v.OffsetMap.) (has_type y TYPE%lib!betree.OffsetMap_v.OffsetMap.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!spec.KeyType_t.Key. $ NAT) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. x))) (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. y))))) (ext_eq deep TYPE%lib!betree.OffsetMap_v.OffsetMap. x y)) :pattern ((ext_eq deep TYPE%lib!betree.OffsetMap_v.OffsetMap. x y)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= x (%Poly%lib!spec.KeyType_t.Key. (Poly%lib!spec.KeyType_t.Key. x))) :pattern ((Poly%lib!spec.KeyType_t.Key. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (= x (Poly%lib!spec.KeyType_t.Key. (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) :pattern ((has_type (Poly%lib!spec.KeyType_t.Key. (lib!spec.KeyType_t.Key./Key _0!)) TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.KeyType_t.Key.)) (! (= (lib!spec.KeyType_t.Key./Key/0 x) (lib!spec.KeyType_t.Key./Key/?0 x)) :pattern ((lib!spec.KeyType_t.Key./Key/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.KeyType_t.Key.) (uInv 64 (lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)))) :pattern ((lib!spec.KeyType_t.Key./Key/0 (%Poly%lib!spec.KeyType_t.Key. x)) (has_type x TYPE%lib!spec.KeyType_t.Key.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= x (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. x))) :pattern ((Poly%lib!spec.Messages_t.Value. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (= x (Poly%lib!spec.Messages_t.Value. (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Value./Value _0!)) TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Value.)) (! (= (lib!spec.Messages_t.Value./Value/0 x) (lib!spec.Messages_t.Value./Value/?0 x)) :pattern ((lib!spec.Messages_t.Value./Value/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Value.) (uInv 64 (lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)))) :pattern ((lib!spec.Messages_t.Value./Value/0 (%Poly%lib!spec.Messages_t.Value. x)) (has_type x TYPE%lib!spec.Messages_t.Value.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= x (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. x))) :pattern ((Poly%lib!spec.Messages_t.Delta. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (= x (Poly%lib!spec.Messages_t.Delta. (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((_0! Int)) (! (=> (uInv 64 _0!) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Delta./Delta _0!)) TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Delta.)) (! (= (lib!spec.Messages_t.Delta./Delta/0 x) (lib!spec.Messages_t.Delta./Delta/?0 x)) :pattern ((lib!spec.Messages_t.Delta./Delta/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Delta.) (uInv 64 (lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)))) :pattern ((lib!spec.Messages_t.Delta./Delta/0 (%Poly%lib!spec.Messages_t.Delta. x)) (has_type x TYPE%lib!spec.Messages_t.Delta.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= x (%Poly%lib!spec.Messages_t.Message. (Poly%lib!spec.Messages_t.Message. x))) :pattern ((Poly%lib!spec.Messages_t.Message. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (= x (Poly%lib!spec.Messages_t.Message. (%Poly%lib!spec.Messages_t.Message. x)))) :pattern ((has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_value! lib!spec.Messages_t.Value.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Value. _value!) TYPE%lib!spec.Messages_t.Value.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Define _value!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Define/value x) (lib!spec.Messages_t.Message./Define/?value x)) :pattern ((lib!spec.Messages_t.Message./Define/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((_delta! lib!spec.Messages_t.Delta.)) (! (=> (has_type (Poly%lib!spec.Messages_t.Delta. _delta!) TYPE%lib!spec.Messages_t.Delta.) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.Message./Update _delta!)) TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x lib!spec.Messages_t.Message.)) (! (= (lib!spec.Messages_t.Message./Update/delta x) (lib!spec.Messages_t.Message./Update/?delta x)) :pattern ((lib!spec.Messages_t.Message./Update/delta x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.Messages_t.Message.) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x))) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. x)) (has_type x TYPE%lib!spec.Messages_t.Message.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(declare-fun tr_bound%lib!betree.Buffer_v.Buffer. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!betree.Buffer_v.Buffer. Self%&. Self%&)) )))
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.query.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!betree.Buffer_v.Buffer.query%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.Messages_t.nop_delta.? (Poly) lib!spec.Messages_t.Delta.)
(declare-fun lib!betree.Buffer_v.impl&%1.query_internal.? (Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.Buffer_v.impl&%1.empty.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly Poly) lib!spec.Messages_t.Delta.)
(declare-fun lib!spec.Messages_t.impl&%1.apply_delta.? (Poly Poly) lib!spec.Messages_t.Value.)
(declare-fun lib!spec.Messages_t.impl&%1.merge.? (Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.Buffer_v.impl&%1.merge.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.Buffer_v.impl&%1.apply_filter.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.Buffer_v.total_keys.? (Poly) Bool)
(declare-fun lib!betree.OffsetMap_v.impl&%0.is_total.? (Poly) Bool)
(declare-fun lib!betree.BufferSeq_v.impl&%0.len.? (Poly) Int)
(declare-fun lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.rec%query_from.? (Poly Poly Poly Fuel) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.extend.? (Poly Poly) lib!betree.BufferSeq_v.BufferSeq.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.empty.? (Poly) lib!betree.BufferSeq_v.BufferSeq.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.slice.? (Poly Poly Poly) lib!betree.BufferSeq_v.BufferSeq.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.spec_index.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!betree.BufferSeq_v.impl&%0.update_subrange.? (Poly Poly Poly Poly) lib!betree.BufferSeq_v.BufferSeq.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.drop_first.? (Poly) lib!betree.BufferSeq_v.BufferSeq.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.query.? (Poly Poly) lib!spec.Messages_t.Message.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.apply_filter.? (Poly Poly) lib!betree.BufferSeq_v.BufferSeq.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.rec%i_from.? (Poly Poly Fuel) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.i.? (Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.OffsetMap_v.impl&%0.active_keys.? (Poly Poly) vstd!set.Set<lib!spec.KeyType_t.Key.>.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? (Poly Poly Poly Fuel) lib!betree.Buffer_v.SimpleBuffer.)
(declare-fun lib!betree.BufferSeq_v.impl&%0.i_filtered.? (Poly Poly) lib!betree.Buffer_v.SimpleBuffer.)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%0 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! Self%&) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.Buffer.query.? Self%&. Self%& self! key!)) )))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.nop_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.nop_delta.) (forall ((no%param Poly)) (! (= (lib!spec.Messages_t.nop_delta.? no%param) (lib!spec.Messages_t.Delta./Delta (%I (I 0)))) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? no%param)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.nop_delta.? no%param)) )))
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.query_internal.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.query_internal.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!) (ite (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) key!) (%Poly%lib!spec.Messages_t.Message. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) key!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))))) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.Buffer_v.SimpleBuffer.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.Buffer_v.impl&%1.query_internal.? self! key!)) )))
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.empty.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.empty.) (forall ((no%param Poly)) (! (= (lib!betree.Buffer_v.impl&%1.empty.? no%param) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.)))) :pattern ((lib!betree.Buffer_v.impl&%1.empty.? no%param)) ))))
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%0.query.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%0.query.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!) (Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.impl&%1.query_internal.? self! key!))) :pattern ((lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. self! key!)) ))))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.combine_deltas.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.combine_deltas.) (forall ((new! Poly) (old! Poly)) (! (= (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!) (%Poly%lib!spec.Messages_t.Delta. (ite (= (%Poly%lib!spec.Messages_t.Delta. new!) (lib!spec.Messages_t.nop_delta.? (I 0))) old! (ite (= (%Poly%lib!spec.Messages_t.Delta. old!) (lib!spec.Messages_t.nop_delta.? (I 0))) new! new!)))) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) ))))
(assert (forall ((new! Poly) (old! Poly)) (! (=> (and (has_type new! TYPE%lib!spec.Messages_t.Delta.) (has_type old! TYPE%lib!spec.Messages_t.Delta.)) (has_type (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) TYPE%lib!spec.Messages_t.Delta.)) :pattern ((lib!spec.Messages_t.impl&%1.combine_deltas.? new! old!)) )))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.apply_delta.))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.apply_delta.) (forall ((delta! Poly) (value! Poly)) (! (= (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!) (%Poly%lib!spec.Messages_t.Value. value!)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) ))))
(assert (forall ((delta! Poly) (value! Poly)) (! (=> (and (has_type delta! TYPE%lib!spec.Messages_t.Delta.) (has_type value! TYPE%lib!spec.Messages_t.Value.)) (has_type (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) TYPE%lib!spec.Messages_t.Value.)) :pattern ((lib!spec.Messages_t.impl&%1.apply_delta.? delta! value!)) )))
(assert (fuel_bool_default fuel%lib!spec.Messages_t.impl&%1.merge.))
(define-fun is-lib!spec.Messages_t.Message./Define_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Define) c))
(define-fun is-lib!spec.Messages_t.Message./Update_ ((c lib!spec.Messages_t.Message.)) Bool ((_ is lib!spec.Messages_t.Message./Update) c))
(assert (=> (fuel_bool fuel%lib!spec.Messages_t.impl&%1.merge.) (forall ((self! Poly) (new! Poly)) (! (= (lib!spec.Messages_t.impl&%1.merge.? self! new!) (let ((tmp%%$ (tuple%2./tuple%2 self! new!))) (ite (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Define_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((new_value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. new_value$)))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!spec.Messages_t.Message./Update_ (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((old_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((new_delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.impl&%1.combine_deltas.? (Poly%lib!spec.Messages_t.Delta. new_delta$) (Poly%lib!spec.Messages_t.Delta. old_delta$))))))) (let ((value$ (lib!spec.Messages_t.Message./Define/value (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((delta$ (lib!spec.Messages_t.Message./Update/delta (%Poly%lib!spec.Messages_t.Message. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!spec.Messages_t.Message./Define (%Poly%lib!spec.Messages_t.Value. (Poly%lib!spec.Messages_t.Value. (lib!spec.Messages_t.impl&%1.apply_delta.? (Poly%lib!spec.Messages_t.Delta. delta$) (Poly%lib!spec.Messages_t.Value. value$))))))))))) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) ))))
(assert (forall ((self! Poly) (new! Poly)) (! (=> (and (has_type self! TYPE%lib!spec.Messages_t.Message.) (has_type new! TYPE%lib!spec.Messages_t.Message.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!spec.Messages_t.impl&%1.merge.? self! new!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!spec.Messages_t.impl&%1.merge.? self! new!)) )))
(assert (tr_bound%lib!betree.Buffer_v.Buffer. $ TYPE%lib!betree.Buffer_v.SimpleBuffer.))
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.merge.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Dcr) (%%hole%%14 Type) (%%hole%%15 Poly) (%%hole%%16 Dcr) (%%hole%%17 Type) (%%hole%%18 Poly) (%%hole%%19 Dcr) (%%hole%%20 Type) (%%hole%%21 Dcr) (%%hole%%22 Type) (%%hole%%23 Poly) (%%hole%%24 Dcr) (%%hole%%25 Type) (%%hole%%26 Dcr) (%%hole%%27 Type) (%%hole%%28 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28) k$) (Poly%lib!spec.Messages_t.Message. (ite (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)) (lib!spec.Messages_t.impl&%1.merge.? (vstd!map.impl&%0.index.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 k$) (vstd!map.impl&%0.index.? %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 k$)) (%Poly%lib!spec.Messages_t.Message. (ite (vstd!set.impl&%0.contains.? %%hole%%16 %%hole%%17 %%hole%%18 k$) (vstd!map.impl&%0.index.? %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 k$) (vstd!map.impl&%0.index.? %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 k$)))))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.merge.) (forall ((self! Poly) (new_Buffer! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.merge.? self! new_Buffer!) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%fun%1. (mk_fun (%%lambda%%0 $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!))))))) (Poly%fun%1. (mk_fun (%%lambda%%1 $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!)))) $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!))) $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!)))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. new_Buffer!))) $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))))))))) :pattern ((lib!betree.Buffer_v.impl&%1.merge.? self! new_Buffer!)) ))))
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.impl&%1.apply_filter.))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%3 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.impl&%1.apply_filter.) (forall ((self! Poly) (accept! Poly)) (! (= (lib!betree.Buffer_v.impl&%1.apply_filter.? self! accept!) (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer (%Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (vstd!map.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message.) (Poly%fun%1. (mk_fun (%%lambda%%2 $ TYPE%lib!spec.KeyType_t.Key. accept! $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!))))))) (Poly%fun%1. (mk_fun (%%lambda%%3 $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. self!)))))))))) :pattern ((lib!betree.Buffer_v.impl&%1.apply_filter.? self! accept!)) ))))
(assert (fuel_bool_default fuel%lib!betree.Buffer_v.total_keys.))
(assert (=> (fuel_bool fuel%lib!betree.Buffer_v.total_keys.) (forall ((keys! Poly)) (! (= (lib!betree.Buffer_v.total_keys.? keys!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. keys! k$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. keys! k$)) ))) :pattern ((lib!betree.Buffer_v.total_keys.? keys!)) ))))
(assert (fuel_bool_default fuel%lib!betree.OffsetMap_v.impl&%0.is_total.))
(assert (=> (fuel_bool fuel%lib!betree.OffsetMap_v.impl&%0.is_total.) (forall ((self! Poly)) (! (= (lib!betree.OffsetMap_v.impl&%0.is_total.? self!) (lib!betree.Buffer_v.total_keys.? (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!)))))) :pattern ((lib!betree.OffsetMap_v.impl&%0.is_total.? self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.len.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.len.) (forall ((self! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (<= 0 (lib!betree.BufferSeq_v.impl&%0.len.? self!))) :pattern ((lib!betree.BufferSeq_v.impl&%0.len.? self!)) )))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.query_from. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((self! Poly) (key! Poly) (start! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.query_from. self! key! start!) (and (=> %%global_location_label%%5 (and (<= 0 (%I start!)) (<= (%I start!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (=> %%global_location_label%%6 (<= (%I start!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.query_from. self! key! start!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.query_from.))
(declare-const fuel_nat%lib!betree.BufferSeq_v.impl&%0.query_from. Fuel)
(assert (forall ((self! Poly) (key! Poly) (start! Poly) (fuel% Fuel)) (! (= (lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! fuel%) (lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! zero)) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! fuel%)) )))
(assert (forall ((self! Poly) (key! Poly) (start! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type start! INT) (<= (%I start!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))) (= (lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! (succ fuel%)) (ite (= (%I start!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))) (lib!spec.Messages_t.impl&%1.merge.? (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) start!) key!) (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! (I (Add (%I start!) 1)) fuel%)))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.query_from.) (forall ((self! Poly) (key! Poly) (start! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type start! INT) (<= (%I start!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))) (= (lib!betree.BufferSeq_v.impl&%0.query_from.? self! key! start!) (lib!betree.BufferSeq_v.impl&%0.rec%query_from.? self! key! start! (succ fuel_nat%lib!betree.BufferSeq_v.impl&%0.query_from.)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.query_from.? self! key! start!)) ))))
(assert (forall ((self! Poly) (key! Poly) (start! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type key! TYPE%lib!spec.KeyType_t.Key.) (has_type start! INT)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferSeq_v.impl&%0.query_from.? self! key! start!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.BufferSeq_v.impl&%0.query_from.? self! key! start!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.extend.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.extend.) (forall ((self! Poly) (new_buffers! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.extend.? self! new_buffers!) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.add.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. new_buffers!))))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.extend.? self! new_buffers!)) ))))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.empty.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.empty.) (forall ((no%param Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.empty.? no%param) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.empty.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer.)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.empty.? no%param)) ))))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.slice. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.slice. self! start! end!) (=> %%global_location_label%%7 (and (and (<= 0 (%I start!)) (<= (%I start!) (%I end!))) (<= (%I end!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.slice. self! start! end!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.slice.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.slice.) (forall ((self! Poly) (start! Poly) (end! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.slice.? self! start! end!) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) start! end!)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.slice.? self! start! end!)) ))))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.spec_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((self! Poly) (i! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.spec_index. self! i!) (=> %%global_location_label%%8 (and (<= 0 (%I i!)) (< (%I i!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.spec_index. self! i!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.spec_index.) (forall ((self! Poly) (i! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.spec_index.? self! i!) (%Poly%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) i!))) :pattern ((lib!betree.BufferSeq_v.impl&%0.spec_index.? self! i!)) ))))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer.) (forall ((self! Poly) (from_idx! Poly) (k! Poly) (buffer_idx! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? self! from_idx! k! buffer_idx!) (and (and (<= (%I from_idx!) (%I buffer_idx!)) (< (%I buffer_idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) buffer_idx!))))) k!))) :pattern ((lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? self! from_idx! k! buffer_idx!)) ))))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. (Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((self! Poly) (offset_map! Poly) (from_idx! Poly) (k! Poly) (buffer_idx! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. self! offset_map! from_idx! k! buffer_idx!) (and (=> %%global_location_label%%9 (lib!betree.OffsetMap_v.impl&%0.is_total.? offset_map!)) (=> %%global_location_label%%10 (<= 0 (%I from_idx!))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered. self! offset_map! from_idx! k! buffer_idx!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.) (forall ((self! Poly) (offset_map! Poly) (from_idx! Poly) (k! Poly) (buffer_idx! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? self! offset_map! from_idx! k! buffer_idx!) (and (lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? self! from_idx! k! buffer_idx!) (<= (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!))) k!)) (%I buffer_idx!)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? self! offset_map! from_idx! k! buffer_idx!)) ))))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.update_subrange. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! Poly) (start! Poly) (end! Poly) (new_buffer! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.update_subrange. self! start! end! new_buffer!) (=> %%global_location_label%%11 (and (and (<= 0 (%I start!)) (< (%I start!) (%I end!))) (<= (%I end!) (lib!betree.BufferSeq_v.impl&%0.len.? self!))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.update_subrange. self! start! end! new_buffer!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.update_subrange.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.update_subrange.) (forall ((self! Poly) (start! Poly) (end! Poly) (new_buffer! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.update_subrange.? self! start! end! new_buffer!) (let ((s$ (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.push.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.empty.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer.) new_buffer!)))) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.add.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.add.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) (I 0) start!) (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. s$)) (vstd!seq.Seq.subrange.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) end! (I (lib!betree.BufferSeq_v.impl&%0.len.? self!)))))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.update_subrange.? self! start! end! new_buffer!)) ))))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.drop_first. (Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.drop_first. self!) (=> %%global_location_label%%12 (< 0 (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.drop_first. self!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.drop_first.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.drop_first.) (forall ((self! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.drop_first.? self!) (lib!betree.BufferSeq_v.impl&%0.slice.? self! (I 1) (I (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.drop_first.? self!)) ))))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.query.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.query.) (forall ((self! Poly) (key! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.query.? self! key!) (lib!betree.BufferSeq_v.impl&%0.query_from.? self! key! (I 0))) :pattern ((lib!betree.BufferSeq_v.impl&%0.query.? self! key!)) ))))
(assert (forall ((self! Poly) (key! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type key! TYPE%lib!spec.KeyType_t.Key.)) (has_type (Poly%lib!spec.Messages_t.Message. (lib!betree.BufferSeq_v.impl&%0.query.? self! key!)) TYPE%lib!spec.Messages_t.Message.)) :pattern ((lib!betree.BufferSeq_v.impl&%0.query.? self! key!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.apply_filter.))
(declare-fun %%lambda%%4 (Dcr Type Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.Buffer_v.impl&%1.apply_filter.? (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$) %%hole%%3))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.apply_filter.) (forall ((self! Poly) (accept! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.apply_filter.? self! accept!) (lib!betree.BufferSeq_v.BufferSeq./BufferSeq (%Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (vstd!seq.Seq.new.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. $ (TYPE%fun%1. $ INT $ TYPE%lib!betree.Buffer_v.SimpleBuffer.) (I (lib!betree.BufferSeq_v.impl&%0.len.? self!)) (Poly%fun%1. (mk_fun (%%lambda%%4 $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) accept!))))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.apply_filter.? self! accept!)) ))))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.i_from. (Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((self! Poly) (idx! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.i_from. self! idx!) (and (=> %%global_location_label%%13 (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (=> %%global_location_label%%14 (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.i_from. self! idx!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.i_from.))
(declare-const fuel_nat%lib!betree.BufferSeq_v.impl&%0.i_from. Fuel)
(assert (forall ((self! Poly) (idx! Poly) (fuel% Fuel)) (! (= (lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! fuel%) (lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! zero)) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! fuel%)) )))
(assert (forall ((self! Poly) (idx! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type idx! INT) (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (= (lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! (succ fuel%)) (ite (= (lib!betree.BufferSeq_v.impl&%0.len.? self!) (%I idx!)) (lib!betree.Buffer_v.impl&%1.empty.? (I 0)) (lib!betree.Buffer_v.impl&%1.merge.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) idx!) (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! (I (Add (%I idx!) 1)) fuel%)))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.i_from.) (forall ((self! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type idx! INT) (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (= (lib!betree.BufferSeq_v.impl&%0.i_from.? self! idx!) (lib!betree.BufferSeq_v.impl&%0.rec%i_from.? self! idx! (succ fuel_nat%lib!betree.BufferSeq_v.impl&%0.i_from.)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.i_from.? self! idx!)) ))))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.i.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.i.) (forall ((self! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.i.? self!) (lib!betree.BufferSeq_v.impl&%0.i_from.? self! (I 0))) :pattern ((lib!betree.BufferSeq_v.impl&%0.i.? self!)) ))))
(declare-fun req%lib!betree.OffsetMap_v.impl&%0.active_keys. (Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((self! Poly) (offset! Poly)) (! (= (req%lib!betree.OffsetMap_v.impl&%0.active_keys. self! offset!) (=> %%global_location_label%%15 (lib!betree.OffsetMap_v.impl&%0.is_total.? self!))) :pattern ((req%lib!betree.OffsetMap_v.impl&%0.active_keys. self! offset!)) )))
(assert (fuel_bool_default fuel%lib!betree.OffsetMap_v.impl&%0.active_keys.))
(declare-fun %%lambda%%5 (Dcr Type Dcr Type Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Int) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (<= (%I (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) %%hole%%5))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(assert (=> (fuel_bool fuel%lib!betree.OffsetMap_v.impl&%0.active_keys.) (forall ((self! Poly) (offset! Poly)) (! (= (lib!betree.OffsetMap_v.impl&%0.active_keys.? self! offset!) (%Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (vstd!set.impl&%0.new.? $ TYPE%lib!spec.KeyType_t.Key. $ (TYPE%fun%1. $ TYPE%lib!spec.KeyType_t.Key. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%5 $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. self!))) (%I offset!))))))) :pattern ((lib!betree.OffsetMap_v.impl&%0.active_keys.? self! offset!)) ))))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((self! Poly) (offset_map! Poly) (idx! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. self! offset_map! idx!) (and (=> %%global_location_label%%16 (lib!betree.OffsetMap_v.impl&%0.is_total.? offset_map!)) (=> %%global_location_label%%17 (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (=> %%global_location_label%%18 (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. self! offset_map! idx!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered_from.))
(declare-const fuel_nat%lib!betree.BufferSeq_v.impl&%0.i_filtered_from. Fuel)
(assert (forall ((self! Poly) (offset_map! Poly) (idx! Poly) (fuel% Fuel)) (! (= (lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! fuel%) (lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! zero)) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! fuel%)) )))
(assert (forall ((self! Poly) (offset_map! Poly) (idx! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type offset_map! TYPE%lib!betree.OffsetMap_v.OffsetMap.) (has_type idx! INT) (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (= (lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! (succ fuel%)) (ite (= (lib!betree.BufferSeq_v.impl&%0.len.? self!) (%I idx!)) (lib!betree.Buffer_v.impl&%1.empty.? (I 0)) (let ((bottom_buffer$ (lib!betree.Buffer_v.impl&%1.apply_filter.? (vstd!seq.Seq.index.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%vstd!seq.Seq<lib!betree.Buffer_v.SimpleBuffer.>. (lib!betree.BufferSeq_v.BufferSeq./BufferSeq/buffers (%Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) idx!) (Poly%vstd!set.Set<lib!spec.KeyType_t.Key.>. (lib!betree.OffsetMap_v.impl&%0.active_keys.? offset_map! (I (nClip (%I idx!)))))))) (lib!betree.Buffer_v.impl&%1.merge.? (Poly%lib!betree.Buffer_v.SimpleBuffer. bottom_buffer$) (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! (I (Add (%I idx!) 1)) fuel%))))))) :pattern ((lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered_from.) (forall ((self! Poly) (offset_map! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!betree.BufferSeq_v.BufferSeq.) (has_type offset_map! TYPE%lib!betree.OffsetMap_v.OffsetMap.) (has_type idx! INT) (and (<= 0 (%I idx!)) (<= (%I idx!) (lib!betree.BufferSeq_v.impl&%0.len.? self!)))) (= (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? self! offset_map! idx!) (lib!betree.BufferSeq_v.impl&%0.rec%i_filtered_from.? self! offset_map! idx! (succ fuel_nat%lib!betree.BufferSeq_v.impl&%0.i_filtered_from.)))) :pattern ((lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? self! offset_map! idx!)) ))))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.i_filtered. (Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((self! Poly) (offset_map! Poly)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.i_filtered. self! offset_map!) (=> %%global_location_label%%19 (lib!betree.OffsetMap_v.impl&%0.is_total.? offset_map!))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.i_filtered. self! offset_map!)) )))
(assert (fuel_bool_default fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered.))
(assert (=> (fuel_bool fuel%lib!betree.BufferSeq_v.impl&%0.i_filtered.) (forall ((self! Poly) (offset_map! Poly)) (! (= (lib!betree.BufferSeq_v.impl&%0.i_filtered.? self! offset_map!) (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? self! offset_map! (I 0))) :pattern ((lib!betree.BufferSeq_v.impl&%0.i_filtered.? self! offset_map!)) ))))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. (lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (k! lib!spec.KeyType_t.Key.) (start! Int)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. self! k! start!) (=> %%global_location_label%%20 (and (<= 0 start!) (<= start! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. self! k! start!)) )))
(declare-fun ens%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. (lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int) Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (k! lib!spec.KeyType_t.Key.) (start! Int)) (! (= (ens%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. self! k! start!) (and (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I start!))))))) (Poly%lib!spec.KeyType_t.Key. k!)) (= (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!spec.KeyType_t.Key. k!) (I start!)) (%Poly%lib!spec.Messages_t.Message. (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I start!)))))) (Poly%lib!spec.KeyType_t.Key. k!))))) (=> (not (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I start!))))))) (Poly%lib!spec.KeyType_t.Key. k!))) (= (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!spec.KeyType_t.Key. k!) (I start!)) (lib!spec.Messages_t.Message./Update (%Poly%lib!spec.Messages_t.Delta. (Poly%lib!spec.Messages_t.Delta. (lib!spec.Messages_t.nop_delta.? (I 0))))))))) :pattern ((ens%lib!betree.BufferSeq_v.impl&%0.query_agrees_with_i. self! k! start!)) )))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.i_from_domain. (lib!betree.BufferSeq_v.BufferSeq. Int) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (idx! Int)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.i_from_domain. self! idx!) (=> %%global_location_label%%21 (and (<= 0 idx!) (<= idx! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.i_from_domain. self! idx!)) )))
(declare-fun ens%lib!betree.BufferSeq_v.impl&%0.i_from_domain. (lib!betree.BufferSeq_v.BufferSeq. Int) Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (idx! Int)) (! (= (ens%lib!betree.BufferSeq_v.impl&%0.i_from_domain. self! idx!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I idx!))))))) k$) (exists ((buffer_idx$ Poly)) (! (and (has_type buffer_idx$ INT) (lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I idx!) k$ buffer_idx$)) :pattern ((lib!betree.BufferSeq_v.impl&%0.key_in_buffer.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I idx!) k$ buffer_idx$)) )))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (I idx!))))))) k$)) ))) :pattern ((ens%lib!betree.BufferSeq_v.impl&%0.i_from_domain. self! idx!)) )))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. (lib!betree.BufferSeq_v.BufferSeq. lib!betree.OffsetMap_v.OffsetMap. Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (offset_map! lib!betree.OffsetMap_v.OffsetMap.) (idx! Int)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. self! offset_map! idx!) (and (=> %%global_location_label%%22 (lib!betree.OffsetMap_v.impl&%0.is_total.? (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!))) (=> %%global_location_label%%23 (and (<= 0 idx!) (<= idx! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!))))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. self! offset_map! idx!)) )))
(declare-fun ens%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. (lib!betree.BufferSeq_v.BufferSeq. lib!betree.OffsetMap_v.OffsetMap. Int) Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (offset_map! lib!betree.OffsetMap_v.OffsetMap.) (idx! Int)) (! (= (ens%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. self! offset_map! idx!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!spec.KeyType_t.Key.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I idx!))))))) k$) (exists ((buffer_idx$ Poly)) (! (and (has_type buffer_idx$ INT) (lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I idx!) k$ buffer_idx$)) :pattern ((lib!betree.BufferSeq_v.impl&%0.key_in_buffer_filtered.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I idx!) k$ buffer_idx$)) )))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.KeyType_t.Key. (vstd!map.impl&%0.dom.? $ TYPE%lib!spec.KeyType_t.Key. $ TYPE%lib!spec.Messages_t.Message. (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./lib!spec.Messages_t.Message.>. (lib!betree.Buffer_v.SimpleBuffer./SimpleBuffer/map (%Poly%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I idx!))))))) k$)) ))) :pattern ((ens%lib!betree.BufferSeq_v.impl&%0.i_filtered_from_domain. self! offset_map! idx!)) )))
(declare-fun req%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. (lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int lib!betree.OffsetMap_v.OffsetMap.) Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (k! lib!spec.KeyType_t.Key.) (buffer_idx! Int) (offset_map! lib!betree.OffsetMap_v.OffsetMap.)) (! (= (req%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. self! k! buffer_idx! offset_map!) (and (=> %%global_location_label%%24 (lib!betree.OffsetMap_v.impl&%0.is_total.? (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!))) (=> %%global_location_label%%25 (and (<= 0 buffer_idx!) (<= buffer_idx! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!))))) (=> %%global_location_label%%26 (<= (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!)))) (Poly%lib!spec.KeyType_t.Key. k!))) (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)))))) :pattern ((req%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. self! k! buffer_idx! offset_map!)) )))
(declare-fun ens%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. (lib!betree.BufferSeq_v.BufferSeq. lib!spec.KeyType_t.Key. Int lib!betree.OffsetMap_v.OffsetMap.) Bool)
(assert (forall ((self! lib!betree.BufferSeq_v.BufferSeq.) (k! lib!spec.KeyType_t.Key.) (buffer_idx! Int) (offset_map! lib!betree.OffsetMap_v.OffsetMap.)) (! (= (ens%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. self! k! buffer_idx! offset_map!) (let ((start$ (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!)))) (Poly%lib!spec.KeyType_t.Key. k!))))) (and (=> (<= start$ buffer_idx!) (= (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I buffer_idx!))) (Poly%lib!spec.KeyType_t.Key. k!))) (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!spec.KeyType_t.Key. k!) (I buffer_idx!)))) (=> (> start$ buffer_idx!) (= (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I buffer_idx!))) (Poly%lib!spec.KeyType_t.Key. k!))) (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!spec.KeyType_t.Key. k!) (I start$))))))) :pattern ((ens%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. self! k! buffer_idx! offset_map!)) )))
(declare-const self! lib!betree.BufferSeq_v.BufferSeq.)
(declare-const k! lib!spec.KeyType_t.Key.)
(declare-const buffer_idx! Int)
(declare-const offset_map! lib!betree.OffsetMap_v.OffsetMap.)
(declare-const tmp%1 Int)
(declare-const decrease%init0 Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!spec.KeyType_t.Key. k!) TYPE%lib!spec.KeyType_t.Key.))
(assert (lib!betree.OffsetMap_v.impl&%0.is_total.? (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!)))
(assert (and (<= 0 buffer_idx!) (<= buffer_idx! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)))))
(assert (<= (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!)))) (Poly%lib!spec.KeyType_t.Key. k!))) (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!))))
(declare-const %%switch_label%%0 Bool)
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(assert (not (=> (= decrease%init0 (Sub (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)) buffer_idx!)) (or (and (=> (< buffer_idx! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!))) (=> (= tmp%1 (Add buffer_idx! 1)) (and (=> %%location_label%%0 (check_decrease_int (let ((self!$0 self!) (k!$1 k!) (buffer_idx!$2 tmp%1) (offset_map!$3 offset_map!)) (Sub (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!$0)) buffer_idx!$2)) decrease%init0 false)) (and (=> %%location_label%%1 (req%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. self! k! tmp%1 offset_map!)) (=> (ens%lib!betree.BufferSeq_v.impl&%0.query_from_same_as_i_filtered. self! k! tmp%1 offset_map!) %%switch_label%%0))))) (=> (not (< buffer_idx! (lib!betree.BufferSeq_v.impl&%0.len.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!)))) %%switch_label%%0)) (and (not %%switch_label%%0) (=> %%location_label%%2 (let ((start$ (%I (vstd!map.impl&%0.index.? $ TYPE%lib!spec.KeyType_t.Key. $ NAT (Poly%vstd!map.Map<lib!spec.KeyType_t.Key./nat.>. (lib!betree.OffsetMap_v.OffsetMap./OffsetMap/offsets (%Poly%lib!betree.OffsetMap_v.OffsetMap. (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!)))) (Poly%lib!spec.KeyType_t.Key. k!))))) (and (=> (<= start$ buffer_idx!) (= (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I buffer_idx!))) (Poly%lib!spec.KeyType_t.Key. k!))) (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!spec.KeyType_t.Key. k!) (I buffer_idx!)))) (=> (> start$ buffer_idx!) (= (%Poly%lib!spec.Messages_t.Message. (lib!betree.Buffer_v.Buffer.query.? $ TYPE%lib!betree.Buffer_v.SimpleBuffer. (Poly%lib!betree.Buffer_v.SimpleBuffer. (lib!betree.BufferSeq_v.impl&%0.i_filtered_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!betree.OffsetMap_v.OffsetMap. offset_map!) (I buffer_idx!))) (Poly%lib!spec.KeyType_t.Key. k!))) (lib!betree.BufferSeq_v.impl&%0.query_from.? (Poly%lib!betree.BufferSeq_v.BufferSeq. self!) (Poly%lib!spec.KeyType_t.Key. k!) (I start$))))))))))))
(check-sat)
(exit)
