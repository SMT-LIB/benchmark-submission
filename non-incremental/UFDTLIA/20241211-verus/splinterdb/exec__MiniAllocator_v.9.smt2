(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project SplinterDB 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module exec::MiniAllocator_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.wf. FuelId)
(declare-const fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.is_free_addr. FuelId)
(declare-const fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.reserve. FuelId)
(declare-const fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.observe. FuelId)
(declare-const fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.all_pages_allocated. FuelId)
(declare-const fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.empty. FuelId)
(declare-const fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.can_allocate. FuelId)
(declare-const fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.allocate. FuelId)
(declare-const fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.observe. FuelId)
(declare-const fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.prune. FuelId)
(declare-const fuel%lib!disk.GenericDisk_v.page_count. FuelId)
(declare-const fuel%lib!disk.GenericDisk_v.au_count. FuelId)
(declare-const fuel%lib!disk.GenericDisk_v.addr_range. FuelId)
(declare-const fuel%lib!disk.GenericDisk_v.impl&%1.view. FuelId)
(declare-const fuel%lib!spec.AsyncDisk_t.impl&%0.wf. FuelId)
(declare-const fuel%lib!spec.ImplDisk_t.impl&%0.view. FuelId)
(declare-const fuel%lib!spec.ImplDisk_t.page_count_equals_ipage_count. FuelId)
(declare-const fuel%lib!exec.MiniAllocator_v.impl&%0.view. FuelId)
(declare-const fuel%lib!exec.MiniAllocator_v.impl&%1.wf. FuelId)
(declare-const fuel%lib!exec.MiniAllocator_v.impl&%1.has_free_addr. FuelId)
(declare-const fuel%lib!exec.MiniAllocator_v.impl&%1.no_unobserved_pages. FuelId)
(declare-const fuel%lib!exec.MiniAllocator_v.impl&%2.view. FuelId)
(declare-const fuel%lib!exec.MiniAllocator_v.impl&%3.wf. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%24.view. fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.wf. fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.is_free_addr. fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.reserve. fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.observe. fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.all_pages_allocated. fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.empty. fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.wf. fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.can_allocate. fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.allocate. fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.observe. fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.prune. fuel%lib!disk.GenericDisk_v.page_count. fuel%lib!disk.GenericDisk_v.au_count. fuel%lib!disk.GenericDisk_v.addr_range. fuel%lib!disk.GenericDisk_v.impl&%1.view. fuel%lib!spec.AsyncDisk_t.impl&%0.wf. fuel%lib!spec.ImplDisk_t.impl&%0.view. fuel%lib!spec.ImplDisk_t.page_count_equals_ipage_count. fuel%lib!exec.MiniAllocator_v.impl&%0.view. fuel%lib!exec.MiniAllocator_v.impl&%1.wf. fuel%lib!exec.MiniAllocator_v.impl&%1.has_free_addr. fuel%lib!exec.MiniAllocator_v.impl&%1.no_unobserved_pages. fuel%lib!exec.MiniAllocator_v.impl&%2.view. fuel%lib!exec.MiniAllocator_v.impl&%3.wf. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(assert (fuel_bool_default fuel%lib!spec.ImplDisk_t.page_count_equals_ipage_count.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!allocation_layer.MiniAllocator_v.PageAllocator. 0) (lib!allocation_layer.MiniAllocator_v.MiniAllocator. 0) (lib!spec.AsyncDisk_t.Address. 0) (lib!spec.ImplDisk_t.IAddress. 0) (lib!exec.MiniAllocator_v.PageAllocator. 0) (lib!exec.MiniAllocator_v.MiniAllocator. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/?observed vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/?reserved vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/?au Int))) ((lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/?allocs vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>.) (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/?curr core!option.Option.))) ((lib!spec.AsyncDisk_t.Address./Address (lib!spec.AsyncDisk_t.Address./Address/?au Int) (lib!spec.AsyncDisk_t.Address./Address/?page Int))) ((lib!spec.ImplDisk_t.IAddress./IAddress (lib!spec.ImplDisk_t.IAddress./IAddress/?au Int) (lib!spec.ImplDisk_t.IAddress./IAddress/?page Int))) ((lib!exec.MiniAllocator_v.PageAllocator./PageAllocator (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/?observed Int) (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/?reserved Int) (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/?au Int))) ((lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator (lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator/?allocs core!option.Option.))) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/observed (lib!allocation_layer.MiniAllocator_v.PageAllocator.) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved (lib!allocation_layer.MiniAllocator_v.PageAllocator.) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (lib!allocation_layer.MiniAllocator_v.PageAllocator.) Int)
(declare-fun lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (lib!allocation_layer.MiniAllocator_v.MiniAllocator.) vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>.)
(declare-fun lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/curr (lib!allocation_layer.MiniAllocator_v.MiniAllocator.) core!option.Option.)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/au (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.AsyncDisk_t.Address./Address/page (lib!spec.AsyncDisk_t.Address.) Int)
(declare-fun lib!spec.ImplDisk_t.IAddress./IAddress/au (lib!spec.ImplDisk_t.IAddress.) Int)
(declare-fun lib!spec.ImplDisk_t.IAddress./IAddress/page (lib!spec.ImplDisk_t.IAddress.) Int)
(declare-fun lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/observed (lib!exec.MiniAllocator_v.PageAllocator.) Int)
(declare-fun lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved (lib!exec.MiniAllocator_v.PageAllocator.) Int)
(declare-fun lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/au (lib!exec.MiniAllocator_v.PageAllocator.) Int)
(declare-fun lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (lib!exec.MiniAllocator_v.MiniAllocator.) core!option.Option.)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. Type)
(declare-const TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator. Type)
(declare-const TYPE%lib!spec.AsyncDisk_t.Address. Type)
(declare-const TYPE%lib!spec.ImplDisk_t.IAddress. Type)
(declare-const TYPE%lib!exec.MiniAllocator_v.PageAllocator. Type)
(declare-const TYPE%lib!exec.MiniAllocator_v.MiniAllocator. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (Poly) vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (lib!allocation_layer.MiniAllocator_v.PageAllocator.) Poly)
(declare-fun %Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly) lib!allocation_layer.MiniAllocator_v.PageAllocator.)
(declare-fun Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. (lib!allocation_layer.MiniAllocator_v.MiniAllocator.) Poly)
(declare-fun %Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. (Poly) lib!allocation_layer.MiniAllocator_v.MiniAllocator.)
(declare-fun Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address.) Poly)
(declare-fun %Poly%lib!spec.AsyncDisk_t.Address. (Poly) lib!spec.AsyncDisk_t.Address.)
(declare-fun Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IAddress.) Poly)
(declare-fun %Poly%lib!spec.ImplDisk_t.IAddress. (Poly) lib!spec.ImplDisk_t.IAddress.)
(declare-fun Poly%lib!exec.MiniAllocator_v.PageAllocator. (lib!exec.MiniAllocator_v.PageAllocator.) Poly)
(declare-fun %Poly%lib!exec.MiniAllocator_v.PageAllocator. (Poly) lib!exec.MiniAllocator_v.PageAllocator.)
(declare-fun Poly%lib!exec.MiniAllocator_v.MiniAllocator. (lib!exec.MiniAllocator_v.MiniAllocator.) Poly)
(declare-fun %Poly%lib!exec.MiniAllocator_v.MiniAllocator. (Poly) lib!exec.MiniAllocator_v.MiniAllocator.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.)) (= x (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (%Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (= x (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x))) :pattern ((Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) (= x (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)) (! (has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!allocation_layer.MiniAllocator_v.PageAllocator.)) (! (= x (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. x))) :pattern ((Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.) (= x (Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. x)))) :pattern ((has_type x TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.)) )))
(assert (forall ((_observed! vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) (_reserved! vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.) (_au! Int)) (! (=> (<= 0 _au!) (has_type (Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator _observed! _reserved! _au!)) TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.)) :pattern ((has_type (Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator _observed! _reserved! _au!)) TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.)) )))
(assert (forall ((x lib!allocation_layer.MiniAllocator_v.PageAllocator.)) (! (= (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/observed x) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/?observed x)) :pattern ((lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/observed x)) )))
(assert (forall ((x lib!allocation_layer.MiniAllocator_v.PageAllocator.)) (! (= (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved x) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/?reserved x)) :pattern ((lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved x)) )))
(assert (forall ((x lib!allocation_layer.MiniAllocator_v.PageAllocator.)) (! (= (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au x) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/?au x)) :pattern ((lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.) (<= 0 (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. x)))) :pattern ((lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. x)) (has_type x TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.)) )))
(assert (forall ((x lib!allocation_layer.MiniAllocator_v.MiniAllocator.)) (! (= x (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. (Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. x))) :pattern ((Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.) (= x (Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. x)))) :pattern ((has_type x TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.)) )))
(assert (forall ((_allocs! vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>.) (_curr! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _curr!) (TYPE%core!option.Option. $ NAT)) (has_type (Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator _allocs! _curr!)) TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.)) :pattern ((has_type (Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator _allocs! _curr!)) TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.)) )))
(assert (forall ((x lib!allocation_layer.MiniAllocator_v.MiniAllocator.)) (! (= (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs x) (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/?allocs x)) :pattern ((lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs x)) )))
(assert (forall ((x lib!allocation_layer.MiniAllocator_v.MiniAllocator.)) (! (= (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/curr x) (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/?curr x)) :pattern ((lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/curr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.) (has_type (Poly%core!option.Option. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/curr (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. x))) (TYPE%core!option.Option. $ NAT))) :pattern ((lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/curr (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. x)) (has_type x TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= x (%Poly%lib!spec.AsyncDisk_t.Address. (Poly%lib!spec.AsyncDisk_t.Address. x))) :pattern ((Poly%lib!spec.AsyncDisk_t.Address. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (= x (Poly%lib!spec.AsyncDisk_t.Address. (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((_au! Int) (_page! Int)) (! (=> (and (<= 0 _au!) (<= 0 _page!)) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address _au! _page!)) TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/au x) (lib!spec.AsyncDisk_t.Address./Address/?au x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.AsyncDisk_t.Address.)) (! (= (lib!spec.AsyncDisk_t.Address./Address/page x) (lib!spec.AsyncDisk_t.Address./Address/?page x)) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.AsyncDisk_t.Address.) (<= 0 (lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)))) :pattern ((lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. x)) (has_type x TYPE%lib!spec.AsyncDisk_t.Address.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IAddress.)) (! (= x (%Poly%lib!spec.ImplDisk_t.IAddress. (Poly%lib!spec.ImplDisk_t.IAddress. x))) :pattern ((Poly%lib!spec.ImplDisk_t.IAddress. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IAddress.) (= x (Poly%lib!spec.ImplDisk_t.IAddress. (%Poly%lib!spec.ImplDisk_t.IAddress. x)))) :pattern ((has_type x TYPE%lib!spec.ImplDisk_t.IAddress.)) )))
(assert (forall ((_au! Int) (_page! Int)) (! (=> (and (uInv 32 _au!) (uInv 32 _page!)) (has_type (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IAddress./IAddress _au! _page!)) TYPE%lib!spec.ImplDisk_t.IAddress.)) :pattern ((has_type (Poly%lib!spec.ImplDisk_t.IAddress. (lib!spec.ImplDisk_t.IAddress./IAddress _au! _page!)) TYPE%lib!spec.ImplDisk_t.IAddress.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IAddress.)) (! (= (lib!spec.ImplDisk_t.IAddress./IAddress/au x) (lib!spec.ImplDisk_t.IAddress./IAddress/?au x)) :pattern ((lib!spec.ImplDisk_t.IAddress./IAddress/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IAddress.) (uInv 32 (lib!spec.ImplDisk_t.IAddress./IAddress/au (%Poly%lib!spec.ImplDisk_t.IAddress. x)))) :pattern ((lib!spec.ImplDisk_t.IAddress./IAddress/au (%Poly%lib!spec.ImplDisk_t.IAddress. x)) (has_type x TYPE%lib!spec.ImplDisk_t.IAddress.)) )))
(assert (forall ((x lib!spec.ImplDisk_t.IAddress.)) (! (= (lib!spec.ImplDisk_t.IAddress./IAddress/page x) (lib!spec.ImplDisk_t.IAddress./IAddress/?page x)) :pattern ((lib!spec.ImplDisk_t.IAddress./IAddress/page x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.ImplDisk_t.IAddress.) (uInv 32 (lib!spec.ImplDisk_t.IAddress./IAddress/page (%Poly%lib!spec.ImplDisk_t.IAddress. x)))) :pattern ((lib!spec.ImplDisk_t.IAddress./IAddress/page (%Poly%lib!spec.ImplDisk_t.IAddress. x)) (has_type x TYPE%lib!spec.ImplDisk_t.IAddress.)) )))
(assert (forall ((x lib!exec.MiniAllocator_v.PageAllocator.)) (! (= x (%Poly%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. x))) :pattern ((Poly%lib!exec.MiniAllocator_v.PageAllocator. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.MiniAllocator_v.PageAllocator.) (= x (Poly%lib!exec.MiniAllocator_v.PageAllocator. (%Poly%lib!exec.MiniAllocator_v.PageAllocator. x)))) :pattern ((has_type x TYPE%lib!exec.MiniAllocator_v.PageAllocator.)) )))
(assert (forall ((_observed! Int) (_reserved! Int) (_au! Int)) (! (=> (and (uInv 32 _observed!) (uInv 32 _reserved!) (uInv 32 _au!)) (has_type (Poly%lib!exec.MiniAllocator_v.PageAllocator. (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator _observed! _reserved! _au!)) TYPE%lib!exec.MiniAllocator_v.PageAllocator.)) :pattern ((has_type (Poly%lib!exec.MiniAllocator_v.PageAllocator. (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator _observed! _reserved! _au!)) TYPE%lib!exec.MiniAllocator_v.PageAllocator.)) )))
(assert (forall ((x lib!exec.MiniAllocator_v.PageAllocator.)) (! (= (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/observed x) (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/?observed x)) :pattern ((lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/observed x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.MiniAllocator_v.PageAllocator.) (uInv 32 (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!exec.MiniAllocator_v.PageAllocator. x)))) :pattern ((lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!exec.MiniAllocator_v.PageAllocator. x)) (has_type x TYPE%lib!exec.MiniAllocator_v.PageAllocator.)) )))
(assert (forall ((x lib!exec.MiniAllocator_v.PageAllocator.)) (! (= (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved x) (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/?reserved x)) :pattern ((lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.MiniAllocator_v.PageAllocator.) (uInv 32 (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!exec.MiniAllocator_v.PageAllocator. x)))) :pattern ((lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!exec.MiniAllocator_v.PageAllocator. x)) (has_type x TYPE%lib!exec.MiniAllocator_v.PageAllocator.)) )))
(assert (forall ((x lib!exec.MiniAllocator_v.PageAllocator.)) (! (= (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/au x) (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/?au x)) :pattern ((lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/au x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.MiniAllocator_v.PageAllocator.) (uInv 32 (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!exec.MiniAllocator_v.PageAllocator. x)))) :pattern ((lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!exec.MiniAllocator_v.PageAllocator. x)) (has_type x TYPE%lib!exec.MiniAllocator_v.PageAllocator.)) )))
(assert (forall ((x lib!exec.MiniAllocator_v.MiniAllocator.)) (! (= x (%Poly%lib!exec.MiniAllocator_v.MiniAllocator. (Poly%lib!exec.MiniAllocator_v.MiniAllocator. x))) :pattern ((Poly%lib!exec.MiniAllocator_v.MiniAllocator. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.MiniAllocator_v.MiniAllocator.) (= x (Poly%lib!exec.MiniAllocator_v.MiniAllocator. (%Poly%lib!exec.MiniAllocator_v.MiniAllocator. x)))) :pattern ((has_type x TYPE%lib!exec.MiniAllocator_v.MiniAllocator.)) )))
(assert (forall ((_allocs! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _allocs!) (TYPE%core!option.Option. $ TYPE%lib!exec.MiniAllocator_v.PageAllocator.)) (has_type (Poly%lib!exec.MiniAllocator_v.MiniAllocator. (lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator _allocs!)) TYPE%lib!exec.MiniAllocator_v.MiniAllocator.)) :pattern ((has_type (Poly%lib!exec.MiniAllocator_v.MiniAllocator. (lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator _allocs!)) TYPE%lib!exec.MiniAllocator_v.MiniAllocator.)) )))
(assert (forall ((x lib!exec.MiniAllocator_v.MiniAllocator.)) (! (= (lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs x) (lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator/?allocs x)) :pattern ((lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.MiniAllocator_v.MiniAllocator.) (has_type (Poly%core!option.Option. (lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!exec.MiniAllocator_v.MiniAllocator. x))) (TYPE%core!option.Option. $ TYPE%lib!exec.MiniAllocator_v.PageAllocator.))) :pattern ((lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!exec.MiniAllocator_v.MiniAllocator. x)) (has_type x TYPE%lib!exec.MiniAllocator_v.MiniAllocator.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ TYPE%lib!exec.MiniAllocator_v.PageAllocator.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%lib!exec.MiniAllocator_v.PageAllocator.) TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.))
(assert (= (proj%%vstd!view.View./V $ TYPE%lib!exec.MiniAllocator_v.MiniAllocator.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%lib!exec.MiniAllocator_v.MiniAllocator.) TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.))
(assert (= (proj%%vstd!view.View./V $ TYPE%lib!spec.ImplDisk_t.IAddress.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%lib!spec.ImplDisk_t.IAddress.) TYPE%lib!spec.AsyncDisk_t.Address.))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::AsyncDisk_t::au_count")
(declare-fun lib!spec.AsyncDisk_t.au_count.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::AsyncDisk_t::page_count")
(declare-fun lib!spec.AsyncDisk_t.page_count.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::AsyncDisk_t::Address::wf")
(declare-fun lib!spec.AsyncDisk_t.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::allocation_layer::MiniAllocator_v::MiniAllocator::empty")
(declare-fun lib!allocation_layer.MiniAllocator_v.impl&%1.empty.? (Poly) lib!allocation_layer.MiniAllocator_v.MiniAllocator.)
(set-info :comment ";; Function-Decl lib::allocation_layer::MiniAllocator_v::PageAllocator::wf")
(declare-fun lib!allocation_layer.MiniAllocator_v.impl&%0.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::MiniAllocator_v::MiniAllocator::wf")
(declare-fun lib!allocation_layer.MiniAllocator_v.impl&%1.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::MiniAllocator_v::MiniAllocator::prune")
(declare-fun lib!allocation_layer.MiniAllocator_v.impl&%1.prune.? (Poly Poly) lib!allocation_layer.MiniAllocator_v.MiniAllocator.)
(set-info :comment ";; Function-Decl lib::allocation_layer::MiniAllocator_v::PageAllocator::is_free_addr")
(declare-fun lib!allocation_layer.MiniAllocator_v.impl&%0.is_free_addr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::MiniAllocator_v::MiniAllocator::can_allocate")
(declare-fun lib!allocation_layer.MiniAllocator_v.impl&%1.can_allocate.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::MiniAllocator_v::PageAllocator::observe")
(declare-fun lib!allocation_layer.MiniAllocator_v.impl&%0.observe.? (Poly Poly) lib!allocation_layer.MiniAllocator_v.PageAllocator.)
(set-info :comment ";; Function-Decl lib::allocation_layer::MiniAllocator_v::MiniAllocator::observe")
(declare-fun lib!allocation_layer.MiniAllocator_v.impl&%1.observe.? (Poly Poly) lib!allocation_layer.MiniAllocator_v.MiniAllocator.)
(set-info :comment ";; Function-Decl lib::allocation_layer::MiniAllocator_v::PageAllocator::reserve")
(declare-fun lib!allocation_layer.MiniAllocator_v.impl&%0.reserve.? (Poly Poly) lib!allocation_layer.MiniAllocator_v.PageAllocator.)
(set-info :comment ";; Function-Decl lib::allocation_layer::MiniAllocator_v::PageAllocator::all_pages_allocated")
(declare-fun lib!allocation_layer.MiniAllocator_v.impl&%0.all_pages_allocated.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::allocation_layer::MiniAllocator_v::MiniAllocator::allocate")
(declare-fun lib!allocation_layer.MiniAllocator_v.impl&%1.allocate.? (Poly Poly) lib!allocation_layer.MiniAllocator_v.MiniAllocator.)
(set-info :comment ";; Function-Decl lib::spec::ImplDisk_t::ipage_count")
(declare-fun lib!spec.ImplDisk_t.ipage_count.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::ImplDisk_t::IAddress::view")
(declare-fun lib!spec.ImplDisk_t.impl&%0.view.? (Poly) lib!spec.AsyncDisk_t.Address.)
(set-info :comment ";; Function-Decl lib::disk::GenericDisk_v::page_count")
(declare-fun lib!disk.GenericDisk_v.page_count.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::disk::GenericDisk_v::au_count")
(declare-fun lib!disk.GenericDisk_v.au_count.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::disk::GenericDisk_v::addr_range")
(declare-fun lib!disk.GenericDisk_v.addr_range.? (Poly Poly Poly) vstd!set.Set<lib!spec.AsyncDisk_t.Address.>.)
(set-info :comment ";; Function-Decl lib::exec::MiniAllocator_v::PageAllocator::wf")
(declare-fun lib!exec.MiniAllocator_v.impl&%1.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::MiniAllocator_v::PageAllocator::has_free_addr")
(declare-fun lib!exec.MiniAllocator_v.impl&%1.has_free_addr.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::MiniAllocator_v::PageAllocator::no_unobserved_pages")
(declare-fun lib!exec.MiniAllocator_v.impl&%1.no_unobserved_pages.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::MiniAllocator_v::MiniAllocator::wf")
(declare-fun lib!exec.MiniAllocator_v.impl&%3.wf.? (Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%0 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ option!))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)) )))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs core::mem::swap")
(declare-fun ens%core!mem.swap. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre%a! Poly) (a! Poly) (pre%b! Poly) (b! Poly)) (! (= (ens%core!mem.swap. T&. T& pre%a! a! pre%b! b!) (and (has_type a! T&) (has_type b! T&) (= a! pre%b!) (= b! pre%a!))) :pattern ((ens%core!mem.swap. T&. T& pre%a! a! pre%b! b!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms lib::spec::AsyncDisk_t::au_count")
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (lib!spec.AsyncDisk_t.au_count.? no%param))) :pattern ((lib!spec.AsyncDisk_t.au_count.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::spec::AsyncDisk_t::page_count")
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (lib!spec.AsyncDisk_t.page_count.? no%param))) :pattern ((lib!spec.AsyncDisk_t.page_count.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::spec::AsyncDisk_t::Address::wf")
(assert (fuel_bool_default fuel%lib!spec.AsyncDisk_t.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!spec.AsyncDisk_t.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!spec.AsyncDisk_t.impl&%0.wf.? self!) (and (< (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. self!)) (lib!spec.AsyncDisk_t.au_count.? (I 0))) (< (lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. self!)) (lib!spec.AsyncDisk_t.page_count.? (I 0))))) :pattern ((lib!spec.AsyncDisk_t.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::MiniAllocator_v::MiniAllocator::empty")
(assert (fuel_bool_default fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.empty.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.empty.) (forall ((no%param Poly)) (! (= (lib!allocation_layer.MiniAllocator_v.impl&%1.empty.? no%param) (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator (%Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%1.empty.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. (lib!allocation_layer.MiniAllocator_v.impl&%1.empty.? no%param)) TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.)) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%1.empty.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::MiniAllocator_v::PageAllocator::wf")
(assert (fuel_bool_default fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.wf.) (forall ((self! Poly)) (! (= (lib!allocation_layer.MiniAllocator_v.impl&%0.wf.? self!) (and (and (and (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))) addr$) (lib!spec.AsyncDisk_t.impl&%0.wf.? addr$))) :pattern ((lib!spec.AsyncDisk_t.impl&%0.wf.? addr$)) )) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))) addr$) (lib!spec.AsyncDisk_t.impl&%0.wf.? addr$))) :pattern ((lib!spec.AsyncDisk_t.impl&%0.wf.? addr$)) ))) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))) addr$) (= (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr$)) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))) addr$)) ))) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))) addr$) (= (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr$)) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))) addr$)) )))) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%0.wf.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::MiniAllocator_v::MiniAllocator::wf")
(assert (fuel_bool_default fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!allocation_layer.MiniAllocator_v.impl&%1.wf.? self!) (and (forall ((au$ Poly)) (! (=> (has_type au$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!)))) au$) (and (lib!allocation_layer.MiniAllocator_v.impl&%0.wf.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))) au$)) (= (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))) au$))) (%I au$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!)))) au$)) )) (=> (is-core!option.Option./Some_ (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/curr (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/curr (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))))))))) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%1.wf.? self!)) ))))
(set-info :comment ";; Function-Specs lib::allocation_layer::MiniAllocator_v::MiniAllocator::prune")
(declare-fun req%lib!allocation_layer.MiniAllocator_v.impl&%1.prune. (Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((self! Poly) (aus! Poly)) (! (= (req%lib!allocation_layer.MiniAllocator_v.impl&%1.prune. self! aus!) (=> %%global_location_label%%6 (lib!allocation_layer.MiniAllocator_v.impl&%1.wf.? self!))) :pattern ((req%lib!allocation_layer.MiniAllocator_v.impl&%1.prune. self! aus!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::MiniAllocator_v::MiniAllocator::prune")
(assert (fuel_bool_default fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.prune.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (au$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) au$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 au$) (not (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 au$))))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) au$)))))
(declare-fun %%lambda%%1 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (au$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) au$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 au$)) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) au$)))))
(assert (=> (fuel_bool fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.prune.) (forall ((self! Poly) (aus! Poly)) (! (= (lib!allocation_layer.MiniAllocator_v.impl&%1.prune.? self! aus!) (let ((new_allocs$ (%Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.) (Poly%fun%1. (mk_fun (%%lambda%%0 $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!)))) $ NAT aus!))) (Poly%fun%1. (mk_fun (%%lambda%%1 $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!)))))))))) (let ((new_curr$ (ite (and (is-core!option.Option./Some_ (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/curr (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))) (vstd!set.impl&%0.contains.? $ NAT aus! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/curr (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))))))) core!option.Option./None (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/curr (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))))) (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator (%Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. new_allocs$)) (%Poly%core!option.Option. (Poly%core!option.Option. new_curr$)))))) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%1.prune.? self! aus!)) ))))
(assert (forall ((self! Poly) (aus! Poly)) (! (=> (and (has_type self! TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.) (has_type aus! (TYPE%vstd!set.Set. $ NAT))) (has_type (Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. (lib!allocation_layer.MiniAllocator_v.impl&%1.prune.? self! aus!)) TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.)) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%1.prune.? self! aus!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::MiniAllocator_v::PageAllocator::is_free_addr")
(assert (fuel_bool_default fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.is_free_addr.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.is_free_addr.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!allocation_layer.MiniAllocator_v.impl&%0.is_free_addr.? self! addr!) (and (and (lib!spec.AsyncDisk_t.impl&%0.wf.? addr!) (= (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr!)) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!)))) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!)))) addr!)))) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%0.is_free_addr.? self! addr!)) ))))
(set-info :comment ";; Function-Axioms lib::allocation_layer::MiniAllocator_v::MiniAllocator::can_allocate")
(assert (fuel_bool_default fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.can_allocate.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.can_allocate.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!allocation_layer.MiniAllocator_v.impl&%1.can_allocate.? self! addr!) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!)))) (I (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr!)))) (lib!allocation_layer.MiniAllocator_v.impl&%0.is_free_addr.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))) (I (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr!)))) addr!))) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%1.can_allocate.? self! addr!)) ))))
(set-info :comment ";; Function-Specs lib::allocation_layer::MiniAllocator_v::PageAllocator::observe")
(declare-fun req%lib!allocation_layer.MiniAllocator_v.impl&%0.observe. (Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((self! Poly) (addrs! Poly)) (! (= (req%lib!allocation_layer.MiniAllocator_v.impl&%0.observe. self! addrs!) (and (=> %%global_location_label%%7 (lib!allocation_layer.MiniAllocator_v.impl&%0.wf.? self!)) (=> %%global_location_label%%8 (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. addrs! addr$) (and (lib!spec.AsyncDisk_t.impl&%0.wf.? addr$) (= (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr$)) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. addrs! addr$)) ))))) :pattern ((req%lib!allocation_layer.MiniAllocator_v.impl&%0.observe. self! addrs!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::MiniAllocator_v::PageAllocator::observe")
(assert (fuel_bool_default fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.observe.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.observe.) (forall ((self! Poly) (addrs! Poly)) (! (= (lib!allocation_layer.MiniAllocator_v.impl&%0.observe.? self! addrs!) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))) addrs!)) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!)))) (%I (I (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!)))))) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%0.observe.? self! addrs!)) ))))
(assert (forall ((self! Poly) (addrs! Poly)) (! (=> (and (has_type self! TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.) (has_type addrs! (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (has_type (Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (lib!allocation_layer.MiniAllocator_v.impl&%0.observe.? self! addrs!)) TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.)) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%0.observe.? self! addrs!)) )))
(set-info :comment ";; Function-Specs lib::allocation_layer::MiniAllocator_v::MiniAllocator::observe")
(declare-fun req%lib!allocation_layer.MiniAllocator_v.impl&%1.observe. (Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! Poly) (addr! Poly)) (! (= (req%lib!allocation_layer.MiniAllocator_v.impl&%1.observe. self! addr!) (and (=> %%global_location_label%%9 (lib!allocation_layer.MiniAllocator_v.impl&%1.wf.? self!)) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!)))) (I (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr!))))) (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))) (I (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr!))))))) addr!)))) :pattern ((req%lib!allocation_layer.MiniAllocator_v.impl&%1.observe. self! addr!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::MiniAllocator_v::MiniAllocator::observe")
(assert (fuel_bool_default fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.observe.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.observe.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!allocation_layer.MiniAllocator_v.impl&%1.observe.? self! addr!) (let ((result$ (lib!allocation_layer.MiniAllocator_v.impl&%0.observe.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))) (I (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr!)))) (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) addr!)))) (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator (%Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))) (I (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr!))) (Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. result$))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/curr (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))))))) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%1.observe.? self! addr!)) ))))
(assert (forall ((self! Poly) (addr! Poly)) (! (=> (and (has_type self! TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.) (has_type addr! TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type (Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. (lib!allocation_layer.MiniAllocator_v.impl&%1.observe.? self! addr!)) TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.)) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%1.observe.? self! addr!)) )))
(set-info :comment ";; Function-Specs lib::allocation_layer::MiniAllocator_v::PageAllocator::reserve")
(declare-fun req%lib!allocation_layer.MiniAllocator_v.impl&%0.reserve. (Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((self! Poly) (addrs! Poly)) (! (= (req%lib!allocation_layer.MiniAllocator_v.impl&%0.reserve. self! addrs!) (and (=> %%global_location_label%%12 (lib!allocation_layer.MiniAllocator_v.impl&%0.wf.? self!)) (=> %%global_location_label%%13 (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. addrs! addr$) (lib!allocation_layer.MiniAllocator_v.impl&%0.is_free_addr.? self! addr$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. addrs! addr$)) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%0.is_free_addr.? self! addr$)) ))))) :pattern ((req%lib!allocation_layer.MiniAllocator_v.impl&%0.reserve. self! addrs!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::MiniAllocator_v::PageAllocator::reserve")
(assert (fuel_bool_default fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.reserve.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.reserve.) (forall ((self! Poly) (addrs! Poly)) (! (= (lib!allocation_layer.MiniAllocator_v.impl&%0.reserve.? self! addrs!) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!)))) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.impl&%0.union.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))) addrs!)) (%I (I (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!)))))) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%0.reserve.? self! addrs!)) ))))
(assert (forall ((self! Poly) (addrs! Poly)) (! (=> (and (has_type self! TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.) (has_type addrs! (TYPE%vstd!set.Set. $ TYPE%lib!spec.AsyncDisk_t.Address.))) (has_type (Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (lib!allocation_layer.MiniAllocator_v.impl&%0.reserve.? self! addrs!)) TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.)) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%0.reserve.? self! addrs!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::MiniAllocator_v::PageAllocator::all_pages_allocated")
(assert (fuel_bool_default fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.all_pages_allocated.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.MiniAllocator_v.impl&%0.all_pages_allocated.) (forall ((self! Poly)) (! (= (lib!allocation_layer.MiniAllocator_v.impl&%0.all_pages_allocated.? self!) (forall ((addr$ Poly)) (! (=> (has_type addr$ TYPE%lib!spec.AsyncDisk_t.Address.) (=> (and (lib!spec.AsyncDisk_t.impl&%0.wf.? addr$) (= (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr$)) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!)))) (or (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))) addr$) (vstd!set.impl&%0.contains.? $ TYPE%lib!spec.AsyncDisk_t.Address. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. self!))) addr$)))) :pattern ((lib!spec.AsyncDisk_t.impl&%0.wf.? addr$)) ))) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%0.all_pages_allocated.? self!)) ))))
(set-info :comment ";; Function-Specs lib::allocation_layer::MiniAllocator_v::MiniAllocator::allocate")
(declare-fun req%lib!allocation_layer.MiniAllocator_v.impl&%1.allocate. (Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((self! Poly) (addr! Poly)) (! (= (req%lib!allocation_layer.MiniAllocator_v.impl&%1.allocate. self! addr!) (and (=> %%global_location_label%%14 (lib!allocation_layer.MiniAllocator_v.impl&%1.wf.? self!)) (=> %%global_location_label%%15 (lib!allocation_layer.MiniAllocator_v.impl&%1.can_allocate.? self! addr!)))) :pattern ((req%lib!allocation_layer.MiniAllocator_v.impl&%1.allocate. self! addr!)) )))
(set-info :comment ";; Function-Axioms lib::allocation_layer::MiniAllocator_v::MiniAllocator::allocate")
(assert (fuel_bool_default fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.allocate.))
(assert (=> (fuel_bool fuel%lib!allocation_layer.MiniAllocator_v.impl&%1.allocate.) (forall ((self! Poly) (addr! Poly)) (! (= (lib!allocation_layer.MiniAllocator_v.impl&%1.allocate.? self! addr!) (let ((result$ (lib!allocation_layer.MiniAllocator_v.impl&%0.reserve.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))) (I (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr!)))) (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) addr!)))) (let ((new_curr$ (ite (lib!allocation_layer.MiniAllocator_v.impl&%0.all_pages_allocated.? (Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. result$)) core!option.Option./None (core!option.Option./Some (I (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr!))))))) (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator (%Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. self!))) (I (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr!))) (Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. result$))) (%Poly%core!option.Option. (Poly%core!option.Option. new_curr$)))))) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%1.allocate.? self! addr!)) ))))
(assert (forall ((self! Poly) (addr! Poly)) (! (=> (and (has_type self! TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.) (has_type addr! TYPE%lib!spec.AsyncDisk_t.Address.)) (has_type (Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. (lib!allocation_layer.MiniAllocator_v.impl&%1.allocate.? self! addr!)) TYPE%lib!allocation_layer.MiniAllocator_v.MiniAllocator.)) :pattern ((lib!allocation_layer.MiniAllocator_v.impl&%1.allocate.? self! addr!)) )))
(set-info :comment ";; Function-Axioms lib::spec::ImplDisk_t::ipage_count")
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (uInv 32 (lib!spec.ImplDisk_t.ipage_count.? no%param))) :pattern ((lib!spec.ImplDisk_t.ipage_count.? no%param)) )))
(set-info :comment ";; Broadcast lib::spec::ImplDisk_t::page_count_equals_ipage_count")
(assert (=> (fuel_bool fuel%lib!spec.ImplDisk_t.page_count_equals_ipage_count.) (= (lib!spec.AsyncDisk_t.page_count.? (I 0)) (lib!spec.ImplDisk_t.ipage_count.? (I 0)))))
(set-info :comment ";; Function-Axioms lib::spec::ImplDisk_t::IAddress::view")
(assert (fuel_bool_default fuel%lib!spec.ImplDisk_t.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!spec.ImplDisk_t.impl&%0.view.) (forall ((self! Poly)) (! (= (lib!spec.ImplDisk_t.impl&%0.view.? self!) (lib!spec.AsyncDisk_t.Address./Address (%I (I (lib!spec.ImplDisk_t.IAddress./IAddress/au (%Poly%lib!spec.ImplDisk_t.IAddress. self!)))) (%I (I (lib!spec.ImplDisk_t.IAddress./IAddress/page (%Poly%lib!spec.ImplDisk_t.IAddress. self!)))))) :pattern ((lib!spec.ImplDisk_t.impl&%0.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.ImplDisk_t.IAddress.) (has_type (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.ImplDisk_t.impl&%0.view.? self!)) TYPE%lib!spec.AsyncDisk_t.Address.)) :pattern ((lib!spec.ImplDisk_t.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%18::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms lib::disk::GenericDisk_v::page_count")
(assert (fuel_bool_default fuel%lib!disk.GenericDisk_v.page_count.))
(assert (=> (fuel_bool fuel%lib!disk.GenericDisk_v.page_count.) (forall ((no%param Poly)) (! (= (lib!disk.GenericDisk_v.page_count.? no%param) (lib!spec.AsyncDisk_t.page_count.? (I 0))) :pattern ((lib!disk.GenericDisk_v.page_count.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (lib!disk.GenericDisk_v.page_count.? no%param))) :pattern ((lib!disk.GenericDisk_v.page_count.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::disk::GenericDisk_v::au_count")
(assert (fuel_bool_default fuel%lib!disk.GenericDisk_v.au_count.))
(assert (=> (fuel_bool fuel%lib!disk.GenericDisk_v.au_count.) (forall ((no%param Poly)) (! (= (lib!disk.GenericDisk_v.au_count.? no%param) (lib!spec.AsyncDisk_t.au_count.? (I 0))) :pattern ((lib!disk.GenericDisk_v.au_count.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (lib!disk.GenericDisk_v.au_count.? no%param))) :pattern ((lib!disk.GenericDisk_v.au_count.? no%param)) )))
(set-info :comment ";; Function-Axioms lib::disk::GenericDisk_v::addr_range")
(assert (fuel_bool_default fuel%lib!disk.GenericDisk_v.addr_range.))
(declare-fun %%lambda%%2 (Int Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (%%hole%%2 Int) (addr$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) addr$) (B (and (and (= (lib!spec.AsyncDisk_t.Address./Address/au (%Poly%lib!spec.AsyncDisk_t.Address. addr$)) %%hole%%0) (>= (lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. addr$)) %%hole%%1)) (< (lib!spec.AsyncDisk_t.Address./Address/page (%Poly%lib!spec.AsyncDisk_t.Address. addr$)) %%hole%%2)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) addr$)))))
(assert (=> (fuel_bool fuel%lib!disk.GenericDisk_v.addr_range.) (forall ((au! Poly) (start! Poly) (end_excl! Poly)) (! (= (lib!disk.GenericDisk_v.addr_range.? au! start! end_excl!) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (vstd!set.impl&%0.new.? $ TYPE%lib!spec.AsyncDisk_t.Address. $ (TYPE%fun%1. $ TYPE%lib!spec.AsyncDisk_t.Address. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%2 (%I au!) (%I start!) (%I end_excl!))))))) :pattern ((lib!disk.GenericDisk_v.addr_range.? au! start! end_excl!)) ))))
(set-info :comment ";; Function-Axioms lib::disk::GenericDisk_v::IAddress::view")
(assert (fuel_bool_default fuel%lib!disk.GenericDisk_v.impl&%1.view.))
(assert (=> (fuel_bool fuel%lib!disk.GenericDisk_v.impl&%1.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%lib!spec.ImplDisk_t.IAddress. self!) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.AsyncDisk_t.Address./Address (%I (I (lib!spec.ImplDisk_t.IAddress./IAddress/au (%Poly%lib!spec.ImplDisk_t.IAddress. self!)))) (%I (I (lib!spec.ImplDisk_t.IAddress./IAddress/page (%Poly%lib!spec.ImplDisk_t.IAddress. self!))))))) :pattern ((vstd!view.View.view.? $ TYPE%lib!spec.ImplDisk_t.IAddress. self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::MiniAllocator_v::PageAllocator::view")
(assert (fuel_bool_default fuel%lib!exec.MiniAllocator_v.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!exec.MiniAllocator_v.impl&%0.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. self!) (Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (let ((au$ (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)))) (let ((observed$ (lib!disk.GenericDisk_v.addr_range.? (I (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!))) (I 0) (I (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)))))) (let ((reserved$ (lib!disk.GenericDisk_v.addr_range.? (I (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!))) (I 0) (I (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)))))) (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. observed$)) (%Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. reserved$)) (%I (I au$)))))))) :pattern ((vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. self!)) ))))
(set-info :comment ";; Function-Recommends lib::exec::MiniAllocator_v::PageAllocator::wf")
(set-info :comment ";; exec/MiniAllocator_v.rs:43:5: 43:47 (#0)")
(set-info :comment ";; Function-Axioms lib::exec::MiniAllocator_v::PageAllocator::wf")
(assert (fuel_bool_default fuel%lib!exec.MiniAllocator_v.impl&%1.wf.))
(assert (=> (fuel_bool fuel%lib!exec.MiniAllocator_v.impl&%1.wf.) (forall ((self! Poly)) (! (= (lib!exec.MiniAllocator_v.impl&%1.wf.? self!) (and (and (<= (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)) (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!))) (<= (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)) (lib!disk.GenericDisk_v.page_count.? (I 0)))) (< (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)) (lib!disk.GenericDisk_v.au_count.? (I 0))))) :pattern ((lib!exec.MiniAllocator_v.impl&%1.wf.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::exec::MiniAllocator_v::PageAllocator::has_free_addr")
(set-info :comment ";; exec/MiniAllocator_v.rs:49:5: 49:58 (#0)")
(set-info :comment ";; Function-Axioms lib::exec::MiniAllocator_v::PageAllocator::has_free_addr")
(assert (fuel_bool_default fuel%lib!exec.MiniAllocator_v.impl&%1.has_free_addr.))
(assert (=> (fuel_bool fuel%lib!exec.MiniAllocator_v.impl&%1.has_free_addr.) (forall ((self! Poly)) (! (= (lib!exec.MiniAllocator_v.impl&%1.has_free_addr.? self!) (not (= (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)) (lib!disk.GenericDisk_v.page_count.? (I 0))))) :pattern ((lib!exec.MiniAllocator_v.impl&%1.has_free_addr.? self!)) ))))
(set-info :comment ";; Function-Recommends lib::exec::MiniAllocator_v::PageAllocator::no_unobserved_pages")
(set-info :comment ";; exec/MiniAllocator_v.rs:53:5: 53:64 (#0)")
(set-info :comment ";; Function-Axioms lib::exec::MiniAllocator_v::PageAllocator::no_unobserved_pages")
(assert (fuel_bool_default fuel%lib!exec.MiniAllocator_v.impl&%1.no_unobserved_pages.))
(assert (=> (fuel_bool fuel%lib!exec.MiniAllocator_v.impl&%1.no_unobserved_pages.) (forall ((self! Poly)) (! (= (lib!exec.MiniAllocator_v.impl&%1.no_unobserved_pages.? self!) (= (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)) (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/observed (%Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)))) :pattern ((lib!exec.MiniAllocator_v.impl&%1.no_unobserved_pages.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::MiniAllocator_v::MiniAllocator::view")
(assert (fuel_bool_default fuel%lib!exec.MiniAllocator_v.impl&%2.view.))
(assert (=> (fuel_bool fuel%lib!exec.MiniAllocator_v.impl&%2.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.MiniAllocator. self!) (Poly%lib!allocation_layer.MiniAllocator_v.MiniAllocator. (let ((tmp%%$ (lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!exec.MiniAllocator_v.MiniAllocator. self!)))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((alloc$ (%Poly%lib!exec.MiniAllocator_v.PageAllocator. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (let ((allocs$ (%Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!allocation_layer.MiniAllocator_v.PageAllocator.) (I (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. alloc$))))) (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. alloc$)))))) (let ((curr$ (ite (lib!exec.MiniAllocator_v.impl&%1.has_free_addr.? (Poly%lib!exec.MiniAllocator_v.PageAllocator. alloc$)) (core!option.Option./Some (I (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/au (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. alloc$)))))) core!option.Option./None))) (lib!allocation_layer.MiniAllocator_v.MiniAllocator./MiniAllocator (%Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. (Poly%vstd!map.Map<nat./lib!allocation_layer.MiniAllocator_v.PageAllocator.>. allocs$)) (%Poly%core!option.Option. (Poly%core!option.Option. curr$)))))) (lib!allocation_layer.MiniAllocator_v.impl&%1.empty.? (I 0)))))) :pattern ((vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.MiniAllocator. self!)) ))))
(set-info :comment ";; Function-Recommends lib::exec::MiniAllocator_v::MiniAllocator::wf")
(set-info :comment ";; exec/MiniAllocator_v.rs:123:5: 123:47 (#0)")
(set-info :comment ";; Function-Axioms lib::exec::MiniAllocator_v::MiniAllocator::wf")
(assert (fuel_bool_default fuel%lib!exec.MiniAllocator_v.impl&%3.wf.))
(assert (=> (fuel_bool fuel%lib!exec.MiniAllocator_v.impl&%3.wf.) (forall ((self! Poly)) (! (= (lib!exec.MiniAllocator_v.impl&%3.wf.? self!) (=> (is-core!option.Option./Some_ (lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!exec.MiniAllocator_v.MiniAllocator. self!))) (lib!exec.MiniAllocator_v.impl&%1.wf.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.MiniAllocator_v.MiniAllocator./MiniAllocator/allocs (%Poly%lib!exec.MiniAllocator_v.MiniAllocator. self!)))))))) :pattern ((lib!exec.MiniAllocator_v.impl&%3.wf.? self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%lib!exec.MiniAllocator_v.PageAllocator.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%lib!exec.MiniAllocator_v.MiniAllocator.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%lib!spec.ImplDisk_t.IAddress.))
(set-info :comment ";; Function-Specs lib::exec::MiniAllocator_v::PageAllocator::new")
(declare-fun req%lib!exec.MiniAllocator_v.impl&%1.new. (Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((au! Int)) (! (= (req%lib!exec.MiniAllocator_v.impl&%1.new. au!) (=> %%global_location_label%%16 (< au! (lib!disk.GenericDisk_v.au_count.? (I 0))))) :pattern ((req%lib!exec.MiniAllocator_v.impl&%1.new. au!)) )))
(declare-fun ens%lib!exec.MiniAllocator_v.impl&%1.new. (Int lib!exec.MiniAllocator_v.PageAllocator.) Bool)
(assert (forall ((au! Int) (alloc! lib!exec.MiniAllocator_v.PageAllocator.)) (! (= (ens%lib!exec.MiniAllocator_v.impl&%1.new. au! alloc!) (and (has_type (Poly%lib!exec.MiniAllocator_v.PageAllocator. alloc!) TYPE%lib!exec.MiniAllocator_v.PageAllocator.) (lib!exec.MiniAllocator_v.impl&%1.wf.? (Poly%lib!exec.MiniAllocator_v.PageAllocator. alloc!)))) :pattern ((ens%lib!exec.MiniAllocator_v.impl&%1.new. au! alloc!)) )))
(set-info :comment ";; Function-Def lib::exec::MiniAllocator_v::PageAllocator::new")
(set-info :comment ";; exec/MiniAllocator_v.rs:36:5: 36:45 (#0)")
(set-info :comment ";; Function-Specs lib::exec::MiniAllocator_v::PageAllocator::reserve")
(declare-fun req%lib!exec.MiniAllocator_v.impl&%1.reserve. (lib!exec.MiniAllocator_v.PageAllocator.) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((pre%self! lib!exec.MiniAllocator_v.PageAllocator.)) (! (= (req%lib!exec.MiniAllocator_v.impl&%1.reserve. pre%self!) (and (=> %%global_location_label%%17 (lib!exec.MiniAllocator_v.impl&%1.wf.? (Poly%lib!exec.MiniAllocator_v.PageAllocator. pre%self!))) (=> %%global_location_label%%18 (lib!exec.MiniAllocator_v.impl&%1.has_free_addr.? (Poly%lib!exec.MiniAllocator_v.PageAllocator. pre%self!))))) :pattern ((req%lib!exec.MiniAllocator_v.impl&%1.reserve. pre%self!)) )))
(declare-fun ens%lib!exec.MiniAllocator_v.impl&%1.reserve. (lib!exec.MiniAllocator_v.PageAllocator. lib!exec.MiniAllocator_v.PageAllocator. lib!spec.ImplDisk_t.IAddress.) Bool)
(assert (forall ((pre%self! lib!exec.MiniAllocator_v.PageAllocator.) (self! lib!exec.MiniAllocator_v.PageAllocator.) (addr! lib!spec.ImplDisk_t.IAddress.)) (! (= (ens%lib!exec.MiniAllocator_v.impl&%1.reserve. pre%self! self! addr!) (and (has_type (Poly%lib!spec.ImplDisk_t.IAddress. addr!) TYPE%lib!spec.ImplDisk_t.IAddress.) (has_type (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!) TYPE%lib!exec.MiniAllocator_v.PageAllocator.) (lib!exec.MiniAllocator_v.impl&%1.wf.? (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)) (lib!spec.AsyncDisk_t.impl&%0.wf.? (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.ImplDisk_t.impl&%0.view.? (Poly%lib!spec.ImplDisk_t.IAddress. addr!)))) (< (lib!spec.ImplDisk_t.IAddress./IAddress/page (%Poly%lib!spec.ImplDisk_t.IAddress. (Poly%lib!spec.ImplDisk_t.IAddress. addr!))) (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)))) (lib!allocation_layer.MiniAllocator_v.impl&%0.is_free_addr.? (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. pre%self!)) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.ImplDisk_t.impl&%0.view.? (Poly%lib!spec.ImplDisk_t.IAddress. addr!)))) (= (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!))) (lib!allocation_layer.MiniAllocator_v.impl&%0.reserve.? (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. pre%self!)) (vstd!set.impl&%0.insert.? $ TYPE%lib!spec.AsyncDisk_t.Address. (vstd!set.impl&%0.empty.? $ TYPE%lib!spec.AsyncDisk_t.Address.) (Poly%lib!spec.AsyncDisk_t.Address. (lib!spec.ImplDisk_t.impl&%0.view.? (Poly%lib!spec.ImplDisk_t.IAddress. addr!)))))))) :pattern ((ens%lib!exec.MiniAllocator_v.impl&%1.reserve. pre%self! self! addr!)) )))
(set-info :comment ";; Function-Def lib::exec::MiniAllocator_v::PageAllocator::reserve")
(set-info :comment ";; exec/MiniAllocator_v.rs:58:5: 58:54 (#0)")
(set-info :comment ";; Function-Specs lib::exec::MiniAllocator_v::PageAllocator::observe_all")
(declare-fun req%lib!exec.MiniAllocator_v.impl&%1.observe_all. (lib!exec.MiniAllocator_v.PageAllocator.) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((pre%self! lib!exec.MiniAllocator_v.PageAllocator.)) (! (= (req%lib!exec.MiniAllocator_v.impl&%1.observe_all. pre%self!) (=> %%global_location_label%%19 (lib!exec.MiniAllocator_v.impl&%1.wf.? (Poly%lib!exec.MiniAllocator_v.PageAllocator. pre%self!)))) :pattern ((req%lib!exec.MiniAllocator_v.impl&%1.observe_all. pre%self!)) )))
(declare-fun ens%lib!exec.MiniAllocator_v.impl&%1.observe_all. (lib!exec.MiniAllocator_v.PageAllocator. lib!exec.MiniAllocator_v.PageAllocator.) Bool)
(assert (forall ((pre%self! lib!exec.MiniAllocator_v.PageAllocator.) (self! lib!exec.MiniAllocator_v.PageAllocator.)) (! (= (ens%lib!exec.MiniAllocator_v.impl&%1.observe_all. pre%self! self!) (and (has_type (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!) TYPE%lib!exec.MiniAllocator_v.PageAllocator.) (lib!exec.MiniAllocator_v.impl&%1.wf.? (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)) (lib!exec.MiniAllocator_v.impl&%1.no_unobserved_pages.? (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)) (= (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!))) (lib!exec.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. pre%self!)))) (= (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!))) (lib!allocation_layer.MiniAllocator_v.impl&%0.observe.? (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. pre%self!)) (Poly%vstd!set.Set<lib!spec.AsyncDisk_t.Address.>. (lib!allocation_layer.MiniAllocator_v.PageAllocator./PageAllocator/reserved (%Poly%lib!allocation_layer.MiniAllocator_v.PageAllocator. (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. pre%self!))))))))) :pattern ((ens%lib!exec.MiniAllocator_v.impl&%1.observe_all. pre%self! self!)) )))
(set-info :comment ";; Function-Def lib::exec::MiniAllocator_v::PageAllocator::observe_all")
(set-info :comment ";; exec/MiniAllocator_v.rs:75:5: 75:39 (#0)")
(set-info :comment ";; Function-Specs lib::exec::MiniAllocator_v::PageAllocator::free_addr_implies_not_all_allocated")
(declare-fun req%lib!exec.MiniAllocator_v.impl&%1.free_addr_implies_not_all_allocated. (lib!exec.MiniAllocator_v.PageAllocator.) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((self! lib!exec.MiniAllocator_v.PageAllocator.)) (! (= (req%lib!exec.MiniAllocator_v.impl&%1.free_addr_implies_not_all_allocated. self!) (=> %%global_location_label%%20 (lib!exec.MiniAllocator_v.impl&%1.wf.? (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)))) :pattern ((req%lib!exec.MiniAllocator_v.impl&%1.free_addr_implies_not_all_allocated. self!)) )))
(declare-fun ens%lib!exec.MiniAllocator_v.impl&%1.free_addr_implies_not_all_allocated. (lib!exec.MiniAllocator_v.PageAllocator.) Bool)
(assert (forall ((self! lib!exec.MiniAllocator_v.PageAllocator.)) (! (= (ens%lib!exec.MiniAllocator_v.impl&%1.free_addr_implies_not_all_allocated. self!) (= (lib!exec.MiniAllocator_v.impl&%1.has_free_addr.? (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)) (not (lib!allocation_layer.MiniAllocator_v.impl&%0.all_pages_allocated.? (vstd!view.View.view.? $ TYPE%lib!exec.MiniAllocator_v.PageAllocator. (Poly%lib!exec.MiniAllocator_v.PageAllocator. self!)))))) :pattern ((ens%lib!exec.MiniAllocator_v.impl&%1.free_addr_implies_not_all_allocated. self!)) )))
(set-info :comment ";; Function-Def lib::exec::MiniAllocator_v::PageAllocator::free_addr_implies_not_all_allocated")
(set-info :comment ";; exec/MiniAllocator_v.rs:87:11: 87:56 (#0)")
(set-info :comment ";; Function-Specs lib::exec::MiniAllocator_v::MiniAllocator::empty")
(declare-fun ens%lib!exec.MiniAllocator_v.impl&%3.empty. (Int lib!exec.MiniAllocator_v.MiniAllocator.) Bool)
(assert (forall ((no%param Int) (%return! lib!exec.MiniAllocator_v.MiniAllocator.)) (! (= (ens%lib!exec.MiniAllocator_v.impl&%3.empty. no%param %return!) (has_type (Poly%lib!exec.MiniAllocator_v.MiniAllocator. %return!) TYPE%lib!exec.MiniAllocator_v.MiniAllocator.)) :pattern ((ens%lib!exec.MiniAllocator_v.impl&%3.empty. no%param %return!)) )))
(set-info :comment ";; Function-Def lib::exec::MiniAllocator_v::MiniAllocator::empty")
(set-info :comment ";; exec/MiniAllocator_v.rs:119:5: 119:32 (#0)")
(declare-const %return! lib!exec.MiniAllocator_v.MiniAllocator.)
(declare-const no%param Int)
(assert fuel_defaults)
(assert (not true))
(check-sat)
(exit)
