(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!std_specs.core.iter_into_iter_spec. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap_or. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%0.ghost_iter. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.exec_invariant. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_invariant. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_ensures. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_peek_next. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%1.ghost_advance. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%2.view. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_is_lt. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_forward_checked. FuelId)
(declare-const fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int. FuelId)
(declare-const fuel%vstd!std_specs.range.axiom_spec_range_next_usize. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!array.impl&%0.view. FuelId)
(declare-const fuel%lib!array.impl&%0.wf. FuelId)
(declare-const fuel%lib!array_set.impl&%0.view. FuelId)
(declare-const fuel%lib!array_set.impl&%0.spec_len. FuelId)
(declare-const fuel%lib!array_set.impl&%0.wf. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.core.iter_into_iter_spec. fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.option.spec_unwrap_or. fuel%vstd!std_specs.range.impl&%0.ghost_iter. fuel%vstd!std_specs.range.impl&%1.exec_invariant. fuel%vstd!std_specs.range.impl&%1.ghost_invariant. fuel%vstd!std_specs.range.impl&%1.ghost_ensures. fuel%vstd!std_specs.range.impl&%1.ghost_peek_next. fuel%vstd!std_specs.range.impl&%1.ghost_advance. fuel%vstd!std_specs.range.impl&%2.view. fuel%vstd!std_specs.range.impl&%8.spec_is_lt. fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int. fuel%vstd!std_specs.range.impl&%8.spec_forward_checked. fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int. fuel%vstd!std_specs.range.axiom_spec_range_next_usize. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%lib!array.impl&%0.view. fuel%lib!array.impl&%0.wf. fuel%lib!array_set.impl&%0.view. fuel%lib!array_set.impl&%0.spec_len. fuel%lib!array_set.impl&%0.wf. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.axiom_spec_range_next_usize.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-fun proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIterator./ExecIter (Dcr Type) Type)
(declare-fun proj%%vstd!pervasive.ForLoopGhostIterator./Item (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIterator./Item (Dcr Type) Type)
(declare-fun proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter (Dcr Type) Dcr)
(declare-fun proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter (Dcr Type) Type)
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<bool.>. 0)
(declare-sort vstd!set.Set<usize.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (core!ops.range.Range. 0) (vstd!std_specs.range.RangeGhostIterator. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!array.Array. 0) (lib!array_set.ArraySet. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!ops.range.Range./Range (core!ops.range.Range./Range/?start Poly) (core!ops.range.Range./Range/?end Poly))) ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?start Poly) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?cur Poly) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?end Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!array.Array./Array (lib!array.Array./Array/?seq Poly) (lib!array.Array./Array/?ar %%Function%%))) ((lib!array_set.ArraySet./ArraySet (lib!array_set.ArraySet./ArraySet/?data lib!array.Array.) (lib!array_set.ArraySet./ArraySet/?len Int) (lib!array_set.ArraySet./ArraySet/?set vstd!set.Set<usize.>.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!ops.range.Range./Range/start (core!ops.range.Range.) Poly)
(declare-fun core!ops.range.Range./Range/end (core!ops.range.Range.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!array.Array./Array/seq (lib!array.Array.) Poly)
(declare-fun lib!array.Array./Array/ar (lib!array.Array.) %%Function%%)
(declare-fun lib!array_set.ArraySet./ArraySet/data (lib!array_set.ArraySet.) lib!array.Array.)
(declare-fun lib!array_set.ArraySet./ArraySet/len (lib!array_set.ArraySet.) Int)
(declare-fun lib!array_set.ArraySet./ArraySet/set (lib!array_set.ArraySet.) vstd!set.Set<usize.>.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!ops.range.Range. (Dcr Type) Type)
(declare-fun TYPE%vstd!std_specs.range.RangeGhostIterator. (Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!array.Array. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!array_set.ArraySet. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<bool.>. (vstd!seq.Seq<bool.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<bool.>. (Poly) vstd!seq.Seq<bool.>.)
(declare-fun Poly%vstd!set.Set<usize.>. (vstd!set.Set<usize.>.) Poly)
(declare-fun %Poly%vstd!set.Set<usize.>. (Poly) vstd!set.Set<usize.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!ops.range.Range. (core!ops.range.Range.) Poly)
(declare-fun %Poly%core!ops.range.Range. (Poly) core!ops.range.Range.)
(declare-fun Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator.) Poly)
(declare-fun %Poly%vstd!std_specs.range.RangeGhostIterator. (Poly) vstd!std_specs.range.RangeGhostIterator.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!array.Array. (lib!array.Array.) Poly)
(declare-fun %Poly%lib!array.Array. (Poly) lib!array.Array.)
(declare-fun Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet.) Poly)
(declare-fun %Poly%lib!array_set.ArraySet. (Poly) lib!array_set.ArraySet.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<bool.>.)) (! (= x (%Poly%vstd!seq.Seq<bool.>. (Poly%vstd!seq.Seq<bool.>. x))) :pattern ((Poly%vstd!seq.Seq<bool.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ BOOL)) (= x (Poly%vstd!seq.Seq<bool.>. (%Poly%vstd!seq.Seq<bool.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ BOOL))) )))
(assert (forall ((x vstd!seq.Seq<bool.>.)) (! (has_type (Poly%vstd!seq.Seq<bool.>. x) (TYPE%vstd!seq.Seq. $ BOOL)) :pattern ((has_type (Poly%vstd!seq.Seq<bool.>. x) (TYPE%vstd!seq.Seq. $ BOOL))) )))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (= x (%Poly%vstd!set.Set<usize.>. (Poly%vstd!set.Set<usize.>. x))) :pattern ((Poly%vstd!set.Set<usize.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (UINT SZ))) (= x (Poly%vstd!set.Set<usize.>. (%Poly%vstd!set.Set<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (UINT SZ)))) )))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ)))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x core!ops.range.Range.)) (! (= x (%Poly%core!ops.range.Range. (Poly%core!ops.range.Range. x))) :pattern ((Poly%core!ops.range.Range. x)) )))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (= x (Poly%core!ops.range.Range. (%Poly%core!ops.range.Range. x)))) :pattern ((has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))) )))
(assert (forall ((Idx&. Dcr) (Idx& Type) (_start! Poly) (_end! Poly)) (! (=> (and (has_type _start! Idx&) (has_type _end! Idx&)) (has_type (Poly%core!ops.range.Range. (core!ops.range.Range./Range _start! _end!)) (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((has_type (Poly%core!ops.range.Range. (core!ops.range.Range./Range _start! _end!)) (TYPE%core!ops.range.Range. Idx&. Idx&))) )))
(assert (forall ((x core!ops.range.Range.)) (! (= (core!ops.range.Range./Range/start x) (core!ops.range.Range./Range/?start x)) :pattern ((core!ops.range.Range./Range/start x)) )))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (has_type (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. x)) Idx&)) :pattern ((core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. x)) (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))) )))
(assert (forall ((x core!ops.range.Range.)) (! (= (core!ops.range.Range./Range/end x) (core!ops.range.Range./Range/?end x)) :pattern ((core!ops.range.Range./Range/end x)) )))
(assert (forall ((Idx&. Dcr) (Idx& Type) (x Poly)) (! (=> (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&)) (has_type (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. x)) Idx&)) :pattern ((core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. x)) (has_type x (TYPE%core!ops.range.Range. Idx&. Idx&))) )))
(define-fun is-core!ops.range.Range./Range_ ((c core!ops.range.Range.)) Bool ((_ is core!ops.range.Range./Range) c))
(assert (forall ((x core!ops.range.Range.)) (! (=> (is-core!ops.range.Range./Range_ x) (height_lt (height (core!ops.range.Range./Range/start x)) (height (Poly%core!ops.range.Range. x)))) :pattern ((height (core!ops.range.Range./Range/start x))) )))
(assert (forall ((x core!ops.range.Range.)) (! (=> (is-core!ops.range.Range./Range_ x) (height_lt (height (core!ops.range.Range./Range/end x)) (height (Poly%core!ops.range.Range. x)))) :pattern ((height (core!ops.range.Range./Range/end x))) )))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= x (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. x))) :pattern ((Poly%vstd!std_specs.range.RangeGhostIterator. x)) )))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (= x (Poly%vstd!std_specs.range.RangeGhostIterator. (%Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(assert (forall ((A&. Dcr) (A& Type) (_start! Poly) (_cur! Poly) (_end! Poly)) (! (=> (and (has_type _start! A&) (has_type _cur! A&) (has_type _end! A&)) (has_type (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator _start! _cur! _end!)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) :pattern ((has_type (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator _start! _cur! _end!)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?start x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x)) )))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?cur x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x)) )))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/?end x)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x)) )))
(assert (forall ((A&. Dcr) (A& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (has_type (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) A&)) :pattern ((vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. x)) (has_type x (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(define-fun is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ ((c vstd!std_specs.range.RangeGhostIterator.)) Bool ((_ is vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator) c))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start x))) )))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur x))) )))
(assert (forall ((x vstd!std_specs.range.RangeGhostIterator.)) (! (=> (is-vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator_ x) (height_lt (height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x)) (height (Poly%vstd!std_specs.range.RangeGhostIterator. x)))) :pattern ((height (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end x))) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!array.Array.)) (! (= x (%Poly%lib!array.Array. (Poly%lib!array.Array. x))) :pattern ((Poly%lib!array.Array. x)) )))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (= x (Poly%lib!array.Array. (%Poly%lib!array.Array. x)))) :pattern ((has_type x (TYPE%lib!array.Array. A&. A& N&. N&))) )))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (_seq! Poly) (_ar! %%Function%%)) (! (=> (and (has_type _seq! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (Poly%array%. _ar!) (ARRAY A&. A& N&. N&))) (has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))) :pattern ((has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))) )))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/seq x) (lib!array.Array./Array/?seq x)) :pattern ((lib!array.Array./Array/seq x)) )))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))) )))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/ar x) (lib!array.Array./Array/?ar x)) :pattern ((lib!array.Array./Array/ar x)) )))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (Poly%array%. (lib!array.Array./Array/ar (%Poly%lib!array.Array. x))) (ARRAY A&. A& N&. N&))) :pattern ((lib!array.Array./Array/ar (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))) )))
(define-fun is-lib!array.Array./Array_ ((c lib!array.Array.)) Bool ((_ is lib!array.Array./Array) c))
(assert (forall ((x lib!array.Array.)) (! (=> (is-lib!array.Array./Array_ x) (height_lt (height (lib!array.Array./Array/seq x)) (height (Poly%lib!array.Array. x)))) :pattern ((height (lib!array.Array./Array/seq x))) )))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= x (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. x))) :pattern ((Poly%lib!array_set.ArraySet. x)) )))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (= x (Poly%lib!array_set.ArraySet. (%Poly%lib!array_set.ArraySet. x)))) :pattern ((has_type x (TYPE%lib!array_set.ArraySet. N&. N&))) )))
(assert (forall ((N&. Dcr) (N& Type) (_data! lib!array.Array.) (_len! Int) (_set! vstd!set.Set<usize.>.)) (! (=> (and (has_type (Poly%lib!array.Array. _data!) (TYPE%lib!array.Array. $ BOOL N&. N&)) (uInv SZ _len!)) (has_type (Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet./ArraySet _data! _len! _set!)) (TYPE%lib!array_set.ArraySet. N&. N&))) :pattern ((has_type (Poly%lib!array_set.ArraySet. (lib!array_set.ArraySet./ArraySet _data! _len! _set!)) (TYPE%lib!array_set.ArraySet. N&. N&))) )))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/data x) (lib!array_set.ArraySet./ArraySet/?data x)) :pattern ((lib!array_set.ArraySet./ArraySet/data x)) )))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (has_type (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. x))) (TYPE%lib!array.Array. $ BOOL N&. N&))) :pattern ((lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. x)) (has_type x (TYPE%lib!array_set.ArraySet. N&. N&))) )))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/len x) (lib!array_set.ArraySet./ArraySet/?len x)) :pattern ((lib!array_set.ArraySet./ArraySet/len x)) )))
(assert (forall ((N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_set.ArraySet. N&. N&)) (uInv SZ (lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. x)))) :pattern ((lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. x)) (has_type x (TYPE%lib!array_set.ArraySet. N&. N&))) )))
(assert (forall ((x lib!array_set.ArraySet.)) (! (= (lib!array_set.ArraySet./ArraySet/set x) (lib!array_set.ArraySet./ArraySet/?set x)) :pattern ((lib!array_set.ArraySet./ArraySet/set x)) )))
(define-fun is-lib!array_set.ArraySet./ArraySet_ ((c lib!array_set.ArraySet.)) Bool ((_ is lib!array_set.ArraySet./ArraySet) c))
(assert (forall ((x lib!array_set.ArraySet.)) (! (=> (is-lib!array_set.ArraySet./ArraySet_ x) (height_lt (height (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data x))) (height (Poly%lib!array_set.ArraySet. x)))) :pattern ((height (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data x)))) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)) )))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)) )) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)) )))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))) )))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)) )))
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!pervasive.ForLoopGhostIterator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialEq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialOrd. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!iter.traits.iterator.Iterator. (Dcr Type) Bool)
(declare-fun tr_bound%core!iter.range.Step. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.range.StepSpec. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIterator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! true :pattern ((tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&) (tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)) :pattern ((tr_bound%core!cmp.PartialOrd. Self%&. Self%& Rhs&. Rhs&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!iter.traits.iterator.Iterator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!iter.range.Step. Self%&. Self%&) (and (tr_bound%core!clone.Clone. Self%&. Self%&) (tr_bound%core!cmp.PartialOrd. Self%&. Self%& Self%&. Self%&))) :pattern ((tr_bound%core!iter.range.Step. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!std_specs.range.StepSpec. Self%&. Self%&)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&)) $) :pattern ((proj%%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&)) (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) :pattern ((proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter $ (TYPE%core!ops.range.Range. A&. A&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) $) :pattern ((proj%%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (TYPE%core!ops.range.Range. A&. A&)) :pattern ((proj%vstd!pervasive.ForLoopGhostIterator./ExecIter $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) A&.) :pattern ((proj%%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) A&) :pattern ((proj%vstd!pervasive.ForLoopGhostIterator./Item $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&)) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((proj%vstd!view.View./V $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.spec_unwrap_or.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_is_lt.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_is_lt%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_steps_between_int.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_steps_between_int%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked_int.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.StepSpec.spec_forward_checked_int%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.range.spec_range_next.? (Dcr Type Poly) tuple%2.)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.exec_invariant.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.exec_invariant%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_invariant%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_ensures%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_peek_next%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_advance.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIterator.ghost_advance%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!array.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(declare-fun lib!array.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!array_set.impl&%0.view.? (Dcr Type Poly) vstd!set.Set<usize.>.)
(declare-fun lib!array_set.impl&%0.wf.? (Dcr Type Poly) Bool)
(declare-fun vstd!std_specs.core.iter_into_iter_spec.? (Dcr Type Poly) Poly)
(declare-fun lib!array_set.impl&%0.spec_len.? (Dcr Type Poly) Int)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(declare-fun ens%core!iter.traits.collect.impl&%0.into_iter. (Dcr Type Poly Poly) Bool)
(assert (forall ((I&. Dcr) (I& Type) (i! Poly) (r! Poly)) (! (= (ens%core!iter.traits.collect.impl&%0.into_iter. I&. I& i! r!) (and (has_type r! I&) (= r! i!))) :pattern ((ens%core!iter.traits.collect.impl&%0.into_iter. I&. I& i! r!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap_or.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap_or.) (forall ((T&. Dcr) (T& Type) (option! Poly) (default! Poly)) (! (= (vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!) (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)) (let ((t$ (core!option.Option./Some/0 (%Poly%core!option.Option. option!)))) t$) default!)) :pattern ((vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly) (default! Poly)) (! (=> (and (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type default! T&)) (has_type (vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap_or.? T&. T& option! default!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! Self%&) (has_type other! Self%&)) (has_type (vstd!std_specs.range.StepSpec.spec_is_lt.? Self%&. Self%& self! other!) BOOL)) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? Self%&. Self%& self! other!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (end! Poly)) (! (=> (and (has_type self! Self%&) (has_type end! Self%&)) (has_type (vstd!std_specs.range.StepSpec.spec_steps_between_int.? Self%&. Self%& self! end!) INT)) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? Self%&. Self%& self! end!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (count! Poly)) (! (=> (and (has_type self! Self%&) (has_type count! (UINT SZ))) (has_type (vstd!std_specs.range.StepSpec.spec_forward_checked.? Self%&. Self%& self! count!) (TYPE%core!option.Option. Self%&. Self%&))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? Self%&. Self%& self! count!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (count! Poly)) (! (=> (and (has_type self! Self%&) (has_type count! INT)) (has_type (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? Self%&. Self%& self! count!) (TYPE%core!option.Option. Self%&. Self%&))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? Self%&. Self%& self! count!)) )))
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! (TYPE%core!ops.range.Range. A&. A&)) (has_type (Poly%tuple%2. (vstd!std_specs.range.spec_range_next.? A&. A& a!)) (TYPE%tuple%2. $ (TYPE%core!ops.range.Range. A&. A&) $ (TYPE%core!option.Option. A&. A&)))) :pattern ((vstd!std_specs.range.spec_range_next.? A&. A& a!)) )))
(declare-fun ens%core!iter.range.impl&%6.next. (Dcr Type core!ops.range.Range. core!ops.range.Range. core!option.Option.) Bool)
(assert (forall ((A&. Dcr) (A& Type) (pre%range! core!ops.range.Range.) (range! core!ops.range.Range.) (r! core!option.Option.)) (! (= (ens%core!iter.range.impl&%6.next. A&. A& pre%range! range! r!) (and (has_type (Poly%core!option.Option. r!) (TYPE%core!option.Option. A&. A&)) (has_type (Poly%core!ops.range.Range. range!) (TYPE%core!ops.range.Range. A&. A&)) (= (tuple%2./tuple%2 (Poly%core!ops.range.Range. range!) (Poly%core!option.Option. r!)) (vstd!std_specs.range.spec_range_next.? A&. A& (Poly%core!ops.range.Range. pre%range!))))) :pattern ((ens%core!iter.range.impl&%6.next. A&. A& pre%range! range! r!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_is_lt.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_is_lt.) (forall ((self! Poly) (other! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) self! other!) (B (< (%I self!) (%I other!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) self! other!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_forward_checked_int.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!) (Poly%core!option.Option. (ite (<= (Add (%I self!) (%I count!)) (- (uHi SZ) 1)) (core!option.Option./Some (I (uClip SZ (Add (%I self!) (%I count!))))) core!option.Option./None))) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_forward_checked.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_forward_checked.) (forall ((self! Poly) (count! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) self! count!) (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? $ (UINT SZ) self! count!)) :pattern ((vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) self! count!)) ))))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.axiom_spec_range_next_usize.) (forall ((range! Poly)) (! (=> (has_type range! (TYPE%core!ops.range.Range. $ (UINT SZ))) (and (=> (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (let ((tmp%%$ (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (I 1))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((n$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!) (tuple%2./tuple%2 (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I n$) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!)))) (Poly%core!option.Option. (core!option.Option./Some (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)))))))))) (=> (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? $ (UINT SZ) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. range!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. range!))))) (= (vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!) (tuple%2./tuple%2 range! (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((vstd!std_specs.range.spec_range_next.? $ (UINT SZ) range!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) )))
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!)) ))))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!)) ))))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!))) ))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (has_type self! Self%&) (has_type exec_iter! (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter Self%&. Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? Self%&. Self%& self! exec_iter!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.exec_invariant.? Self%&. Self%& self! exec_iter!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (init! Poly)) (! (=> (and (has_type self! Self%&) (has_type init! (TYPE%core!option.Option. (REF Self%&.) Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? Self%&. Self%& self! init!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? Self%&. Self%& self! init!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? Self%&. Self%& self!) BOOL)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? Self%&. Self%& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? Self%&. Self%& self!) (TYPE%core!option.Option. (proj%%vstd!pervasive.ForLoopGhostIterator./Item Self%&. Self%&) (proj%vstd!pervasive.ForLoopGhostIterator./Item Self%&. Self%&)))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? Self%&. Self%& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (has_type self! Self%&) (has_type exec_iter! (proj%vstd!pervasive.ForLoopGhostIterator./ExecIter Self%&. Self%&))) (has_type (vstd!pervasive.ForLoopGhostIterator.ghost_advance.? Self%&. Self%& self! exec_iter!) Self%&)) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_advance.? Self%&. Self%& self! exec_iter!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? Self%&. Self%& self!) (proj%vstd!pervasive.ForLoopGhostIteratorNew./GhostIter Self%&. Self%&))) :pattern ((vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? Self%&. Self%& self!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) ))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) ))))
(declare-fun req%vstd!set_lib.lemma_len_subset. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set_lib.lemma_len_subset. A&. A& s1! s2!) (and (=> %%global_location_label%%5 (vstd!set.impl&%0.finite.? A&. A& s2!)) (=> %%global_location_label%%6 (vstd!set.impl&%0.subset_of.? A&. A& s1! s2!)))) :pattern ((req%vstd!set_lib.lemma_len_subset. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set_lib.lemma_len_subset. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set_lib.lemma_len_subset. A&. A& s1! s2!) (and (<= (vstd!set.impl&%0.len.? A&. A& s1!) (vstd!set.impl&%0.len.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((ens%vstd!set_lib.lemma_len_subset. A&. A& s1! s2!)) )))
(assert (fuel_bool_default fuel%lib!array.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.wf.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.wf.? A&. A& N&. N& self!) (= (vstd!seq.Seq.len.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) (const_int N&))) :pattern ((lib!array.impl&%0.wf.? A&. A& N&. N& self!)) ))))
(assert (fuel_bool_default fuel%lib!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.view.? A&. A& N&. N& self!) (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.impl&%0.view.? A&. A& N&. N& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!)) )))
(assert (fuel_bool_default fuel%lib!array_set.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!array_set.impl&%0.view.) (forall ((N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array_set.impl&%0.view.? N&. N& self!) (lib!array_set.ArraySet./ArraySet/set (%Poly%lib!array_set.ArraySet. self!))) :pattern ((lib!array_set.impl&%0.view.? N&. N& self!)) ))))
(assert (fuel_bool_default fuel%lib!array_set.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!array_set.impl&%0.wf.) (forall ((N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array_set.impl&%0.wf.? N&. N& self!) (and (and (and (and (and (lib!array.impl&%0.wf.? $ BOOL N&. N& (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. self!)))) (vstd!set.impl&%0.finite.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!array_set.ArraySet./ArraySet/set (%Poly%lib!array_set.ArraySet. self!))))) (let ((tmp%%$ (lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ (const_int N&))))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (const_int N&))) (%B (vstd!seq.Seq.index.? $ BOOL (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. self!))))) i$))) (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!array_set.ArraySet./ArraySet/set (%Poly%lib!array_set.ArraySet. self!))) i$))) :pattern ((vstd!seq.Seq.index.? $ BOOL (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. self!))))) i$)) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!array_set.ArraySet./ArraySet/set (%Poly%lib!array_set.ArraySet. self!))) i$)) ))) (forall ((i$ Poly)) (! (=> (has_type i$ (UINT SZ)) (=> (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!array_set.ArraySet./ArraySet/set (%Poly%lib!array_set.ArraySet. self!))) i$) (and (and (<= 0 (%I i$)) (< (%I i$) (const_int N&))) (%B (vstd!seq.Seq.index.? $ BOOL (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. self!))))) i$))))) :pattern ((vstd!seq.Seq.index.? $ BOOL (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. self!))))) i$)) :pattern ((vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!array_set.ArraySet./ArraySet/set (%Poly%lib!array_set.ArraySet. self!))) i$)) ))) (= (lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. self!)) (vstd!set.impl&%0.len.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!array_set.ArraySet./ArraySet/set (%Poly%lib!array_set.ArraySet. self!))))))) :pattern ((lib!array_set.impl&%0.wf.? N&. N& self!)) ))))
(declare-fun ens%lib!array.impl&%0.new. (Dcr Type Dcr Type lib!array.Array.) Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (ret! lib!array.Array.)) (! (= (ens%lib!array.impl&%0.new. A&. A& N&. N& ret!) (and (has_type (Poly%lib!array.Array. ret!) (TYPE%lib!array.Array. A&. A& N&. N&)) (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. ret!)))) :pattern ((ens%lib!array.impl&%0.new. A&. A& N&. N& ret!)) )))
(declare-fun req%lib!array.impl&%1.set. (Dcr Type Dcr Type lib!array.Array. Int Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (pre%self! lib!array.Array.) (i! Int) (out! Poly)) (! (= (req%lib!array.impl&%1.set. A&. A& N&. N& pre%self! i! out!) (and (=> %%global_location_label%%7 (and (<= 0 i!) (< i! (const_int N&)))) (=> %%global_location_label%%8 (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. pre%self!))))) :pattern ((req%lib!array.impl&%1.set. A&. A& N&. N& pre%self! i! out!)) )))
(declare-fun ens%lib!array.impl&%1.set. (Dcr Type Dcr Type lib!array.Array. lib!array.Array. Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (pre%self! lib!array.Array.) (self! lib!array.Array.) (i! Int) (out! Poly)) (! (= (ens%lib!array.impl&%1.set. A&. A& N&. N& pre%self! self! i! out!) (and (has_type (Poly%lib!array.Array. self!) (TYPE%lib!array.Array. A&. A& N&. N&)) (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. self!))) (vstd!seq.Seq.update.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. pre%self!))) (I i!) out!)) (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. self!)))) :pattern ((ens%lib!array.impl&%1.set. A&. A& N&. N& pre%self! self! i! out!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.core.iter_into_iter_spec.))
(assert (=> (fuel_bool fuel%vstd!std_specs.core.iter_into_iter_spec.) (forall ((I&. Dcr) (I& Type) (i! Poly)) (! (= (vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!) i!) :pattern ((vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!)) ))))
(assert (forall ((I&. Dcr) (I& Type) (i! Poly)) (! (=> (has_type i! I&) (has_type (vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!) I&)) :pattern ((vstd!std_specs.core.iter_into_iter_spec.? I&. I& i!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%0.ghost_iter.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%0.ghost_iter.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (= (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. A&. A&) self!) (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. self!)) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. self!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. A&. A&) self!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.exec_invariant.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.exec_invariant.) (forall ((A&. Dcr) (A& Type) (self! Poly) (exec_iter! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! exec_iter!) (B (and (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!ops.range.Range./Range/start (%Poly%core!ops.range.Range. exec_iter!))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!ops.range.Range./Range/end (%Poly%core!ops.range.Range. exec_iter!))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! exec_iter!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_invariant.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_invariant.) (forall ((A&. Dcr) (A& Type) (self! Poly) (init! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! init!) (B (and (and (or (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (or (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!))))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. init!)) (let ((init$ (%Poly%vstd!std_specs.range.RangeGhostIterator. (core!option.Option./Some/0 (%Poly%core!option.Option. init!))))) (and (and (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))) (= (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. (Poly%vstd!std_specs.range.RangeGhostIterator. init$))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! init!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_ensures.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_ensures.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!) (B (not (%B (vstd!std_specs.range.StepSpec.spec_is_lt.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_peek_next.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_peek_next.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!) (Poly%core!option.Option. (core!option.Option./Some (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%1.ghost_advance.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%1.ghost_advance.) (forall ((A&. Dcr) (A& Type) (self! Poly) (_exec_iter! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!pervasive.ForLoopGhostIterator.ghost_advance.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! _exec_iter!) (Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (I 1)))) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/end (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))) :pattern ((vstd!pervasive.ForLoopGhostIterator.ghost_advance.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self! _exec_iter!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%2.view.))
(declare-fun %%lambda%%1 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2) i$) (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!std_specs.range.StepSpec.spec_forward_checked_int.? %%hole%%0 %%hole%%1 %%hole%%2 i$)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2) i$)))))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (= (vstd!view.View.view.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!) (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I (nClip (%I (vstd!std_specs.range.StepSpec.spec_steps_between_int.? A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)) (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/cur (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))) (Poly%fun%1. (mk_fun (%%lambda%%1 A&. A& (vstd!std_specs.range.RangeGhostIterator./RangeGhostIterator/start (%Poly%vstd!std_specs.range.RangeGhostIterator. self!)))))))) :pattern ((vstd!view.View.view.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&) self!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int.))
(assert (=> (fuel_bool fuel%vstd!std_specs.range.impl&%8.spec_steps_between_int.) (forall ((self! Poly) (end! Poly)) (! (= (vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT SZ) self! end!) (I (Sub (%I end!) (%I self!)))) :pattern ((vstd!std_specs.range.StepSpec.spec_steps_between_int.? $ (UINT SZ) self! end!)) ))))
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(assert (fuel_bool_default fuel%lib!array_set.impl&%0.spec_len.))
(assert (=> (fuel_bool fuel%lib!array_set.impl&%0.spec_len.) (forall ((N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array_set.impl&%0.spec_len.? N&. N& self!) (uClip SZ (vstd!set.impl&%0.len.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!array_set.ArraySet./ArraySet/set (%Poly%lib!array_set.ArraySet. self!)))))) :pattern ((lib!array_set.impl&%0.spec_len.? N&. N& self!)) ))))
(assert (forall ((N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array_set.ArraySet. N&. N&)) (uInv SZ (lib!array_set.impl&%0.spec_len.? N&. N& self!))) :pattern ((lib!array_set.impl&%0.spec_len.? N&. N& self!)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(assert (tr_bound%vstd!view.View. $ BOOL))
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. $ (TYPE%core!ops.range.Range. A&. A&))) :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIteratorNew. $ (TYPE%core!ops.range.Range. A&. A&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (tr_bound%vstd!pervasive.ForLoopGhostIterator. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) :pattern ((tr_bound%vstd!pervasive.ForLoopGhostIterator. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (and (tr_bound%vstd!std_specs.range.StepSpec. A&. A&) (tr_bound%core!iter.range.Step. A&. A&)) (tr_bound%vstd!view.View. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%vstd!std_specs.range.RangeGhostIterator. A&. A&))) )))
(assert (tr_bound%vstd!std_specs.range.StepSpec. $ (UINT SZ)))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialEq. A&. A& B&. B&) (tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)) )))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. A&. A& B&. B&) (tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialOrd. (REF A&.) A& (REF B&.) B&)) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialOrd. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialOrd. (CONST_PTR $) (PTR T&. T&) (CONST_PTR $) (PTR T&. T&))) )))
(assert (tr_bound%core!cmp.PartialEq. $ BOOL $ BOOL))
(assert (tr_bound%core!cmp.PartialOrd. $ BOOL $ BOOL))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialEq. A&. A& B&. B&) (tr_bound%core!cmp.PartialEq. $ (SLICE A&. A&) $ (SLICE B&. B&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE A&. A&) $ (SLICE B&. B&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (SLICE T&. T&) $ (SLICE T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (SLICE T&. T&) $ (SLICE T&. T&))) )))
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) )))
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialOrd. U&. U& U&. U&) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. A&. A& B&. B&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) $ (ARRAY B&. B& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) $ (ARRAY B&. B& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&)) (tr_bound%core!cmp.PartialOrd. $ (ARRAY T&. T& N&. N&) $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (ARRAY T&. T& N&. N&) $ (ARRAY T&. T& N&. N&))) )))
(assert (tr_bound%core!cmp.PartialEq. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(assert (tr_bound%core!cmp.PartialOrd. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialOrd. T&. T& T&. T&) (tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialOrd. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. $ (PTR T&. T&) $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialOrd. $ (PTR T&. T&) $ (PTR T&. T&)) :pattern ((tr_bound%core!cmp.PartialOrd. $ (PTR T&. T&) $ (PTR T&. T&))) )))
(assert (tr_bound%core!cmp.PartialEq. $ (UINT SZ) $ (UINT SZ)))
(assert (tr_bound%core!cmp.PartialOrd. $ (UINT SZ) $ (UINT SZ)))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!iter.range.Step. A&. A&) (tr_bound%core!iter.traits.iterator.Iterator. $ (TYPE%core!ops.range.Range. A&. A&))) :pattern ((tr_bound%core!iter.traits.iterator.Iterator. $ (TYPE%core!ops.range.Range. A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (PTR T&. T&))) )))
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(assert (tr_bound%core!clone.Clone. $ BOOL))
(assert (forall ((Idx&. Dcr) (Idx& Type)) (! (=> (tr_bound%core!clone.Clone. Idx&. Idx&) (tr_bound%core!clone.Clone. $ (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!ops.range.Range. Idx&. Idx&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!clone.Clone. T&. T&)) (tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) )))
(assert (tr_bound%core!clone.Clone. $ ALLOCATOR_GLOBAL))
(assert (tr_bound%core!iter.range.Step. $ (UINT SZ)))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. B&. B& A&. A&)) (tr_bound%core!cmp.PartialEq. (REF $) (SLICE B&. B&) $ (ARRAY A&. A& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. (REF $) (SLICE B&. B&) $ (ARRAY A&. A& N&. N&))) )))
(assert (forall ((Idx&. Dcr) (Idx& Type)) (! (=> (tr_bound%core!cmp.PartialEq. Idx&. Idx& Idx&. Idx&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!ops.range.Range. Idx&. Idx&) $ (TYPE%core!ops.range.Range. Idx&. Idx&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!ops.range.Range. Idx&. Idx&) $ (TYPE%core!ops.range.Range. Idx&. Idx&))) )))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. B&. B& A&. A&)) (tr_bound%core!cmp.PartialEq. $ (SLICE B&. B&) $ (ARRAY A&. A& N&. N&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (SLICE B&. B&) $ (ARRAY A&. A& N&. N&))) )))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. A&. A& B&. B&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) $ (SLICE B&. B&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) $ (SLICE B&. B&))) )))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!cmp.PartialEq. A&. A& B&. B&)) (tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) (REF $) (SLICE B&. B&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (ARRAY A&. A& N&. N&) (REF $) (SLICE B&. B&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)) )))
(declare-fun ens%lib!array_set.impl&%0.new. (Dcr Type lib!array_set.ArraySet.) Bool)
(assert (forall ((N&. Dcr) (N& Type) (ret! lib!array_set.ArraySet.)) (! (= (ens%lib!array_set.impl&%0.new. N&. N& ret!) (and (has_type (Poly%lib!array_set.ArraySet. ret!) (TYPE%lib!array_set.ArraySet. N&. N&)) (lib!array_set.impl&%0.wf.? N&. N& (Poly%lib!array_set.ArraySet. ret!)) (= (lib!array_set.impl&%0.view.? N&. N& (Poly%lib!array_set.ArraySet. ret!)) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.empty.? $ (UINT SZ)))))) :pattern ((ens%lib!array_set.impl&%0.new. N&. N& ret!)) )))
(declare-fun req%lib!array_set.impl&%0.init. (Dcr Type lib!array_set.ArraySet.) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((N&. Dcr) (N& Type) (pre%self! lib!array_set.ArraySet.)) (! (= (req%lib!array_set.impl&%0.init. N&. N& pre%self!) (=> %%global_location_label%%9 (lib!array_set.impl&%0.wf.? N&. N& (Poly%lib!array_set.ArraySet. pre%self!)))) :pattern ((req%lib!array_set.impl&%0.init. N&. N& pre%self!)) )))
(declare-fun ens%lib!array_set.impl&%0.init. (Dcr Type lib!array_set.ArraySet. lib!array_set.ArraySet.) Bool)
(assert (forall ((N&. Dcr) (N& Type) (pre%self! lib!array_set.ArraySet.) (self! lib!array_set.ArraySet.)) (! (= (ens%lib!array_set.impl&%0.init. N&. N& pre%self! self!) (and (has_type (Poly%lib!array_set.ArraySet. self!) (TYPE%lib!array_set.ArraySet. N&. N&)) (lib!array_set.impl&%0.wf.? N&. N& (Poly%lib!array_set.ArraySet. self!)) (= (lib!array_set.impl&%0.view.? N&. N& (Poly%lib!array_set.ArraySet. self!)) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.empty.? $ (UINT SZ)))))) :pattern ((ens%lib!array_set.impl&%0.init. N&. N& pre%self! self!)) )))
(declare-const N&. Dcr)
(declare-const N& Type)
(declare-const self!@0 lib!array_set.ArraySet.)
(declare-const tmp%1 Poly)
(declare-const tmp%2 Poly)
(declare-const tmp%3 core!ops.range.Range.)
(declare-const VERUS_loop_val@ Int)
(declare-const tmp%%$1@ core!option.Option.)
(declare-const VERUS_loop_next@0 Int)
(declare-const i@ Int)
(declare-const tmp%%$2@ tuple%0.)
(declare-const VERUS_ghost_iter@0 vstd!std_specs.range.RangeGhostIterator.)
(declare-const VERUS_exec_iter@0 core!ops.range.Range.)
(declare-const tmp%%@ core!ops.range.Range.)
(declare-const VERUS_loop_result@ tuple%0.)
(assert fuel_defaults)
(assert (uInv SZ (const_int N&)))
(assert (has_type (Poly%lib!array_set.ArraySet. self!@0) (TYPE%lib!array_set.ArraySet. N&. N&)))
(assert (has_type tmp%1 (TYPE%vstd!set.Set. $ (UINT SZ))))
(assert (has_type tmp%2 (TYPE%core!ops.range.Range. $ (UINT SZ))))
(assert (has_type (Poly%core!ops.range.Range. tmp%3) (TYPE%core!ops.range.Range. $ (UINT SZ))))
(assert (has_type (Poly%core!ops.range.Range. tmp%%@) (TYPE%core!ops.range.Range. $ (UINT SZ))))
(assert (has_type (Poly%core!ops.range.Range. VERUS_exec_iter@0) (TYPE%core!ops.range.Range. $ (UINT SZ))))
(assert (has_type (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ))))
(declare-const self!@1 lib!array_set.ArraySet.)
(declare-const VERUS_exec_iter@1 core!ops.range.Range.)
(declare-const VERUS_loop_next@1 Int)
(declare-const self!@2 lib!array_set.ArraySet.)
(declare-const VERUS_ghost_iter@1 vstd!std_specs.range.RangeGhostIterator.)
(declare-const %%switch_label%%0 Bool)
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(declare-const %%location_label%%3 Bool)
(declare-const %%location_label%%4 Bool)
(declare-const %%location_label%%5 Bool)
(declare-const %%location_label%%6 Bool)
(declare-const %%location_label%%7 Bool)
(declare-const %%location_label%%8 Bool)
(declare-const %%location_label%%9 Bool)
(declare-const %%location_label%%10 Bool)
(declare-const %%location_label%%11 Bool)
(declare-const %%location_label%%12 Bool)
(declare-const %%location_label%%13 Bool)
(declare-const %%location_label%%14 Bool)
(declare-const %%location_label%%15 Bool)
(assert (not (=> (has_type (Poly%lib!array_set.ArraySet. self!@1) (TYPE%lib!array_set.ArraySet. N&. N&)) (=> (%B (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (Poly%core!ops.range.Range. VERUS_exec_iter@0))) (=> (%B (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (Poly%core!option.Option. (core!option.Option./Some (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (vstd!std_specs.core.iter_into_iter_spec.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I 0) (I (const_int N&)))))))))) (=> (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (and (<= 0 i$) (<= i$ (const_int N&)))) (=> (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (lib!array.impl&%0.wf.? $ BOOL N&. N& (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1)))))) (=> (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (= (lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1))) 0)) (=> (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (= (lib!array_set.ArraySet./ArraySet/set (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1))) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.empty.? $ (UINT SZ))))) (=> (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) i$)) (= (%B (vstd!seq.Seq.index.? $ BOOL (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1)))))) j$)) false))) :pattern ((vstd!seq.Seq.index.? $ BOOL (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1)))))) j$)) ))) (=> (has_type (Poly%core!ops.range.Range. VERUS_exec_iter@1) (TYPE%core!ops.range.Range. $ (UINT SZ))) (=> (ens%core!iter.range.impl&%6.next. $ (UINT SZ) VERUS_exec_iter@0 VERUS_exec_iter@1 tmp%%$1@) (or (and (=> (is-core!option.Option./Some_ tmp%%$1@) (=> (= VERUS_loop_val@ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1@))))) (=> (= VERUS_loop_next@1 VERUS_loop_val@) %%switch_label%%0))) (=> (not (is-core!option.Option./Some_ tmp%%$1@)) (and (=> %%location_label%%0 (%B (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (Poly%core!ops.range.Range. VERUS_exec_iter@1)))) (and (=> %%location_label%%1 (%B (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (Poly%core!option.Option. (core!option.Option./Some (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (vstd!std_specs.core.iter_into_iter_spec.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I 0) (I (const_int N&))))))))))) (and (=> %%location_label%%2 (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (and (<= 0 i$) (<= i$ (const_int N&))))) (and (=> %%location_label%%3 (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (lib!array.impl&%0.wf.? $ BOOL N&. N& (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1))))))) (and (=> %%location_label%%4 (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (= (lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1))) 0))) (and (=> %%location_label%%5 (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (= (lib!array_set.ArraySet./ArraySet/set (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1))) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.empty.? $ (UINT SZ)))))) (and (=> %%location_label%%6 (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) i$)) (= (%B (vstd!seq.Seq.index.? $ BOOL (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1)))))) j$)) false))) :pattern ((vstd!seq.Seq.index.? $ BOOL (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1)))))) j$)) )))) (=> %%location_label%%7 (%B (vstd!pervasive.ForLoopGhostIterator.ghost_ensures.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0))))))))))))) (and (not %%switch_label%%0) (=> (= i@ VERUS_loop_next@1) (and (=> %%location_label%%8 (req%lib!array.impl&%1.set. $ BOOL N&. N& (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1))) i@ (B false))) (=> (and (= (lib!array_set.ArraySet./ArraySet/len self!@1) (lib!array_set.ArraySet./ArraySet/len self!@2)) (= (lib!array_set.ArraySet./ArraySet/set self!@1) (lib!array_set.ArraySet./ArraySet/set self!@2))) (=> (has_type (Poly%lib!array_set.ArraySet. self!@2) (TYPE%lib!array_set.ArraySet. N&. N&)) (=> (ens%lib!array.impl&%1.set. $ BOOL N&. N& (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@1))) (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@2))) i@ (B false)) (=> (= tmp%%$2@ tuple%0./tuple%0) (=> (= VERUS_ghost_iter@1 (%Poly%vstd!std_specs.range.RangeGhostIterator. (vstd!pervasive.ForLoopGhostIterator.ghost_advance.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@0) (Poly%core!ops.range.Range. VERUS_exec_iter@1)))) (and (=> %%location_label%%9 (%B (vstd!pervasive.ForLoopGhostIterator.exec_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1) (Poly%core!ops.range.Range. VERUS_exec_iter@1)))) (and (=> %%location_label%%10 (%B (vstd!pervasive.ForLoopGhostIterator.ghost_invariant.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1) (Poly%core!option.Option. (core!option.Option./Some (vstd!pervasive.ForLoopGhostIteratorNew.ghost_iter.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (vstd!std_specs.core.iter_into_iter_spec.? $ (TYPE%core!ops.range.Range. $ (UINT SZ)) (Poly%core!ops.range.Range. (core!ops.range.Range./Range (I 0) (I (const_int N&))))))))))) (and (=> %%location_label%%11 (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (and (<= 0 i$) (<= i$ (const_int N&))))) (and (=> %%location_label%%12 (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (lib!array.impl&%0.wf.? $ BOOL N&. N& (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@2))))))) (and (=> %%location_label%%13 (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (= (lib!array_set.ArraySet./ArraySet/len (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@2))) 0))) (and (=> %%location_label%%14 (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (= (lib!array_set.ArraySet./ArraySet/set (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@2))) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.empty.? $ (UINT SZ)))))) (=> %%location_label%%15 (let ((i$ (ite (is-core!option.Option./Some_ (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1)))) (let ((t$$0 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (vstd!pervasive.ForLoopGhostIterator.ghost_peek_next.? $ (TYPE%vstd!std_specs.range.RangeGhostIterator. $ (UINT SZ)) (Poly%vstd!std_specs.range.RangeGhostIterator. VERUS_ghost_iter@1))))))) t$$0) (%I (vstd!pervasive.arbitrary.? $ (UINT SZ)))))) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) i$)) (= (%B (vstd!seq.Seq.index.? $ BOOL (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@2)))))) j$)) false))) :pattern ((vstd!seq.Seq.index.? $ BOOL (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_set.ArraySet./ArraySet/data (%Poly%lib!array_set.ArraySet. (Poly%lib!array_set.ArraySet. self!@2)))))) j$)) )))))))))))))))))))))))))))))))
(check-sat)
(exit)
