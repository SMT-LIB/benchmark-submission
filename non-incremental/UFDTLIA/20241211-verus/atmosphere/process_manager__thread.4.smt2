(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module process_manager::thread'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_dev. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_endpoint_index. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_bus. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_len. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_fun. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_va_range. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_va. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_Message_va. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_Message_len. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_Pages_va_range. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_Endpoint_endpoint_index. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_Pci_bus. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_Pci_dev. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%2.arrow_Pci_fun. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%3.is_Some. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%3.is_None. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_message. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_endpoint. FuelId)
(declare-const fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_pci. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%lib!process_manager.thread.impl&%2.arrow_dev. fuel%lib!process_manager.thread.impl&%2.arrow_endpoint_index. fuel%lib!process_manager.thread.impl&%2.arrow_bus. fuel%lib!process_manager.thread.impl&%2.arrow_len. fuel%lib!process_manager.thread.impl&%2.arrow_fun. fuel%lib!process_manager.thread.impl&%2.arrow_va_range. fuel%lib!process_manager.thread.impl&%2.arrow_va. fuel%lib!process_manager.thread.impl&%2.arrow_Message_va. fuel%lib!process_manager.thread.impl&%2.arrow_Message_len. fuel%lib!process_manager.thread.impl&%2.arrow_Pages_va_range. fuel%lib!process_manager.thread.impl&%2.arrow_Endpoint_endpoint_index. fuel%lib!process_manager.thread.impl&%2.arrow_Pci_bus. fuel%lib!process_manager.thread.impl&%2.arrow_Pci_dev. fuel%lib!process_manager.thread.impl&%2.arrow_Pci_fun. fuel%lib!process_manager.thread.impl&%3.is_Some. fuel%lib!process_manager.thread.impl&%3.is_None. fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_message. fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range. fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_endpoint. fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_pci. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<usize.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!process_manager.thread.Thread. 0) (lib!process_manager.thread.IPCPayLoad. 0) (lib!define.ThreadState. 0) (lib!define.RetValueType. 0) (lib!trap.TrapFrameOption. 0) (lib!trap.Registers. 0) (lib!array.Array. 0) (lib!va_range.VaRange4K. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!process_manager.thread.Thread./Thread (lib!process_manager.thread.Thread./Thread/?owning_container Int) (lib!process_manager.thread.Thread./Thread/?owning_proc Int) (lib!process_manager.thread.Thread./Thread/?state lib!define.ThreadState.) (lib!process_manager.thread.Thread./Thread/?proc_rev_ptr Int) (lib!process_manager.thread.Thread./Thread/?scheduler_rev_ptr core!option.Option.) (lib!process_manager.thread.Thread./Thread/?blocking_endpoint_ptr core!option.Option.) (lib!process_manager.thread.Thread./Thread/?endpoint_rev_ptr core!option.Option.) (lib!process_manager.thread.Thread./Thread/?running_cpu core!option.Option.) (lib!process_manager.thread.Thread./Thread/?endpoint_descriptors lib!array.Array.) (lib!process_manager.thread.Thread./Thread/?ipc_payload lib!process_manager.thread.IPCPayLoad.) (lib!process_manager.thread.Thread./Thread/?error_code core!option.Option.) (lib!process_manager.thread.Thread./Thread/?trap_frame lib!trap.TrapFrameOption.))) ((lib!process_manager.thread.IPCPayLoad./Message (lib!process_manager.thread.IPCPayLoad./Message/?va Int) (lib!process_manager.thread.IPCPayLoad./Message/?len Int)) (lib!process_manager.thread.IPCPayLoad./Pages (lib!process_manager.thread.IPCPayLoad./Pages/?va_range lib!va_range.VaRange4K.)) (lib!process_manager.thread.IPCPayLoad./Endpoint (lib!process_manager.thread.IPCPayLoad./Endpoint/?endpoint_index Int)) (lib!process_manager.thread.IPCPayLoad./Pci (lib!process_manager.thread.IPCPayLoad./Pci/?bus Int) (lib!process_manager.thread.IPCPayLoad./Pci/?dev Int) (lib!process_manager.thread.IPCPayLoad./Pci/?fun Int)) (lib!process_manager.thread.IPCPayLoad./Empty )) ((lib!define.ThreadState./SCHEDULED ) (lib!define.ThreadState./BLOCKED ) (lib!define.ThreadState./RUNNING ) (lib!define.ThreadState./TRANSIT )) ((lib!define.RetValueType./SuccessUsize (lib!define.RetValueType./SuccessUsize/?value Int)) (lib!define.RetValueType./SuccessSeqUsize (lib!define.RetValueType./SuccessSeqUsize/?value vstd!seq.Seq<usize.>.)) (lib!define.RetValueType./SuccessPairUsize (lib!define.RetValueType./SuccessPairUsize/?value1 Int) (lib!define.RetValueType./SuccessPairUsize/?value2 Int)) (lib!define.RetValueType./SuccessThreeUsize (lib!define.RetValueType./SuccessThreeUsize/?value1 Int) (lib!define.RetValueType./SuccessThreeUsize/?value2 Int) (lib!define.RetValueType./SuccessThreeUsize/?value3 Int)) (lib!define.RetValueType./CpuIdle ) (lib!define.RetValueType./Error ) (lib!define.RetValueType./Else )) ((lib!trap.TrapFrameOption./TrapFrameOption (lib!trap.TrapFrameOption./TrapFrameOption/?reg lib!trap.Registers.) (lib!trap.TrapFrameOption./TrapFrameOption/?exists Bool))) ((lib!trap.Registers./Registers (lib!trap.Registers./Registers/?r15 Int) (lib!trap.Registers./Registers/?r14 Int) (lib!trap.Registers./Registers/?r13 Int) (lib!trap.Registers./Registers/?r12 Int) (lib!trap.Registers./Registers/?rbp Int) (lib!trap.Registers./Registers/?rbx Int) (lib!trap.Registers./Registers/?r11 Int) (lib!trap.Registers./Registers/?r10 Int) (lib!trap.Registers./Registers/?r9 Int) (lib!trap.Registers./Registers/?r8 Int) (lib!trap.Registers./Registers/?rcx Int) (lib!trap.Registers./Registers/?rdx Int) (lib!trap.Registers./Registers/?rsi Int) (lib!trap.Registers./Registers/?rdi Int) (lib!trap.Registers./Registers/?rax Int) (lib!trap.Registers./Registers/?error_code Int) (lib!trap.Registers./Registers/?rip Int) (lib!trap.Registers./Registers/?cs Int) (lib!trap.Registers./Registers/?flags Int) (lib!trap.Registers./Registers/?rsp Int) (lib!trap.Registers./Registers/?ss Int))) ((lib!array.Array./Array (lib!array.Array./Array/?seq Poly) (lib!array.Array./Array/?ar %%Function%%))) ((lib!va_range.VaRange4K./VaRange4K (lib!va_range.VaRange4K./VaRange4K/?start Int) (lib!va_range.VaRange4K./VaRange4K/?len Int) (lib!va_range.VaRange4K./VaRange4K/?view vstd!seq.Seq<usize.>.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!process_manager.thread.Thread./Thread/owning_container (lib!process_manager.thread.Thread.) Int)
(declare-fun lib!process_manager.thread.Thread./Thread/owning_proc (lib!process_manager.thread.Thread.) Int)
(declare-fun lib!process_manager.thread.Thread./Thread/state (lib!process_manager.thread.Thread.) lib!define.ThreadState.)
(declare-fun lib!process_manager.thread.Thread./Thread/proc_rev_ptr (lib!process_manager.thread.Thread.) Int)
(declare-fun lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/running_cpu (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/endpoint_descriptors (lib!process_manager.thread.Thread.) lib!array.Array.)
(declare-fun lib!process_manager.thread.Thread./Thread/ipc_payload (lib!process_manager.thread.Thread.) lib!process_manager.thread.IPCPayLoad.)
(declare-fun lib!process_manager.thread.Thread./Thread/error_code (lib!process_manager.thread.Thread.) core!option.Option.)
(declare-fun lib!process_manager.thread.Thread./Thread/trap_frame (lib!process_manager.thread.Thread.) lib!trap.TrapFrameOption.)
(declare-fun lib!process_manager.thread.IPCPayLoad./Message/va (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Message/len (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pages/va_range (lib!process_manager.thread.IPCPayLoad.) lib!va_range.VaRange4K.)
(declare-fun lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pci/bus (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pci/dev (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!process_manager.thread.IPCPayLoad./Pci/fun (lib!process_manager.thread.IPCPayLoad.) Int)
(declare-fun lib!define.RetValueType./SuccessUsize/value (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessSeqUsize/value (lib!define.RetValueType.) vstd!seq.Seq<usize.>.)
(declare-fun lib!define.RetValueType./SuccessPairUsize/value1 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessPairUsize/value2 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value1 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value2 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value3 (lib!define.RetValueType.) Int)
(declare-fun lib!trap.TrapFrameOption./TrapFrameOption/reg (lib!trap.TrapFrameOption.) lib!trap.Registers.)
(declare-fun lib!trap.TrapFrameOption./TrapFrameOption/exists (lib!trap.TrapFrameOption.) Bool)
(declare-fun lib!trap.Registers./Registers/r15 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r14 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r13 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r12 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rbp (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rbx (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r11 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r10 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r9 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/r8 (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rcx (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rdx (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rsi (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rdi (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rax (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/error_code (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rip (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/cs (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/flags (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/rsp (lib!trap.Registers.) Int)
(declare-fun lib!trap.Registers./Registers/ss (lib!trap.Registers.) Int)
(declare-fun lib!array.Array./Array/seq (lib!array.Array.) Poly)
(declare-fun lib!array.Array./Array/ar (lib!array.Array.) %%Function%%)
(declare-fun lib!va_range.VaRange4K./VaRange4K/start (lib!va_range.VaRange4K.) Int)
(declare-fun lib!va_range.VaRange4K./VaRange4K/len (lib!va_range.VaRange4K.) Int)
(declare-fun lib!va_range.VaRange4K./VaRange4K/view (lib!va_range.VaRange4K.) vstd!seq.Seq<usize.>.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%lib!process_manager.thread.Thread. Type)
(declare-const TYPE%lib!process_manager.thread.IPCPayLoad. Type)
(declare-const TYPE%lib!define.ThreadState. Type)
(declare-const TYPE%lib!define.RetValueType. Type)
(declare-const TYPE%lib!trap.TrapFrameOption. Type)
(declare-const TYPE%lib!trap.Registers. Type)
(declare-fun TYPE%lib!array.Array. (Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!va_range.VaRange4K. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<usize.>. (vstd!seq.Seq<usize.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<usize.>. (Poly) vstd!seq.Seq<usize.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!process_manager.thread.Thread. (lib!process_manager.thread.Thread.) Poly)
(declare-fun %Poly%lib!process_manager.thread.Thread. (Poly) lib!process_manager.thread.Thread.)
(declare-fun Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad.) Poly)
(declare-fun %Poly%lib!process_manager.thread.IPCPayLoad. (Poly) lib!process_manager.thread.IPCPayLoad.)
(declare-fun Poly%lib!define.ThreadState. (lib!define.ThreadState.) Poly)
(declare-fun %Poly%lib!define.ThreadState. (Poly) lib!define.ThreadState.)
(declare-fun Poly%lib!define.RetValueType. (lib!define.RetValueType.) Poly)
(declare-fun %Poly%lib!define.RetValueType. (Poly) lib!define.RetValueType.)
(declare-fun Poly%lib!trap.TrapFrameOption. (lib!trap.TrapFrameOption.) Poly)
(declare-fun %Poly%lib!trap.TrapFrameOption. (Poly) lib!trap.TrapFrameOption.)
(declare-fun Poly%lib!trap.Registers. (lib!trap.Registers.) Poly)
(declare-fun %Poly%lib!trap.Registers. (Poly) lib!trap.Registers.)
(declare-fun Poly%lib!array.Array. (lib!array.Array.) Poly)
(declare-fun %Poly%lib!array.Array. (Poly) lib!array.Array.)
(declare-fun Poly%lib!va_range.VaRange4K. (lib!va_range.VaRange4K.) Poly)
(declare-fun %Poly%lib!va_range.VaRange4K. (Poly) lib!va_range.VaRange4K.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (= x (%Poly%vstd!seq.Seq<usize.>. (Poly%vstd!seq.Seq<usize.>. x))) :pattern ((Poly%vstd!seq.Seq<usize.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ))) (= x (Poly%vstd!seq.Seq<usize.>. (%Poly%vstd!seq.Seq<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ)))) )))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ)))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= x (%Poly%lib!process_manager.thread.Thread. (Poly%lib!process_manager.thread.Thread. x))) :pattern ((Poly%lib!process_manager.thread.Thread. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (= x (Poly%lib!process_manager.thread.Thread. (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((_owning_container! Int) (_owning_proc! Int) (_state! lib!define.ThreadState.) (_proc_rev_ptr! Int) (_scheduler_rev_ptr! core!option.Option.) (_blocking_endpoint_ptr! core!option.Option.) (_endpoint_rev_ptr! core!option.Option.) (_running_cpu! core!option.Option.) (_endpoint_descriptors! lib!array.Array.) (_ipc_payload! lib!process_manager.thread.IPCPayLoad.) (_error_code! core!option.Option.) (_trap_frame! lib!trap.TrapFrameOption.)) (! (=> (and (uInv SZ _owning_container!) (uInv SZ _owning_proc!) (iInv 32 _proc_rev_ptr!) (has_type (Poly%core!option.Option. _scheduler_rev_ptr!) (TYPE%core!option.Option. $ (SINT 32))) (has_type (Poly%core!option.Option. _blocking_endpoint_ptr!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%core!option.Option. _endpoint_rev_ptr!) (TYPE%core!option.Option. $ (SINT 32))) (has_type (Poly%core!option.Option. _running_cpu!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%lib!array.Array. _endpoint_descriptors!) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128))) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. _ipc_payload!) TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%core!option.Option. _error_code!) (TYPE%core!option.Option. $ TYPE%lib!define.RetValueType.)) (has_type (Poly%lib!trap.TrapFrameOption. _trap_frame!) TYPE%lib!trap.TrapFrameOption.)) (has_type (Poly%lib!process_manager.thread.Thread. (lib!process_manager.thread.Thread./Thread _owning_container! _owning_proc! _state! _proc_rev_ptr! _scheduler_rev_ptr! _blocking_endpoint_ptr! _endpoint_rev_ptr! _running_cpu! _endpoint_descriptors! _ipc_payload! _error_code! _trap_frame!)) TYPE%lib!process_manager.thread.Thread.)) :pattern ((has_type (Poly%lib!process_manager.thread.Thread. (lib!process_manager.thread.Thread./Thread _owning_container! _owning_proc! _state! _proc_rev_ptr! _scheduler_rev_ptr! _blocking_endpoint_ptr! _endpoint_rev_ptr! _running_cpu! _endpoint_descriptors! _ipc_payload! _error_code! _trap_frame!)) TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/owning_container x) (lib!process_manager.thread.Thread./Thread/?owning_container x)) :pattern ((lib!process_manager.thread.Thread./Thread/owning_container x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (uInv SZ (lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((lib!process_manager.thread.Thread./Thread/owning_container (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/owning_proc x) (lib!process_manager.thread.Thread./Thread/?owning_proc x)) :pattern ((lib!process_manager.thread.Thread./Thread/owning_proc x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (uInv SZ (lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((lib!process_manager.thread.Thread./Thread/owning_proc (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/state x) (lib!process_manager.thread.Thread./Thread/?state x)) :pattern ((lib!process_manager.thread.Thread./Thread/state x)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/proc_rev_ptr x) (lib!process_manager.thread.Thread./Thread/?proc_rev_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/proc_rev_ptr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (iInv 32 (lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)))) :pattern ((lib!process_manager.thread.Thread./Thread/proc_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr x) (lib!process_manager.thread.Thread./Thread/?scheduler_rev_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (SINT 32)))) :pattern ((lib!process_manager.thread.Thread./Thread/scheduler_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr x) (lib!process_manager.thread.Thread./Thread/?blocking_endpoint_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.thread.Thread./Thread/blocking_endpoint_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr x) (lib!process_manager.thread.Thread./Thread/?endpoint_rev_ptr x)) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (SINT 32)))) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_rev_ptr (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/running_cpu x) (lib!process_manager.thread.Thread./Thread/?running_cpu x)) :pattern ((lib!process_manager.thread.Thread./Thread/running_cpu x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.thread.Thread./Thread/running_cpu (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/endpoint_descriptors x) (lib!process_manager.thread.Thread./Thread/?endpoint_descriptors x)) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_descriptors x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%lib!array.Array. (lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%lib!array.Array. $ (TYPE%core!option.Option. $ (UINT SZ)) $ (CONST_INT 128)))) :pattern ((lib!process_manager.thread.Thread./Thread/endpoint_descriptors (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/ipc_payload x) (lib!process_manager.thread.Thread./Thread/?ipc_payload x)) :pattern ((lib!process_manager.thread.Thread./Thread/ipc_payload x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. x))) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((lib!process_manager.thread.Thread./Thread/ipc_payload (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/error_code x) (lib!process_manager.thread.Thread./Thread/?error_code x)) :pattern ((lib!process_manager.thread.Thread./Thread/error_code x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. x))) (TYPE%core!option.Option. $ TYPE%lib!define.RetValueType.))) :pattern ((lib!process_manager.thread.Thread./Thread/error_code (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.Thread.)) (! (= (lib!process_manager.thread.Thread./Thread/trap_frame x) (lib!process_manager.thread.Thread./Thread/?trap_frame x)) :pattern ((lib!process_manager.thread.Thread./Thread/trap_frame x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.Thread.) (has_type (Poly%lib!trap.TrapFrameOption. (lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. x))) TYPE%lib!trap.TrapFrameOption.)) :pattern ((lib!process_manager.thread.Thread./Thread/trap_frame (%Poly%lib!process_manager.thread.Thread. x)) (has_type x TYPE%lib!process_manager.thread.Thread.)) )))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= x (%Poly%lib!process_manager.thread.IPCPayLoad. (Poly%lib!process_manager.thread.IPCPayLoad. x))) :pattern ((Poly%lib!process_manager.thread.IPCPayLoad. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (= x (Poly%lib!process_manager.thread.IPCPayLoad. (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (forall ((_va! Int) (_len! Int)) (! (=> (and (uInv SZ _va!) (uInv SZ _len!)) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Message _va! _len!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Message _va! _len!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Message/va x) (lib!process_manager.thread.IPCPayLoad./Message/?va x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/va x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.IPCPayLoad./Message/va (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/va (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Message/len x) (lib!process_manager.thread.IPCPayLoad./Message/?len x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/len x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.IPCPayLoad./Message/len (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Message/len (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (forall ((_va_range! lib!va_range.VaRange4K.)) (! (=> (has_type (Poly%lib!va_range.VaRange4K. _va_range!) TYPE%lib!va_range.VaRange4K.) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pages _va_range!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pages _va_range!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pages/va_range x) (lib!process_manager.thread.IPCPayLoad./Pages/?va_range x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pages/va_range x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%lib!va_range.VaRange4K. (lib!process_manager.thread.IPCPayLoad./Pages/va_range (%Poly%lib!process_manager.thread.IPCPayLoad. x))) TYPE%lib!va_range.VaRange4K.)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pages/va_range (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (forall ((_endpoint_index! Int)) (! (=> (uInv SZ _endpoint_index!) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Endpoint _endpoint_index!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Endpoint _endpoint_index!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index x) (lib!process_manager.thread.IPCPayLoad./Endpoint/?endpoint_index x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (forall ((_bus! Int) (_dev! Int) (_fun! Int)) (! (=> (and (uInv 8 _bus!) (uInv 8 _dev!) (uInv 8 _fun!)) (has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pci _bus! _dev! _fun!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) :pattern ((has_type (Poly%lib!process_manager.thread.IPCPayLoad. (lib!process_manager.thread.IPCPayLoad./Pci _bus! _dev! _fun!)) TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pci/bus x) (lib!process_manager.thread.IPCPayLoad./Pci/?bus x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/bus x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.IPCPayLoad./Pci/bus (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/bus (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pci/dev x) (lib!process_manager.thread.IPCPayLoad./Pci/?dev x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/dev x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.IPCPayLoad./Pci/dev (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/dev (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (forall ((x lib!process_manager.thread.IPCPayLoad.)) (! (= (lib!process_manager.thread.IPCPayLoad./Pci/fun x) (lib!process_manager.thread.IPCPayLoad./Pci/?fun x)) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/fun x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.IPCPayLoad./Pci/fun (%Poly%lib!process_manager.thread.IPCPayLoad. x)))) :pattern ((lib!process_manager.thread.IPCPayLoad./Pci/fun (%Poly%lib!process_manager.thread.IPCPayLoad. x)) (has_type x TYPE%lib!process_manager.thread.IPCPayLoad.)) )))
(assert (has_type (Poly%lib!process_manager.thread.IPCPayLoad. lib!process_manager.thread.IPCPayLoad./Empty) TYPE%lib!process_manager.thread.IPCPayLoad.))
(assert (forall ((x lib!define.ThreadState.)) (! (= x (%Poly%lib!define.ThreadState. (Poly%lib!define.ThreadState. x))) :pattern ((Poly%lib!define.ThreadState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.ThreadState.) (= x (Poly%lib!define.ThreadState. (%Poly%lib!define.ThreadState. x)))) :pattern ((has_type x TYPE%lib!define.ThreadState.)) )))
(assert (forall ((x lib!define.ThreadState.)) (! (has_type (Poly%lib!define.ThreadState. x) TYPE%lib!define.ThreadState.) :pattern ((has_type (Poly%lib!define.ThreadState. x) TYPE%lib!define.ThreadState.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= x (%Poly%lib!define.RetValueType. (Poly%lib!define.RetValueType. x))) :pattern ((Poly%lib!define.RetValueType. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (= x (Poly%lib!define.RetValueType. (%Poly%lib!define.RetValueType. x)))) :pattern ((has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((_value! Int)) (! (=> (uInv SZ _value!) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessUsize _value!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessUsize _value!)) TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessUsize/value x) (lib!define.RetValueType./SuccessUsize/?value x)) :pattern ((lib!define.RetValueType./SuccessUsize/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessUsize/value (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessUsize/value (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((_value! vstd!seq.Seq<usize.>.)) (! (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessSeqUsize _value!)) TYPE%lib!define.RetValueType.) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessSeqUsize _value!)) TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessSeqUsize/value x) (lib!define.RetValueType./SuccessSeqUsize/?value x)) :pattern ((lib!define.RetValueType./SuccessSeqUsize/value x)) )))
(assert (forall ((_value1! Int) (_value2! Int)) (! (=> (and (uInv SZ _value1!) (uInv SZ _value2!)) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessPairUsize _value1! _value2!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessPairUsize _value1! _value2!)) TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessPairUsize/value1 x) (lib!define.RetValueType./SuccessPairUsize/?value1 x)) :pattern ((lib!define.RetValueType./SuccessPairUsize/value1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessPairUsize/value1 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessPairUsize/value1 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessPairUsize/value2 x) (lib!define.RetValueType./SuccessPairUsize/?value2 x)) :pattern ((lib!define.RetValueType./SuccessPairUsize/value2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessPairUsize/value2 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessPairUsize/value2 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((_value1! Int) (_value2! Int) (_value3! Int)) (! (=> (and (uInv SZ _value1!) (uInv SZ _value2!) (uInv SZ _value3!)) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessThreeUsize _value1! _value2! _value3!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessThreeUsize _value1! _value2! _value3!)) TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value1 x) (lib!define.RetValueType./SuccessThreeUsize/?value1 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value1 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value1 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value2 x) (lib!define.RetValueType./SuccessThreeUsize/?value2 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value2 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value2 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value3 x) (lib!define.RetValueType./SuccessThreeUsize/?value3 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value3 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value3 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value3 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./CpuIdle) TYPE%lib!define.RetValueType.))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./Error) TYPE%lib!define.RetValueType.))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./Else) TYPE%lib!define.RetValueType.))
(assert (forall ((x lib!trap.TrapFrameOption.)) (! (= x (%Poly%lib!trap.TrapFrameOption. (Poly%lib!trap.TrapFrameOption. x))) :pattern ((Poly%lib!trap.TrapFrameOption. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.TrapFrameOption.) (= x (Poly%lib!trap.TrapFrameOption. (%Poly%lib!trap.TrapFrameOption. x)))) :pattern ((has_type x TYPE%lib!trap.TrapFrameOption.)) )))
(assert (forall ((_reg! lib!trap.Registers.) (_exists! Bool)) (! (=> (has_type (Poly%lib!trap.Registers. _reg!) TYPE%lib!trap.Registers.) (has_type (Poly%lib!trap.TrapFrameOption. (lib!trap.TrapFrameOption./TrapFrameOption _reg! _exists!)) TYPE%lib!trap.TrapFrameOption.)) :pattern ((has_type (Poly%lib!trap.TrapFrameOption. (lib!trap.TrapFrameOption./TrapFrameOption _reg! _exists!)) TYPE%lib!trap.TrapFrameOption.)) )))
(assert (forall ((x lib!trap.TrapFrameOption.)) (! (= (lib!trap.TrapFrameOption./TrapFrameOption/reg x) (lib!trap.TrapFrameOption./TrapFrameOption/?reg x)) :pattern ((lib!trap.TrapFrameOption./TrapFrameOption/reg x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.TrapFrameOption.) (has_type (Poly%lib!trap.Registers. (lib!trap.TrapFrameOption./TrapFrameOption/reg (%Poly%lib!trap.TrapFrameOption. x))) TYPE%lib!trap.Registers.)) :pattern ((lib!trap.TrapFrameOption./TrapFrameOption/reg (%Poly%lib!trap.TrapFrameOption. x)) (has_type x TYPE%lib!trap.TrapFrameOption.)) )))
(assert (forall ((x lib!trap.TrapFrameOption.)) (! (= (lib!trap.TrapFrameOption./TrapFrameOption/exists x) (lib!trap.TrapFrameOption./TrapFrameOption/?exists x)) :pattern ((lib!trap.TrapFrameOption./TrapFrameOption/exists x)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= x (%Poly%lib!trap.Registers. (Poly%lib!trap.Registers. x))) :pattern ((Poly%lib!trap.Registers. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (= x (Poly%lib!trap.Registers. (%Poly%lib!trap.Registers. x)))) :pattern ((has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((_r15! Int) (_r14! Int) (_r13! Int) (_r12! Int) (_rbp! Int) (_rbx! Int) (_r11! Int) (_r10! Int) (_r9! Int) (_r8! Int) (_rcx! Int) (_rdx! Int) (_rsi! Int) (_rdi! Int) (_rax! Int) (_error_code! Int) (_rip! Int) (_cs! Int) (_flags! Int) (_rsp! Int) (_ss! Int)) (! (=> (and (uInv 64 _r15!) (uInv 64 _r14!) (uInv 64 _r13!) (uInv 64 _r12!) (uInv 64 _rbp!) (uInv 64 _rbx!) (uInv 64 _r11!) (uInv 64 _r10!) (uInv 64 _r9!) (uInv 64 _r8!) (uInv 64 _rcx!) (uInv 64 _rdx!) (uInv 64 _rsi!) (uInv 64 _rdi!) (uInv 64 _rax!) (uInv 64 _error_code!) (uInv 64 _rip!) (uInv 64 _cs!) (uInv 64 _flags!) (uInv 64 _rsp!) (uInv 64 _ss!)) (has_type (Poly%lib!trap.Registers. (lib!trap.Registers./Registers _r15! _r14! _r13! _r12! _rbp! _rbx! _r11! _r10! _r9! _r8! _rcx! _rdx! _rsi! _rdi! _rax! _error_code! _rip! _cs! _flags! _rsp! _ss!)) TYPE%lib!trap.Registers.)) :pattern ((has_type (Poly%lib!trap.Registers. (lib!trap.Registers./Registers _r15! _r14! _r13! _r12! _rbp! _rbx! _r11! _r10! _r9! _r8! _rcx! _rdx! _rsi! _rdi! _rax! _error_code! _rip! _cs! _flags! _rsp! _ss!)) TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r15 x) (lib!trap.Registers./Registers/?r15 x)) :pattern ((lib!trap.Registers./Registers/r15 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r15 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r15 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r14 x) (lib!trap.Registers./Registers/?r14 x)) :pattern ((lib!trap.Registers./Registers/r14 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r14 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r14 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r13 x) (lib!trap.Registers./Registers/?r13 x)) :pattern ((lib!trap.Registers./Registers/r13 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r13 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r13 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r12 x) (lib!trap.Registers./Registers/?r12 x)) :pattern ((lib!trap.Registers./Registers/r12 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r12 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r12 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rbp x) (lib!trap.Registers./Registers/?rbp x)) :pattern ((lib!trap.Registers./Registers/rbp x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rbp (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rbp (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rbx x) (lib!trap.Registers./Registers/?rbx x)) :pattern ((lib!trap.Registers./Registers/rbx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rbx (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rbx (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r11 x) (lib!trap.Registers./Registers/?r11 x)) :pattern ((lib!trap.Registers./Registers/r11 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r11 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r11 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r10 x) (lib!trap.Registers./Registers/?r10 x)) :pattern ((lib!trap.Registers./Registers/r10 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r10 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r10 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r9 x) (lib!trap.Registers./Registers/?r9 x)) :pattern ((lib!trap.Registers./Registers/r9 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r9 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r9 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/r8 x) (lib!trap.Registers./Registers/?r8 x)) :pattern ((lib!trap.Registers./Registers/r8 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/r8 (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/r8 (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rcx x) (lib!trap.Registers./Registers/?rcx x)) :pattern ((lib!trap.Registers./Registers/rcx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rcx (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rcx (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rdx x) (lib!trap.Registers./Registers/?rdx x)) :pattern ((lib!trap.Registers./Registers/rdx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rdx (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rdx (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rsi x) (lib!trap.Registers./Registers/?rsi x)) :pattern ((lib!trap.Registers./Registers/rsi x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rsi (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rsi (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rdi x) (lib!trap.Registers./Registers/?rdi x)) :pattern ((lib!trap.Registers./Registers/rdi x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rdi (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rdi (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rax x) (lib!trap.Registers./Registers/?rax x)) :pattern ((lib!trap.Registers./Registers/rax x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rax (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rax (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/error_code x) (lib!trap.Registers./Registers/?error_code x)) :pattern ((lib!trap.Registers./Registers/error_code x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/error_code (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/error_code (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rip x) (lib!trap.Registers./Registers/?rip x)) :pattern ((lib!trap.Registers./Registers/rip x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rip (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rip (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/cs x) (lib!trap.Registers./Registers/?cs x)) :pattern ((lib!trap.Registers./Registers/cs x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/cs (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/cs (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/flags x) (lib!trap.Registers./Registers/?flags x)) :pattern ((lib!trap.Registers./Registers/flags x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/flags (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/flags (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/rsp x) (lib!trap.Registers./Registers/?rsp x)) :pattern ((lib!trap.Registers./Registers/rsp x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/rsp (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/rsp (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!trap.Registers.)) (! (= (lib!trap.Registers./Registers/ss x) (lib!trap.Registers./Registers/?ss x)) :pattern ((lib!trap.Registers./Registers/ss x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!trap.Registers.) (uInv 64 (lib!trap.Registers./Registers/ss (%Poly%lib!trap.Registers. x)))) :pattern ((lib!trap.Registers./Registers/ss (%Poly%lib!trap.Registers. x)) (has_type x TYPE%lib!trap.Registers.)) )))
(assert (forall ((x lib!array.Array.)) (! (= x (%Poly%lib!array.Array. (Poly%lib!array.Array. x))) :pattern ((Poly%lib!array.Array. x)) )))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (= x (Poly%lib!array.Array. (%Poly%lib!array.Array. x)))) :pattern ((has_type x (TYPE%lib!array.Array. A&. A& N&. N&))) )))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (_seq! Poly) (_ar! %%Function%%)) (! (=> (and (has_type _seq! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (Poly%array%. _ar!) (ARRAY A&. A& N&. N&))) (has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))) :pattern ((has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))) )))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/seq x) (lib!array.Array./Array/?seq x)) :pattern ((lib!array.Array./Array/seq x)) )))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))) )))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/ar x) (lib!array.Array./Array/?ar x)) :pattern ((lib!array.Array./Array/ar x)) )))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (Poly%array%. (lib!array.Array./Array/ar (%Poly%lib!array.Array. x))) (ARRAY A&. A& N&. N&))) :pattern ((lib!array.Array./Array/ar (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))) )))
(define-fun is-lib!array.Array./Array_ ((c lib!array.Array.)) Bool ((_ is lib!array.Array./Array) c))
(assert (forall ((x lib!array.Array.)) (! (=> (is-lib!array.Array./Array_ x) (height_lt (height (lib!array.Array./Array/seq x)) (height (Poly%lib!array.Array. x)))) :pattern ((height (lib!array.Array./Array/seq x))) )))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= x (%Poly%lib!va_range.VaRange4K. (Poly%lib!va_range.VaRange4K. x))) :pattern ((Poly%lib!va_range.VaRange4K. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!va_range.VaRange4K.) (= x (Poly%lib!va_range.VaRange4K. (%Poly%lib!va_range.VaRange4K. x)))) :pattern ((has_type x TYPE%lib!va_range.VaRange4K.)) )))
(assert (forall ((_start! Int) (_len! Int) (_view! vstd!seq.Seq<usize.>.)) (! (=> (and (uInv SZ _start!) (uInv SZ _len!)) (has_type (Poly%lib!va_range.VaRange4K. (lib!va_range.VaRange4K./VaRange4K _start! _len! _view!)) TYPE%lib!va_range.VaRange4K.)) :pattern ((has_type (Poly%lib!va_range.VaRange4K. (lib!va_range.VaRange4K./VaRange4K _start! _len! _view!)) TYPE%lib!va_range.VaRange4K.)) )))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= (lib!va_range.VaRange4K./VaRange4K/start x) (lib!va_range.VaRange4K./VaRange4K/?start x)) :pattern ((lib!va_range.VaRange4K./VaRange4K/start x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!va_range.VaRange4K.) (uInv SZ (lib!va_range.VaRange4K./VaRange4K/start (%Poly%lib!va_range.VaRange4K. x)))) :pattern ((lib!va_range.VaRange4K./VaRange4K/start (%Poly%lib!va_range.VaRange4K. x)) (has_type x TYPE%lib!va_range.VaRange4K.)) )))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= (lib!va_range.VaRange4K./VaRange4K/len x) (lib!va_range.VaRange4K./VaRange4K/?len x)) :pattern ((lib!va_range.VaRange4K./VaRange4K/len x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!va_range.VaRange4K.) (uInv SZ (lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. x)))) :pattern ((lib!va_range.VaRange4K./VaRange4K/len (%Poly%lib!va_range.VaRange4K. x)) (has_type x TYPE%lib!va_range.VaRange4K.)) )))
(assert (forall ((x lib!va_range.VaRange4K.)) (! (= (lib!va_range.VaRange4K./VaRange4K/view x) (lib!va_range.VaRange4K./VaRange4K/?view x)) :pattern ((lib!va_range.VaRange4K./VaRange4K/view x)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)) )))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)) )) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)) )))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))) )))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::is_None")
(declare-fun lib!process_manager.thread.impl&%3.is_None.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_va_range")
(declare-fun lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_dev")
(declare-fun lib!process_manager.thread.impl&%2.arrow_dev.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_endpoint_index")
(declare-fun lib!process_manager.thread.impl&%2.arrow_endpoint_index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_bus")
(declare-fun lib!process_manager.thread.impl&%2.arrow_bus.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_len")
(declare-fun lib!process_manager.thread.impl&%2.arrow_len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_fun")
(declare-fun lib!process_manager.thread.impl&%2.arrow_fun.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_va_range")
(declare-fun lib!process_manager.thread.impl&%2.arrow_va_range.? (Poly) lib!va_range.VaRange4K.)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_va")
(declare-fun lib!process_manager.thread.impl&%2.arrow_va.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_Message_va")
(declare-fun lib!process_manager.thread.impl&%2.arrow_Message_va.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_Message_len")
(declare-fun lib!process_manager.thread.impl&%2.arrow_Message_len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_Pages_va_range")
(declare-fun lib!process_manager.thread.impl&%2.arrow_Pages_va_range.? (Poly) lib!va_range.VaRange4K.)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_Endpoint_endpoint_index")
(declare-fun lib!process_manager.thread.impl&%2.arrow_Endpoint_endpoint_index.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_Pci_bus")
(declare-fun lib!process_manager.thread.impl&%2.arrow_Pci_bus.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_Pci_dev")
(declare-fun lib!process_manager.thread.impl&%2.arrow_Pci_dev.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::arrow_Pci_fun")
(declare-fun lib!process_manager.thread.impl&%2.arrow_Pci_fun.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::is_Some")
(declare-fun lib!process_manager.thread.impl&%3.is_Some.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_message")
(declare-fun lib!process_manager.thread.impl&%3.spec_get_payload_as_message.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_endpoint")
(declare-fun lib!process_manager.thread.impl&%3.spec_get_payload_as_endpoint.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_pci")
(declare-fun lib!process_manager.thread.impl&%3.spec_get_payload_as_pci.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) )))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!))) ))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::is_None")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%3.is_None.))
(define-fun is-lib!process_manager.thread.IPCPayLoad./Empty_ ((c lib!process_manager.thread.IPCPayLoad.)) Bool ((_ is lib!process_manager.thread.IPCPayLoad./Empty) c))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%3.is_None.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%3.is_None.? self!) (is-lib!process_manager.thread.IPCPayLoad./Empty_ (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%3.is_None.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_va_range")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.))
(define-fun is-lib!process_manager.thread.IPCPayLoad./Pages_ ((c lib!process_manager.thread.IPCPayLoad.)) Bool ((_ is lib!process_manager.thread.IPCPayLoad./Pages) c))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!) (ite (is-lib!process_manager.thread.IPCPayLoad./Pages_ (%Poly%lib!process_manager.thread.IPCPayLoad. self!)) (let ((va_range$ (lib!process_manager.thread.IPCPayLoad./Pages/va_range (%Poly%lib!process_manager.thread.IPCPayLoad. self!)))) (core!option.Option./Some (Poly%lib!va_range.VaRange4K. va_range$))) core!option.Option./None)) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!)) (TYPE%core!option.Option. $ TYPE%lib!va_range.VaRange4K.))) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? self!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%30::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%44::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_dev")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_dev.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_dev.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_dev.? self!) (lib!process_manager.thread.IPCPayLoad./Pci/dev (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_dev.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.impl&%2.arrow_dev.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_dev.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_endpoint_index")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_endpoint_index.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_endpoint_index.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_endpoint_index.? self!) (lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_endpoint_index.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.impl&%2.arrow_endpoint_index.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_endpoint_index.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_bus")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_bus.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_bus.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_bus.? self!) (lib!process_manager.thread.IPCPayLoad./Pci/bus (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_bus.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.impl&%2.arrow_bus.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_bus.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_len")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_len.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_len.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_len.? self!) (lib!process_manager.thread.IPCPayLoad./Message/len (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.impl&%2.arrow_len.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_len.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_fun")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_fun.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_fun.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_fun.? self!) (lib!process_manager.thread.IPCPayLoad./Pci/fun (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_fun.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.impl&%2.arrow_fun.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_fun.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_va_range")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_va_range.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_va_range.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_va_range.? self!) (lib!process_manager.thread.IPCPayLoad./Pages/va_range (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_va_range.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%lib!va_range.VaRange4K. (lib!process_manager.thread.impl&%2.arrow_va_range.? self!)) TYPE%lib!va_range.VaRange4K.)) :pattern ((lib!process_manager.thread.impl&%2.arrow_va_range.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_va")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_va.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_va.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_va.? self!) (lib!process_manager.thread.IPCPayLoad./Message/va (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_va.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.impl&%2.arrow_va.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_va.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_Message_va")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_Message_va.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_Message_va.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_Message_va.? self!) (lib!process_manager.thread.IPCPayLoad./Message/va (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Message_va.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.impl&%2.arrow_Message_va.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Message_va.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_Message_len")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_Message_len.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_Message_len.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_Message_len.? self!) (lib!process_manager.thread.IPCPayLoad./Message/len (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Message_len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.impl&%2.arrow_Message_len.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Message_len.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_Pages_va_range")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_Pages_va_range.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_Pages_va_range.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_Pages_va_range.? self!) (lib!process_manager.thread.IPCPayLoad./Pages/va_range (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Pages_va_range.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%lib!va_range.VaRange4K. (lib!process_manager.thread.impl&%2.arrow_Pages_va_range.? self!)) TYPE%lib!va_range.VaRange4K.)) :pattern ((lib!process_manager.thread.impl&%2.arrow_Pages_va_range.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_Endpoint_endpoint_index")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_Endpoint_endpoint_index.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_Endpoint_endpoint_index.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_Endpoint_endpoint_index.? self!) (lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Endpoint_endpoint_index.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv SZ (lib!process_manager.thread.impl&%2.arrow_Endpoint_endpoint_index.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Endpoint_endpoint_index.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_Pci_bus")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_Pci_bus.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_Pci_bus.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_Pci_bus.? self!) (lib!process_manager.thread.IPCPayLoad./Pci/bus (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Pci_bus.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.impl&%2.arrow_Pci_bus.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Pci_bus.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_Pci_dev")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_Pci_dev.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_Pci_dev.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_Pci_dev.? self!) (lib!process_manager.thread.IPCPayLoad./Pci/dev (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Pci_dev.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.impl&%2.arrow_Pci_dev.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Pci_dev.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::arrow_Pci_fun")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%2.arrow_Pci_fun.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%2.arrow_Pci_fun.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%2.arrow_Pci_fun.? self!) (lib!process_manager.thread.IPCPayLoad./Pci/fun (%Poly%lib!process_manager.thread.IPCPayLoad. self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Pci_fun.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (uInv 8 (lib!process_manager.thread.impl&%2.arrow_Pci_fun.? self!))) :pattern ((lib!process_manager.thread.impl&%2.arrow_Pci_fun.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::is_Some")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%3.is_Some.))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%3.is_Some.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%3.is_Some.? self!) (not (is-lib!process_manager.thread.IPCPayLoad./Empty_ (%Poly%lib!process_manager.thread.IPCPayLoad. self!)))) :pattern ((lib!process_manager.thread.impl&%3.is_Some.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_message")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_message.))
(define-fun is-lib!process_manager.thread.IPCPayLoad./Message_ ((c lib!process_manager.thread.IPCPayLoad.)) Bool ((_ is lib!process_manager.thread.IPCPayLoad./Message) c))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_message.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%3.spec_get_payload_as_message.? self!) (ite (is-lib!process_manager.thread.IPCPayLoad./Message_ (%Poly%lib!process_manager.thread.IPCPayLoad. self!)) (let ((va$ (lib!process_manager.thread.IPCPayLoad./Message/va (%Poly%lib!process_manager.thread.IPCPayLoad. self!)))) (let ((len$ (lib!process_manager.thread.IPCPayLoad./Message/len (%Poly%lib!process_manager.thread.IPCPayLoad. self!)))) (core!option.Option./Some (Poly%tuple%2. (tuple%2./tuple%2 (I va$) (I len$)))))) core!option.Option./None)) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_message.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.impl&%3.spec_get_payload_as_message.? self!)) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ))))) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_message.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_endpoint")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_endpoint.))
(define-fun is-lib!process_manager.thread.IPCPayLoad./Endpoint_ ((c lib!process_manager.thread.IPCPayLoad.)) Bool ((_ is lib!process_manager.thread.IPCPayLoad./Endpoint) c))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_endpoint.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%3.spec_get_payload_as_endpoint.? self!) (ite (is-lib!process_manager.thread.IPCPayLoad./Endpoint_ (%Poly%lib!process_manager.thread.IPCPayLoad. self!)) (let ((endpoint_index$ (lib!process_manager.thread.IPCPayLoad./Endpoint/endpoint_index (%Poly%lib!process_manager.thread.IPCPayLoad. self!)))) (core!option.Option./Some (I endpoint_index$))) core!option.Option./None)) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_endpoint.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.impl&%3.spec_get_payload_as_endpoint.? self!)) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_endpoint.? self!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::thread::IPCPayLoad::spec_get_payload_as_pci")
(assert (fuel_bool_default fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_pci.))
(define-fun is-lib!process_manager.thread.IPCPayLoad./Pci_ ((c lib!process_manager.thread.IPCPayLoad.)) Bool ((_ is lib!process_manager.thread.IPCPayLoad./Pci) c))
(assert (=> (fuel_bool fuel%lib!process_manager.thread.impl&%3.spec_get_payload_as_pci.) (forall ((self! Poly)) (! (= (lib!process_manager.thread.impl&%3.spec_get_payload_as_pci.? self!) (ite (is-lib!process_manager.thread.IPCPayLoad./Pci_ (%Poly%lib!process_manager.thread.IPCPayLoad. self!)) (let ((bus$ (lib!process_manager.thread.IPCPayLoad./Pci/bus (%Poly%lib!process_manager.thread.IPCPayLoad. self!)))) (let ((dev$ (lib!process_manager.thread.IPCPayLoad./Pci/dev (%Poly%lib!process_manager.thread.IPCPayLoad. self!)))) (let ((fun$ (lib!process_manager.thread.IPCPayLoad./Pci/fun (%Poly%lib!process_manager.thread.IPCPayLoad. self!)))) (core!option.Option./Some (Poly%tuple%3. (tuple%3./tuple%3 (I bus$) (I dev$) (I fun$))))))) core!option.Option./None)) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_pci.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!process_manager.thread.IPCPayLoad.) (has_type (Poly%core!option.Option. (lib!process_manager.thread.impl&%3.spec_get_payload_as_pci.? self!)) (TYPE%core!option.Option. $ (TYPE%tuple%3. $ (UINT 8) $ (UINT 8) $ (UINT 8))))) :pattern ((lib!process_manager.thread.impl&%3.spec_get_payload_as_pci.? self!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(set-info :comment ";; Function-Specs lib::process_manager::thread::IPCPayLoad::get_payload_as_message")
(declare-fun ens%lib!process_manager.thread.impl&%3.get_payload_as_message. (lib!process_manager.thread.IPCPayLoad. core!option.Option.) Bool)
(assert (forall ((self! lib!process_manager.thread.IPCPayLoad.) (ret! core!option.Option.)) (! (= (ens%lib!process_manager.thread.impl&%3.get_payload_as_message. self! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ (TYPE%tuple%2. $ (UINT SZ) $ (UINT SZ)))) (= ret! (lib!process_manager.thread.impl&%3.spec_get_payload_as_message.? (Poly%lib!process_manager.thread.IPCPayLoad. self!))))) :pattern ((ens%lib!process_manager.thread.impl&%3.get_payload_as_message. self! ret!)) )))
(set-info :comment ";; Function-Def lib::process_manager::thread::IPCPayLoad::get_payload_as_message")
(set-info :comment ";; process_manager/thread.rs:59:9: 59:76 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::thread::IPCPayLoad::get_payload_as_va_range")
(declare-fun ens%lib!process_manager.thread.impl&%3.get_payload_as_va_range. (lib!process_manager.thread.IPCPayLoad. core!option.Option.) Bool)
(assert (forall ((self! lib!process_manager.thread.IPCPayLoad.) (ret! core!option.Option.)) (! (= (ens%lib!process_manager.thread.impl&%3.get_payload_as_va_range. self! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ TYPE%lib!va_range.VaRange4K.)) (= ret! (lib!process_manager.thread.impl&%3.spec_get_payload_as_va_range.? (Poly%lib!process_manager.thread.IPCPayLoad. self!))))) :pattern ((ens%lib!process_manager.thread.impl&%3.get_payload_as_va_range. self! ret!)) )))
(set-info :comment ";; Function-Def lib::process_manager::thread::IPCPayLoad::get_payload_as_va_range")
(set-info :comment ";; process_manager/thread.rs:77:9: 77:72 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::thread::IPCPayLoad::get_payload_as_endpoint")
(declare-fun ens%lib!process_manager.thread.impl&%3.get_payload_as_endpoint. (lib!process_manager.thread.IPCPayLoad. core!option.Option.) Bool)
(assert (forall ((self! lib!process_manager.thread.IPCPayLoad.) (ret! core!option.Option.)) (! (= (ens%lib!process_manager.thread.impl&%3.get_payload_as_endpoint. self! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ (UINT SZ))) (= ret! (lib!process_manager.thread.impl&%3.spec_get_payload_as_endpoint.? (Poly%lib!process_manager.thread.IPCPayLoad. self!))))) :pattern ((ens%lib!process_manager.thread.impl&%3.get_payload_as_endpoint. self! ret!)) )))
(set-info :comment ";; Function-Def lib::process_manager::thread::IPCPayLoad::get_payload_as_endpoint")
(set-info :comment ";; process_manager/thread.rs:95:9: 95:74 (#0)")
(set-info :comment ";; Function-Specs lib::process_manager::thread::IPCPayLoad::get_payload_as_pci")
(declare-fun ens%lib!process_manager.thread.impl&%3.get_payload_as_pci. (lib!process_manager.thread.IPCPayLoad. core!option.Option.) Bool)
(assert (forall ((self! lib!process_manager.thread.IPCPayLoad.) (ret! core!option.Option.)) (! (= (ens%lib!process_manager.thread.impl&%3.get_payload_as_pci. self! ret!) (and (has_type (Poly%core!option.Option. ret!) (TYPE%core!option.Option. $ (TYPE%tuple%3. $ (UINT 8) $ (UINT 8) $ (UINT 8)))) (= ret! (lib!process_manager.thread.impl&%3.spec_get_payload_as_pci.? (Poly%lib!process_manager.thread.IPCPayLoad. self!))))) :pattern ((ens%lib!process_manager.thread.impl&%3.get_payload_as_pci. self! ret!)) )))
(set-info :comment ";; Function-Def lib::process_manager::thread::IPCPayLoad::get_payload_as_pci")
(set-info :comment ";; process_manager/thread.rs:112:9: 112:68 (#0)")
(declare-const ret! core!option.Option.)
(declare-const self! lib!process_manager.thread.IPCPayLoad.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!process_manager.thread.IPCPayLoad. self!) TYPE%lib!process_manager.thread.IPCPayLoad.))
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(assert (not (=> (= ret! (ite (is-lib!process_manager.thread.IPCPayLoad./Pci_ self!) (let ((bus$ (lib!process_manager.thread.IPCPayLoad./Pci/bus (%Poly%lib!process_manager.thread.IPCPayLoad. (Poly%lib!process_manager.thread.IPCPayLoad. self!))))) (let ((dev$ (lib!process_manager.thread.IPCPayLoad./Pci/dev (%Poly%lib!process_manager.thread.IPCPayLoad. (Poly%lib!process_manager.thread.IPCPayLoad. self!))))) (let ((fun$ (lib!process_manager.thread.IPCPayLoad./Pci/fun (%Poly%lib!process_manager.thread.IPCPayLoad. (Poly%lib!process_manager.thread.IPCPayLoad. self!))))) (core!option.Option./Some (Poly%tuple%3. (tuple%3./tuple%3 (I bus$) (I dev$) (I fun$))))))) core!option.Option./None)) (=> %%location_label%%0 (= ret! (lib!process_manager.thread.impl&%3.spec_get_payload_as_pci.? (Poly%lib!process_manager.thread.IPCPayLoad. self!)))))))
(check-sat)
(exit)
