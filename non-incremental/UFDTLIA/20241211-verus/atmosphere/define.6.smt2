(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module define'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%lib!define.impl&%25.arrow_value3. FuelId)
(declare-const fuel%lib!define.impl&%25.arrow_SuccessUsize_value. FuelId)
(declare-const fuel%lib!define.impl&%25.arrow_SuccessSeqUsize_value. FuelId)
(declare-const fuel%lib!define.impl&%25.arrow_SuccessPairUsize_value1. FuelId)
(declare-const fuel%lib!define.impl&%25.arrow_SuccessPairUsize_value2. FuelId)
(declare-const fuel%lib!define.impl&%25.arrow_SuccessThreeUsize_value1. FuelId)
(declare-const fuel%lib!define.impl&%25.arrow_SuccessThreeUsize_value2. FuelId)
(declare-const fuel%lib!define.impl&%25.arrow_SuccessThreeUsize_value3. FuelId)
(declare-const fuel%lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS. FuelId)
(declare-const fuel%lib!define.MAX_NUM_THREADS_PER_PROC. FuelId)
(declare-const fuel%lib!define.MAX_NUM_THREADS_PER_ENDPOINT. FuelId)
(declare-const fuel%lib!define.MAX_NUM_PROCS. FuelId)
(declare-const fuel%lib!define.MAX_NUM_THREADS. FuelId)
(declare-const fuel%lib!define.IPC_MESSAGE_LEN. FuelId)
(declare-const fuel%lib!define.IPC_PAGEPAYLOAD_LEN. FuelId)
(declare-const fuel%lib!define.KERNEL_MEM_END_L4INDEX. FuelId)
(declare-const fuel%lib!define.NUM_PAGES. FuelId)
(declare-const fuel%lib!define.PAGE_SZ_4k. FuelId)
(declare-const fuel%lib!define.PAGE_SZ_2m. FuelId)
(declare-const fuel%lib!define.PAGE_SZ_1g. FuelId)
(declare-const fuel%lib!define.MAX_USIZE. FuelId)
(declare-const fuel%lib!define.PCID_MAX. FuelId)
(declare-const fuel%lib!define.IOID_MAX. FuelId)
(declare-const fuel%lib!define.MEM_MASK. FuelId)
(declare-const fuel%lib!define.MEM_4k_MASK. FuelId)
(declare-const fuel%lib!define.MEM_2m_MASK. FuelId)
(declare-const fuel%lib!define.MEM_1g_MASK. FuelId)
(declare-const fuel%lib!define.VA_PERM_MASK. FuelId)
(declare-const fuel%lib!define.READ. FuelId)
(declare-const fuel%lib!define.READ_WRITE. FuelId)
(declare-const fuel%lib!define.READ_EXECUTE. FuelId)
(declare-const fuel%lib!define.READ_WRITE_EXECUTE. FuelId)
(declare-const fuel%lib!define.PCID_ENABLE_MASK. FuelId)
(declare-const fuel%lib!define.NUM_CPUS. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PRESENT_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_USER_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PS_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PRESENT_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_WRITE_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_USER_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_PS_MASK. FuelId)
(declare-const fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK. FuelId)
(declare-const fuel%lib!define.CONTAINER_PROC_LIST_LEN. FuelId)
(declare-const fuel%lib!define.CONTAINER_CHILD_LIST_LEN. FuelId)
(declare-const fuel%lib!define.CONTAINER_ENDPOINT_LIST_LEN. FuelId)
(declare-const fuel%lib!define.MAX_CONTAINER_SCHEDULER_LEN. FuelId)
(declare-const fuel%lib!define.impl&%31.get_return_vaule_usize. FuelId)
(declare-const fuel%lib!define.impl&%31.get_return_vaule_seq_usize. FuelId)
(declare-const fuel%lib!define.impl&%31.get_return_vaule_pair_usize. FuelId)
(declare-const fuel%lib!define.impl&%31.get_return_vaule_three_usize. FuelId)
(declare-const fuel%lib!define.impl&%31.spec_is_error. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%lib!define.impl&%25.arrow_value3. fuel%lib!define.impl&%25.arrow_SuccessUsize_value. fuel%lib!define.impl&%25.arrow_SuccessSeqUsize_value. fuel%lib!define.impl&%25.arrow_SuccessPairUsize_value1. fuel%lib!define.impl&%25.arrow_SuccessPairUsize_value2. fuel%lib!define.impl&%25.arrow_SuccessThreeUsize_value1. fuel%lib!define.impl&%25.arrow_SuccessThreeUsize_value2. fuel%lib!define.impl&%25.arrow_SuccessThreeUsize_value3. fuel%lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS. fuel%lib!define.MAX_NUM_THREADS_PER_PROC. fuel%lib!define.MAX_NUM_THREADS_PER_ENDPOINT. fuel%lib!define.MAX_NUM_PROCS. fuel%lib!define.MAX_NUM_THREADS. fuel%lib!define.IPC_MESSAGE_LEN. fuel%lib!define.IPC_PAGEPAYLOAD_LEN. fuel%lib!define.KERNEL_MEM_END_L4INDEX. fuel%lib!define.NUM_PAGES. fuel%lib!define.PAGE_SZ_4k. fuel%lib!define.PAGE_SZ_2m. fuel%lib!define.PAGE_SZ_1g. fuel%lib!define.MAX_USIZE. fuel%lib!define.PCID_MAX. fuel%lib!define.IOID_MAX. fuel%lib!define.MEM_MASK. fuel%lib!define.MEM_4k_MASK. fuel%lib!define.MEM_2m_MASK. fuel%lib!define.MEM_1g_MASK. fuel%lib!define.VA_PERM_MASK. fuel%lib!define.READ. fuel%lib!define.READ_WRITE. fuel%lib!define.READ_EXECUTE. fuel%lib!define.READ_WRITE_EXECUTE. fuel%lib!define.PCID_ENABLE_MASK. fuel%lib!define.NUM_CPUS. fuel%lib!define.PAGE_ENTRY_PRESENT_SHIFT. fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT. fuel%lib!define.PAGE_ENTRY_USER_SHIFT. fuel%lib!define.PAGE_ENTRY_PS_SHIFT. fuel%lib!define.PAGE_ENTRY_EXECUTE_SHIFT. fuel%lib!define.PAGE_ENTRY_PRESENT_MASK. fuel%lib!define.PAGE_ENTRY_WRITE_MASK. fuel%lib!define.PAGE_ENTRY_USER_MASK. fuel%lib!define.PAGE_ENTRY_PS_MASK. fuel%lib!define.PAGE_ENTRY_EXECUTE_MASK. fuel%lib!define.CONTAINER_PROC_LIST_LEN. fuel%lib!define.CONTAINER_CHILD_LIST_LEN. fuel%lib!define.CONTAINER_ENDPOINT_LIST_LEN. fuel%lib!define.MAX_CONTAINER_SCHEDULER_LEN. fuel%lib!define.impl&%31.get_return_vaule_usize. fuel%lib!define.impl&%31.get_return_vaule_seq_usize. fuel%lib!define.impl&%31.get_return_vaule_pair_usize. fuel%lib!define.impl&%31.get_return_vaule_three_usize. fuel%lib!define.impl&%31.spec_is_error. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort vstd!seq.Seq<usize.>. 0)
(declare-datatypes ((core!option.Option. 0) (lib!define.ThreadState. 0) (lib!define.EndpointState. 0) (lib!define.PageType. 0) (lib!define.PageState. 0) (lib!define.PageSize. 0) (lib!define.PageTableErrorCode. 0) (lib!define.RetValueType. 0) (lib!define.SwitchDecision. 0) (lib!define.SyscallReturnStruct. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!define.ThreadState./SCHEDULED ) (lib!define.ThreadState./BLOCKED ) (lib!define.ThreadState./RUNNING ) (lib!define.ThreadState./TRANSIT )) ((lib!define.EndpointState./RECEIVE ) (lib!define.EndpointState./SEND )) ((lib!define.PageType./R ) (lib!define.PageType./RW ) (lib!define.PageType./RX ) (lib!define.PageType./RWX )) ((lib!define.PageState./Unavailable4k ) (lib!define.PageState./Unavailable2m ) (lib!define.PageState./Unavailable1g ) (lib!define.PageState./Pagetable ) (lib!define.PageState./Allocated4k ) (lib!define.PageState./Allocated2m ) (lib!define.PageState./Allocated1g ) (lib!define.PageState./Free4k ) (lib!define.PageState./Free2m ) (lib!define.PageState./Free1g ) (lib!define.PageState./Mapped4k ) (lib!define.PageState./Mapped2m ) (lib!define.PageState./Mapped1g ) (lib!define.PageState./Merged2m ) (lib!define.PageState./Merged1g ) (lib!define.PageState./Io )) ((lib!define.PageSize./SZ4k ) (lib!define.PageSize./SZ2m ) (lib!define.PageSize./SZ1g )) ((lib!define.PageTableErrorCode./NoError ) (lib!define.PageTableErrorCode./L4EntryNotExist ) (lib!define.PageTableErrorCode./L3EntryNotExist ) (lib!define.PageTableErrorCode./L2EntryNotExist ) (lib!define.PageTableErrorCode./L1EntryNotExist ) (lib!define.PageTableErrorCode./EntryTakenBy4k ) (lib!define.PageTableErrorCode./EntryTakenBy2m ) (lib!define.PageTableErrorCode./EntryTakenBy1g )) ((lib!define.RetValueType./SuccessUsize (lib!define.RetValueType./SuccessUsize/?value Int)) (lib!define.RetValueType./SuccessSeqUsize (lib!define.RetValueType./SuccessSeqUsize/?value vstd!seq.Seq<usize.>.)) (lib!define.RetValueType./SuccessPairUsize (lib!define.RetValueType./SuccessPairUsize/?value1 Int) (lib!define.RetValueType./SuccessPairUsize/?value2 Int)) (lib!define.RetValueType./SuccessThreeUsize (lib!define.RetValueType./SuccessThreeUsize/?value1 Int) (lib!define.RetValueType./SuccessThreeUsize/?value2 Int) (lib!define.RetValueType./SuccessThreeUsize/?value3 Int)) (lib!define.RetValueType./CpuIdle ) (lib!define.RetValueType./Error ) (lib!define.RetValueType./Else )) ((lib!define.SwitchDecision./NoSwitch ) (lib!define.SwitchDecision./NoThread ) (lib!define.SwitchDecision./Switch )) ((lib!define.SyscallReturnStruct./SyscallReturnStruct (lib!define.SyscallReturnStruct./SyscallReturnStruct/?error_code lib!define.RetValueType.) (lib!define.SyscallReturnStruct./SyscallReturnStruct/?pcid core!option.Option.) (lib!define.SyscallReturnStruct./SyscallReturnStruct/?cr3 core!option.Option.) (lib!define.SyscallReturnStruct./SyscallReturnStruct/?switch_decision lib!define.SwitchDecision.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!define.RetValueType./SuccessUsize/value (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessSeqUsize/value (lib!define.RetValueType.) vstd!seq.Seq<usize.>.)
(declare-fun lib!define.RetValueType./SuccessPairUsize/value1 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessPairUsize/value2 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value1 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value2 (lib!define.RetValueType.) Int)
(declare-fun lib!define.RetValueType./SuccessThreeUsize/value3 (lib!define.RetValueType.) Int)
(declare-fun lib!define.SyscallReturnStruct./SyscallReturnStruct/error_code (lib!define.SyscallReturnStruct.) lib!define.RetValueType.)
(declare-fun lib!define.SyscallReturnStruct./SyscallReturnStruct/pcid (lib!define.SyscallReturnStruct.) core!option.Option.)
(declare-fun lib!define.SyscallReturnStruct./SyscallReturnStruct/cr3 (lib!define.SyscallReturnStruct.) core!option.Option.)
(declare-fun lib!define.SyscallReturnStruct./SyscallReturnStruct/switch_decision (lib!define.SyscallReturnStruct.) lib!define.SwitchDecision.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%lib!define.ThreadState. Type)
(declare-const TYPE%lib!define.EndpointState. Type)
(declare-const TYPE%lib!define.PageType. Type)
(declare-const TYPE%lib!define.PageState. Type)
(declare-const TYPE%lib!define.PageSize. Type)
(declare-const TYPE%lib!define.PageTableErrorCode. Type)
(declare-const TYPE%lib!define.RetValueType. Type)
(declare-const TYPE%lib!define.SwitchDecision. Type)
(declare-const TYPE%lib!define.SyscallReturnStruct. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%vstd!seq.Seq<usize.>. (vstd!seq.Seq<usize.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<usize.>. (Poly) vstd!seq.Seq<usize.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!define.ThreadState. (lib!define.ThreadState.) Poly)
(declare-fun %Poly%lib!define.ThreadState. (Poly) lib!define.ThreadState.)
(declare-fun Poly%lib!define.EndpointState. (lib!define.EndpointState.) Poly)
(declare-fun %Poly%lib!define.EndpointState. (Poly) lib!define.EndpointState.)
(declare-fun Poly%lib!define.PageType. (lib!define.PageType.) Poly)
(declare-fun %Poly%lib!define.PageType. (Poly) lib!define.PageType.)
(declare-fun Poly%lib!define.PageState. (lib!define.PageState.) Poly)
(declare-fun %Poly%lib!define.PageState. (Poly) lib!define.PageState.)
(declare-fun Poly%lib!define.PageSize. (lib!define.PageSize.) Poly)
(declare-fun %Poly%lib!define.PageSize. (Poly) lib!define.PageSize.)
(declare-fun Poly%lib!define.PageTableErrorCode. (lib!define.PageTableErrorCode.) Poly)
(declare-fun %Poly%lib!define.PageTableErrorCode. (Poly) lib!define.PageTableErrorCode.)
(declare-fun Poly%lib!define.RetValueType. (lib!define.RetValueType.) Poly)
(declare-fun %Poly%lib!define.RetValueType. (Poly) lib!define.RetValueType.)
(declare-fun Poly%lib!define.SwitchDecision. (lib!define.SwitchDecision.) Poly)
(declare-fun %Poly%lib!define.SwitchDecision. (Poly) lib!define.SwitchDecision.)
(declare-fun Poly%lib!define.SyscallReturnStruct. (lib!define.SyscallReturnStruct.) Poly)
(declare-fun %Poly%lib!define.SyscallReturnStruct. (Poly) lib!define.SyscallReturnStruct.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (= x (%Poly%vstd!seq.Seq<usize.>. (Poly%vstd!seq.Seq<usize.>. x))) :pattern ((Poly%vstd!seq.Seq<usize.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ))) (= x (Poly%vstd!seq.Seq<usize.>. (%Poly%vstd!seq.Seq<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ)))) )))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ)))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x lib!define.ThreadState.)) (! (= x (%Poly%lib!define.ThreadState. (Poly%lib!define.ThreadState. x))) :pattern ((Poly%lib!define.ThreadState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.ThreadState.) (= x (Poly%lib!define.ThreadState. (%Poly%lib!define.ThreadState. x)))) :pattern ((has_type x TYPE%lib!define.ThreadState.)) )))
(assert (forall ((x lib!define.ThreadState.)) (! (has_type (Poly%lib!define.ThreadState. x) TYPE%lib!define.ThreadState.) :pattern ((has_type (Poly%lib!define.ThreadState. x) TYPE%lib!define.ThreadState.)) )))
(assert (forall ((x lib!define.EndpointState.)) (! (= x (%Poly%lib!define.EndpointState. (Poly%lib!define.EndpointState. x))) :pattern ((Poly%lib!define.EndpointState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.EndpointState.) (= x (Poly%lib!define.EndpointState. (%Poly%lib!define.EndpointState. x)))) :pattern ((has_type x TYPE%lib!define.EndpointState.)) )))
(assert (forall ((x lib!define.EndpointState.)) (! (has_type (Poly%lib!define.EndpointState. x) TYPE%lib!define.EndpointState.) :pattern ((has_type (Poly%lib!define.EndpointState. x) TYPE%lib!define.EndpointState.)) )))
(assert (forall ((x lib!define.PageType.)) (! (= x (%Poly%lib!define.PageType. (Poly%lib!define.PageType. x))) :pattern ((Poly%lib!define.PageType. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.PageType.) (= x (Poly%lib!define.PageType. (%Poly%lib!define.PageType. x)))) :pattern ((has_type x TYPE%lib!define.PageType.)) )))
(assert (forall ((x lib!define.PageType.)) (! (has_type (Poly%lib!define.PageType. x) TYPE%lib!define.PageType.) :pattern ((has_type (Poly%lib!define.PageType. x) TYPE%lib!define.PageType.)) )))
(assert (forall ((x lib!define.PageState.)) (! (= x (%Poly%lib!define.PageState. (Poly%lib!define.PageState. x))) :pattern ((Poly%lib!define.PageState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.PageState.) (= x (Poly%lib!define.PageState. (%Poly%lib!define.PageState. x)))) :pattern ((has_type x TYPE%lib!define.PageState.)) )))
(assert (forall ((x lib!define.PageState.)) (! (has_type (Poly%lib!define.PageState. x) TYPE%lib!define.PageState.) :pattern ((has_type (Poly%lib!define.PageState. x) TYPE%lib!define.PageState.)) )))
(assert (forall ((x lib!define.PageSize.)) (! (= x (%Poly%lib!define.PageSize. (Poly%lib!define.PageSize. x))) :pattern ((Poly%lib!define.PageSize. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.PageSize.) (= x (Poly%lib!define.PageSize. (%Poly%lib!define.PageSize. x)))) :pattern ((has_type x TYPE%lib!define.PageSize.)) )))
(assert (forall ((x lib!define.PageSize.)) (! (has_type (Poly%lib!define.PageSize. x) TYPE%lib!define.PageSize.) :pattern ((has_type (Poly%lib!define.PageSize. x) TYPE%lib!define.PageSize.)) )))
(assert (forall ((x lib!define.PageTableErrorCode.)) (! (= x (%Poly%lib!define.PageTableErrorCode. (Poly%lib!define.PageTableErrorCode. x))) :pattern ((Poly%lib!define.PageTableErrorCode. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.PageTableErrorCode.) (= x (Poly%lib!define.PageTableErrorCode. (%Poly%lib!define.PageTableErrorCode. x)))) :pattern ((has_type x TYPE%lib!define.PageTableErrorCode.)) )))
(assert (forall ((x lib!define.PageTableErrorCode.)) (! (has_type (Poly%lib!define.PageTableErrorCode. x) TYPE%lib!define.PageTableErrorCode.) :pattern ((has_type (Poly%lib!define.PageTableErrorCode. x) TYPE%lib!define.PageTableErrorCode.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= x (%Poly%lib!define.RetValueType. (Poly%lib!define.RetValueType. x))) :pattern ((Poly%lib!define.RetValueType. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (= x (Poly%lib!define.RetValueType. (%Poly%lib!define.RetValueType. x)))) :pattern ((has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((_value! Int)) (! (=> (uInv SZ _value!) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessUsize _value!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessUsize _value!)) TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessUsize/value x) (lib!define.RetValueType./SuccessUsize/?value x)) :pattern ((lib!define.RetValueType./SuccessUsize/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessUsize/value (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessUsize/value (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((_value! vstd!seq.Seq<usize.>.)) (! (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessSeqUsize _value!)) TYPE%lib!define.RetValueType.) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessSeqUsize _value!)) TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessSeqUsize/value x) (lib!define.RetValueType./SuccessSeqUsize/?value x)) :pattern ((lib!define.RetValueType./SuccessSeqUsize/value x)) )))
(assert (forall ((_value1! Int) (_value2! Int)) (! (=> (and (uInv SZ _value1!) (uInv SZ _value2!)) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessPairUsize _value1! _value2!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessPairUsize _value1! _value2!)) TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessPairUsize/value1 x) (lib!define.RetValueType./SuccessPairUsize/?value1 x)) :pattern ((lib!define.RetValueType./SuccessPairUsize/value1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessPairUsize/value1 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessPairUsize/value1 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessPairUsize/value2 x) (lib!define.RetValueType./SuccessPairUsize/?value2 x)) :pattern ((lib!define.RetValueType./SuccessPairUsize/value2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessPairUsize/value2 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessPairUsize/value2 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((_value1! Int) (_value2! Int) (_value3! Int)) (! (=> (and (uInv SZ _value1!) (uInv SZ _value2!) (uInv SZ _value3!)) (has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessThreeUsize _value1! _value2! _value3!)) TYPE%lib!define.RetValueType.)) :pattern ((has_type (Poly%lib!define.RetValueType. (lib!define.RetValueType./SuccessThreeUsize _value1! _value2! _value3!)) TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value1 x) (lib!define.RetValueType./SuccessThreeUsize/?value1 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value1 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value1 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value2 x) (lib!define.RetValueType./SuccessThreeUsize/?value2 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value2 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value2 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value2 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (forall ((x lib!define.RetValueType.)) (! (= (lib!define.RetValueType./SuccessThreeUsize/value3 x) (lib!define.RetValueType./SuccessThreeUsize/?value3 x)) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value3 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.RetValueType.) (uInv SZ (lib!define.RetValueType./SuccessThreeUsize/value3 (%Poly%lib!define.RetValueType. x)))) :pattern ((lib!define.RetValueType./SuccessThreeUsize/value3 (%Poly%lib!define.RetValueType. x)) (has_type x TYPE%lib!define.RetValueType.)) )))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./CpuIdle) TYPE%lib!define.RetValueType.))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./Error) TYPE%lib!define.RetValueType.))
(assert (has_type (Poly%lib!define.RetValueType. lib!define.RetValueType./Else) TYPE%lib!define.RetValueType.))
(assert (forall ((x lib!define.SwitchDecision.)) (! (= x (%Poly%lib!define.SwitchDecision. (Poly%lib!define.SwitchDecision. x))) :pattern ((Poly%lib!define.SwitchDecision. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.SwitchDecision.) (= x (Poly%lib!define.SwitchDecision. (%Poly%lib!define.SwitchDecision. x)))) :pattern ((has_type x TYPE%lib!define.SwitchDecision.)) )))
(assert (forall ((x lib!define.SwitchDecision.)) (! (has_type (Poly%lib!define.SwitchDecision. x) TYPE%lib!define.SwitchDecision.) :pattern ((has_type (Poly%lib!define.SwitchDecision. x) TYPE%lib!define.SwitchDecision.)) )))
(assert (forall ((x lib!define.SyscallReturnStruct.)) (! (= x (%Poly%lib!define.SyscallReturnStruct. (Poly%lib!define.SyscallReturnStruct. x))) :pattern ((Poly%lib!define.SyscallReturnStruct. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.SyscallReturnStruct.) (= x (Poly%lib!define.SyscallReturnStruct. (%Poly%lib!define.SyscallReturnStruct. x)))) :pattern ((has_type x TYPE%lib!define.SyscallReturnStruct.)) )))
(assert (forall ((_error_code! lib!define.RetValueType.) (_pcid! core!option.Option.) (_cr3! core!option.Option.) (_switch_decision! lib!define.SwitchDecision.)) (! (=> (and (has_type (Poly%lib!define.RetValueType. _error_code!) TYPE%lib!define.RetValueType.) (has_type (Poly%core!option.Option. _pcid!) (TYPE%core!option.Option. $ (UINT SZ))) (has_type (Poly%core!option.Option. _cr3!) (TYPE%core!option.Option. $ (UINT SZ)))) (has_type (Poly%lib!define.SyscallReturnStruct. (lib!define.SyscallReturnStruct./SyscallReturnStruct _error_code! _pcid! _cr3! _switch_decision!)) TYPE%lib!define.SyscallReturnStruct.)) :pattern ((has_type (Poly%lib!define.SyscallReturnStruct. (lib!define.SyscallReturnStruct./SyscallReturnStruct _error_code! _pcid! _cr3! _switch_decision!)) TYPE%lib!define.SyscallReturnStruct.)) )))
(assert (forall ((x lib!define.SyscallReturnStruct.)) (! (= (lib!define.SyscallReturnStruct./SyscallReturnStruct/error_code x) (lib!define.SyscallReturnStruct./SyscallReturnStruct/?error_code x)) :pattern ((lib!define.SyscallReturnStruct./SyscallReturnStruct/error_code x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.SyscallReturnStruct.) (has_type (Poly%lib!define.RetValueType. (lib!define.SyscallReturnStruct./SyscallReturnStruct/error_code (%Poly%lib!define.SyscallReturnStruct. x))) TYPE%lib!define.RetValueType.)) :pattern ((lib!define.SyscallReturnStruct./SyscallReturnStruct/error_code (%Poly%lib!define.SyscallReturnStruct. x)) (has_type x TYPE%lib!define.SyscallReturnStruct.)) )))
(assert (forall ((x lib!define.SyscallReturnStruct.)) (! (= (lib!define.SyscallReturnStruct./SyscallReturnStruct/pcid x) (lib!define.SyscallReturnStruct./SyscallReturnStruct/?pcid x)) :pattern ((lib!define.SyscallReturnStruct./SyscallReturnStruct/pcid x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.SyscallReturnStruct.) (has_type (Poly%core!option.Option. (lib!define.SyscallReturnStruct./SyscallReturnStruct/pcid (%Poly%lib!define.SyscallReturnStruct. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!define.SyscallReturnStruct./SyscallReturnStruct/pcid (%Poly%lib!define.SyscallReturnStruct. x)) (has_type x TYPE%lib!define.SyscallReturnStruct.)) )))
(assert (forall ((x lib!define.SyscallReturnStruct.)) (! (= (lib!define.SyscallReturnStruct./SyscallReturnStruct/cr3 x) (lib!define.SyscallReturnStruct./SyscallReturnStruct/?cr3 x)) :pattern ((lib!define.SyscallReturnStruct./SyscallReturnStruct/cr3 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.SyscallReturnStruct.) (has_type (Poly%core!option.Option. (lib!define.SyscallReturnStruct./SyscallReturnStruct/cr3 (%Poly%lib!define.SyscallReturnStruct. x))) (TYPE%core!option.Option. $ (UINT SZ)))) :pattern ((lib!define.SyscallReturnStruct./SyscallReturnStruct/cr3 (%Poly%lib!define.SyscallReturnStruct. x)) (has_type x TYPE%lib!define.SyscallReturnStruct.)) )))
(assert (forall ((x lib!define.SyscallReturnStruct.)) (! (= (lib!define.SyscallReturnStruct./SyscallReturnStruct/switch_decision x) (lib!define.SyscallReturnStruct./SyscallReturnStruct/?switch_decision x)) :pattern ((lib!define.SyscallReturnStruct./SyscallReturnStruct/switch_decision x)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::define::MEM_MASK")
(declare-fun lib!define.MEM_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PRESENT_MASK")
(declare-fun lib!define.PAGE_ENTRY_PRESENT_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PS_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_PS_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PS_MASK")
(declare-fun lib!define.PAGE_ENTRY_PS_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_WRITE_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_WRITE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_WRITE_MASK")
(declare-fun lib!define.PAGE_ENTRY_WRITE_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_EXECUTE_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_EXECUTE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_EXECUTE_MASK")
(declare-fun lib!define.PAGE_ENTRY_EXECUTE_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_USER_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_USER_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_USER_MASK")
(declare-fun lib!define.PAGE_ENTRY_USER_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::NUM_CPUS")
(declare-fun lib!define.NUM_CPUS.? () Int)
(set-info :comment ";; Function-Decl lib::define::NUM_PAGES")
(declare-fun lib!define.NUM_PAGES.? () Int)
(set-info :comment ";; Function-Decl lib::define::MAX_NUM_ENDPOINT_DESCRIPTORS")
(declare-fun lib!define.MAX_NUM_ENDPOINT_DESCRIPTORS.? () Int)
(set-info :comment ";; Function-Decl lib::define::MAX_NUM_THREADS_PER_PROC")
(declare-fun lib!define.MAX_NUM_THREADS_PER_PROC.? () Int)
(set-info :comment ";; Function-Decl lib::define::MAX_CONTAINER_SCHEDULER_LEN")
(declare-fun lib!define.MAX_CONTAINER_SCHEDULER_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::define::CONTAINER_PROC_LIST_LEN")
(declare-fun lib!define.CONTAINER_PROC_LIST_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::define::CONTAINER_CHILD_LIST_LEN")
(declare-fun lib!define.CONTAINER_CHILD_LIST_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::define::CONTAINER_ENDPOINT_LIST_LEN")
(declare-fun lib!define.CONTAINER_ENDPOINT_LIST_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::define::MAX_NUM_THREADS_PER_ENDPOINT")
(declare-fun lib!define.MAX_NUM_THREADS_PER_ENDPOINT.? () Int)
(set-info :comment ";; Function-Decl lib::define::IOID_MAX")
(declare-fun lib!define.IOID_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::define::MEM_4k_MASK")
(declare-fun lib!define.MEM_4k_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::KERNEL_MEM_END_L4INDEX")
(declare-fun lib!define.KERNEL_MEM_END_L4INDEX.? () Int)
(set-info :comment ";; Function-Decl lib::define::MEM_2m_MASK")
(declare-fun lib!define.MEM_2m_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::PCID_MAX")
(declare-fun lib!define.PCID_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::define::MEM_1g_MASK")
(declare-fun lib!define.MEM_1g_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::SyscallReturnStruct::get_return_vaule_usize")
(declare-fun lib!define.impl&%31.get_return_vaule_usize.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::define::SyscallReturnStruct::get_return_vaule_seq_usize")
(declare-fun lib!define.impl&%31.get_return_vaule_seq_usize.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::define::SyscallReturnStruct::get_return_vaule_pair_usize")
(declare-fun lib!define.impl&%31.get_return_vaule_pair_usize.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::define::SyscallReturnStruct::get_return_vaule_three_usize")
(declare-fun lib!define.impl&%31.get_return_vaule_three_usize.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::define::SyscallReturnStruct::spec_is_error")
(declare-fun lib!define.impl&%31.spec_is_error.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::define::RetValueType::arrow_value3")
(declare-fun lib!define.impl&%25.arrow_value3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::RetValueType::arrow_SuccessUsize_value")
(declare-fun lib!define.impl&%25.arrow_SuccessUsize_value.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::RetValueType::arrow_SuccessSeqUsize_value")
(declare-fun lib!define.impl&%25.arrow_SuccessSeqUsize_value.? (Poly) vstd!seq.Seq<usize.>.)
(set-info :comment ";; Function-Decl lib::define::RetValueType::arrow_SuccessPairUsize_value1")
(declare-fun lib!define.impl&%25.arrow_SuccessPairUsize_value1.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::RetValueType::arrow_SuccessPairUsize_value2")
(declare-fun lib!define.impl&%25.arrow_SuccessPairUsize_value2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::RetValueType::arrow_SuccessThreeUsize_value1")
(declare-fun lib!define.impl&%25.arrow_SuccessThreeUsize_value1.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::RetValueType::arrow_SuccessThreeUsize_value2")
(declare-fun lib!define.impl&%25.arrow_SuccessThreeUsize_value2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::RetValueType::arrow_SuccessThreeUsize_value3")
(declare-fun lib!define.impl&%25.arrow_SuccessThreeUsize_value3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::define::MAX_NUM_PROCS")
(declare-fun lib!define.MAX_NUM_PROCS.? () Int)
(set-info :comment ";; Function-Decl lib::define::MAX_NUM_THREADS")
(declare-fun lib!define.MAX_NUM_THREADS.? () Int)
(set-info :comment ";; Function-Decl lib::define::IPC_MESSAGE_LEN")
(declare-fun lib!define.IPC_MESSAGE_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::define::IPC_PAGEPAYLOAD_LEN")
(declare-fun lib!define.IPC_PAGEPAYLOAD_LEN.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_SZ_4k")
(declare-fun lib!define.PAGE_SZ_4k.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_SZ_2m")
(declare-fun lib!define.PAGE_SZ_2m.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_SZ_1g")
(declare-fun lib!define.PAGE_SZ_1g.? () Int)
(set-info :comment ";; Function-Decl lib::define::MAX_USIZE")
(declare-fun lib!define.MAX_USIZE.? () Int)
(set-info :comment ";; Function-Decl lib::define::VA_PERM_MASK")
(declare-fun lib!define.VA_PERM_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::READ")
(declare-fun lib!define.READ.? () Int)
(set-info :comment ";; Function-Decl lib::define::READ_WRITE")
(declare-fun lib!define.READ_WRITE.? () Int)
(set-info :comment ";; Function-Decl lib::define::READ_EXECUTE")
(declare-fun lib!define.READ_EXECUTE.? () Int)
(set-info :comment ";; Function-Decl lib::define::READ_WRITE_EXECUTE")
(declare-fun lib!define.READ_WRITE_EXECUTE.? () Int)
(set-info :comment ";; Function-Decl lib::define::PCID_ENABLE_MASK")
(declare-fun lib!define.PCID_ENABLE_MASK.? () Int)
(set-info :comment ";; Function-Decl lib::define::PAGE_ENTRY_PRESENT_SHIFT")
(declare-fun lib!define.PAGE_ENTRY_PRESENT_SHIFT.? () Int)
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Function-Def lib::define::MEM_MASK")
(set-info :comment ";; define.rs:156:1: 156:48 (#0)")
(set-info :comment ";; Function-Axioms lib::define::MEM_MASK")
(assert (fuel_bool_default fuel%lib!define.MEM_MASK.))
(assert (=> (fuel_bool fuel%lib!define.MEM_MASK.) (= lib!define.MEM_MASK.? 281474976706560)))
(assert (uInv 64 lib!define.MEM_MASK.?))
(set-info :comment ";; Function-Def lib::define::PAGE_ENTRY_PRESENT_MASK")
(set-info :comment ";; define.rs:173:1: 173:45 (#0)")
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PRESENT_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PRESENT_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PRESENT_MASK.) (= lib!define.PAGE_ENTRY_PRESENT_MASK.? 1)))
(assert (uInv 64 lib!define.PAGE_ENTRY_PRESENT_MASK.?))
(set-info :comment ";; Function-Def lib::define::PAGE_ENTRY_PS_SHIFT")
(set-info :comment ";; define.rs:171:1: 171:39 (#0)")
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PS_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PS_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PS_SHIFT.) (= lib!define.PAGE_ENTRY_PS_SHIFT.? 7)))
(assert (uInv 64 lib!define.PAGE_ENTRY_PS_SHIFT.?))
(set-info :comment ";; Function-Def lib::define::PAGE_ENTRY_PS_MASK")
(set-info :comment ";; define.rs:176:1: 176:64 (#0)")
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_PS_MASK")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_PS_MASK.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_PS_MASK.) (= lib!define.PAGE_ENTRY_PS_MASK.? (uClip 64 (bitshl (I 1) (I lib!define.PAGE_ENTRY_PS_SHIFT.?))))))
(assert (uInv 64 lib!define.PAGE_ENTRY_PS_MASK.?))
(set-info :comment ";; Function-Def lib::define::PAGE_ENTRY_WRITE_SHIFT")
(set-info :comment ";; define.rs:169:1: 169:42 (#0)")
(set-info :comment ";; Function-Axioms lib::define::PAGE_ENTRY_WRITE_SHIFT")
(assert (fuel_bool_default fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!define.PAGE_ENTRY_WRITE_SHIFT.) (= lib!define.PAGE_ENTRY_WRITE_SHIFT.? 1)))
(assert (uInv 64 lib!define.PAGE_ENTRY_WRITE_SHIFT.?))
(set-info :comment ";; Function-Def lib::define::PAGE_ENTRY_WRITE_MASK")
(set-info :comment ";; define.rs:174:1: 174:70 (#0)")
(declare-const %return! Int)
(assert fuel_defaults)
(set-info :comment ";; possible bit shift underflow/overflow")
(declare-const %%location_label%%0 Bool)
(assert (not (=> %%location_label%%0 (and (<= 0 lib!define.PAGE_ENTRY_WRITE_SHIFT.?) (< lib!define.PAGE_ENTRY_WRITE_SHIFT.? 64)))))
(check-sat)
(exit)
