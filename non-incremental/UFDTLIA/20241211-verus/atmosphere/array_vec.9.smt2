(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module array_vec'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.index_of. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.drop_last. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.no_duplicates. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%lib!array.impl&%0.view. FuelId)
(declare-const fuel%lib!array.impl&%0.wf. FuelId)
(declare-const fuel%lib!array_vec.impl&%0.spec_len. FuelId)
(declare-const fuel%lib!array_vec.impl&%0.spec_capacity. FuelId)
(declare-const fuel%lib!array_vec.impl&%0.view. FuelId)
(declare-const fuel%lib!array_vec.impl&%0.view_until. FuelId)
(declare-const fuel%lib!array_vec.impl&%0.wf. FuelId)
(declare-const fuel%lib!array_vec.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.index_of. fuel%vstd!seq_lib.impl&%0.drop_last. fuel%vstd!seq_lib.impl&%0.no_duplicates. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%lib!array.impl&%0.view. fuel%lib!array.impl&%0.wf. fuel%lib!array_vec.impl&%0.spec_len. fuel%lib!array_vec.impl&%0.spec_capacity. fuel%lib!array_vec.impl&%0.view. fuel%lib!array_vec.impl&%0.view_until. fuel%lib!array_vec.impl&%0.wf. fuel%lib!array_vec.impl&%0.spec_index. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u64.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!array.Array. 0) (lib!array_vec.ArrayVec. 0) (tuple%0. 0)) (((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!array.Array./Array (lib!array.Array./Array/?seq Poly) (lib!array.Array./Array/?ar %%Function%%))) ((lib!array_vec.ArrayVec./ArrayVec (lib!array_vec.ArrayVec./ArrayVec/?data lib!array.Array.) (lib!array_vec.ArrayVec./ArrayVec/?len Int))) ((tuple%0./tuple%0 ))))
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!array.Array./Array/seq (lib!array.Array.) Poly)
(declare-fun lib!array.Array./Array/ar (lib!array.Array.) %%Function%%)
(declare-fun lib!array_vec.ArrayVec./ArrayVec/data (lib!array_vec.ArrayVec.) lib!array.Array.)
(declare-fun lib!array_vec.ArrayVec./ArrayVec/len (lib!array_vec.ArrayVec.) Int)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%lib!array.Array. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!array_vec.ArrayVec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u64.>. (vstd!seq.Seq<u64.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u64.>. (Poly) vstd!seq.Seq<u64.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!array.Array. (lib!array.Array.) Poly)
(declare-fun %Poly%lib!array.Array. (Poly) lib!array.Array.)
(declare-fun Poly%lib!array_vec.ArrayVec. (lib!array_vec.ArrayVec.) Poly)
(declare-fun %Poly%lib!array_vec.ArrayVec. (Poly) lib!array_vec.ArrayVec.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (= x (%Poly%vstd!seq.Seq<u64.>. (Poly%vstd!seq.Seq<u64.>. x))) :pattern ((Poly%vstd!seq.Seq<u64.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 64))) (= x (Poly%vstd!seq.Seq<u64.>. (%Poly%vstd!seq.Seq<u64.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x vstd!seq.Seq<u64.>.)) (! (has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64))) :pattern ((has_type (Poly%vstd!seq.Seq<u64.>. x) (TYPE%vstd!seq.Seq. $ (UINT 64)))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x lib!array.Array.)) (! (= x (%Poly%lib!array.Array. (Poly%lib!array.Array. x))) :pattern ((Poly%lib!array.Array. x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (= x (Poly%lib!array.Array. (%Poly%lib!array.Array. x)))) :pattern ((has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (_seq! Poly) (_ar! %%Function%%)) (! (=> (and (has_type _seq! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (Poly%array%. _ar!) (ARRAY A&. A& N&. N&))) (has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))) :pattern ((has_type (Poly%lib!array.Array. (lib!array.Array./Array _seq! _ar!)) (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/seq x) (lib!array.Array./Array/?seq x)) :pattern ((lib!array.Array./Array/seq x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.Array./Array/seq (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(assert (forall ((x lib!array.Array.)) (! (= (lib!array.Array./Array/ar x) (lib!array.Array./Array/?ar x)) :pattern ((lib!array.Array./Array/ar x)))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (Poly%array%. (lib!array.Array./Array/ar (%Poly%lib!array.Array. x))) (ARRAY A&. A& N&. N&))) :pattern ((lib!array.Array./Array/ar (%Poly%lib!array.Array. x)) (has_type x (TYPE%lib!array.Array. A&. A& N&. N&))))))
(define-fun is-lib!array.Array./Array_ ((c lib!array.Array.)) Bool ((_ is lib!array.Array./Array) c))
(assert (forall ((x lib!array.Array.)) (! (=> (is-lib!array.Array./Array_ x) (height_lt (height (lib!array.Array./Array/seq x)) (height (Poly%lib!array.Array. x)))) :pattern ((height (lib!array.Array./Array/seq x))))))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (= x (%Poly%lib!array_vec.ArrayVec. (Poly%lib!array_vec.ArrayVec. x))) :pattern ((Poly%lib!array_vec.ArrayVec. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (= x (Poly%lib!array_vec.ArrayVec. (%Poly%lib!array_vec.ArrayVec. x)))) :pattern ((has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (_data! lib!array.Array.) (_len! Int)) (! (=> (and (has_type (Poly%lib!array.Array. _data!) (TYPE%lib!array.Array. T&. T& N&. N&)) (uInv SZ _len!)) (has_type (Poly%lib!array_vec.ArrayVec. (lib!array_vec.ArrayVec./ArrayVec _data! _len!)) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))) :pattern ((has_type (Poly%lib!array_vec.ArrayVec. (lib!array_vec.ArrayVec./ArrayVec _data! _len!)) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (= (lib!array_vec.ArrayVec./ArrayVec/data x) (lib!array_vec.ArrayVec./ArrayVec/?data x)) :pattern ((lib!array_vec.ArrayVec./ArrayVec/data x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (has_type (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. x))) (TYPE%lib!array.Array. T&. T& N&. N&))) :pattern ((lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. x)) (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (= (lib!array_vec.ArrayVec./ArrayVec/len x) (lib!array_vec.ArrayVec./ArrayVec/?len x)) :pattern ((lib!array_vec.ArrayVec./ArrayVec/len x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (uInv SZ (lib!array_vec.ArrayVec./ArrayVec/len (%Poly%lib!array_vec.ArrayVec. x)))) :pattern ((lib!array_vec.ArrayVec./ArrayVec/len (%Poly%lib!array_vec.ArrayVec. x)) (has_type x (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&))))))
(define-fun is-lib!array_vec.ArrayVec./ArrayVec_ ((c lib!array_vec.ArrayVec.)) Bool ((_ is lib!array_vec.ArrayVec./ArrayVec) c))
(assert (forall ((x lib!array_vec.ArrayVec.)) (! (=> (is-lib!array_vec.ArrayVec./ArrayVec_ x) (height_lt (height (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data x))) (height (Poly%lib!array_vec.ArrayVec. x)))) :pattern ((height (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data x)))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::no_duplicates")
(declare-fun vstd!seq_lib.impl&%0.no_duplicates.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::array::Array::wf")
(declare-fun lib!array.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::array::Array::view")
(declare-fun lib!array.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::array_vec::ArrayVec::spec_len")
(declare-fun lib!array_vec.impl&%0.spec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::array_vec::ArrayVec::spec_capacity")
(declare-fun lib!array_vec.impl&%0.spec_capacity.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::array_vec::ArrayVec::wf")
(declare-fun lib!array_vec.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::array_vec::ArrayVec::view_until")
(declare-fun lib!array_vec.impl&%0.view_until.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::array_vec::ArrayVec::view")
(declare-fun lib!array_vec.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::index_of")
(declare-fun vstd!seq_lib.impl&%0.index_of.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::drop_last")
(declare-fun vstd!seq_lib.impl&%0.drop_last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::array_vec::ArrayVec::spec_index")
(declare-fun lib!array_vec.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%4 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::no_duplicates")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.no_duplicates.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.no_duplicates.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!))))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$))))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!))))))
(set-info :comment ";; Function-Axioms lib::array::Array::wf")
(assert (fuel_bool_default fuel%lib!array.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.wf.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.wf.? A&. A& N&. N& self!) (= (vstd!seq.Seq.len.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) (const_int N&))) :pattern ((lib!array.impl&%0.wf.? A&. A& N&. N& self!))))))
(set-info :comment ";; Function-Axioms lib::array::Array::view")
(assert (fuel_bool_default fuel%lib!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!array.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array.impl&%0.view.? A&. A& N&. N& self!) (lib!array.Array./Array/seq (%Poly%lib!array.Array. self!))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array.Array. A&. A& N&. N&)) (has_type (lib!array.impl&%0.view.? A&. A& N&. N& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((lib!array.impl&%0.view.? A&. A& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::array_vec::ArrayVec::spec_len")
(assert (fuel_bool_default fuel%lib!array_vec.impl&%0.spec_len.))
(assert (=> (fuel_bool fuel%lib!array_vec.impl&%0.spec_len.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!) (lib!array_vec.ArrayVec./ArrayVec/len (%Poly%lib!array_vec.ArrayVec. self!))) :pattern ((lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (uInv SZ (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!))) :pattern ((lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::array_vec::ArrayVec::spec_capacity")
(assert (fuel_bool_default fuel%lib!array_vec.impl&%0.spec_capacity.))
(assert (=> (fuel_bool fuel%lib!array_vec.impl&%0.spec_capacity.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& self!) (const_int N&)) :pattern ((lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (uInv SZ (lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& self!))) :pattern ((lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::array_vec::ArrayVec::wf")
(assert (fuel_bool_default fuel%lib!array_vec.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!array_vec.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array_vec.impl&%0.wf.? T&. T& N&. N& self!) (and (and (let ((tmp%%$ (const_int N&))) (and (<= 0 tmp%%$) (<= tmp%%$ (- (uHi SZ) 1)))) (<= (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!) (lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& self!))) (lib!array.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. self!)))))) :pattern ((lib!array_vec.impl&%0.wf.? T&. T& N&. N& self!))))))
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::view_until")
(declare-fun req%lib!array_vec.impl&%0.view_until. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (len! Poly)) (! (= (req%lib!array_vec.impl&%0.view_until. T&. T& N&. N& self! len!) (=> %%global_location_label%%5 (and (<= 0 (%I len!)) (<= (%I len!) (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!))))) :pattern ((req%lib!array_vec.impl&%0.view_until. T&. T& N&. N& self! len!)))))
(set-info :comment ";; Function-Axioms lib::array_vec::ArrayVec::view_until")
(assert (fuel_bool_default fuel%lib!array_vec.impl&%0.view_until.))
(assert (=> (fuel_bool fuel%lib!array_vec.impl&%0.view_until.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (len! Poly)) (! (= (lib!array_vec.impl&%0.view_until.? T&. T& N&. N& self! len!) (vstd!seq.Seq.subrange.? T&. T& (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. (lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. self!))))) (I 0) len!)) :pattern ((lib!array_vec.impl&%0.view_until.? T&. T& N&. N& self! len!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (len! Poly)) (! (=> (and (has_type self! (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (has_type len! NAT)) (has_type (lib!array_vec.impl&%0.view_until.? T&. T& N&. N& self! len!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!array_vec.impl&%0.view_until.? T&. T& N&. N& self! len!)))))
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::view")
(declare-fun req%lib!array_vec.impl&%0.view. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (req%lib!array_vec.impl&%0.view. T&. T& N&. N& self!) (=> %%global_location_label%%6 (lib!array_vec.impl&%0.wf.? T&. T& N&. N& self!))) :pattern ((req%lib!array_vec.impl&%0.view. T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms lib::array_vec::ArrayVec::view")
(assert (fuel_bool_default fuel%lib!array_vec.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!array_vec.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!array_vec.impl&%0.view.? T&. T& N&. N& self!) (lib!array_vec.impl&%0.view_until.? T&. T& N&. N& self! (I (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& self!)))) :pattern ((lib!array_vec.impl&%0.view.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (has_type (lib!array_vec.impl&%0.view.? T&. T& N&. N& self!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!array_vec.impl&%0.view.? T&. T& N&. N& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::index_of")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.index_of.))
(declare-fun %%choose%%0 (Type Int Int Dcr Type Poly Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Int) (%%hole%%2 Int) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Poly) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly)) (! (=> (exists ((i$ Poly)) (! (and (has_type i$ %%hole%%0) (and (and (<= %%hole%%1 (%I i$)) (< (%I i$) %%hole%%2)) (= (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 i$) %%hole%%6))) :pattern ((vstd!seq.Seq.index.? %%hole%%7 %%hole%%8 %%hole%%9 i$)))) (exists ((i$ Poly)) (! (and (and (has_type i$ %%hole%%0) (and (and (<= %%hole%%1 (%I i$)) (< (%I i$) %%hole%%2)) (= (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 i$) %%hole%%6))) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) i$)) :pattern ((vstd!seq.Seq.index.? %%hole%%7 %%hole%%8 %%hole%%9 i$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.index_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.index_of.? A&. A& self! needle!) (%I (as_type (%%choose%%0 INT 0 (vstd!seq.Seq.len.? A&. A& self!) A&. A& self! needle! A&. A& self!) INT))) :pattern ((vstd!seq_lib.impl&%0.index_of.? A&. A& self! needle!))))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::drop_last")
(declare-fun req%vstd!seq_lib.impl&%0.drop_last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!) (=> %%global_location_label%%7 (>= (vstd!seq.Seq.len.? A&. A& self!) 1))) :pattern ((req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::drop_last")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.drop_last.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.drop_last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (vstd!seq.Seq.subrange.? A&. A& self! (I 0) (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!)))))
(set-info :comment ";; Function-Specs lib::array::Array::new")
(declare-fun ens%lib!array.impl&%0.new. (Dcr Type Dcr Type lib!array.Array.) Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (ret! lib!array.Array.)) (! (= (ens%lib!array.impl&%0.new. A&. A& N&. N& ret!) (and (has_type (Poly%lib!array.Array. ret!) (TYPE%lib!array.Array. A&. A& N&. N&)) (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. ret!)))) :pattern ((ens%lib!array.impl&%0.new. A&. A& N&. N& ret!)))))
(set-info :comment ";; Function-Specs lib::array::Array::get")
(declare-fun req%lib!array.impl&%0.get. (Dcr Type Dcr Type lib!array.Array. Int) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! lib!array.Array.) (i! Int)) (! (= (req%lib!array.impl&%0.get. A&. A& N&. N& self! i!) (and (=> %%global_location_label%%8 (and (<= 0 i!) (< i! (const_int N&)))) (=> %%global_location_label%%9 (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. self!))))) :pattern ((req%lib!array.impl&%0.get. A&. A& N&. N& self! i!)))))
(declare-fun ens%lib!array.impl&%0.get. (Dcr Type Dcr Type lib!array.Array. Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (self! lib!array.Array.) (i! Int) (out! Poly)) (! (= (ens%lib!array.impl&%0.get. A&. A& N&. N& self! i! out!) (and (has_type out! A&) (= out! (vstd!seq.Seq.index.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. self!))) (I i!))))) :pattern ((ens%lib!array.impl&%0.get. A&. A& N&. N& self! i! out!)))))
(set-info :comment ";; Function-Specs lib::array::Array::set")
(declare-fun req%lib!array.impl&%1.set. (Dcr Type Dcr Type lib!array.Array. Int Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (pre%self! lib!array.Array.) (i! Int) (out! Poly)) (! (= (req%lib!array.impl&%1.set. A&. A& N&. N& pre%self! i! out!) (and (=> %%global_location_label%%10 (and (<= 0 i!) (< i! (const_int N&)))) (=> %%global_location_label%%11 (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. pre%self!))))) :pattern ((req%lib!array.impl&%1.set. A&. A& N&. N& pre%self! i! out!)))))
(declare-fun ens%lib!array.impl&%1.set. (Dcr Type Dcr Type lib!array.Array. lib!array.Array. Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (N&. Dcr) (N& Type) (pre%self! lib!array.Array.) (self! lib!array.Array.) (i! Int) (out! Poly)) (! (= (ens%lib!array.impl&%1.set. A&. A& N&. N& pre%self! self! i! out!) (and (has_type (Poly%lib!array.Array. self!) (TYPE%lib!array.Array. A&. A& N&. N&)) (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. self!))) (vstd!seq.Seq.update.? A&. A& (lib!array.Array./Array/seq (%Poly%lib!array.Array. (Poly%lib!array.Array. pre%self!))) (I i!) out!)) (lib!array.impl&%0.wf.? A&. A& N&. N& (Poly%lib!array.Array. self!)))) :pattern ((ens%lib!array.impl&%1.set. A&. A& N&. N& pre%self! self! i! out!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms lib::array_vec::ArrayVec::spec_index")
(assert (fuel_bool_default fuel%lib!array_vec.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!array_vec.impl&%0.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (= (lib!array_vec.impl&%0.spec_index.? T&. T& N&. N& self! index!) (vstd!seq.Seq.index.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& self!) index!)) :pattern ((lib!array_vec.impl&%0.spec_index.? T&. T& N&. N& self! index!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (=> (and (has_type self! (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (has_type index! INT)) (has_type (lib!array_vec.impl&%0.spec_index.? T&. T& N&. N& self! index!) T&)) :pattern ((lib!array_vec.impl&%0.spec_index.? T&. T& N&. N& self! index!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::len")
(declare-fun req%lib!array_vec.impl&%0.len. (Dcr Type Dcr Type lib!array_vec.ArrayVec.) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! lib!array_vec.ArrayVec.)) (! (= (req%lib!array_vec.impl&%0.len. T&. T& N&. N& self!) (=> %%global_location_label%%12 (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)))) :pattern ((req%lib!array_vec.impl&%0.len. T&. T& N&. N& self!)))))
(declare-fun ens%lib!array_vec.impl&%0.len. (Dcr Type Dcr Type lib!array_vec.ArrayVec. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! lib!array_vec.ArrayVec.) (ret! Int)) (! (= (ens%lib!array_vec.impl&%0.len. T&. T& N&. N& self! ret!) (and (uInv SZ ret!) (= ret! (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!))))) :pattern ((ens%lib!array_vec.impl&%0.len. T&. T& N&. N& self! ret!)))))
(set-info :comment ";; Function-Def lib::array_vec::ArrayVec::len")
(set-info :comment ";; array_vec.rs:31:5: 31:37 (#0)")
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::pop_unique")
(declare-fun req%lib!array_vec.impl&%0.pop_unique. (Dcr Type Dcr Type lib!array_vec.ArrayVec.) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!array_vec.ArrayVec.)) (! (= (req%lib!array_vec.impl&%0.pop_unique. T&. T& N&. N& pre%self!) (and (=> %%global_location_label%%13 (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!))) (=> %%global_location_label%%14 (> (vstd!seq.Seq.len.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!))) 0)) (=> %%global_location_label%%15 (vstd!seq_lib.impl&%0.no_duplicates.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)))))) :pattern ((req%lib!array_vec.impl&%0.pop_unique. T&. T& N&. N& pre%self!)))))
(declare-fun ens%lib!array_vec.impl&%0.pop_unique. (Dcr Type Dcr Type lib!array_vec.ArrayVec. lib!array_vec.ArrayVec. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!array_vec.ArrayVec.) (self! lib!array_vec.ArrayVec.) (ret! Poly)) (! (= (ens%lib!array_vec.impl&%0.pop_unique. T&. T& N&. N& pre%self! self! ret!) (and (has_type ret! T&) (has_type (Poly%lib!array_vec.ArrayVec. self!) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (= (vstd!seq.Seq.len.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!))) (Sub (vstd!seq.Seq.len.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!))) 1)) (= ret! (vstd!seq.Seq.index.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) (I (Sub (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) 1)))) (ext_eq false (TYPE%vstd!seq.Seq. T&. T&) (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (vstd!seq_lib.impl&%0.drop_last.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)))) (vstd!seq_lib.impl&%0.no_duplicates.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!))))) :pattern ((ens%lib!array_vec.impl&%0.pop_unique. T&. T& N&. N& pre%self! self! ret!)))))
(set-info :comment ";; Function-Def lib::array_vec::ArrayVec::pop_unique")
(set-info :comment ";; array_vec.rs:150:5: 150:45 (#0)")
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::new")
(declare-fun req%lib!array_vec.impl&%0.new. (Dcr Type Dcr Type) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (req%lib!array_vec.impl&%0.new. T&. T& N&. N&) (=> %%global_location_label%%16 (let ((tmp%%$ (const_int N&))) (and (<= 0 tmp%%$) (<= tmp%%$ (- (uHi SZ) 1)))))) :pattern ((req%lib!array_vec.impl&%0.new. T&. T& N&. N&)))))
(declare-fun ens%lib!array_vec.impl&%0.new. (Dcr Type Dcr Type lib!array_vec.ArrayVec.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ret! lib!array_vec.ArrayVec.)) (! (= (ens%lib!array_vec.impl&%0.new. T&. T& N&. N& ret!) (and (has_type (Poly%lib!array_vec.ArrayVec. ret!) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. ret!)) (= (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. ret!)) 0) (= (lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. ret!)) (const_int N&)))) :pattern ((ens%lib!array_vec.impl&%0.new. T&. T& N&. N& ret!)))))
(set-info :comment ";; Function-Def lib::array_vec::ArrayVec::new")
(set-info :comment ";; array_vec.rs:14:5: 14:31 (#0)")
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::capacity")
(declare-fun ens%lib!array_vec.impl&%0.capacity. (Dcr Type Dcr Type lib!array_vec.ArrayVec. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! lib!array_vec.ArrayVec.) (ret! Int)) (! (= (ens%lib!array_vec.impl&%0.capacity. T&. T& N&. N& self! ret!) (and (uInv SZ ret!) (= ret! (lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!))))) :pattern ((ens%lib!array_vec.impl&%0.capacity. T&. T& N&. N& self! ret!)))))
(set-info :comment ";; Function-Def lib::array_vec::ArrayVec::capacity")
(set-info :comment ";; array_vec.rs:45:5: 45:48 (#0)")
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::get")
(declare-fun req%lib!array_vec.impl&%0.get. (Dcr Type Dcr Type lib!array_vec.ArrayVec. Int) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! lib!array_vec.ArrayVec.) (index! Int)) (! (= (req%lib!array_vec.impl&%0.get. T&. T& N&. N& self! index!) (and (=> %%global_location_label%%17 (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!))) (=> %%global_location_label%%18 (< index! (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)))))) :pattern ((req%lib!array_vec.impl&%0.get. T&. T& N&. N& self! index!)))))
(declare-fun ens%lib!array_vec.impl&%0.get. (Dcr Type Dcr Type lib!array_vec.ArrayVec. Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! lib!array_vec.ArrayVec.) (index! Int) (ret! Poly)) (! (= (ens%lib!array_vec.impl&%0.get. T&. T& N&. N& self! index! ret!) (and (has_type ret! T&) (= ret! (vstd!seq.Seq.index.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (I index!))))) :pattern ((ens%lib!array_vec.impl&%0.get. T&. T& N&. N& self! index! ret!)))))
(set-info :comment ";; Function-Def lib::array_vec::ArrayVec::get")
(set-info :comment ";; array_vec.rs:81:5: 81:48 (#0)")
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::push")
(declare-fun req%lib!array_vec.impl&%0.push. (Dcr Type Dcr Type lib!array_vec.ArrayVec. Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!array_vec.ArrayVec.) (value! Poly)) (! (= (req%lib!array_vec.impl&%0.push. T&. T& N&. N& pre%self! value!) (and (=> %%global_location_label%%19 (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!))) (=> %%global_location_label%%20 (< (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) (lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)))))) :pattern ((req%lib!array_vec.impl&%0.push. T&. T& N&. N& pre%self! value!)))))
(declare-fun ens%lib!array_vec.impl&%0.push. (Dcr Type Dcr Type lib!array_vec.ArrayVec. lib!array_vec.ArrayVec. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!array_vec.ArrayVec.) (self! lib!array_vec.ArrayVec.) (value! Poly)) (! (= (ens%lib!array_vec.impl&%0.push. T&. T& N&. N& pre%self! self! value!) (and (has_type (Poly%lib!array_vec.ArrayVec. self!) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (ext_eq false (TYPE%vstd!seq.Seq. T&. T&) (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (vstd!seq.Seq.push.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) value!)) (= (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (Add (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) 1)))) :pattern ((ens%lib!array_vec.impl&%0.push. T&. T& N&. N& pre%self! self! value!)))))
(set-info :comment ";; Function-Def lib::array_vec::ArrayVec::push")
(set-info :comment ";; array_vec.rs:91:5: 91:37 (#0)")
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::push_unique")
(declare-fun req%lib!array_vec.impl&%0.push_unique. (Dcr Type Dcr Type lib!array_vec.ArrayVec. Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!array_vec.ArrayVec.) (value! Poly)) (! (= (req%lib!array_vec.impl&%0.push_unique. T&. T& N&. N& pre%self! value!) (and (=> %%global_location_label%%21 (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!))) (=> %%global_location_label%%22 (< (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) (lib!array_vec.impl&%0.spec_capacity.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)))) (=> %%global_location_label%%23 (vstd!seq_lib.impl&%0.no_duplicates.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)))) (=> %%global_location_label%%24 (= (vstd!seq_lib.impl&%0.contains.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) value!) false)))) :pattern ((req%lib!array_vec.impl&%0.push_unique. T&. T& N&. N& pre%self! value!)))))
(declare-fun ens%lib!array_vec.impl&%0.push_unique. (Dcr Type Dcr Type lib!array_vec.ArrayVec. lib!array_vec.ArrayVec. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!array_vec.ArrayVec.) (self! lib!array_vec.ArrayVec.) (value! Poly)) (! (= (ens%lib!array_vec.impl&%0.push_unique. T&. T& N&. N& pre%self! self! value!) (and (has_type (Poly%lib!array_vec.ArrayVec. self!) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (ext_eq false (TYPE%vstd!seq.Seq. T&. T&) (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (vstd!seq.Seq.push.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) value!)) (= (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (Add (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) 1)) (vstd!seq_lib.impl&%0.no_duplicates.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!))))) :pattern ((ens%lib!array_vec.impl&%0.push_unique. T&. T& N&. N& pre%self! self! value!)))))
(set-info :comment ";; Function-Def lib::array_vec::ArrayVec::push_unique")
(set-info :comment ";; array_vec.rs:106:5: 106:44 (#0)")
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::pop")
(declare-fun req%lib!array_vec.impl&%0.pop. (Dcr Type Dcr Type lib!array_vec.ArrayVec.) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!array_vec.ArrayVec.)) (! (= (req%lib!array_vec.impl&%0.pop. T&. T& N&. N& pre%self!) (and (=> %%global_location_label%%25 (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!))) (=> %%global_location_label%%26 (> (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) 0)))) :pattern ((req%lib!array_vec.impl&%0.pop. T&. T& N&. N& pre%self!)))))
(declare-fun ens%lib!array_vec.impl&%0.pop. (Dcr Type Dcr Type lib!array_vec.ArrayVec. lib!array_vec.ArrayVec. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!array_vec.ArrayVec.) (self! lib!array_vec.ArrayVec.) (ret! Poly)) (! (= (ens%lib!array_vec.impl&%0.pop. T&. T& N&. N& pre%self! self! ret!) (and (has_type ret! T&) (has_type (Poly%lib!array_vec.ArrayVec. self!) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (= (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (Sub (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) 1)) (= ret! (vstd!seq.Seq.index.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) (I (Sub (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) 1)))) (ext_eq false (TYPE%vstd!seq.Seq. T&. T&) (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (vstd!seq_lib.impl&%0.drop_last.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)))))) :pattern ((ens%lib!array_vec.impl&%0.pop. T&. T& N&. N& pre%self! self! ret!)))))
(set-info :comment ";; Function-Def lib::array_vec::ArrayVec::pop")
(set-info :comment ";; array_vec.rs:132:5: 132:37 (#0)")
(set-info :comment ";; Function-Specs lib::array_vec::ArrayVec::set")
(declare-fun req%lib!array_vec.impl&%0.set. (Dcr Type Dcr Type lib!array_vec.ArrayVec. Int Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!array_vec.ArrayVec.) (index! Int) (value! Poly)) (! (= (req%lib!array_vec.impl&%0.set. T&. T& N&. N& pre%self! index! value!) (and (=> %%global_location_label%%27 (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!))) (=> %%global_location_label%%28 (< index! (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)))))) :pattern ((req%lib!array_vec.impl&%0.set. T&. T& N&. N& pre%self! index! value!)))))
(declare-fun ens%lib!array_vec.impl&%0.set. (Dcr Type Dcr Type lib!array_vec.ArrayVec. lib!array_vec.ArrayVec. Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (pre%self! lib!array_vec.ArrayVec.) (self! lib!array_vec.ArrayVec.) (index! Int) (value! Poly)) (! (= (ens%lib!array_vec.impl&%0.set. T&. T& N&. N& pre%self! self! index! value!) (and (has_type (Poly%lib!array_vec.ArrayVec. self!) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (ext_eq false (TYPE%vstd!seq.Seq. T&. T&) (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!)) (vstd!seq.Seq.update.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. pre%self!)) (I index!) value!)))) :pattern ((ens%lib!array_vec.impl&%0.set. T&. T& N&. N& pre%self! self! index! value!)))))
(set-info :comment ";; Function-Def lib::array_vec::ArrayVec::set")
(set-info :comment ";; array_vec.rs:170:5: 170:50 (#0)")
(declare-const T&. Dcr)
(declare-const T& Type)
(declare-const N&. Dcr)
(declare-const N& Type)
(declare-const self!@0 lib!array_vec.ArrayVec.)
(declare-const index! Int)
(declare-const value! Poly)
(assert fuel_defaults)
(assert (has_type (Poly%lib!array_vec.ArrayVec. self!@0) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)))
(assert (uInv SZ index!))
(assert (has_type value! T&))
(assert (uInv SZ (const_int N&)))
(assert (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!@0)))
(assert (< index! (lib!array_vec.impl&%0.spec_len.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!@0))))
(declare-const self!@1 lib!array_vec.ArrayVec.)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%2 Bool)
(assert (not (and (=> %%location_label%%0 (req%lib!array.impl&%1.set. T&. T& N&. N& (lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. (Poly%lib!array_vec.ArrayVec. self!@0))) index! value!)) (=> (= (lib!array_vec.ArrayVec./ArrayVec/len self!@0) (lib!array_vec.ArrayVec./ArrayVec/len self!@1)) (=> (has_type (Poly%lib!array_vec.ArrayVec. self!@1) (TYPE%lib!array_vec.ArrayVec. T&. T& N&. N&)) (=> (ens%lib!array.impl&%1.set. T&. T& N&. N& (lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. (Poly%lib!array_vec.ArrayVec. self!@0))) (lib!array_vec.ArrayVec./ArrayVec/data (%Poly%lib!array_vec.ArrayVec. (Poly%lib!array_vec.ArrayVec. self!@1))) index! value!) (and (=> %%location_label%%1 (lib!array_vec.impl&%0.wf.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!@1))) (=> %%location_label%%2 (ext_eq false (TYPE%vstd!seq.Seq. T&. T&) (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!@1)) (vstd!seq.Seq.update.? T&. T& (lib!array_vec.impl&%0.view.? T&. T& N&. N& (Poly%lib!array_vec.ArrayVec. self!@0)) (I index!) value!))))))))))
(check-sat)
(exit)
