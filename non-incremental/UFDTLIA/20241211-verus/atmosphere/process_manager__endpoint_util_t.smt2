(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Atmosphere (https://mars-research.github.io/projects/atmo/) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module process_manager::endpoint_util_t'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%2.arrow_0. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.value. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.skip. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.no_duplicates. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.is_init. FuelId)
(declare-const fuel%vstd!simple_pptr.impl&%1.value. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%30.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique. FuelId)
(declare-const fuel%lib!slinkedlist.spec_impl_u.impl&%0.view. FuelId)
(declare-const fuel%lib!process_manager.endpoint.impl&%0.get_owning_threads. FuelId)
(declare-const fuel%lib!define.MAX_NUM_THREADS_PER_ENDPOINT. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!raw_ptr.impl&%2.arrow_0. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.impl&%7.is_init. fuel%vstd!raw_ptr.impl&%7.value. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.skip. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq_lib.impl&%0.no_duplicates. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!simple_pptr.impl&%1.is_init. fuel%vstd!simple_pptr.impl&%1.value. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%30.view. fuel%vstd!view.impl&%42.view. fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len. fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique. fuel%lib!slinkedlist.spec_impl_u.impl&%0.view. fuel%lib!process_manager.endpoint.impl&%0.get_owning_threads. fuel%lib!define.MAX_NUM_THREADS_PER_ENDPOINT. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<i32.>. 0)
(declare-sort vstd!seq.Seq<usize.>. 0)
(declare-sort vstd!set.Set<usize.>. 0)
(declare-sort vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (vstd!raw_ptr.MemContents. 0) (lib!slinkedlist.node.Node. 0) (lib!slinkedlist.spec_impl_u.StaticLinkedList. 0) (lib!process_manager.endpoint.Endpoint. 0) (lib!define.EndpointState. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((vstd!raw_ptr.MemContents./Uninit ) (vstd!raw_ptr.MemContents./Init (vstd!raw_ptr.MemContents./Init/?0 Poly))) ((lib!slinkedlist.node.Node./Node (lib!slinkedlist.node.Node./Node/?value core!option.Option.) (lib!slinkedlist.node.Node./Node/?next Int) (lib!slinkedlist.node.Node./Node/?prev Int))) ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?ar %%Function%%) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?spec_seq Poly) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list vstd!seq.Seq<i32.>.) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_head Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_tail Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_len Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list vstd!seq.Seq<i32.>.) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_head Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_tail Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_len Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?size Int) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?arr_seq Poly))) ((lib!process_manager.endpoint.Endpoint./Endpoint (lib!process_manager.endpoint.Endpoint./Endpoint/?queue lib!slinkedlist.spec_impl_u.StaticLinkedList.) (lib!process_manager.endpoint.Endpoint./Endpoint/?queue_state lib!define.EndpointState.) (lib!process_manager.endpoint.Endpoint./Endpoint/?rf_counter Int) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_threads vstd!set.Set<usize.>.) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_container Int) (lib!process_manager.endpoint.Endpoint./Endpoint/?container_rev_ptr Int))) ((lib!define.EndpointState./RECEIVE ) (lib!define.EndpointState./SEND )) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun vstd!raw_ptr.MemContents./Init/0 (vstd!raw_ptr.MemContents.) Poly)
(declare-fun lib!slinkedlist.node.Node./Node/value (lib!slinkedlist.node.Node.) core!option.Option.)
(declare-fun lib!slinkedlist.node.Node./Node/next (lib!slinkedlist.node.Node.) Int)
(declare-fun lib!slinkedlist.node.Node./Node/prev (lib!slinkedlist.node.Node.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (lib!slinkedlist.spec_impl_u.StaticLinkedList.) %%Function%%)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list (lib!slinkedlist.spec_impl_u.StaticLinkedList.) vstd!seq.Seq<i32.>.)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list (lib!slinkedlist.spec_impl_u.StaticLinkedList.) vstd!seq.Seq<i32.>.)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Int)
(declare-fun lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/queue (lib!process_manager.endpoint.Endpoint.) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (lib!process_manager.endpoint.Endpoint.) lib!define.EndpointState.)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (lib!process_manager.endpoint.Endpoint.) Int)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (lib!process_manager.endpoint.Endpoint.) vstd!set.Set<usize.>.)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (lib!process_manager.endpoint.Endpoint.) Int)
(declare-fun lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (lib!process_manager.endpoint.Endpoint.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!raw_ptr.MemContents. (Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!simple_pptr.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%lib!slinkedlist.node.Node. (Dcr Type) Type)
(declare-fun TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!process_manager.endpoint.Endpoint. Type)
(declare-const TYPE%lib!define.EndpointState. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<i32.>. (vstd!seq.Seq<i32.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<i32.>. (Poly) vstd!seq.Seq<i32.>.)
(declare-fun Poly%vstd!seq.Seq<usize.>. (vstd!seq.Seq<usize.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<usize.>. (Poly) vstd!seq.Seq<usize.>.)
(declare-fun Poly%vstd!set.Set<usize.>. (vstd!set.Set<usize.>.) Poly)
(declare-fun %Poly%vstd!set.Set<usize.>. (Poly) vstd!set.Set<usize.>.)
(declare-fun Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) Poly)
(declare-fun %Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (Poly) vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents.) Poly)
(declare-fun %Poly%vstd!raw_ptr.MemContents. (Poly) vstd!raw_ptr.MemContents.)
(declare-fun Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node.) Poly)
(declare-fun %Poly%lib!slinkedlist.node.Node. (Poly) lib!slinkedlist.node.Node.)
(declare-fun Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList.) Poly)
(declare-fun %Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly) lib!slinkedlist.spec_impl_u.StaticLinkedList.)
(declare-fun Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.endpoint.Endpoint.) Poly)
(declare-fun %Poly%lib!process_manager.endpoint.Endpoint. (Poly) lib!process_manager.endpoint.Endpoint.)
(declare-fun Poly%lib!define.EndpointState. (lib!define.EndpointState.) Poly)
(declare-fun %Poly%lib!define.EndpointState. (Poly) lib!define.EndpointState.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<i32.>.)) (! (= x (%Poly%vstd!seq.Seq<i32.>. (Poly%vstd!seq.Seq<i32.>. x))) :pattern ((Poly%vstd!seq.Seq<i32.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (SINT 32))) (= x (Poly%vstd!seq.Seq<i32.>. (%Poly%vstd!seq.Seq<i32.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (SINT 32)))) )))
(assert (forall ((x vstd!seq.Seq<i32.>.)) (! (has_type (Poly%vstd!seq.Seq<i32.>. x) (TYPE%vstd!seq.Seq. $ (SINT 32))) :pattern ((has_type (Poly%vstd!seq.Seq<i32.>. x) (TYPE%vstd!seq.Seq. $ (SINT 32)))) )))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (= x (%Poly%vstd!seq.Seq<usize.>. (Poly%vstd!seq.Seq<usize.>. x))) :pattern ((Poly%vstd!seq.Seq<usize.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ))) (= x (Poly%vstd!seq.Seq<usize.>. (%Poly%vstd!seq.Seq<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT SZ)))) )))
(assert (forall ((x vstd!seq.Seq<usize.>.)) (! (has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!seq.Seq<usize.>. x) (TYPE%vstd!seq.Seq. $ (UINT SZ)))) )))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (= x (%Poly%vstd!set.Set<usize.>. (Poly%vstd!set.Set<usize.>. x))) :pattern ((Poly%vstd!set.Set<usize.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (UINT SZ))) (= x (Poly%vstd!set.Set<usize.>. (%Poly%vstd!set.Set<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (UINT SZ)))) )))
(assert (forall ((x vstd!set.Set<usize.>.)) (! (has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!set.Set<usize.>. x) (TYPE%vstd!set.Set. $ (UINT SZ)))) )))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)) (! (= x (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x))) :pattern ((Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.)) (= x (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x)))) :pattern ((has_type x (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))) )))
(assert (forall ((x vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)) (! (has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.)) :pattern ((has_type (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. x) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= x (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. x))) :pattern ((Poly%vstd!raw_ptr.MemContents. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (= x (Poly%vstd!raw_ptr.MemContents. (%Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&)) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) )))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= (vstd!raw_ptr.MemContents./Init/0 x) (vstd!raw_ptr.MemContents./Init/?0 x)) :pattern ((vstd!raw_ptr.MemContents./Init/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) T&)) :pattern ((vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))) )))
(define-fun is-vstd!raw_ptr.MemContents./Init_ ((c vstd!raw_ptr.MemContents.)) Bool ((_ is vstd!raw_ptr.MemContents./Init) c))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (=> (is-vstd!raw_ptr.MemContents./Init_ x) (height_lt (height (vstd!raw_ptr.MemContents./Init/0 x)) (height (Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((height (vstd!raw_ptr.MemContents./Init/0 x))) )))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= x (%Poly%lib!slinkedlist.node.Node. (Poly%lib!slinkedlist.node.Node. x))) :pattern ((Poly%lib!slinkedlist.node.Node. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (= x (Poly%lib!slinkedlist.node.Node. (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_value! core!option.Option.) (_next! Int) (_prev! Int)) (! (=> (and (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. T&. T&)) (iInv 32 _next!) (iInv 32 _prev!)) (has_type (Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node./Node _value! _next! _prev!)) (TYPE%lib!slinkedlist.node.Node. T&. T&))) :pattern ((has_type (Poly%lib!slinkedlist.node.Node. (lib!slinkedlist.node.Node./Node _value! _next! _prev!)) (TYPE%lib!slinkedlist.node.Node. T&. T&))) )))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/value x) (lib!slinkedlist.node.Node./Node/?value x)) :pattern ((lib!slinkedlist.node.Node./Node/value x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (has_type (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value (%Poly%lib!slinkedlist.node.Node. x))) (TYPE%core!option.Option. T&. T&))) :pattern ((lib!slinkedlist.node.Node./Node/value (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))) )))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/next x) (lib!slinkedlist.node.Node./Node/?next x)) :pattern ((lib!slinkedlist.node.Node./Node/next x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (iInv 32 (lib!slinkedlist.node.Node./Node/next (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((lib!slinkedlist.node.Node./Node/next (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))) )))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (= (lib!slinkedlist.node.Node./Node/prev x) (lib!slinkedlist.node.Node./Node/?prev x)) :pattern ((lib!slinkedlist.node.Node./Node/prev x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&)) (iInv 32 (lib!slinkedlist.node.Node./Node/prev (%Poly%lib!slinkedlist.node.Node. x)))) :pattern ((lib!slinkedlist.node.Node./Node/prev (%Poly%lib!slinkedlist.node.Node. x)) (has_type x (TYPE%lib!slinkedlist.node.Node. T&. T&))) )))
(define-fun is-lib!slinkedlist.node.Node./Node_ ((c lib!slinkedlist.node.Node.)) Bool ((_ is lib!slinkedlist.node.Node./Node) c))
(assert (forall ((x lib!slinkedlist.node.Node.)) (! (=> (is-lib!slinkedlist.node.Node./Node_ x) (height_lt (height (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value x))) (height (Poly%lib!slinkedlist.node.Node. x)))) :pattern ((height (Poly%core!option.Option. (lib!slinkedlist.node.Node./Node/value x)))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= x (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x))) :pattern ((Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (= x (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (_ar! %%Function%%) (_spec_seq! Poly) (_value_list! vstd!seq.Seq<i32.>.) (_value_list_head! Int) (_value_list_tail! Int) (_value_list_len! Int) (_free_list! vstd!seq.Seq<i32.>.) (_free_list_head! Int) (_free_list_tail! Int) (_free_list_len! Int) (_size! Int) (_arr_seq! Poly)) (! (=> (and (has_type (Poly%array%. _ar!) (ARRAY $ (TYPE%lib!slinkedlist.node.Node. T&. T&) N&. N&)) (has_type _spec_seq! (TYPE%vstd!seq.Seq. T&. T&)) (iInv 32 _value_list_head!) (iInv 32 _value_list_tail!) (uInv SZ _value_list_len!) (iInv 32 _free_list_head!) (iInv 32 _free_list_tail!) (uInv SZ _free_list_len!) (uInv SZ _size!) (has_type _arr_seq! (TYPE%vstd!seq.Seq. $ (TYPE%lib!slinkedlist.node.Node. T&. T&)))) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList _ar! _spec_seq! _value_list! _value_list_head! _value_list_tail! _value_list_len! _free_list! _free_list_head! _free_list_tail! _free_list_len! _size! _arr_seq!)) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) :pattern ((has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList _ar! _spec_seq! _value_list! _value_list_head! _value_list_tail! _value_list_len! _free_list! _free_list_head! _free_list_tail! _free_list_len! _size! _arr_seq!)) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?ar x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (Poly%array%. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x))) (ARRAY $ (TYPE%lib!slinkedlist.node.Node. T&. T&) N&. N&))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/ar (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?spec_seq x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list x)) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_head x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_tail x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?value_list_len x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list x)) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_head x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_head (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_tail x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (iInv 32 (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_tail (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?free_list_len x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/free_list_len (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?size x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/size (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (= (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/?arr_seq x)) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (TYPE%vstd!seq.Seq. $ (TYPE%lib!slinkedlist.node.Node. T&. T&)))) :pattern ((lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)) (has_type x (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&))) )))
(define-fun is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ ((c lib!slinkedlist.spec_impl_u.StaticLinkedList.)) Bool ((_ is lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList) c))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ x) (height_lt (height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x)) (height (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq x))) )))
(assert (forall ((x lib!slinkedlist.spec_impl_u.StaticLinkedList.)) (! (=> (is-lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList_ x) (height_lt (height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x)) (height (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. x)))) :pattern ((height (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/arr_seq x))) )))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= x (%Poly%lib!process_manager.endpoint.Endpoint. (Poly%lib!process_manager.endpoint.Endpoint. x))) :pattern ((Poly%lib!process_manager.endpoint.Endpoint. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (= x (Poly%lib!process_manager.endpoint.Endpoint. (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((has_type x TYPE%lib!process_manager.endpoint.Endpoint.)) )))
(assert (forall ((_queue! lib!slinkedlist.spec_impl_u.StaticLinkedList.) (_queue_state! lib!define.EndpointState.) (_rf_counter! Int) (_owning_threads! vstd!set.Set<usize.>.) (_owning_container! Int) (_container_rev_ptr! Int)) (! (=> (and (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. _queue!) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 128))) (uInv SZ _rf_counter!) (uInv SZ _owning_container!) (iInv 32 _container_rev_ptr!)) (has_type (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.endpoint.Endpoint./Endpoint _queue! _queue_state! _rf_counter! _owning_threads! _owning_container! _container_rev_ptr!)) TYPE%lib!process_manager.endpoint.Endpoint.)) :pattern ((has_type (Poly%lib!process_manager.endpoint.Endpoint. (lib!process_manager.endpoint.Endpoint./Endpoint _queue! _queue_state! _rf_counter! _owning_threads! _owning_container! _container_rev_ptr!)) TYPE%lib!process_manager.endpoint.Endpoint.)) )))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue x) (lib!process_manager.endpoint.Endpoint./Endpoint/?queue x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/queue x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (has_type (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. x))) (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. $ (UINT SZ) $ (CONST_INT 128)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)) )))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state x) (lib!process_manager.endpoint.Endpoint./Endpoint/?queue_state x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/queue_state x)) )))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter x) (lib!process_manager.endpoint.Endpoint./Endpoint/?rf_counter x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (uInv SZ (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)) )))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads x) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_threads x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads x)) )))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container x) (lib!process_manager.endpoint.Endpoint./Endpoint/?owning_container x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/owning_container x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (uInv SZ (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)) )))
(assert (forall ((x lib!process_manager.endpoint.Endpoint.)) (! (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr x) (lib!process_manager.endpoint.Endpoint./Endpoint/?container_rev_ptr x)) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!process_manager.endpoint.Endpoint.) (iInv 32 (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. x)))) :pattern ((lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. x)) (has_type x TYPE%lib!process_manager.endpoint.Endpoint.)) )))
(assert (forall ((x lib!define.EndpointState.)) (! (= x (%Poly%lib!define.EndpointState. (Poly%lib!define.EndpointState. x))) :pattern ((Poly%lib!define.EndpointState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!define.EndpointState.) (= x (Poly%lib!define.EndpointState. (%Poly%lib!define.EndpointState. x)))) :pattern ((has_type x TYPE%lib!define.EndpointState.)) )))
(assert (forall ((x lib!define.EndpointState.)) (! (has_type (Poly%lib!define.EndpointState. x) TYPE%lib!define.EndpointState.) :pattern ((has_type (Poly%lib!define.EndpointState. x) TYPE%lib!define.EndpointState.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)) )))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)) )) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)) )))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))) )))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 32)) (SINT 32)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::no_duplicates")
(declare-fun vstd!seq_lib.impl&%0.no_duplicates.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::addr")
(declare-fun vstd!simple_pptr.impl&%1.addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::mem_contents")
(declare-fun vstd!simple_pptr.impl&%1.mem_contents.? (Dcr Type Poly) vstd!raw_ptr.MemContents.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::is_init")
(declare-fun vstd!raw_ptr.impl&%7.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::is_init")
(declare-fun vstd!simple_pptr.impl&%1.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%2::arrow_0")
(declare-fun vstd!raw_ptr.impl&%2.arrow_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::value")
(declare-fun vstd!raw_ptr.impl&%7.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::simple_pptr::impl&%1::value")
(declare-fun vstd!simple_pptr.impl&%1.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::view")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::spec_len")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::unique")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.unique.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::wf")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.wf.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_valid")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(declare-fun lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::skip")
(declare-fun vstd!seq.impl&%0.skip.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::process_manager::endpoint::Endpoint::get_owning_threads")
(declare-fun lib!process_manager.endpoint.impl&%0.get_owning_threads.? (Poly) vstd!set.Set<usize.>.)
(set-info :comment ";; Function-Decl lib::define::MAX_NUM_THREADS_PER_ENDPOINT")
(declare-fun lib!define.MAX_NUM_THREADS_PER_ENDPOINT.? () Int)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) )))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%3 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::no_duplicates")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.no_duplicates.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.no_duplicates.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$)) ))) :pattern ((vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::addr")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (uInv SZ (vstd!simple_pptr.impl&%1.addr.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.addr.? V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::mem_contents")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)) (TYPE%vstd!raw_ptr.MemContents. V&. V&))) :pattern ((vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.is_init.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::is_init")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.is_init.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.is_init.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.is_init.? V&. V& self!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!))) :pattern ((vstd!simple_pptr.impl&%1.is_init.? V&. V& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%2::arrow_0")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%2.arrow_0.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%2.arrow_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.value.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%7.value.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!)) )))
(set-info :comment ";; Function-Specs vstd::simple_pptr::impl&%1::value")
(declare-fun req%vstd!simple_pptr.impl&%1.value. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (req%vstd!simple_pptr.impl&%1.value. V&. V& self!) (=> %%global_location_label%%4 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!)))) :pattern ((req%vstd!simple_pptr.impl&%1.value. V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::simple_pptr::impl&%1::value")
(assert (fuel_bool_default fuel%vstd!simple_pptr.impl&%1.value.))
(assert (=> (fuel_bool fuel%vstd!simple_pptr.impl&%1.value.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!simple_pptr.impl&%1.value.? V&. V& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? V&. V& self!))))) :pattern ((vstd!simple_pptr.impl&%1.value.? V&. V& self!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!simple_pptr.PointsTo. V&. V&)) (has_type (vstd!simple_pptr.impl&%1.value.? V&. V& self!) V&)) :pattern ((vstd!simple_pptr.impl&%1.value.? V&. V& self!)) )))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::view")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!) (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!)) )))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::spec_len")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.spec_len.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!) (uClip SZ (vstd!seq.Seq.len.? T&. T& (lib!slinkedlist.spec_impl_u.impl&%0.view.? T&. T& N&. N& self!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (uInv SZ (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!)) )))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::unique")
(assert (fuel_bool_default fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique.))
(assert (=> (fuel_bool fuel%lib!slinkedlist.spec_impl_u.impl&%0.unique.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!))) (and (<= 0 (%I j$)) (< (%I j$) (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? T&. T& N&. N& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) i$) (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) j$))))) :pattern ((vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) i$) (vstd!seq.Seq.index.? T&. T& (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/spec_seq (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. self!)) j$)) ))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.unique.? T&. T& N&. N& self!)) ))))
(set-info :comment ";; Function-Specs lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(declare-fun req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (= (req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. T&. T& N&. N& self! index!) (=> %%global_location_label%%5 (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? T&. T& N&. N& self! index!))) :pattern ((req%lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve. T&. T& N&. N& self! index!)) )))
(set-info :comment ";; Function-Axioms lib::slinkedlist::spec_impl_u::StaticLinkedList::node_ref_resolve")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (index! Poly)) (! (=> (and (has_type self! (TYPE%lib!slinkedlist.spec_impl_u.StaticLinkedList. T&. T& N&. N&)) (has_type index! (SINT 32))) (has_type (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& self! index!) T&)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? T&. T& N&. N& self! index!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::skip")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.skip.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.skip.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.skip.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! n! (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.skip.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)) )))
(set-info :comment ";; Function-Axioms lib::process_manager::endpoint::Endpoint::get_owning_threads")
(assert (fuel_bool_default fuel%lib!process_manager.endpoint.impl&%0.get_owning_threads.))
(assert (=> (fuel_bool fuel%lib!process_manager.endpoint.impl&%0.get_owning_threads.) (forall ((self! Poly)) (! (= (lib!process_manager.endpoint.impl&%0.get_owning_threads.? self!) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. self!))) :pattern ((lib!process_manager.endpoint.impl&%0.get_owning_threads.? self!)) ))))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::endpoint_add_ref")
(declare-fun req%lib!process_manager.endpoint_util_t.endpoint_add_ref. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int) Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (thread_ptr! Int)) (! (= (req%lib!process_manager.endpoint_util_t.endpoint_add_ref. endpoint_ptr! pre%endpoint_perm! thread_ptr!) (and (=> %%global_location_label%%6 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))) (=> %%global_location_label%%7 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)) endpoint_ptr!)) (=> %%global_location_label%%8 (not (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))) (- (uHi SZ) 1)))) (=> %%global_location_label%%9 (= (vstd!set.impl&%0.contains.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.impl&%0.get_owning_threads.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))) (I thread_ptr!)) false)))) :pattern ((req%lib!process_manager.endpoint_util_t.endpoint_add_ref. endpoint_ptr! pre%endpoint_perm! thread_ptr!)) )))
(declare-fun ens%lib!process_manager.endpoint_util_t.endpoint_add_ref. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int) Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (thread_ptr! Int)) (! (= (ens%lib!process_manager.endpoint_util_t.endpoint_add_ref. endpoint_ptr! pre%endpoint_perm! endpoint_perm! thread_ptr!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)) endpoint_ptr!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (Add (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))) 1)) (= (lib!process_manager.endpoint.impl&%0.get_owning_threads.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))) (%Poly%vstd!set.Set<usize.>. (vstd!set.impl&%0.insert.? $ (UINT SZ) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.impl&%0.get_owning_threads.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))) (I thread_ptr!)))))) :pattern ((ens%lib!process_manager.endpoint_util_t.endpoint_add_ref. endpoint_ptr! pre%endpoint_perm! endpoint_perm! thread_ptr!)) )))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::endpoint_set_sll_index")
(declare-fun req%lib!process_manager.endpoint_util_t.endpoint_set_sll_index. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int) Bool)
(declare-const %%global_location_label%%10 Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (sll_index! Int)) (! (= (req%lib!process_manager.endpoint_util_t.endpoint_set_sll_index. endpoint_ptr! pre%endpoint_perm! sll_index!) (and (=> %%global_location_label%%10 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))) (=> %%global_location_label%%11 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)) endpoint_ptr!)))) :pattern ((req%lib!process_manager.endpoint_util_t.endpoint_set_sll_index. endpoint_ptr! pre%endpoint_perm! sll_index!)) )))
(declare-fun ens%lib!process_manager.endpoint_util_t.endpoint_set_sll_index. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int) Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (sll_index! Int)) (! (= (ens%lib!process_manager.endpoint_util_t.endpoint_set_sll_index. endpoint_ptr! pre%endpoint_perm! endpoint_perm! sll_index!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)) endpoint_ptr!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) sll_index!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))))) :pattern ((ens%lib!process_manager.endpoint_util_t.endpoint_set_sll_index. endpoint_ptr! pre%endpoint_perm! endpoint_perm! sll_index!)) )))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::endpoint_set_owning_container")
(declare-fun req%lib!process_manager.endpoint_util_t.endpoint_set_owning_container. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (owning_container! Int)) (! (= (req%lib!process_manager.endpoint_util_t.endpoint_set_owning_container. endpoint_ptr! pre%endpoint_perm! owning_container!) (and (=> %%global_location_label%%12 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))) (=> %%global_location_label%%13 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)) endpoint_ptr!)))) :pattern ((req%lib!process_manager.endpoint_util_t.endpoint_set_owning_container. endpoint_ptr! pre%endpoint_perm! owning_container!)) )))
(declare-fun ens%lib!process_manager.endpoint_util_t.endpoint_set_owning_container. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int) Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (owning_container! Int)) (! (= (ens%lib!process_manager.endpoint_util_t.endpoint_set_owning_container. endpoint_ptr! pre%endpoint_perm! endpoint_perm! owning_container!) (and (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)) endpoint_ptr!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) owning_container!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))))) :pattern ((ens%lib!process_manager.endpoint_util_t.endpoint_set_owning_container. endpoint_ptr! pre%endpoint_perm! endpoint_perm! owning_container!)) )))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::endpoint_pop_head")
(declare-fun req%lib!process_manager.endpoint_util_t.endpoint_pop_head. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)) (! (= (req%lib!process_manager.endpoint_util_t.endpoint_pop_head. endpoint_ptr! pre%endpoint_perm!) (and (=> %%global_location_label%%14 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))) (=> %%global_location_label%%15 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)) endpoint_ptr!)) (=> %%global_location_label%%16 (> (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) 0)))) :pattern ((req%lib!process_manager.endpoint_util_t.endpoint_pop_head. endpoint_ptr! pre%endpoint_perm!)) )))
(declare-fun ens%lib!process_manager.endpoint_util_t.endpoint_pop_head. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. tuple%2.) Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (ret! tuple%2.)) (! (= (ens%lib!process_manager.endpoint_util_t.endpoint_pop_head. endpoint_ptr! pre%endpoint_perm! endpoint_perm! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) $ (SINT 32))) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)) endpoint_ptr!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (Sub (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) 1)) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (vstd!seq.Seq.subrange.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) (I 1) (I (vstd!seq.Seq.len.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))))))) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))) (vstd!seq.Seq.index.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) (I 0))) (= (vstd!seq.Seq.index.? $ (SINT 32) (Poly%vstd!seq.Seq<i32.>. (lib!slinkedlist.spec_impl_u.StaticLinkedList./StaticLinkedList/value_list (%Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))))) (I 0)) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (not (= index$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) )) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (not (= index$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) )) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (not (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (and (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$))))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) )) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (vstd!seq_lib.impl&%0.no_duplicates.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))))))) :pattern ((ens%lib!process_manager.endpoint_util_t.endpoint_pop_head. endpoint_ptr! pre%endpoint_perm! endpoint_perm! ret!)) )))
(set-info :comment ";; Function-Axioms lib::define::MAX_NUM_THREADS_PER_ENDPOINT")
(assert (fuel_bool_default fuel%lib!define.MAX_NUM_THREADS_PER_ENDPOINT.))
(assert (=> (fuel_bool fuel%lib!define.MAX_NUM_THREADS_PER_ENDPOINT.) (= lib!define.MAX_NUM_THREADS_PER_ENDPOINT.? 128)))
(assert (uInv SZ lib!define.MAX_NUM_THREADS_PER_ENDPOINT.?))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::endpoint_push")
(declare-fun req%lib!process_manager.endpoint_util_t.endpoint_push. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (t_ptr! Int)) (! (= (req%lib!process_manager.endpoint_util_t.endpoint_push. endpoint_ptr! pre%endpoint_perm! t_ptr!) (and (=> %%global_location_label%%17 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))) (=> %%global_location_label%%18 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)) endpoint_ptr!)) (=> %%global_location_label%%19 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) lib!define.MAX_NUM_THREADS_PER_ENDPOINT.?)))) :pattern ((req%lib!process_manager.endpoint_util_t.endpoint_push. endpoint_ptr! pre%endpoint_perm! t_ptr!)) )))
(declare-fun ens%lib!process_manager.endpoint_util_t.endpoint_push. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int Int) Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (t_ptr! Int) (ret! Int)) (! (= (ens%lib!process_manager.endpoint_util_t.endpoint_push. endpoint_ptr! pre%endpoint_perm! endpoint_perm! t_ptr! ret!) (and (iInv 32 ret!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)) endpoint_ptr!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) (I t_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) )) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) )) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) )) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) (I ret!))) t_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))))) :pattern ((ens%lib!process_manager.endpoint_util_t.endpoint_push. endpoint_ptr! pre%endpoint_perm! endpoint_perm! t_ptr! ret!)) )))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::endpoint_push_and_set_state")
(declare-fun req%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int lib!define.EndpointState.) Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (t_ptr! Int) (queue_state! lib!define.EndpointState.)) (! (= (req%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. endpoint_ptr! pre%endpoint_perm! t_ptr! queue_state!) (and (=> %%global_location_label%%20 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))) (=> %%global_location_label%%21 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)) endpoint_ptr!)) (=> %%global_location_label%%22 (< (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) lib!define.MAX_NUM_THREADS_PER_ENDPOINT.?)))) :pattern ((req%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. endpoint_ptr! pre%endpoint_perm! t_ptr! queue_state!)) )))
(declare-fun ens%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. (Int vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. Int lib!define.EndpointState. Int) Bool)
(assert (forall ((endpoint_ptr! Int) (pre%endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (endpoint_perm! vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.) (t_ptr! Int) (queue_state! lib!define.EndpointState.) (ret! Int)) (! (= (ens%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. endpoint_ptr! pre%endpoint_perm! endpoint_perm! t_ptr! queue_state! ret!) (and (iInv 32 ret!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)) endpoint_ptr!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) queue_state!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))) (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (= (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (vstd!seq.Seq.push.? $ (UINT SZ) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) (I t_ptr!))) (= (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))) (Add (lib!slinkedlist.spec_impl_u.impl&%0.spec_len.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!))))))))) 1)) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) )) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (not (= (%I index$) ret!)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) )) (forall ((index$ Poly)) (! (=> (has_type index$ (SINT 32)) (=> (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$) (= (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)))) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) index$)) :pattern ((lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. pre%endpoint_perm!)))))))) index$)) )) (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_valid.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) (I ret!)) (= (%I (lib!slinkedlist.spec_impl_u.impl&%0.node_ref_resolve.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!)))))))) (I ret!))) t_ptr!) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm!))))))))))) :pattern ((ens%lib!process_manager.endpoint_util_t.endpoint_push_and_set_state. endpoint_ptr! pre%endpoint_perm! endpoint_perm! t_ptr! queue_state! ret!)) )))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::page_to_endpoint")
(declare-fun req%lib!process_manager.endpoint_util_t.page_to_endpoint. (Int Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((page_ptr! Int) (page_perm! Poly)) (! (= (req%lib!process_manager.endpoint_util_t.page_to_endpoint. page_ptr! page_perm!) (and (=> %%global_location_label%%23 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!))) (=> %%global_location_label%%24 (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!) page_ptr!)))) :pattern ((req%lib!process_manager.endpoint_util_t.page_to_endpoint. page_ptr! page_perm!)) )))
(declare-fun ens%lib!process_manager.endpoint_util_t.page_to_endpoint. (Int Poly tuple%2.) Bool)
(assert (forall ((page_ptr! Int) (page_perm! Poly) (ret! tuple%2.)) (! (= (ens%lib!process_manager.endpoint_util_t.page_to_endpoint. page_ptr! page_perm! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) (TRACKED $) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))) (= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) page_ptr!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (ext_eq false TYPE%lib!define.EndpointState. (Poly%lib!define.EndpointState. (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (Poly%lib!define.EndpointState. lib!define.EndpointState./SEND)) (ext_eq false (UINT SZ) (I (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (I 0)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (vstd!set.impl&%0.empty.? $ (UINT SZ))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) 0) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) 0))) :pattern ((ens%lib!process_manager.endpoint_util_t.page_to_endpoint. page_ptr! page_perm! ret!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%30::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%30.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%30.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 32) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Function-Specs lib::process_manager::endpoint_util_t::page_to_endpoint_with_thread_and_container")
(declare-fun req%lib!process_manager.endpoint_util_t.page_to_endpoint_with_thread_and_container. (Int Int Int Int Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((owning_container! Int) (owning_thread! Int) (sll! Int) (page_ptr! Int) (page_perm! Poly)) (! (= (req%lib!process_manager.endpoint_util_t.page_to_endpoint_with_thread_and_container. owning_container! owning_thread! sll! page_ptr! page_perm!) (and (=> %%global_location_label%%25 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!))) (=> %%global_location_label%%26 (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!) page_ptr!)))) :pattern ((req%lib!process_manager.endpoint_util_t.page_to_endpoint_with_thread_and_container. owning_container! owning_thread! sll! page_ptr! page_perm!)) )))
(declare-fun ens%lib!process_manager.endpoint_util_t.page_to_endpoint_with_thread_and_container. (Int Int Int Int Poly tuple%2.) Bool)
(assert (forall ((owning_container! Int) (owning_thread! Int) (sll! Int) (page_ptr! Int) (page_perm! Poly) (ret! tuple%2.)) (! (= (ens%lib!process_manager.endpoint_util_t.page_to_endpoint_with_thread_and_container. owning_container! owning_thread! sll! page_ptr! page_perm! ret!) (and (has_type (Poly%tuple%2. ret!) (TYPE%tuple%2. $ (UINT SZ) (TRACKED $) (TYPE%vstd!simple_pptr.PointsTo. $ TYPE%lib!process_manager.endpoint.Endpoint.))) (= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) page_ptr!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!))))) (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ))) (ext_eq false TYPE%lib!define.EndpointState. (Poly%lib!define.EndpointState. (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (Poly%lib!define.EndpointState. lib!define.EndpointState./SEND)) (ext_eq false (UINT SZ) (I (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (I 1)) (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (vstd!set.impl&%0.empty.? $ (UINT SZ)) (I owning_thread!))) (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) owning_container!) (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) sll!))) :pattern ((ens%lib!process_manager.endpoint_util_t.page_to_endpoint_with_thread_and_container. owning_container! owning_thread! sll! page_ptr! page_perm! ret!)) )))
(set-info :comment ";; Function-Def lib::process_manager::endpoint_util_t::page_to_endpoint_with_thread_and_container")
(set-info :comment ";; process_manager/endpoint_util_t.rs:249:1: 249:221 (#0)")
(declare-const ret! tuple%2.)
(declare-const owning_container! Int)
(declare-const owning_thread! Int)
(declare-const sll! Int)
(declare-const page_ptr! Int)
(declare-const page_perm! Poly)
(declare-const tmp%%@ tuple%2.)
(declare-const endpoint_ptr@0 Int)
(declare-const endpoint_perm@0 vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)
(assert fuel_defaults)
(assert (uInv SZ owning_container!))
(assert (uInv SZ owning_thread!))
(assert (iInv 32 sll!))
(assert (uInv SZ page_ptr!))
(assert (has_type page_perm! (TYPE%vstd!simple_pptr.PointsTo. $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)))))
(assert (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!)))
(assert (= (vstd!simple_pptr.impl&%1.addr.? $ (ARRAY $ (UINT 8) $ (CONST_INT 4096)) page_perm!) page_ptr!))
(declare-const endpoint_perm@1 vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)
(declare-const endpoint_perm@2 vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)
(declare-const endpoint_perm@3 vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>.)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%14 Bool)
(assert (not (and (=> %%location_label%%0 (req%lib!process_manager.endpoint_util_t.page_to_endpoint. page_ptr! page_perm!)) (=> (ens%lib!process_manager.endpoint_util_t.page_to_endpoint. page_ptr! page_perm! tmp%%@) (=> (= endpoint_ptr@0 (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (=> (= endpoint_perm@0 (%Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))) (and (=> %%location_label%%1 (req%lib!process_manager.endpoint_util_t.endpoint_add_ref. endpoint_ptr@0 endpoint_perm@0 owning_thread!)) (=> (ens%lib!process_manager.endpoint_util_t.endpoint_add_ref. endpoint_ptr@0 endpoint_perm@0 endpoint_perm@1 owning_thread!) (and (=> %%location_label%%2 (req%lib!process_manager.endpoint_util_t.endpoint_set_owning_container. endpoint_ptr@0 endpoint_perm@1 owning_container!)) (=> (ens%lib!process_manager.endpoint_util_t.endpoint_set_owning_container. endpoint_ptr@0 endpoint_perm@1 endpoint_perm@2 owning_container!) (and (=> %%location_label%%3 (req%lib!process_manager.endpoint_util_t.endpoint_set_sll_index. endpoint_ptr@0 endpoint_perm@2 sll!)) (=> (ens%lib!process_manager.endpoint_util_t.endpoint_set_sll_index. endpoint_ptr@0 endpoint_perm@2 endpoint_perm@3 sll!) (=> (= ret! (tuple%2./tuple%2 (I endpoint_ptr@0) (Poly%vstd!simple_pptr.PointsTo<lib!process_manager.endpoint.Endpoint.>. endpoint_perm@3))) (and (=> %%location_label%%4 (= (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) page_ptr!)) (and (=> %%location_label%%5 (is-vstd!raw_ptr.MemContents./Init_ (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (and (=> %%location_label%%6 (= (vstd!simple_pptr.impl&%1.addr.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))) (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))) (and (=> %%location_label%%7 (lib!slinkedlist.spec_impl_u.impl&%0.wf.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))))) (and (=> %%location_label%%8 (lib!slinkedlist.spec_impl_u.impl&%0.unique.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))))) (and (=> %%location_label%%9 (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT SZ)) (lib!slinkedlist.spec_impl_u.impl&%0.view.? $ (UINT SZ) $ (CONST_INT 128) (Poly%lib!slinkedlist.spec_impl_u.StaticLinkedList. (lib!process_manager.endpoint.Endpoint./Endpoint/queue (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))))) (vstd!seq.Seq.empty.? $ (UINT SZ)))) (and (=> %%location_label%%10 (ext_eq false TYPE%lib!define.EndpointState. (Poly%lib!define.EndpointState. (lib!process_manager.endpoint.Endpoint./Endpoint/queue_state (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (Poly%lib!define.EndpointState. lib!define.EndpointState./SEND))) (and (=> %%location_label%%11 (ext_eq false (UINT SZ) (I (lib!process_manager.endpoint.Endpoint./Endpoint/rf_counter (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (I 1))) (and (=> %%location_label%%12 (ext_eq false (TYPE%vstd!set.Set. $ (UINT SZ)) (Poly%vstd!set.Set<usize.>. (lib!process_manager.endpoint.Endpoint./Endpoint/owning_threads (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!)))))))))) (vstd!set.impl&%0.insert.? $ (UINT SZ) (vstd!set.impl&%0.empty.? $ (UINT SZ)) (I owning_thread!)))) (and (=> %%location_label%%13 (= (lib!process_manager.endpoint.Endpoint./Endpoint/owning_container (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) owning_container!)) (=> %%location_label%%14 (= (lib!process_manager.endpoint.Endpoint./Endpoint/container_rev_ptr (%Poly%lib!process_manager.endpoint.Endpoint. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!simple_pptr.impl&%1.mem_contents.? $ TYPE%lib!process_manager.endpoint.Endpoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. ret!))))))))) sll!)))))))))))))))))))))))))
(check-sat)
(exit)
