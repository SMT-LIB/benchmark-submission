(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!std_specs.vec.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_vec_index_decreases. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.drop_last. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.fold_left. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%46.view. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%2.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%2.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%2.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%3.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%3.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%3.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%4.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%4.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%4.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%6.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%6.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%6.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%8.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%8.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%8.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%10.view_equal. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%10.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_ironsht_specific_v.impl&%10.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%0.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%0.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%0.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%1.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%1.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%1.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%2.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%2.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%2.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%3.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%3.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%3.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%4.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%4.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%4.ghost_serialize. FuelId)
(declare-const fuel%lib!marshal_v.impl&%5.view_equal. FuelId)
(declare-const fuel%lib!marshal_v.impl&%5.is_marshalable. FuelId)
(declare-const fuel%lib!marshal_v.impl&%5.ghost_serialize. FuelId)
(declare-const fuel%lib!app_interface_t.max_val_len. FuelId)
(declare-const fuel%lib!app_interface_t.valid_key. FuelId)
(declare-const fuel%lib!app_interface_t.valid_value. FuelId)
(declare-const fuel%lib!hashmap_t.impl&%0.lemma_to_vec. FuelId)
(declare-const fuel%lib!hashmap_t.impl&%0.lemma_from_vec. FuelId)
(declare-const fuel%lib!hashmap_t.impl&%1.view. FuelId)
(declare-const fuel%lib!hashmap_t.ckeykvlt. FuelId)
(declare-const fuel%lib!hashmap_t.spec_sorted_keys. FuelId)
(declare-const fuel%lib!host_protocol_t.max_hashtable_size. FuelId)
(declare-const fuel%lib!host_protocol_t.valid_hashtable. FuelId)
(declare-const fuel%lib!io_t.impl&%4.view. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.vec.impl&%0.spec_index. fuel%vstd!std_specs.vec.axiom_spec_len. fuel%vstd!std_specs.vec.axiom_vec_index_decreases. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.drop_last. fuel%vstd!seq_lib.impl&%0.fold_left. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%46.view. fuel%lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size. fuel%lib!marshal_ironsht_specific_v.impl&%2.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%2.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%2.ghost_serialize. fuel%lib!marshal_ironsht_specific_v.impl&%3.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%3.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%3.ghost_serialize. fuel%lib!marshal_ironsht_specific_v.impl&%4.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%4.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%4.ghost_serialize. fuel%lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else. fuel%lib!marshal_ironsht_specific_v.impl&%6.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%6.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%6.ghost_serialize. fuel%lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else. fuel%lib!marshal_ironsht_specific_v.impl&%8.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%8.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%8.ghost_serialize. fuel%lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else. fuel%lib!marshal_ironsht_specific_v.impl&%10.view_equal. fuel%lib!marshal_ironsht_specific_v.impl&%10.is_marshalable. fuel%lib!marshal_ironsht_specific_v.impl&%10.ghost_serialize. fuel%lib!marshal_v.impl&%0.view_equal. fuel%lib!marshal_v.impl&%0.is_marshalable. fuel%lib!marshal_v.impl&%0.ghost_serialize. fuel%lib!marshal_v.impl&%1.view_equal. fuel%lib!marshal_v.impl&%1.is_marshalable. fuel%lib!marshal_v.impl&%1.ghost_serialize. fuel%lib!marshal_v.impl&%2.view_equal. fuel%lib!marshal_v.impl&%2.is_marshalable. fuel%lib!marshal_v.impl&%2.ghost_serialize. fuel%lib!marshal_v.impl&%3.view_equal. fuel%lib!marshal_v.impl&%3.is_marshalable. fuel%lib!marshal_v.impl&%3.ghost_serialize. fuel%lib!marshal_v.impl&%4.view_equal. fuel%lib!marshal_v.impl&%4.is_marshalable. fuel%lib!marshal_v.impl&%4.ghost_serialize. fuel%lib!marshal_v.impl&%5.view_equal. fuel%lib!marshal_v.impl&%5.is_marshalable. fuel%lib!marshal_v.impl&%5.ghost_serialize. fuel%lib!app_interface_t.max_val_len. fuel%lib!app_interface_t.valid_key. fuel%lib!app_interface_t.valid_value. fuel%lib!hashmap_t.impl&%0.lemma_to_vec. fuel%lib!hashmap_t.impl&%0.lemma_from_vec. fuel%lib!hashmap_t.impl&%1.view. fuel%lib!hashmap_t.ckeykvlt. fuel%lib!hashmap_t.spec_sorted_keys. fuel%lib!host_protocol_t.max_hashtable_size. fuel%lib!host_protocol_t.valid_hashtable. fuel%lib!io_t.impl&%4.view. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (and (fuel_bool_default fuel%vstd!std_specs.vec.axiom_spec_len.) (fuel_bool_default fuel%vstd!std_specs.vec.axiom_vec_index_decreases.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-sort alloc!vec.Vec<u8./allocator_global%.>. 0)
(declare-sort alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. 0)
(declare-sort lib!hashmap_t.CKeyHashMap. 0)
(declare-sort vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. 0)
(declare-sort vstd!set.Set<lib!keys_t.SHTKey.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!cmessage_v.CMessage. 0) (lib!abstract_end_point_t.AbstractEndPoint. 0) (lib!hashmap_t.CKeyKV. 0) (lib!io_t.EndPoint. 0) (lib!keys_t.KeyIterator. 0) (lib!keys_t.KeyRange. 0) (lib!keys_t.SHTKey. 0) (tuple%0. 0) (tuple%2. 0) (tuple%4. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!cmessage_v.CMessage./GetRequest (lib!cmessage_v.CMessage./GetRequest/?k lib!keys_t.SHTKey.)) (lib!cmessage_v.CMessage./SetRequest (lib!cmessage_v.CMessage./SetRequest/?k lib!keys_t.SHTKey.) (lib!cmessage_v.CMessage./SetRequest/?v core!option.Option.)) (lib!cmessage_v.CMessage./Reply (lib!cmessage_v.CMessage./Reply/?k lib!keys_t.SHTKey.) (lib!cmessage_v.CMessage./Reply/?v core!option.Option.)) (lib!cmessage_v.CMessage./Redirect (lib!cmessage_v.CMessage./Redirect/?k lib!keys_t.SHTKey.) (lib!cmessage_v.CMessage./Redirect/?id lib!io_t.EndPoint.)) (lib!cmessage_v.CMessage./Shard (lib!cmessage_v.CMessage./Shard/?kr lib!keys_t.KeyRange.) (lib!cmessage_v.CMessage./Shard/?recipient lib!io_t.EndPoint.)) (lib!cmessage_v.CMessage./Delegate (lib!cmessage_v.CMessage./Delegate/?range lib!keys_t.KeyRange.) (lib!cmessage_v.CMessage./Delegate/?h lib!hashmap_t.CKeyHashMap.))) ((lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/?id vstd!seq.Seq<u8.>.))) ((lib!hashmap_t.CKeyKV./CKeyKV (lib!hashmap_t.CKeyKV./CKeyKV/?k lib!keys_t.SHTKey.) (lib!hashmap_t.CKeyKV./CKeyKV/?v alloc!vec.Vec<u8./allocator_global%.>.))) ((lib!io_t.EndPoint./EndPoint (lib!io_t.EndPoint./EndPoint/?id alloc!vec.Vec<u8./allocator_global%.>.))) ((lib!keys_t.KeyIterator./KeyIterator (lib!keys_t.KeyIterator./KeyIterator/?k core!option.Option.))) ((lib!keys_t.KeyRange./KeyRange (lib!keys_t.KeyRange./KeyRange/?lo lib!keys_t.KeyIterator.) (lib!keys_t.KeyRange./KeyRange/?hi lib!keys_t.KeyIterator.))) ((lib!keys_t.SHTKey./SHTKey (lib!keys_t.SHTKey./SHTKey/?ukey Int))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!cmessage_v.CMessage./GetRequest/k (lib!cmessage_v.CMessage.) lib!keys_t.SHTKey.)
(declare-fun lib!cmessage_v.CMessage./SetRequest/k (lib!cmessage_v.CMessage.) lib!keys_t.SHTKey.)
(declare-fun lib!cmessage_v.CMessage./SetRequest/v (lib!cmessage_v.CMessage.) core!option.Option.)
(declare-fun lib!cmessage_v.CMessage./Reply/k (lib!cmessage_v.CMessage.) lib!keys_t.SHTKey.)
(declare-fun lib!cmessage_v.CMessage./Reply/v (lib!cmessage_v.CMessage.) core!option.Option.)
(declare-fun lib!cmessage_v.CMessage./Redirect/k (lib!cmessage_v.CMessage.) lib!keys_t.SHTKey.)
(declare-fun lib!cmessage_v.CMessage./Redirect/id (lib!cmessage_v.CMessage.) lib!io_t.EndPoint.)
(declare-fun lib!cmessage_v.CMessage./Shard/kr (lib!cmessage_v.CMessage.) lib!keys_t.KeyRange.)
(declare-fun lib!cmessage_v.CMessage./Shard/recipient (lib!cmessage_v.CMessage.) lib!io_t.EndPoint.)
(declare-fun lib!cmessage_v.CMessage./Delegate/range (lib!cmessage_v.CMessage.) lib!keys_t.KeyRange.)
(declare-fun lib!cmessage_v.CMessage./Delegate/h (lib!cmessage_v.CMessage.) lib!hashmap_t.CKeyHashMap.)
(declare-fun lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id (lib!abstract_end_point_t.AbstractEndPoint.) vstd!seq.Seq<u8.>.)
(declare-fun lib!hashmap_t.CKeyKV./CKeyKV/k (lib!hashmap_t.CKeyKV.) lib!keys_t.SHTKey.)
(declare-fun lib!hashmap_t.CKeyKV./CKeyKV/v (lib!hashmap_t.CKeyKV.) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun lib!io_t.EndPoint./EndPoint/id (lib!io_t.EndPoint.) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun lib!keys_t.KeyIterator./KeyIterator/k (lib!keys_t.KeyIterator.) core!option.Option.)
(declare-fun lib!keys_t.KeyRange./KeyRange/lo (lib!keys_t.KeyRange.) lib!keys_t.KeyIterator.)
(declare-fun lib!keys_t.KeyRange./KeyRange/hi (lib!keys_t.KeyRange.) lib!keys_t.KeyIterator.)
(declare-fun lib!keys_t.SHTKey./SHTKey/ukey (lib!keys_t.SHTKey.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!cmessage_v.CMessage. Type)
(declare-const TYPE%lib!abstract_end_point_t.AbstractEndPoint. Type)
(declare-const TYPE%lib!hashmap_t.CKeyHashMap. Type)
(declare-const TYPE%lib!hashmap_t.CKeyKV. Type)
(declare-const TYPE%lib!io_t.EndPoint. Type)
(declare-fun TYPE%lib!keys_t.KeyIterator. (Dcr Type) Type)
(declare-fun TYPE%lib!keys_t.KeyRange. (Dcr Type) Type)
(declare-const TYPE%lib!keys_t.SHTKey. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%alloc!vec.Vec<u8./allocator_global%.>. (alloc!vec.Vec<u8./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (Poly) alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.)
(declare-fun Poly%lib!hashmap_t.CKeyHashMap. (lib!hashmap_t.CKeyHashMap.) Poly)
(declare-fun %Poly%lib!hashmap_t.CKeyHashMap. (Poly) lib!hashmap_t.CKeyHashMap.)
(declare-fun Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. (vstd!seq.Seq<lib!hashmap_t.CKeyKV.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. (Poly) vstd!seq.Seq<lib!hashmap_t.CKeyKV.>.)
(declare-fun Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (vstd!set.Set<lib!keys_t.SHTKey.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (Poly) vstd!set.Set<lib!keys_t.SHTKey.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage.) Poly)
(declare-fun %Poly%lib!cmessage_v.CMessage. (Poly) lib!cmessage_v.CMessage.)
(declare-fun Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!abstract_end_point_t.AbstractEndPoint.) Poly)
(declare-fun %Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun Poly%lib!hashmap_t.CKeyKV. (lib!hashmap_t.CKeyKV.) Poly)
(declare-fun %Poly%lib!hashmap_t.CKeyKV. (Poly) lib!hashmap_t.CKeyKV.)
(declare-fun Poly%lib!io_t.EndPoint. (lib!io_t.EndPoint.) Poly)
(declare-fun %Poly%lib!io_t.EndPoint. (Poly) lib!io_t.EndPoint.)
(declare-fun Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator.) Poly)
(declare-fun %Poly%lib!keys_t.KeyIterator. (Poly) lib!keys_t.KeyIterator.)
(declare-fun Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange.) Poly)
(declare-fun %Poly%lib!keys_t.KeyRange. (Poly) lib!keys_t.KeyRange.)
(declare-fun Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey.) Poly)
(declare-fun %Poly%lib!keys_t.SHTKey. (Poly) lib!keys_t.SHTKey.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)) )) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) ))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly%alloc!vec.Vec<u8./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u8./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u8./allocator_global%.>. (%Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (%Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x lib!hashmap_t.CKeyHashMap.)) (! (= x (%Poly%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. x))) :pattern ((Poly%lib!hashmap_t.CKeyHashMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!hashmap_t.CKeyHashMap.) (= x (Poly%lib!hashmap_t.CKeyHashMap. (%Poly%lib!hashmap_t.CKeyHashMap. x)))) :pattern ((has_type x TYPE%lib!hashmap_t.CKeyHashMap.)) )))
(assert (forall ((x lib!hashmap_t.CKeyHashMap.)) (! (has_type (Poly%lib!hashmap_t.CKeyHashMap. x) TYPE%lib!hashmap_t.CKeyHashMap.) :pattern ((has_type (Poly%lib!hashmap_t.CKeyHashMap. x) TYPE%lib!hashmap_t.CKeyHashMap.)) )))
(assert (forall ((x vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)) (! (= x (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x))) :pattern ((Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= x (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (%Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)) (! (has_type (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((has_type (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<lib!hashmap_t.CKeyKV.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. (Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!hashmap_t.CKeyKV.)) (= x (Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. (%Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!hashmap_t.CKeyKV.))) )))
(assert (forall ((x vstd!seq.Seq<lib!hashmap_t.CKeyKV.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!hashmap_t.CKeyKV.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!hashmap_t.CKeyKV.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!hashmap_t.CKeyKV.))) )))
(assert (forall ((x vstd!set.Set<lib!keys_t.SHTKey.>.)) (! (= x (%Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x))) :pattern ((Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.)) (= x (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (%Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.))) )))
(assert (forall ((x vstd!set.Set<lib!keys_t.SHTKey.>.)) (! (has_type (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.)) :pattern ((has_type (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= x (%Poly%lib!cmessage_v.CMessage. (Poly%lib!cmessage_v.CMessage. x))) :pattern ((Poly%lib!cmessage_v.CMessage. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (= x (Poly%lib!cmessage_v.CMessage. (%Poly%lib!cmessage_v.CMessage. x)))) :pattern ((has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((_k! lib!keys_t.SHTKey.)) (! (=> (has_type (Poly%lib!keys_t.SHTKey. _k!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./GetRequest _k!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./GetRequest _k!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./GetRequest/k x) (lib!cmessage_v.CMessage./GetRequest/?k x)) :pattern ((lib!cmessage_v.CMessage./GetRequest/k x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.SHTKey. (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((_k! lib!keys_t.SHTKey.) (_v! core!option.Option.)) (! (=> (and (has_type (Poly%lib!keys_t.SHTKey. _k!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%core!option.Option. _v!) (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./SetRequest _k! _v!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./SetRequest _k! _v!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./SetRequest/k x) (lib!cmessage_v.CMessage./SetRequest/?k x)) :pattern ((lib!cmessage_v.CMessage./SetRequest/k x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.SHTKey. (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./SetRequest/v x) (lib!cmessage_v.CMessage./SetRequest/?v x)) :pattern ((lib!cmessage_v.CMessage./SetRequest/v x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%core!option.Option. (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. x))) (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))) :pattern ((lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((_k! lib!keys_t.SHTKey.) (_v! core!option.Option.)) (! (=> (and (has_type (Poly%lib!keys_t.SHTKey. _k!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%core!option.Option. _v!) (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Reply _k! _v!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Reply _k! _v!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Reply/k x) (lib!cmessage_v.CMessage./Reply/?k x)) :pattern ((lib!cmessage_v.CMessage./Reply/k x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.SHTKey. (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Reply/v x) (lib!cmessage_v.CMessage./Reply/?v x)) :pattern ((lib!cmessage_v.CMessage./Reply/v x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%core!option.Option. (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. x))) (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))) :pattern ((lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((_k! lib!keys_t.SHTKey.) (_id! lib!io_t.EndPoint.)) (! (=> (has_type (Poly%lib!keys_t.SHTKey. _k!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Redirect _k! _id!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Redirect _k! _id!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Redirect/k x) (lib!cmessage_v.CMessage./Redirect/?k x)) :pattern ((lib!cmessage_v.CMessage./Redirect/k x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.SHTKey. (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Redirect/id x) (lib!cmessage_v.CMessage./Redirect/?id x)) :pattern ((lib!cmessage_v.CMessage./Redirect/id x)) )))
(assert (forall ((_kr! lib!keys_t.KeyRange.) (_recipient! lib!io_t.EndPoint.)) (! (=> (has_type (Poly%lib!keys_t.KeyRange. _kr!) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Shard _kr! _recipient!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Shard _kr! _recipient!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Shard/kr x) (lib!cmessage_v.CMessage./Shard/?kr x)) :pattern ((lib!cmessage_v.CMessage./Shard/kr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.KeyRange. (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. x))) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.))) :pattern ((lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Shard/recipient x) (lib!cmessage_v.CMessage./Shard/?recipient x)) :pattern ((lib!cmessage_v.CMessage./Shard/recipient x)) )))
(assert (forall ((_range! lib!keys_t.KeyRange.) (_h! lib!hashmap_t.CKeyHashMap.)) (! (=> (has_type (Poly%lib!keys_t.KeyRange. _range!) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Delegate _range! _h!)) TYPE%lib!cmessage_v.CMessage.)) :pattern ((has_type (Poly%lib!cmessage_v.CMessage. (lib!cmessage_v.CMessage./Delegate _range! _h!)) TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Delegate/range x) (lib!cmessage_v.CMessage./Delegate/?range x)) :pattern ((lib!cmessage_v.CMessage./Delegate/range x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!cmessage_v.CMessage.) (has_type (Poly%lib!keys_t.KeyRange. (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. x))) (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.))) :pattern ((lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. x)) (has_type x TYPE%lib!cmessage_v.CMessage.)) )))
(assert (forall ((x lib!cmessage_v.CMessage.)) (! (= (lib!cmessage_v.CMessage./Delegate/h x) (lib!cmessage_v.CMessage./Delegate/?h x)) :pattern ((lib!cmessage_v.CMessage./Delegate/h x)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (= x (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. x))) :pattern ((Poly%lib!abstract_end_point_t.AbstractEndPoint. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (= x (Poly%lib!abstract_end_point_t.AbstractEndPoint. (%Poly%lib!abstract_end_point_t.AbstractEndPoint. x)))) :pattern ((has_type x TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (= (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id x) (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/?id x)) :pattern ((lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id x)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (has_type (Poly%lib!abstract_end_point_t.AbstractEndPoint. x) TYPE%lib!abstract_end_point_t.AbstractEndPoint.) :pattern ((has_type (Poly%lib!abstract_end_point_t.AbstractEndPoint. x) TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) )))
(assert (forall ((x lib!hashmap_t.CKeyKV.)) (! (= x (%Poly%lib!hashmap_t.CKeyKV. (Poly%lib!hashmap_t.CKeyKV. x))) :pattern ((Poly%lib!hashmap_t.CKeyKV. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!hashmap_t.CKeyKV.) (= x (Poly%lib!hashmap_t.CKeyKV. (%Poly%lib!hashmap_t.CKeyKV. x)))) :pattern ((has_type x TYPE%lib!hashmap_t.CKeyKV.)) )))
(assert (forall ((_k! lib!keys_t.SHTKey.) (_v! alloc!vec.Vec<u8./allocator_global%.>.)) (! (=> (has_type (Poly%lib!keys_t.SHTKey. _k!) TYPE%lib!keys_t.SHTKey.) (has_type (Poly%lib!hashmap_t.CKeyKV. (lib!hashmap_t.CKeyKV./CKeyKV _k! _v!)) TYPE%lib!hashmap_t.CKeyKV.)) :pattern ((has_type (Poly%lib!hashmap_t.CKeyKV. (lib!hashmap_t.CKeyKV./CKeyKV _k! _v!)) TYPE%lib!hashmap_t.CKeyKV.)) )))
(assert (forall ((x lib!hashmap_t.CKeyKV.)) (! (= (lib!hashmap_t.CKeyKV./CKeyKV/k x) (lib!hashmap_t.CKeyKV./CKeyKV/?k x)) :pattern ((lib!hashmap_t.CKeyKV./CKeyKV/k x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!hashmap_t.CKeyKV.) (has_type (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. x))) TYPE%lib!keys_t.SHTKey.)) :pattern ((lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. x)) (has_type x TYPE%lib!hashmap_t.CKeyKV.)) )))
(assert (forall ((x lib!hashmap_t.CKeyKV.)) (! (= (lib!hashmap_t.CKeyKV./CKeyKV/v x) (lib!hashmap_t.CKeyKV./CKeyKV/?v x)) :pattern ((lib!hashmap_t.CKeyKV./CKeyKV/v x)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (= x (%Poly%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x))) :pattern ((Poly%lib!io_t.EndPoint. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!io_t.EndPoint.) (= x (Poly%lib!io_t.EndPoint. (%Poly%lib!io_t.EndPoint. x)))) :pattern ((has_type x TYPE%lib!io_t.EndPoint.)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (= (lib!io_t.EndPoint./EndPoint/id x) (lib!io_t.EndPoint./EndPoint/?id x)) :pattern ((lib!io_t.EndPoint./EndPoint/id x)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (has_type (Poly%lib!io_t.EndPoint. x) TYPE%lib!io_t.EndPoint.) :pattern ((has_type (Poly%lib!io_t.EndPoint. x) TYPE%lib!io_t.EndPoint.)) )))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (= x (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. x))) :pattern ((Poly%lib!keys_t.KeyIterator. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&)) (= x (Poly%lib!keys_t.KeyIterator. (%Poly%lib!keys_t.KeyIterator. x)))) :pattern ((has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_k! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _k!) (TYPE%core!option.Option. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator./KeyIterator _k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator./KeyIterator _k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (= (lib!keys_t.KeyIterator./KeyIterator/k x) (lib!keys_t.KeyIterator./KeyIterator/?k x)) :pattern ((lib!keys_t.KeyIterator./KeyIterator/k x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. x))) (TYPE%core!option.Option. K&. K&))) :pattern ((lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. x)) (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(define-fun is-lib!keys_t.KeyIterator./KeyIterator_ ((c lib!keys_t.KeyIterator.)) Bool ((_ is lib!keys_t.KeyIterator./KeyIterator) c))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (=> (is-lib!keys_t.KeyIterator./KeyIterator_ x) (height_lt (height (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k x))) (height (Poly%lib!keys_t.KeyIterator. x)))) :pattern ((height (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k x)))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= x (%Poly%lib!keys_t.KeyRange. (Poly%lib!keys_t.KeyRange. x))) :pattern ((Poly%lib!keys_t.KeyRange. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (= x (Poly%lib!keys_t.KeyRange. (%Poly%lib!keys_t.KeyRange. x)))) :pattern ((has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_lo! lib!keys_t.KeyIterator.) (_hi! lib!keys_t.KeyIterator.)) (! (=> (and (has_type (Poly%lib!keys_t.KeyIterator. _lo!) (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. _hi!) (TYPE%lib!keys_t.KeyIterator. K&. K&))) (has_type (Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange./KeyRange _lo! _hi!)) (TYPE%lib!keys_t.KeyRange. K&. K&))) :pattern ((has_type (Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange./KeyRange _lo! _hi!)) (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= (lib!keys_t.KeyRange./KeyRange/lo x) (lib!keys_t.KeyRange./KeyRange/?lo x)) :pattern ((lib!keys_t.KeyRange./KeyRange/lo x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. x))) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. x)) (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= (lib!keys_t.KeyRange./KeyRange/hi x) (lib!keys_t.KeyRange./KeyRange/?hi x)) :pattern ((lib!keys_t.KeyRange./KeyRange/hi x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. x))) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. x)) (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(define-fun is-lib!keys_t.KeyRange./KeyRange_ ((c lib!keys_t.KeyRange.)) Bool ((_ is lib!keys_t.KeyRange./KeyRange) c))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (=> (is-lib!keys_t.KeyRange./KeyRange_ x) (height_lt (height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo x))) (height (Poly%lib!keys_t.KeyRange. x)))) :pattern ((height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo x)))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (=> (is-lib!keys_t.KeyRange./KeyRange_ x) (height_lt (height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi x))) (height (Poly%lib!keys_t.KeyRange. x)))) :pattern ((height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi x)))) )))
(assert (forall ((x lib!keys_t.SHTKey.)) (! (= x (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x))) :pattern ((Poly%lib!keys_t.SHTKey. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.SHTKey.) (= x (Poly%lib!keys_t.SHTKey. (%Poly%lib!keys_t.SHTKey. x)))) :pattern ((has_type x TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((_ukey! Int)) (! (=> (uInv 64 _ukey!) (has_type (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey _ukey!)) TYPE%lib!keys_t.SHTKey.)) :pattern ((has_type (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey _ukey!)) TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((x lib!keys_t.SHTKey.)) (! (= (lib!keys_t.SHTKey./SHTKey/ukey x) (lib!keys_t.SHTKey./SHTKey/?ukey x)) :pattern ((lib!keys_t.SHTKey./SHTKey/ukey x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.SHTKey.) (uInv 64 (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. x)))) :pattern ((lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. x)) (has_type x TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) )))
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!marshal_v.Marshalable. (Dcr Type) Bool)
(declare-fun tr_bound%lib!verus_extra.clone_v.VerusClone. (Dcr Type) Bool)
(declare-fun tr_bound%lib!keys_t.KeyTrait. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!marshal_v.Marshalable. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!verus_extra.clone_v.VerusClone. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!keys_t.KeyTrait. Self%&. Self%&)) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) (TYPE%tuple%4. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&) (proj%%vstd!view.View./V A3&. A3&) (proj%vstd!view.View./V A3&. A3&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) )))
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!bytes.spec_u64_to_le_bytes.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun vstd!bytes.spec_u64_from_le_bytes.? (Poly) Int)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.drop_last.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!seq_lib.impl&%0.fold_left.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.rec%fold_left.? (Dcr Type Dcr Type Poly Poly Poly Fuel) Poly)
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun lib!marshal_v.Marshalable.is_marshalable.? (Dcr Type Poly) Poly)
(declare-fun lib!marshal_v.Marshalable.is_marshalable%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!marshal_v.Marshalable.ghost_serialize.? (Dcr Type Poly) Poly)
(declare-fun lib!marshal_v.Marshalable.ghost_serialize%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!marshal_v.Marshalable.view_equal.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!marshal_v.Marshalable.view_equal%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!io_t.impl&%4.view.? (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun lib!hashmap_t.impl&%0.view.? (Poly) vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>.)
(declare-fun lib!hashmap_t.impl&%0.spec_to_vec.? (Poly) alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.)
(declare-fun lib!hashmap_t.impl&%0.spec_from_vec.? (Poly) lib!hashmap_t.CKeyHashMap.)
(declare-fun lib!hashmap_t.ckeykvlt.? (Poly Poly) Bool)
(declare-fun lib!hashmap_t.spec_sorted_keys.? (Poly) Bool)
(declare-fun lib!hashmap_t.impl&%1.view.? (Poly) tuple%2.)
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!host_protocol_t.max_hashtable_size.? (Poly) Int)
(declare-fun lib!app_interface_t.valid_key.? (Poly) Bool)
(declare-fun lib!app_interface_t.max_val_len.? (Poly) Int)
(declare-fun lib!app_interface_t.valid_value.? (Poly) Bool)
(declare-fun lib!host_protocol_t.valid_hashtable.? (Poly) Bool)
(declare-fun lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.? (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? (Poly) Int)
(declare-fun lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? (Poly) tuple%2.)
(declare-fun lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? (Poly) Int)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(declare-fun req%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int)) (! (= (req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!) (=> %%global_location_label%%2 (< i! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!))))) :pattern ((req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!)) )))
(declare-fun ens%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!) (and (has_type element! T&) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (I i!))))) :pattern ((ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)) )))
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_spec_len.) (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!)) ))))
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(declare-fun ens%alloc!vec.impl&%1.push. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (value! Poly)) (! (= (ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.push.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) value!)))) :pattern ((ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%3 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%0.spec_index.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!) i!))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!)) ))))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_vec_index_decreases.) (forall ((A&. Dcr) (A& Type) (v! Poly) (i! Poly)) (! (=> (and (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!)) (height v!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!))) ))))
(declare-fun req%vstd!bytes.spec_u64_from_le_bytes. (Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((s! Poly)) (! (= (req%vstd!bytes.spec_u64_from_le_bytes. s!) (=> %%global_location_label%%4 (= (vstd!seq.Seq.len.? $ (UINT 8) s!) 8))) :pattern ((req%vstd!bytes.spec_u64_from_le_bytes. s!)) )))
(assert (forall ((s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (vstd!bytes.spec_u64_from_le_bytes.? s!))) :pattern ((vstd!bytes.spec_u64_from_le_bytes.? s!)) )))
(declare-fun ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. no%param) (and (forall ((x$ Poly)) (! (=> (has_type x$ (UINT 64)) (and (= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? x$))) 8) (= (vstd!bytes.spec_u64_from_le_bytes.? (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? x$))) (%I x$)))) :pattern ((vstd!bytes.spec_u64_to_le_bytes.? x$)) )) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (UINT 8))) (=> (= (vstd!seq.Seq.len.? $ (UINT 8) s$) 8) (= (vstd!bytes.spec_u64_to_le_bytes.? (I (vstd!bytes.spec_u64_from_le_bytes.? s$))) (%Poly%vstd!seq.Seq<u8.>. s$)))) :pattern ((vstd!bytes.spec_u64_to_le_bytes.? (I (vstd!bytes.spec_u64_from_le_bytes.? s$)))) )))) :pattern ((ens%vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes. no%param)) )))
(declare-fun req%vstd!function.fun_ext_2. (Dcr Type Dcr Type Dcr Type %%Function%% %%Function%%) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (B&. Dcr) (B& Type) (f1! %%Function%%) (f2! %%Function%%)) (! (= (req%vstd!function.fun_ext_2. A1&. A1& A2&. A2& B&. B& f1! f2!) (=> %%global_location_label%%5 (forall ((x1$ Poly) (x2$ Poly)) (! (=> (and (has_type x1$ A1&) (has_type x2$ A2&)) (= (%%apply%%1 f1! x1$ x2$) (%%apply%%1 f2! x1$ x2$))) :pattern ((%%apply%%1 f1! x1$ x2$)) )))) :pattern ((req%vstd!function.fun_ext_2. A1&. A1& A2&. A2& B&. B& f1! f2!)) )))
(declare-fun ens%vstd!function.fun_ext_2. (Dcr Type Dcr Type Dcr Type %%Function%% %%Function%%) Bool)
(assert (forall ((A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (B&. Dcr) (B& Type) (f1! %%Function%%) (f2! %%Function%%)) (! (= (ens%vstd!function.fun_ext_2. A1&. A1& A2&. A2& B&. B& f1! f2!) (= f1! f2!)) :pattern ((ens%vstd!function.fun_ext_2. A1&. A1& A2&. A2& B&. B& f1! f2!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%8 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(declare-fun req%vstd!seq_lib.impl&%0.drop_last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!) (=> %%global_location_label%%9 (>= (vstd!seq.Seq.len.? A&. A& self!) 1))) :pattern ((req%vstd!seq_lib.impl&%0.drop_last. A&. A& self!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.drop_last.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.drop_last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (vstd!seq.Seq.subrange.? A&. A& self! (I 0) (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.drop_last.? A&. A& self!)) )))
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%10 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)) )))
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!)) ))))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.fold_left.))
(declare-const fuel_nat%vstd!seq_lib.impl&%0.fold_left. Fuel)
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (= (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! fuel%) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! zero)) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! fuel%)) )))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly) (fuel% Fuel)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel%)) (ite (= (vstd!seq.Seq.len.? A&. A& self!) 0) b! (%%apply%%1 (%Poly%fun%2. f!) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& (vstd!seq_lib.impl&%0.drop_last.? A&. A& self!) b! f! fuel%) (vstd!seq.Seq.last.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.fold_left.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (= (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!) (vstd!seq_lib.impl&%0.rec%fold_left.? A&. A& B&. B& self! b! f! (succ fuel_nat%vstd!seq_lib.impl&%0.fold_left.)))) :pattern ((vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (b! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! B&) (has_type f! (TYPE%fun%2. B&. B& A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!) B&)) :pattern ((vstd!seq_lib.impl&%0.fold_left.? A&. A& B&. B& self! b! f!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) ))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!) BOOL)) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!)) )))
(declare-fun ens%lib!marshal_v.Marshalable._is_marshalable. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (res! Poly)) (! (= (ens%lib!marshal_v.Marshalable._is_marshalable. Self%&. Self%& self! res!) (and (has_type res! BOOL) (= res! (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!)))) :pattern ((ens%lib!marshal_v.Marshalable._is_marshalable. Self%&. Self%& self! res!)) )))
(declare-fun req%lib!marshal_v.Marshalable.ghost_serialize. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (= (req%lib!marshal_v.Marshalable.ghost_serialize. Self%&. Self%& self!) (=> %%global_location_label%%11 (%B (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!)))) :pattern ((req%lib!marshal_v.Marshalable.ghost_serialize. Self%&. Self%& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!)) )))
(declare-fun req%lib!marshal_v.Marshalable.serialized_size. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (= (req%lib!marshal_v.Marshalable.serialized_size. Self%&. Self%& self!) (=> %%global_location_label%%12 (%B (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!)))) :pattern ((req%lib!marshal_v.Marshalable.serialized_size. Self%&. Self%& self!)) )))
(declare-fun ens%lib!marshal_v.Marshalable.serialized_size. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (res! Poly)) (! (= (ens%lib!marshal_v.Marshalable.serialized_size. Self%&. Self%& self! res!) (and (has_type res! (UINT SZ)) (= (%I res!) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!))))) :pattern ((ens%lib!marshal_v.Marshalable.serialized_size. Self%&. Self%& self! res!)) )))
(declare-fun req%lib!marshal_v.Marshalable.serialize. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (pre%data! Poly)) (! (= (req%lib!marshal_v.Marshalable.serialize. Self%&. Self%& self! pre%data!) (=> %%global_location_label%%13 (%B (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!)))) :pattern ((req%lib!marshal_v.Marshalable.serialize. Self%&. Self%& self! pre%data!)) )))
(declare-fun ens%lib!marshal_v.Marshalable.serialize. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (pre%data! Poly) (data! Poly)) (! (= (ens%lib!marshal_v.Marshalable.serialize. Self%&. Self%& self! pre%data! data!) (and (has_type data! (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (>= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)) (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL pre%data!)) (= (vstd!seq.Seq.subrange.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!)))) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!)) (= (vstd!seq.Seq.subrange.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) (I (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) pre%data!))) (I (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!)))) (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!)))) :pattern ((ens%lib!marshal_v.Marshalable.serialize. Self%&. Self%& self! pre%data! data!)) )))
(declare-fun ens%lib!marshal_v.Marshalable.deserialize. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (data! Poly) (start! Poly) (res! Poly)) (! (= (ens%lib!marshal_v.Marshalable.deserialize. Self%&. Self%& data! start! res!) (and (has_type res! (TYPE%core!option.Option. $ (TYPE%tuple%2. Self%&. Self%& $ (UINT SZ)))) (=> (and (is-core!option.Option./Some_ (%Poly%core!option.Option. res!)) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. res!))))) (let ((x$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. res!)))))) (let ((end$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. res!))))))) (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& x$)) (and (<= (%I start!) end$) (<= end$ (vstd!std_specs.vec.spec_vec_len.? $ (UINT 8) $ ALLOCATOR_GLOBAL data!)))) (= (vstd!seq.Seq.subrange.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) data!) start! (I end$)) (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& x$)))))))) :pattern ((ens%lib!marshal_v.Marshalable.deserialize. Self%&. Self%& data! start! res!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! Self%&) (has_type other! Self%&)) (has_type (lib!marshal_v.Marshalable.view_equal.? Self%&. Self%& self! other!) BOOL)) :pattern ((lib!marshal_v.Marshalable.view_equal.? Self%&. Self%& self! other!)) )))
(declare-fun ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (= (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. Self%&. Self%& self! other!) (= (lib!marshal_v.Marshalable.view_equal.? Self%&. Self%& self! other!) (lib!marshal_v.Marshalable.view_equal.? Self%&. Self%& other! self!))) :pattern ((ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. Self%&. Self%& self! other!)) )))
(declare-fun req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (= (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. Self%&. Self%& self! other!) (and (=> %%global_location_label%%14 (not (%B (lib!marshal_v.Marshalable.view_equal.? Self%&. Self%& self! other!)))) (=> %%global_location_label%%15 (<= (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!)) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& other!)))))) :pattern ((req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. Self%&. Self%& self! other!)) )))
(declare-fun ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (= (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. Self%&. Self%& self! other!) (not (= (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!))))))) :pattern ((ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. Self%&. Self%& self! other!)) )))
(declare-fun req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (= (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. Self%&. Self%& self! other!) (=> %%global_location_label%%16 (%B (lib!marshal_v.Marshalable.view_equal.? Self%&. Self%& self! other!)))) :pattern ((req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. Self%&. Self%& self! other!)) )))
(declare-fun ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (= (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. Self%&. Self%& self! other!) (and (= (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!) (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& other!)) (= (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!) (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& other!)))) :pattern ((ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. Self%&. Self%& self! other!)) )))
(declare-fun req%lib!marshal_v.Marshalable.lemma_serialize_injective. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (= (req%lib!marshal_v.Marshalable.lemma_serialize_injective. Self%&. Self%& self! other!) (and (=> %%global_location_label%%17 (%B (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& self!))) (=> %%global_location_label%%18 (%B (lib!marshal_v.Marshalable.is_marshalable.? Self%&. Self%& other!))) (=> %%global_location_label%%19 (= (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& self!) (lib!marshal_v.Marshalable.ghost_serialize.? Self%&. Self%& other!))))) :pattern ((req%lib!marshal_v.Marshalable.lemma_serialize_injective. Self%&. Self%& self! other!)) )))
(declare-fun ens%lib!marshal_v.Marshalable.lemma_serialize_injective. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (= (ens%lib!marshal_v.Marshalable.lemma_serialize_injective. Self%&. Self%& self! other!) (%B (lib!marshal_v.Marshalable.view_equal.? Self%&. Self%& self! other!))) :pattern ((ens%lib!marshal_v.Marshalable.lemma_serialize_injective. Self%&. Self%& self! other!)) )))
(assert (fuel_bool_default fuel%lib!io_t.impl&%4.view.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%4.view.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%4.view.? self!) (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!io_t.EndPoint./EndPoint/id (%Poly%lib!io_t.EndPoint. self!))))))) :pattern ((lib!io_t.impl&%4.view.? self!)) ))))
(assert (tr_bound%lib!keys_t.KeyTrait. $ TYPE%lib!keys_t.SHTKey.))
(assert (tr_bound%lib!verus_extra.clone_v.VerusClone. $ TYPE%lib!keys_t.SHTKey.))
(declare-fun ens%lib!hashmap_t.impl&%0.to_vec. (lib!hashmap_t.CKeyHashMap. alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.) Bool)
(assert (forall ((self! lib!hashmap_t.CKeyHashMap.) (res! alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.)) (! (= (ens%lib!hashmap_t.impl&%0.to_vec. self! res!) (= res! (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))) :pattern ((ens%lib!hashmap_t.impl&%0.to_vec. self! res!)) )))
(declare-fun ens%lib!hashmap_t.impl&%0.from_vec. (alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. lib!hashmap_t.CKeyHashMap.) Bool)
(assert (forall ((v! alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.) (res! lib!hashmap_t.CKeyHashMap.)) (! (= (ens%lib!hashmap_t.impl&%0.from_vec. v! res!) (= res! (lib!hashmap_t.impl&%0.spec_from_vec.? (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. v!)))) :pattern ((ens%lib!hashmap_t.impl&%0.from_vec. v! res!)) )))
(assert (fuel_bool_default fuel%lib!hashmap_t.ckeykvlt.))
(assert (=> (fuel_bool fuel%lib!hashmap_t.ckeykvlt.) (forall ((a! Poly) (b! Poly)) (! (= (lib!hashmap_t.ckeykvlt.? a! b!) (< (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. a!))))) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. b!))))))) :pattern ((lib!hashmap_t.ckeykvlt.? a! b!)) ))))
(assert (fuel_bool_default fuel%lib!hashmap_t.spec_sorted_keys.))
(assert (=> (fuel_bool fuel%lib!hashmap_t.spec_sorted_keys.) (forall ((v! Poly)) (! (= (lib!hashmap_t.spec_sorted_keys.? v!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (Add (%I i$) 1) (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL v!))) (= (%I j$) (Add (%I i$) 1))) (lib!hashmap_t.ckeykvlt.? (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) v!) i$) (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) v!) j$)))) :pattern ((lib!hashmap_t.ckeykvlt.? (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) v!) i$) (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) v!) j$))) ))) :pattern ((lib!hashmap_t.spec_sorted_keys.? v!)) ))))
(assert (fuel_bool_default fuel%lib!hashmap_t.impl&%1.view.))
(assert (=> (fuel_bool fuel%lib!hashmap_t.impl&%1.view.) (forall ((self! Poly)) (! (= (lib!hashmap_t.impl&%1.view.? self!) (tuple%2./tuple%2 (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. self!))) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!hashmap_t.CKeyKV./CKeyKV/v (%Poly%lib!hashmap_t.CKeyKV. self!)))))) :pattern ((lib!hashmap_t.impl&%1.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!hashmap_t.CKeyKV.) (has_type (Poly%tuple%2. (lib!hashmap_t.impl&%1.view.? self!)) (TYPE%tuple%2. $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((lib!hashmap_t.impl&%1.view.? self!)) )))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!)) ))))
(declare-fun ens%lib!hashmap_t.impl&%0.lemma_to_vec. (lib!hashmap_t.CKeyHashMap.) Bool)
(assert (forall ((self! lib!hashmap_t.CKeyHashMap.)) (! (= (ens%lib!hashmap_t.impl&%0.lemma_to_vec. self!) (and (= (lib!hashmap_t.impl&%0.spec_from_vec.? (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))) self!) (= (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))) (vstd!set.impl&%0.len.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!hashmap_t.impl&%0.view.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))))) (lib!hashmap_t.spec_sorted_keys.? (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))))) (let ((tmp%%$ (lib!hashmap_t.impl&%1.view.? (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))) i$)))) (let ((k$ (%Poly%lib!keys_t.SHTKey. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((v$ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (vstd!map_lib.impl&%0.contains_pair.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!hashmap_t.impl&%0.view.? (Poly%lib!hashmap_t.CKeyHashMap. self!))) (Poly%lib!keys_t.SHTKey. k$) (Poly%vstd!seq.Seq<u8.>. v$))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))) i$)) )))) :pattern ((ens%lib!hashmap_t.impl&%0.lemma_to_vec. self!)) )))
(assert (=> (fuel_bool fuel%lib!hashmap_t.impl&%0.lemma_to_vec.) (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!hashmap_t.CKeyHashMap.) (and (and (and (= (lib!hashmap_t.impl&%0.spec_from_vec.? (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!))) (%Poly%lib!hashmap_t.CKeyHashMap. self!)) (= (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!))) (vstd!set.impl&%0.len.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!hashmap_t.impl&%0.view.? self!)))))) (lib!hashmap_t.spec_sorted_keys.? (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!))))) (let ((tmp%%$ (lib!hashmap_t.impl&%1.view.? (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!))) i$)))) (let ((k$ (%Poly%lib!keys_t.SHTKey. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((v$ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (vstd!map_lib.impl&%0.contains_pair.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!map.Map<lib!keys_t.SHTKey./vstd!seq.Seq<u8.>.>. (lib!hashmap_t.impl&%0.view.? self!)) (Poly%lib!keys_t.SHTKey. k$) (Poly%vstd!seq.Seq<u8.>. v$))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!))) i$)) )))) :pattern ((lib!hashmap_t.impl&%0.spec_from_vec.? (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!)))) ))))
(declare-fun ens%lib!hashmap_t.impl&%0.lemma_to_vec_view. (lib!hashmap_t.CKeyHashMap. lib!hashmap_t.CKeyHashMap.) Bool)
(assert (forall ((self! lib!hashmap_t.CKeyHashMap.) (other! lib!hashmap_t.CKeyHashMap.)) (! (= (ens%lib!hashmap_t.impl&%0.lemma_to_vec_view. self! other!) (and (= (= (lib!hashmap_t.impl&%0.view.? (Poly%lib!hashmap_t.CKeyHashMap. self!)) (lib!hashmap_t.impl&%0.view.? (Poly%lib!hashmap_t.CKeyHashMap. other!))) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. other!)))))) (= (= (lib!hashmap_t.impl&%0.view.? (Poly%lib!hashmap_t.CKeyHashMap. self!)) (lib!hashmap_t.impl&%0.view.? (Poly%lib!hashmap_t.CKeyHashMap. other!))) (and (= (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))) (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. other!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))))) (= (lib!hashmap_t.impl&%1.view.? (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))) i$)) (lib!hashmap_t.impl&%1.view.? (vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. other!)))) i$))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. self!)))) i$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!hashmap_t.CKeyKV. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. other!)))) i$)) )))))) :pattern ((ens%lib!hashmap_t.impl&%0.lemma_to_vec_view. self! other!)) )))
(declare-fun ens%lib!hashmap_t.impl&%0.lemma_from_vec. (alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.) Bool)
(assert (forall ((v! alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.)) (! (= (ens%lib!hashmap_t.impl&%0.lemma_from_vec. v!) (=> (lib!hashmap_t.spec_sorted_keys.? (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. v!)) (= (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. (lib!hashmap_t.impl&%0.spec_from_vec.? (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. v!)))) v!))) :pattern ((ens%lib!hashmap_t.impl&%0.lemma_from_vec. v!)) )))
(assert (=> (fuel_bool fuel%lib!hashmap_t.impl&%0.lemma_from_vec.) (forall ((v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL)) (=> (lib!hashmap_t.spec_sorted_keys.? v!) (= (lib!hashmap_t.impl&%0.spec_to_vec.? (Poly%lib!hashmap_t.CKeyHashMap. (lib!hashmap_t.impl&%0.spec_from_vec.? v!))) (%Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. v!)))) :pattern ((lib!hashmap_t.spec_sorted_keys.? v!)) ))))
(assert (fuel_bool_default fuel%lib!host_protocol_t.max_hashtable_size.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.max_hashtable_size.) (forall ((no%param Poly)) (! (= (lib!host_protocol_t.max_hashtable_size.? no%param) 62) :pattern ((lib!host_protocol_t.max_hashtable_size.? no%param)) ))))
(assert (fuel_bool_default fuel%lib!app_interface_t.valid_key.))
(assert (=> (fuel_bool fuel%lib!app_interface_t.valid_key.) (forall ((key! Poly)) (! (= (lib!app_interface_t.valid_key.? key!) true) :pattern ((lib!app_interface_t.valid_key.? key!)) ))))
(assert (fuel_bool_default fuel%lib!app_interface_t.max_val_len.))
(assert (=> (fuel_bool fuel%lib!app_interface_t.max_val_len.) (forall ((no%param Poly)) (! (= (lib!app_interface_t.max_val_len.? no%param) 1024) :pattern ((lib!app_interface_t.max_val_len.? no%param)) ))))
(assert (fuel_bool_default fuel%lib!app_interface_t.valid_value.))
(assert (=> (fuel_bool fuel%lib!app_interface_t.valid_value.) (forall ((value! Poly)) (! (= (lib!app_interface_t.valid_value.? value!) (< (vstd!seq.Seq.len.? $ (UINT 8) value!) (lib!app_interface_t.max_val_len.? (I 0)))) :pattern ((lib!app_interface_t.valid_value.? value!)) ))))
(assert (fuel_bool_default fuel%lib!host_protocol_t.valid_hashtable.))
(assert (=> (fuel_bool fuel%lib!host_protocol_t.valid_hashtable.) (forall ((h! Poly)) (! (= (lib!host_protocol_t.valid_hashtable.? h!) (and (< (vstd!set.impl&%0.len.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!)) (lib!host_protocol_t.max_hashtable_size.? (I 0))) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!keys_t.SHTKey.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h!) k$) (and (lib!app_interface_t.valid_key.? k$) (lib!app_interface_t.valid_value.? (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h! k$))))) :pattern ((lib!app_interface_t.valid_value.? (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) h! k$))) )))) :pattern ((lib!host_protocol_t.valid_hashtable.? h!)) ))))
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%46.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%46.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (= (vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!) (Poly%tuple%4. (tuple%4./tuple%4 (vstd!view.View.view.? A0&. A0& (tuple%4./tuple%4/0 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A1&. A1& (tuple%4./tuple%4/1 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A2&. A2& (tuple%4./tuple%4/2 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A3&. A3& (tuple%4./tuple%4/3 (%Poly%tuple%4. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%0.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%0.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ (UINT 64) self! other!) (B (= self! other!))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (UINT 64) self! other!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%2.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%2.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self! other!) (B (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) other!)))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self! other!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.) (forall ((self! Poly)) (! (= (lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!) (lib!io_t.EndPoint./EndPoint/id (%Poly%lib!io_t.EndPoint. self!))) :pattern ((lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%8.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%8.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. self! other!) (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!marshal_ironsht_specific_v.impl&%7.forward_bijection_for_view_equality_do_not_use_for_anything_else.? other!)))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. self! other!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.) (forall ((self! Poly)) (! (= (lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!))) :pattern ((lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!keys_t.SHTKey.) (uInv 64 (lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!))) :pattern ((lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) )))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%10.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%10.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. self! other!) (lib!marshal_v.Marshalable.view_equal.? $ (UINT 64) (I (lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) (I (lib!marshal_ironsht_specific_v.impl&%9.forward_bijection_for_view_equality_do_not_use_for_anything_else.? other!)))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. self! other!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%0.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%0.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) self!) (Poly%vstd!seq.Seq<u8.>. (vstd!bytes.spec_u64_to_le_bytes.? self!))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%1.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%1.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) self!) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) (I (uClip 64 (%I self!))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%2.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%2.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!) (B (and (<= (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!)) (- (uHi SZ) 1)) (<= (Add (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) (I (uClip SZ (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!)))))) (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!))) (- (uHi SZ) 1))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%1.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%1.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ (UINT SZ) self!) (B (<= (%I self!) 18446744073709551615))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (UINT SZ) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%0.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%0.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ (UINT 64) self!) (B true)) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (UINT 64) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%2.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%2.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!) (vstd!seq.Seq.add.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) (I (uClip SZ (vstd!seq.Seq.len.? $ (UINT 8) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!))))) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) self!)) ))))
(assert (tr_bound%lib!marshal_v.Marshalable. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%3.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%3.view_equal.) (forall ((T&. Dcr) (T& Type) (self! Poly) (other! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. T&. T&) self! other!) (B (let ((tmp%%$ (tuple%2./tuple%2 self! other!))) (=> (not (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (%B (let ((s$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!marshal_v.Marshalable.view_equal.? T&. T& s$ o$)))))))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. T&. T&) self! other!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%3.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%3.is_marshalable.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (not (is-core!option.Option./None_ (%Poly%core!option.Option. self!))) (let ((x$ (core!option.Option./Some/0 (%Poly%core!option.Option. self!)))) (and (%B (lib!marshal_v.Marshalable.is_marshalable.? T&. T& x$)) (<= (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? T&. T& x$)))) (- (uHi SZ) 1)))))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%core!option.Option. T&. T&) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%3.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%3.ghost_serialize.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. T&. T&) self!) (ite (is-core!option.Option./None_ (%Poly%core!option.Option. self!)) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 0)) (let ((x$ (core!option.Option./Some/0 (%Poly%core!option.Option. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 1)) (lib!marshal_v.Marshalable.ghost_serialize.? T&. T& x$)))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. T&. T&) self!)) ))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%lib!marshal_v.Marshalable. $ (TYPE%core!option.Option. T&. T&))) )))
(assert (tr_bound%lib!marshal_v.Marshalable. $ (UINT 64)))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%5.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%5.view_equal.) (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (self! Poly) (other! Poly)) (! (=> (and (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. U&. U&)) (= (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%tuple%2. T&. T& U&. U&) self! other!) (B (and (%B (lib!marshal_v.Marshalable.view_equal.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)) (tuple%2./tuple%2/0 (%Poly%tuple%2. other!)))) (%B (lib!marshal_v.Marshalable.view_equal.? U&. U& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)) (tuple%2./tuple%2/1 (%Poly%tuple%2. other!)))))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (TYPE%tuple%2. T&. T& U&. U&) self! other!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.) (forall ((self! Poly)) (! (= (lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!) (tuple%2./tuple%2 (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))) (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))))) :pattern ((lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.)) (has_type (Poly%tuple%2. (lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) (TYPE%tuple%2. $ (TYPE%core!option.Option. $ (UINT 64)) $ (TYPE%core!option.Option. $ (UINT 64))))) :pattern ((lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) )))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%6.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%6.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self! other!) (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%tuple%2. $ (TYPE%core!option.Option. $ (UINT 64)) $ (TYPE%core!option.Option. $ (UINT 64))) (Poly%tuple%2. (lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? self!)) (Poly%tuple%2. (lib!marshal_ironsht_specific_v.impl&%5.forward_bijection_for_view_equality_do_not_use_for_anything_else.? other!)))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self! other!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%2.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%2.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyHashMap. self! other!) (B (= (lib!hashmap_t.impl&%0.view.? self!) (lib!hashmap_t.impl&%0.view.? other!)))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyHashMap. self! other!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%3.view_equal.))
(define-fun is-lib!cmessage_v.CMessage./GetRequest_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./GetRequest) c))
(define-fun is-lib!cmessage_v.CMessage./SetRequest_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./SetRequest) c))
(define-fun is-lib!cmessage_v.CMessage./Reply_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./Reply) c))
(define-fun is-lib!cmessage_v.CMessage./Redirect_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./Redirect) c))
(define-fun is-lib!cmessage_v.CMessage./Shard_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./Shard) c))
(define-fun is-lib!cmessage_v.CMessage./Delegate_ ((c lib!cmessage_v.CMessage.)) Bool ((_ is lib!cmessage_v.CMessage./Delegate) c))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%3.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!cmessage_v.CMessage. self! other!) (B (let ((tmp%%$ (tuple%2./tuple%2 self! other!))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((k$ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$) (Poly%lib!keys_t.SHTKey. o0$))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((k$ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((v$ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o1$ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$) (Poly%lib!keys_t.SHTKey. o0$))) (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$) (Poly%core!option.Option. o1$)))))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((k$ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((v$ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o1$ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$) (Poly%lib!keys_t.SHTKey. o0$))) (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$) (Poly%core!option.Option. o1$)))))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((k$ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((id$ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o1$ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$) (Poly%lib!keys_t.SHTKey. o0$))) (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id$) (Poly%lib!io_t.EndPoint. o1$)))))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((kr$ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((recipient$ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o1$ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr$) (Poly%lib!keys_t.KeyRange. o0$))) (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient$) (Poly%lib!io_t.EndPoint. o1$)))))))) (and (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-lib!cmessage_v.CMessage./Delegate_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-lib!cmessage_v.CMessage./Delegate_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((range$ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((h$ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o0$ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((o1$ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (and (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range$) (Poly%lib!keys_t.KeyRange. o0$))) (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h$) (Poly%lib!hashmap_t.CKeyHashMap. o1$))))))))))))))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!cmessage_v.CMessage. self! other!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%8.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%8.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!io_t.EndPoint. self!) (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!io_t.EndPoint./EndPoint/id (%Poly%lib!io_t.EndPoint. self!))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!io_t.EndPoint. self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%10.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%10.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. self!) (lib!marshal_v.Marshalable.is_marshalable.? $ (UINT 64) (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%10.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%10.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. self!) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT 64) (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%8.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%8.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. self!) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!io_t.EndPoint./EndPoint/id (%Poly%lib!io_t.EndPoint. self!))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%5.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%5.is_marshalable.) (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (self! Poly)) (! (=> (and (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. U&. U&)) (= (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%tuple%2. T&. T& U&. U&) self!) (B (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (%B (lib!marshal_v.Marshalable.is_marshalable.? U&. U& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))) (<= (nClip (Add (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? U&. U& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) (- (uHi SZ) 1)))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%tuple%2. T&. T& U&. U&) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%6.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%6.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self!) (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%tuple%2. $ (TYPE%core!option.Option. $ (UINT 64)) $ (TYPE%core!option.Option. $ (UINT 64))) (Poly%tuple%2. (tuple%2./tuple%2 (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))) (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%5.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%5.ghost_serialize.) (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type) (self! Poly)) (! (=> (and (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. U&. U&)) (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%tuple%2. T&. T& U&. U&) self!) (vstd!seq.Seq.add.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? T&. T& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (lib!marshal_v.Marshalable.ghost_serialize.? U&. U& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%tuple%2. T&. T& U&. U&) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%6.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%6.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self!) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%tuple%2. $ (TYPE%core!option.Option. $ (UINT 64)) $ (TYPE%core!option.Option. $ (UINT 64))) (Poly%tuple%2. (tuple%2./tuple%2 (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))) (Poly%core!option.Option. (let ((tmp%%$ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))))) (ite (is-core!option.Option./None_ tmp%%$) core!option.Option./None (let ((x$ (%Poly%lib!keys_t.SHTKey. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (core!option.Option./Some (I (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x$))))))))))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%4.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%4.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyKV. self! other!) (B (and (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. self!))) (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. other!))))) (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!hashmap_t.CKeyKV./CKeyKV/v (%Poly%lib!hashmap_t.CKeyKV. self!))) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!hashmap_t.CKeyKV./CKeyKV/v (%Poly%lib!hashmap_t.CKeyKV. other!)))))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyKV. self! other!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%4.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%4.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!hashmap_t.CKeyKV. self!) (B (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. self!))))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!hashmap_t.CKeyKV./CKeyKV/v (%Poly%lib!hashmap_t.CKeyKV. self!)))))) (<= (nClip (Add (nClip (Add 0 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. self!))))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!hashmap_t.CKeyKV./CKeyKV/v (%Poly%lib!hashmap_t.CKeyKV. self!))))))) (- (uHi SZ) 1))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!hashmap_t.CKeyKV. self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%4.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%4.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyKV. self!) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. (lib!hashmap_t.CKeyKV./CKeyKV/k (%Poly%lib!hashmap_t.CKeyKV. self!))))) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!hashmap_t.CKeyKV./CKeyKV/v (%Poly%lib!hashmap_t.CKeyKV. self!)))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyKV. self!)) ))))
(assert (tr_bound%lib!marshal_v.Marshalable. $ TYPE%lib!hashmap_t.CKeyKV.))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%4.is_marshalable.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (acc$ Poly) (x$ Poly)) (! (= (%%apply%%1 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) acc$ x$) (I (Add (%I acc$) (vstd!seq.Seq.len.? %%hole%%2 %%hole%%3 (lib!marshal_v.Marshalable.ghost_serialize.? %%hole%%0 %%hole%%1 x$))))) :pattern ((%%apply%%1 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) acc$ x$)))))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%4.is_marshalable.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) (B (and (and (<= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!)) (- (uHi SZ) 1)) (forall ((x$ Poly)) (! (=> (has_type x$ T&) (=> (vstd!seq_lib.impl&%0.contains.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) x$) (%B (lib!marshal_v.Marshalable.is_marshalable.? T&. T& x$)))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? T&. T& x$)) ))) (<= (Add (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) (I (uClip SZ (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!)))))) (%I (vstd!seq_lib.impl&%0.fold_left.? T&. T& $ INT (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) (I 0) (Poly%fun%2. (mk_fun (%%lambda%%0 T&. T& $ (UINT 8))))))) (- (uHi SZ) 1)))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%4.ghost_serialize.))
(declare-fun %%lambda%%1 (Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (acc$ Poly) (x$ Poly)) (! (= (%%apply%%1 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) acc$ x$) (vstd!seq.Seq.add.? %%hole%%2 %%hole%%3 acc$ (lib!marshal_v.Marshalable.ghost_serialize.? %%hole%%0 %%hole%%1 x$))) :pattern ((%%apply%%1 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) acc$ x$)))))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%4.ghost_serialize.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) (vstd!seq.Seq.add.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (UINT SZ) (I (uClip SZ (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!))))) (vstd!seq_lib.impl&%0.fold_left.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) (vstd!seq.Seq.empty.? $ (UINT 8)) (Poly%fun%2. (mk_fun (%%lambda%%1 T&. T& $ (UINT 8)))))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!)) ))))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.) (forall ((no%param Poly)) (! (= (lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? no%param) 1048576) :pattern ((lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? no%param)) ))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (uInv SZ (lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? no%param))) :pattern ((lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? no%param)) )))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%2.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%2.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!hashmap_t.CKeyHashMap. self!) (B (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!)))) (lib!hashmap_t.spec_sorted_keys.? (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!)))) (<= (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!)))) (lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? (I 0)))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!hashmap_t.CKeyHashMap. self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%2.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%2.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyHashMap. self!) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!hashmap_t.CKeyKV. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. (lib!hashmap_t.impl&%0.spec_to_vec.? self!)))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyHashMap. self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%3.is_marshalable.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%3.is_marshalable.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CMessage. self!) (B (ite (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (<= (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))))) (- (uHi SZ) 1)))) (ite (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. self!)))) (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$)))) (<= (nClip (Add (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$))))) (- (uHi SZ) 1))))) (ite (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. self!)))) (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$)))) (<= (nClip (Add (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$))))) (- (uHi SZ) 1))))) (ite (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((id$ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. self!)))) (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id$)))) (<= (nClip (Add (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id$))))) (- (uHi SZ) 1))))) (ite (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((kr$ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((recipient$ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. self!)))) (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr$))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient$)))) (<= (nClip (Add (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient$))))) (- (uHi SZ) 1))))) (let ((range$ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((h$ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. self!)))) (and (and (%B (lib!marshal_v.Marshalable.is_marshalable.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range$))) (%B (lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h$)))) (<= (nClip (Add (nClip (Add 1 (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range$))))) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h$))))) (- (uHi SZ) 1)))))))))))) :pattern ((lib!marshal_v.Marshalable.is_marshalable.? $ TYPE%lib!cmessage_v.CMessage. self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_ironsht_specific_v.impl&%3.ghost_serialize.))
(assert (=> (fuel_bool fuel%lib!marshal_ironsht_specific_v.impl&%3.ghost_serialize.) (forall ((self! Poly)) (! (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (ite (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 0)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$)))) (ite (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 1)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$))))) (ite (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((v$ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 2)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$))))) (ite (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((k$ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((id$ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 3)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id$))))) (ite (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. self!)) (let ((kr$ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((recipient$ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 4)) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient$))))) (let ((range$ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. self!)))) (let ((h$ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. self!)))) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.add.? $ (UINT 8) (vstd!seq.Seq.push.? $ (UINT 8) (vstd!seq.Seq.empty.? $ (UINT 8)) (I 5)) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range$))) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h$))))))))))) :pattern ((lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%1.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%1.view_equal.) (forall ((self! Poly) (other! Poly)) (! (= (lib!marshal_v.Marshalable.view_equal.? $ (UINT SZ) self! other!) (B (= self! other!))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (UINT SZ) self! other!)) ))))
(assert (fuel_bool_default fuel%lib!marshal_v.impl&%4.view_equal.))
(assert (=> (fuel_bool fuel%lib!marshal_v.impl&%4.view_equal.) (forall ((T&. Dcr) (T& Type) (self! Poly) (other! Poly)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (= (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self! other!) (B (let ((s$ (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!))) (let ((o$ (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) other!))) (and (= (vstd!seq.Seq.len.? T&. T& s$) (vstd!seq.Seq.len.? T&. T& o$)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& s$))) (%B (lib!marshal_v.Marshalable.view_equal.? T&. T& (vstd!seq.Seq.index.? T&. T& s$ i$) (vstd!seq.Seq.index.? T&. T& o$ i$))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? T&. T& (vstd!seq.Seq.index.? T&. T& s$ i$) (vstd!seq.Seq.index.? T&. T& o$ i$))) )))))))) :pattern ((lib!marshal_v.Marshalable.view_equal.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self! other!)) ))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(assert (tr_bound%vstd!view.View. $ BOOL))
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)) )))
(declare-fun ens%lib!marshal_ironsht_specific_v.sorted_keys. (alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. Bool) Bool)
(assert (forall ((v! alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>.) (res! Bool)) (! (= (ens%lib!marshal_ironsht_specific_v.sorted_keys. v! res!) (= res! (lib!hashmap_t.spec_sorted_keys.? (Poly%alloc!vec.Vec<lib!hashmap_t.CKeyKV./allocator_global%.>. v!)))) :pattern ((ens%lib!marshal_ironsht_specific_v.sorted_keys. v! res!)) )))
(declare-fun ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int. (Dcr Type Dcr Type Poly Poly %%Function%%) Bool)
(declare-fun %%lambda%%2 (%%Function%% Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 %%Function%%) (%%hole%%1 Dcr) (%%hole%%2 Type) (sb$ Poly) (a$ Poly)) (! (= (%%apply%%1 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) sb$ a$) (vstd!seq.Seq.add.? %%hole%%1 %%hole%%2 sb$ (%%apply%%0 %%hole%%0 a$))) :pattern ((%%apply%%1 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2) sb$ a$)))))
(declare-fun %%lambda%%3 (%%Function%% Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 %%Function%%) (%%hole%%1 Dcr) (%%hole%%2 Type) (i$ Poly) (a$ Poly)) (! (= (%%apply%%1 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) i$ a$) (I (Add (%I i$) (vstd!seq.Seq.len.? %%hole%%1 %%hole%%2 (%%apply%%0 %%hole%%0 a$))))) :pattern ((%%apply%%1 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) i$ a$)))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (s! Poly) (prefix! Poly) (f! %%Function%%)) (! (= (ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int. A&. A& B&. B& s! prefix! f!) (= (vstd!seq.Seq.len.? B&. B& (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ (TYPE%vstd!seq.Seq. B&. B&) s! prefix! (Poly%fun%2. (mk_fun (%%lambda%%2 f! B&. B&))))) (%I (vstd!seq_lib.impl&%0.fold_left.? A&. A& $ INT s! (I (vstd!seq.Seq.len.? B&. B& prefix!)) (Poly%fun%2. (mk_fun (%%lambda%%3 f! B&. B&))))))) :pattern ((ens%lib!verus_extra.seq_lib_v.lemma_seq_fold_left_append_len_int. A&. A& B&. B& s! prefix! f!)) )))
(declare-fun ens%lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size_exec. (Int Int) Bool)
(assert (forall ((no%param Int) (r! Int)) (! (= (ens%lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size_exec. no%param r!) (and (uInv SZ r!) (= r! (lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size.? (I 0))))) :pattern ((ens%lib!marshal_ironsht_specific_v.ckeyhashmap_max_serialized_size_exec. no%param r!)) )))
(assert (tr_bound%lib!marshal_v.Marshalable. $ TYPE%lib!hashmap_t.CKeyHashMap.))
(assert (tr_bound%lib!marshal_v.Marshalable. $ (UINT SZ)))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL))) :pattern ((tr_bound%lib!marshal_v.Marshalable. $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((T&. Dcr) (T& Type) (U&. Dcr) (U& Type)) (! (=> (and (tr_bound%lib!marshal_v.Marshalable. T&. T&) (tr_bound%lib!marshal_v.Marshalable. U&. U&)) (tr_bound%lib!marshal_v.Marshalable. $ (TYPE%tuple%2. T&. T& U&. U&))) :pattern ((tr_bound%lib!marshal_v.Marshalable. $ (TYPE%tuple%2. T&. T& U&. U&))) )))
(declare-const self! Poly)
(declare-const other! Poly)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Bool)
(declare-const tmp%%$1@ tuple%2.)
(declare-const x0@ lib!keys_t.SHTKey.)
(declare-const x1@ lib!keys_t.SHTKey.)
(declare-const tmp%%$2@ tuple%2.)
(declare-const s0@ vstd!seq.Seq<u8.>.)
(declare-const s1@ vstd!seq.Seq<u8.>.)
(declare-const tmp%%$3@ tuple%4.)
(declare-const x0$1@ lib!keys_t.SHTKey.)
(declare-const x1$1@ lib!keys_t.SHTKey.)
(declare-const s0$1@ vstd!seq.Seq<u8.>.)
(declare-const s1$1@ vstd!seq.Seq<u8.>.)
(declare-const idx@ Int)
(declare-const mid@ Int)
(declare-const mid$1@ Int)
(declare-const k@ lib!keys_t.SHTKey.)
(declare-const o0@ lib!keys_t.SHTKey.)
(declare-const tmp%3 Bool)
(declare-const tmp%4 Bool)
(declare-const tmp%%$4@ tuple%2.)
(declare-const x0$2@ lib!keys_t.SHTKey.)
(declare-const x1$2@ lib!keys_t.SHTKey.)
(declare-const tmp%%$5@ tuple%2.)
(declare-const s0$2@ vstd!seq.Seq<u8.>.)
(declare-const s1$2@ vstd!seq.Seq<u8.>.)
(declare-const tmp%%$6@ tuple%4.)
(declare-const x0$3@ lib!keys_t.SHTKey.)
(declare-const x1$3@ lib!keys_t.SHTKey.)
(declare-const s0$3@ vstd!seq.Seq<u8.>.)
(declare-const s1$3@ vstd!seq.Seq<u8.>.)
(declare-const idx$1@ Int)
(declare-const tmp%5 Bool)
(declare-const tmp%6 Bool)
(declare-const tmp%%$7@ tuple%2.)
(declare-const x0$4@ core!option.Option.)
(declare-const x1$4@ core!option.Option.)
(declare-const tmp%%$8@ tuple%2.)
(declare-const s0$4@ vstd!seq.Seq<u8.>.)
(declare-const s1$4@ vstd!seq.Seq<u8.>.)
(declare-const tmp%%$9@ tuple%4.)
(declare-const x0$5@ core!option.Option.)
(declare-const x1$5@ core!option.Option.)
(declare-const s0$5@ vstd!seq.Seq<u8.>.)
(declare-const s1$5@ vstd!seq.Seq<u8.>.)
(declare-const idx$2@ Int)
(declare-const mid$2@ Int)
(declare-const mid$3@ Int)
(declare-const mid$4@ Int)
(declare-const k$1@ lib!keys_t.SHTKey.)
(declare-const v@ core!option.Option.)
(declare-const o0$1@ lib!keys_t.SHTKey.)
(declare-const o1@ core!option.Option.)
(declare-const tmp%7 Bool)
(declare-const tmp%8 Bool)
(declare-const tmp%%$10@ tuple%2.)
(declare-const x0$6@ lib!keys_t.SHTKey.)
(declare-const x1$6@ lib!keys_t.SHTKey.)
(declare-const tmp%%$11@ tuple%2.)
(declare-const s0$6@ vstd!seq.Seq<u8.>.)
(declare-const s1$6@ vstd!seq.Seq<u8.>.)
(declare-const tmp%%$12@ tuple%4.)
(declare-const x0$7@ lib!keys_t.SHTKey.)
(declare-const x1$7@ lib!keys_t.SHTKey.)
(declare-const s0$7@ vstd!seq.Seq<u8.>.)
(declare-const s1$7@ vstd!seq.Seq<u8.>.)
(declare-const idx$3@ Int)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%%$13@ tuple%2.)
(declare-const x0$8@ core!option.Option.)
(declare-const x1$8@ core!option.Option.)
(declare-const tmp%%$14@ tuple%2.)
(declare-const s0$8@ vstd!seq.Seq<u8.>.)
(declare-const s1$8@ vstd!seq.Seq<u8.>.)
(declare-const tmp%%$15@ tuple%4.)
(declare-const x0$9@ core!option.Option.)
(declare-const x1$9@ core!option.Option.)
(declare-const s0$9@ vstd!seq.Seq<u8.>.)
(declare-const s1$9@ vstd!seq.Seq<u8.>.)
(declare-const idx$4@ Int)
(declare-const mid$5@ Int)
(declare-const mid$6@ Int)
(declare-const mid$7@ Int)
(declare-const k$2@ lib!keys_t.SHTKey.)
(declare-const v$1@ core!option.Option.)
(declare-const o0$2@ lib!keys_t.SHTKey.)
(declare-const o1$1@ core!option.Option.)
(declare-const tmp%11 Bool)
(declare-const tmp%12 Bool)
(declare-const tmp%%$16@ tuple%2.)
(declare-const x0$10@ lib!keys_t.SHTKey.)
(declare-const x1$10@ lib!keys_t.SHTKey.)
(declare-const tmp%%$17@ tuple%2.)
(declare-const s0$10@ vstd!seq.Seq<u8.>.)
(declare-const s1$10@ vstd!seq.Seq<u8.>.)
(declare-const tmp%%$18@ tuple%4.)
(declare-const x0$11@ lib!keys_t.SHTKey.)
(declare-const x1$11@ lib!keys_t.SHTKey.)
(declare-const s0$11@ vstd!seq.Seq<u8.>.)
(declare-const s1$11@ vstd!seq.Seq<u8.>.)
(declare-const idx$5@ Int)
(declare-const tmp%13 Bool)
(declare-const tmp%14 Bool)
(declare-const tmp%%$19@ tuple%2.)
(declare-const x0$12@ lib!io_t.EndPoint.)
(declare-const x1$12@ lib!io_t.EndPoint.)
(declare-const tmp%%$20@ tuple%2.)
(declare-const s0$12@ vstd!seq.Seq<u8.>.)
(declare-const s1$12@ vstd!seq.Seq<u8.>.)
(declare-const tmp%%$21@ tuple%4.)
(declare-const x0$13@ lib!io_t.EndPoint.)
(declare-const x1$13@ lib!io_t.EndPoint.)
(declare-const s0$13@ vstd!seq.Seq<u8.>.)
(declare-const s1$13@ vstd!seq.Seq<u8.>.)
(declare-const idx$6@ Int)
(declare-const mid$8@ Int)
(declare-const mid$9@ Int)
(declare-const mid$10@ Int)
(declare-const k$3@ lib!keys_t.SHTKey.)
(declare-const id@ lib!io_t.EndPoint.)
(declare-const o0$3@ lib!keys_t.SHTKey.)
(declare-const o1$2@ lib!io_t.EndPoint.)
(declare-const tmp%15 Bool)
(declare-const tmp%16 Bool)
(declare-const tmp%%$22@ tuple%2.)
(declare-const x0$14@ lib!keys_t.KeyRange.)
(declare-const x1$14@ lib!keys_t.KeyRange.)
(declare-const tmp%%$23@ tuple%2.)
(declare-const s0$14@ vstd!seq.Seq<u8.>.)
(declare-const s1$14@ vstd!seq.Seq<u8.>.)
(declare-const tmp%%$24@ tuple%4.)
(declare-const x0$15@ lib!keys_t.KeyRange.)
(declare-const x1$15@ lib!keys_t.KeyRange.)
(declare-const s0$15@ vstd!seq.Seq<u8.>.)
(declare-const s1$15@ vstd!seq.Seq<u8.>.)
(declare-const idx$7@ Int)
(declare-const tmp%17 Bool)
(declare-const tmp%18 Bool)
(declare-const tmp%%$25@ tuple%2.)
(declare-const x0$16@ lib!io_t.EndPoint.)
(declare-const x1$16@ lib!io_t.EndPoint.)
(declare-const tmp%%$26@ tuple%2.)
(declare-const s0$16@ vstd!seq.Seq<u8.>.)
(declare-const s1$16@ vstd!seq.Seq<u8.>.)
(declare-const tmp%%$27@ tuple%4.)
(declare-const x0$17@ lib!io_t.EndPoint.)
(declare-const x1$17@ lib!io_t.EndPoint.)
(declare-const s0$17@ vstd!seq.Seq<u8.>.)
(declare-const s1$17@ vstd!seq.Seq<u8.>.)
(declare-const idx$8@ Int)
(declare-const mid$11@ Int)
(declare-const mid$12@ Int)
(declare-const mid$13@ Int)
(declare-const kr@ lib!keys_t.KeyRange.)
(declare-const recipient@ lib!io_t.EndPoint.)
(declare-const o0$4@ lib!keys_t.KeyRange.)
(declare-const o1$3@ lib!io_t.EndPoint.)
(declare-const tmp%19 Bool)
(declare-const tmp%20 Bool)
(declare-const tmp%%$28@ tuple%2.)
(declare-const x0$18@ lib!keys_t.KeyRange.)
(declare-const x1$18@ lib!keys_t.KeyRange.)
(declare-const tmp%%$29@ tuple%2.)
(declare-const s0$18@ vstd!seq.Seq<u8.>.)
(declare-const s1$18@ vstd!seq.Seq<u8.>.)
(declare-const tmp%%$30@ tuple%4.)
(declare-const x0$19@ lib!keys_t.KeyRange.)
(declare-const x1$19@ lib!keys_t.KeyRange.)
(declare-const s0$19@ vstd!seq.Seq<u8.>.)
(declare-const s1$19@ vstd!seq.Seq<u8.>.)
(declare-const idx$9@ Int)
(declare-const tmp%21 Bool)
(declare-const tmp%22 Bool)
(declare-const tmp%%$31@ tuple%2.)
(declare-const x0$20@ lib!hashmap_t.CKeyHashMap.)
(declare-const x1$20@ lib!hashmap_t.CKeyHashMap.)
(declare-const tmp%%$32@ tuple%2.)
(declare-const s0$20@ vstd!seq.Seq<u8.>.)
(declare-const s1$20@ vstd!seq.Seq<u8.>.)
(declare-const tmp%%$33@ tuple%4.)
(declare-const x0$21@ lib!hashmap_t.CKeyHashMap.)
(declare-const x1$21@ lib!hashmap_t.CKeyHashMap.)
(declare-const s0$21@ vstd!seq.Seq<u8.>.)
(declare-const s1$21@ vstd!seq.Seq<u8.>.)
(declare-const idx$10@ Int)
(declare-const mid$14@ Int)
(declare-const mid$15@ Int)
(declare-const mid$16@ Int)
(declare-const range@ lib!keys_t.KeyRange.)
(declare-const h@ lib!hashmap_t.CKeyHashMap.)
(declare-const o0$5@ lib!keys_t.KeyRange.)
(declare-const o1$4@ lib!hashmap_t.CKeyHashMap.)
(declare-const tmp%23 Bool)
(declare-const tmp%%@ tuple%2.)
(declare-const si@ vstd!seq.Seq<u8.>.)
(declare-const so@ vstd!seq.Seq<u8.>.)
(assert fuel_defaults)
(assert (has_type self! TYPE%lib!cmessage_v.CMessage.))
(assert (has_type other! TYPE%lib!cmessage_v.CMessage.))
(assert (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!cmessage_v.CMessage. self! other!))))
(assert (<= (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)) (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!))))
(declare-fun %%choose%%2 (Type Int Int Dcr Type Poly Dcr Type Poly Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Int) (%%hole%%2 Int) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Poly) (%%hole%%9 Dcr) (%%hole%%10 Type) (%%hole%%11 Poly) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Poly)) (! (=> (exists ((i$ Poly)) (! (and (has_type i$ %%hole%%0) (and (and (<= %%hole%%1 (%I i$)) (< (%I i$) %%hole%%2)) (not (= (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 i$) (vstd!seq.Seq.index.? %%hole%%6 %%hole%%7 %%hole%%8 i$))))) :pattern ((vstd!seq.Seq.index.? %%hole%%9 %%hole%%10 %%hole%%11 i$)) :pattern ((vstd!seq.Seq.index.? %%hole%%12 %%hole%%13 %%hole%%14 i$)) )) (exists ((i$ Poly)) (! (and (and (has_type i$ %%hole%%0) (and (and (<= %%hole%%1 (%I i$)) (< (%I i$) %%hole%%2)) (not (= (vstd!seq.Seq.index.? %%hole%%3 %%hole%%4 %%hole%%5 i$) (vstd!seq.Seq.index.? %%hole%%6 %%hole%%7 %%hole%%8 i$))))) (= (%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) i$)) :pattern ((vstd!seq.Seq.index.? %%hole%%9 %%hole%%10 %%hole%%11 i$)) :pattern ((vstd!seq.Seq.index.? %%hole%%12 %%hole%%13 %%hole%%14 i$))))) :pattern ((%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14)))))
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(declare-const %%switch_label%%4 Bool)
(declare-const %%switch_label%%5 Bool)
(declare-const %%switch_label%%6 Bool)
(declare-const %%switch_label%%7 Bool)
(declare-const %%switch_label%%8 Bool)
(declare-const %%switch_label%%9 Bool)
(declare-const %%switch_label%%10 Bool)
(declare-const %%switch_label%%11 Bool)
(declare-const %%switch_label%%12 Bool)
(declare-const %%switch_label%%13 Bool)
(declare-const %%switch_label%%14 Bool)
(declare-const %%switch_label%%15 Bool)
(declare-const %%switch_label%%16 Bool)
(declare-const %%switch_label%%17 Bool)
(declare-const %%switch_label%%18 Bool)
(declare-const %%switch_label%%19 Bool)
(declare-const %%switch_label%%20 Bool)
(declare-const %%switch_label%%21 Bool)
(declare-const %%switch_label%%22 Bool)
(declare-const %%switch_label%%23 Bool)
(declare-const %%switch_label%%24 Bool)
(declare-const %%switch_label%%25 Bool)
(declare-const %%switch_label%%26 Bool)
(declare-const %%switch_label%%27 Bool)
(declare-const %%switch_label%%28 Bool)
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(declare-const %%location_label%%3 Bool)
(declare-const %%location_label%%4 Bool)
(declare-const %%location_label%%5 Bool)
(declare-const %%location_label%%6 Bool)
(declare-const %%location_label%%7 Bool)
(declare-const %%location_label%%8 Bool)
(declare-const %%location_label%%9 Bool)
(declare-const %%location_label%%10 Bool)
(declare-const %%location_label%%11 Bool)
(declare-const %%location_label%%12 Bool)
(declare-const %%location_label%%13 Bool)
(declare-const %%location_label%%14 Bool)
(declare-const %%location_label%%15 Bool)
(declare-const %%location_label%%16 Bool)
(declare-const %%location_label%%17 Bool)
(declare-const %%location_label%%18 Bool)
(declare-const %%location_label%%19 Bool)
(declare-const %%location_label%%20 Bool)
(declare-const %%location_label%%21 Bool)
(declare-const %%location_label%%22 Bool)
(declare-const %%location_label%%23 Bool)
(declare-const %%location_label%%24 Bool)
(declare-const %%location_label%%25 Bool)
(declare-const %%location_label%%26 Bool)
(declare-const %%location_label%%27 Bool)
(declare-const %%location_label%%28 Bool)
(declare-const %%location_label%%29 Bool)
(declare-const %%location_label%%30 Bool)
(declare-const %%location_label%%31 Bool)
(declare-const %%location_label%%32 Bool)
(declare-const %%location_label%%33 Bool)
(declare-const %%location_label%%34 Bool)
(declare-const %%location_label%%35 Bool)
(declare-const %%location_label%%36 Bool)
(declare-const %%location_label%%37 Bool)
(declare-const %%location_label%%38 Bool)
(declare-const %%location_label%%39 Bool)
(declare-const %%location_label%%40 Bool)
(declare-const %%location_label%%41 Bool)
(declare-const %%location_label%%42 Bool)
(declare-const %%location_label%%43 Bool)
(declare-const %%location_label%%44 Bool)
(declare-const %%location_label%%45 Bool)
(declare-const %%location_label%%46 Bool)
(declare-const %%location_label%%47 Bool)
(declare-const %%location_label%%48 Bool)
(declare-const %%location_label%%49 Bool)
(declare-const %%location_label%%50 Bool)
(declare-const %%location_label%%51 Bool)
(declare-const %%location_label%%52 Bool)
(declare-const %%location_label%%53 Bool)
(declare-const %%location_label%%54 Bool)
(declare-const %%location_label%%55 Bool)
(declare-const %%location_label%%56 Bool)
(assert (not (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!))) (=> (= so@ (%Poly%vstd!seq.Seq<u8.>. (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!))) (=> (= tmp%%@ (tuple%2./tuple%2 self! other!)) (or (and (=> (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= k@ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= o0@ (lib!cmessage_v.CMessage./GetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= mid@ 1) (or (and (=> (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k@) (Poly%lib!keys_t.SHTKey. o0@)))) (=> (= tmp%%$1@ (tuple%2./tuple%2 (Poly%lib!keys_t.SHTKey. k@) (Poly%lib!keys_t.SHTKey. o0@))) (=> (= x0@ (%Poly%lib!keys_t.SHTKey. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$1@))))) (=> (= x1@ (%Poly%lib!keys_t.SHTKey. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$1@))))) (=> (= tmp%%$2@ (tuple%2./tuple%2 (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0@)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x1@)))) (=> (= s0@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2@))))) (=> (= s1@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2@))))) (=> (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0@) (Poly%lib!keys_t.SHTKey. x1@)) (=> (= tmp%%$3@ (ite (<= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0@)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1@))) (tuple%4./tuple%4 (Poly%lib!keys_t.SHTKey. x0@) (Poly%lib!keys_t.SHTKey. x1@) (Poly%vstd!seq.Seq<u8.>. s0@) (Poly%vstd!seq.Seq<u8.>. s1@)) (tuple%4./tuple%4 (Poly%lib!keys_t.SHTKey. x1@) (Poly%lib!keys_t.SHTKey. x0@) (Poly%vstd!seq.Seq<u8.>. s1@) (Poly%vstd!seq.Seq<u8.>. s0@)))) (=> (= x0$1@ (%Poly%lib!keys_t.SHTKey. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$3@))))) (=> (= x1$1@ (%Poly%lib!keys_t.SHTKey. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$3@))))) (=> (= s0$1@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$3@))))) (=> (= s1$1@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$3@))))) (and (=> %%location_label%%0 (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$1@) (Poly%lib!keys_t.SHTKey. x1$1@))) (=> (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$1@) (Poly%lib!keys_t.SHTKey. x1$1@)) (=> (= tmp%1 (not (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. s0$1@) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$1@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$1@))))))) (and (=> %%location_label%%1 tmp%1) (=> tmp%1 (=> (= idx@ (%I (as_type (%%choose%%2 INT 0 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$1@)) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$1@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$1@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$1@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$1@)) INT))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%2 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I (Add mid@ idx@))) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I (Add mid@ idx@))))) (and (=> %%location_label%%2 tmp%2) (=> tmp%2 %%switch_label%%2)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%2)) (and (not %%switch_label%%2) (=> %%location_label%%3 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)))))))))))))))))))))))))))) (=> (not (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k@) (Poly%lib!keys_t.SHTKey. o0@))))) (and (=> %%location_label%%4 (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k@) (Poly%lib!keys_t.SHTKey. o0@))) (=> (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k@) (Poly%lib!keys_t.SHTKey. o0@)) %%switch_label%%1)))) (and (not %%switch_label%%1) (=> (= mid$1@ (Add mid@ (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k@))))) %%switch_label%%0))))))) (=> (not (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./GetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))))) (or (and (=> (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= k$1@ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= v@ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= o0$1@ (lib!cmessage_v.CMessage./SetRequest/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= o1@ (lib!cmessage_v.CMessage./SetRequest/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= mid$2@ 1) (or (and (=> (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$1@) (Poly%lib!keys_t.SHTKey. o0$1@)))) (=> (= tmp%%$4@ (tuple%2./tuple%2 (Poly%lib!keys_t.SHTKey. k$1@) (Poly%lib!keys_t.SHTKey. o0$1@))) (=> (= x0$2@ (%Poly%lib!keys_t.SHTKey. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$4@))))) (=> (= x1$2@ (%Poly%lib!keys_t.SHTKey. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$4@))))) (=> (= tmp%%$5@ (tuple%2./tuple%2 (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$2@)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x1$2@)))) (=> (= s0$2@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$5@))))) (=> (= s1$2@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$5@))))) (=> (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$2@) (Poly%lib!keys_t.SHTKey. x1$2@)) (=> (= tmp%%$6@ (ite (<= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$2@)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$2@))) (tuple%4./tuple%4 (Poly%lib!keys_t.SHTKey. x0$2@) (Poly%lib!keys_t.SHTKey. x1$2@) (Poly%vstd!seq.Seq<u8.>. s0$2@) (Poly%vstd!seq.Seq<u8.>. s1$2@)) (tuple%4./tuple%4 (Poly%lib!keys_t.SHTKey. x1$2@) (Poly%lib!keys_t.SHTKey. x0$2@) (Poly%vstd!seq.Seq<u8.>. s1$2@) (Poly%vstd!seq.Seq<u8.>. s0$2@)))) (=> (= x0$3@ (%Poly%lib!keys_t.SHTKey. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$6@))))) (=> (= x1$3@ (%Poly%lib!keys_t.SHTKey. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$6@))))) (=> (= s0$3@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$6@))))) (=> (= s1$3@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$6@))))) (and (=> %%location_label%%5 (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$3@) (Poly%lib!keys_t.SHTKey. x1$3@))) (=> (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$3@) (Poly%lib!keys_t.SHTKey. x1$3@)) (=> (= tmp%3 (not (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. s0$3@) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$3@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$3@))))))) (and (=> %%location_label%%6 tmp%3) (=> tmp%3 (=> (= idx$1@ (%I (as_type (%%choose%%2 INT 0 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$3@)) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$3@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$3@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$3@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$3@)) INT))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%4 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I (Add mid$2@ idx$1@))) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I (Add mid$2@ idx$1@))))) (and (=> %%location_label%%7 tmp%4) (=> tmp%4 %%switch_label%%7)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%7)) (and (not %%switch_label%%7) (=> %%location_label%%8 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)))))))))))))))))))))))))))) (=> (not (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$1@) (Poly%lib!keys_t.SHTKey. o0$1@))))) (and (=> %%location_label%%9 (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$1@) (Poly%lib!keys_t.SHTKey. o0$1@))) (=> (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$1@) (Poly%lib!keys_t.SHTKey. o0$1@)) %%switch_label%%6)))) (and (not %%switch_label%%6) (=> (= mid$3@ (Add mid$2@ (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$1@))))) (or (and (=> (not (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v@) (Poly%core!option.Option. o1@)))) (=> (= tmp%%$7@ (tuple%2./tuple%2 (Poly%core!option.Option. v@) (Poly%core!option.Option. o1@))) (=> (= x0$4@ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$7@))))) (=> (= x1$4@ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$7@))))) (=> (= tmp%%$8@ (tuple%2./tuple%2 (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. x0$4@)) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. x1$4@)))) (=> (= s0$4@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$8@))))) (=> (= s1$4@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$8@))))) (=> (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. x0$4@) (Poly%core!option.Option. x1$4@)) (=> (= tmp%%$9@ (ite (<= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$4@)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$4@))) (tuple%4./tuple%4 (Poly%core!option.Option. x0$4@) (Poly%core!option.Option. x1$4@) (Poly%vstd!seq.Seq<u8.>. s0$4@) (Poly%vstd!seq.Seq<u8.>. s1$4@)) (tuple%4./tuple%4 (Poly%core!option.Option. x1$4@) (Poly%core!option.Option. x0$4@) (Poly%vstd!seq.Seq<u8.>. s1$4@) (Poly%vstd!seq.Seq<u8.>. s0$4@)))) (=> (= x0$5@ (%Poly%core!option.Option. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$9@))))) (=> (= x1$5@ (%Poly%core!option.Option. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$9@))))) (=> (= s0$5@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$9@))))) (=> (= s1$5@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$9@))))) (and (=> %%location_label%%10 (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. x0$5@) (Poly%core!option.Option. x1$5@))) (=> (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. x0$5@) (Poly%core!option.Option. x1$5@)) (=> (= tmp%5 (not (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. s0$5@) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$5@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$5@))))))) (and (=> %%location_label%%11 tmp%5) (=> tmp%5 (=> (= idx$2@ (%I (as_type (%%choose%%2 INT 0 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$5@)) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$5@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$5@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$5@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$5@)) INT))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%6 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I (Add mid$3@ idx$2@))) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I (Add mid$3@ idx$2@))))) (and (=> %%location_label%%12 tmp%6) (=> tmp%6 %%switch_label%%5)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%5)) (and (not %%switch_label%%5) (=> %%location_label%%13 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)))))))))))))))))))))))))))) (=> (not (not (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v@) (Poly%core!option.Option. o1@))))) (and (=> %%location_label%%14 (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v@) (Poly%core!option.Option. o1@))) (=> (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v@) (Poly%core!option.Option. o1@)) %%switch_label%%4)))) (and (not %%switch_label%%4) (=> (= mid$4@ (Add mid$3@ (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v@))))) %%switch_label%%3)))))))))))) (=> (not (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./SetRequest_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))))) (or (and (=> (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= k$2@ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= v$1@ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= o0$2@ (lib!cmessage_v.CMessage./Reply/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= o1$1@ (lib!cmessage_v.CMessage./Reply/v (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= mid$5@ 1) (or (and (=> (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$2@) (Poly%lib!keys_t.SHTKey. o0$2@)))) (=> (= tmp%%$10@ (tuple%2./tuple%2 (Poly%lib!keys_t.SHTKey. k$2@) (Poly%lib!keys_t.SHTKey. o0$2@))) (=> (= x0$6@ (%Poly%lib!keys_t.SHTKey. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$10@))))) (=> (= x1$6@ (%Poly%lib!keys_t.SHTKey. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$10@))))) (=> (= tmp%%$11@ (tuple%2./tuple%2 (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$6@)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x1$6@)))) (=> (= s0$6@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$11@))))) (=> (= s1$6@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$11@))))) (=> (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$6@) (Poly%lib!keys_t.SHTKey. x1$6@)) (=> (= tmp%%$12@ (ite (<= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$6@)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$6@))) (tuple%4./tuple%4 (Poly%lib!keys_t.SHTKey. x0$6@) (Poly%lib!keys_t.SHTKey. x1$6@) (Poly%vstd!seq.Seq<u8.>. s0$6@) (Poly%vstd!seq.Seq<u8.>. s1$6@)) (tuple%4./tuple%4 (Poly%lib!keys_t.SHTKey. x1$6@) (Poly%lib!keys_t.SHTKey. x0$6@) (Poly%vstd!seq.Seq<u8.>. s1$6@) (Poly%vstd!seq.Seq<u8.>. s0$6@)))) (=> (= x0$7@ (%Poly%lib!keys_t.SHTKey. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$12@))))) (=> (= x1$7@ (%Poly%lib!keys_t.SHTKey. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$12@))))) (=> (= s0$7@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$12@))))) (=> (= s1$7@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$12@))))) (and (=> %%location_label%%15 (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$7@) (Poly%lib!keys_t.SHTKey. x1$7@))) (=> (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$7@) (Poly%lib!keys_t.SHTKey. x1$7@)) (=> (= tmp%7 (not (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. s0$7@) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$7@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$7@))))))) (and (=> %%location_label%%16 tmp%7) (=> tmp%7 (=> (= idx$3@ (%I (as_type (%%choose%%2 INT 0 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$7@)) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$7@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$7@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$7@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$7@)) INT))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%8 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I (Add mid$5@ idx$3@))) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I (Add mid$5@ idx$3@))))) (and (=> %%location_label%%17 tmp%8) (=> tmp%8 %%switch_label%%12)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%12)) (and (not %%switch_label%%12) (=> %%location_label%%18 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)))))))))))))))))))))))))))) (=> (not (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$2@) (Poly%lib!keys_t.SHTKey. o0$2@))))) (and (=> %%location_label%%19 (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$2@) (Poly%lib!keys_t.SHTKey. o0$2@))) (=> (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$2@) (Poly%lib!keys_t.SHTKey. o0$2@)) %%switch_label%%11)))) (and (not %%switch_label%%11) (=> (= mid$6@ (Add mid$5@ (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$2@))))) (or (and (=> (not (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$1@) (Poly%core!option.Option. o1$1@)))) (=> (= tmp%%$13@ (tuple%2./tuple%2 (Poly%core!option.Option. v$1@) (Poly%core!option.Option. o1$1@))) (=> (= x0$8@ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$13@))))) (=> (= x1$8@ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$13@))))) (=> (= tmp%%$14@ (tuple%2./tuple%2 (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. x0$8@)) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. x1$8@)))) (=> (= s0$8@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$14@))))) (=> (= s1$8@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$14@))))) (=> (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. x0$8@) (Poly%core!option.Option. x1$8@)) (=> (= tmp%%$15@ (ite (<= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$8@)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$8@))) (tuple%4./tuple%4 (Poly%core!option.Option. x0$8@) (Poly%core!option.Option. x1$8@) (Poly%vstd!seq.Seq<u8.>. s0$8@) (Poly%vstd!seq.Seq<u8.>. s1$8@)) (tuple%4./tuple%4 (Poly%core!option.Option. x1$8@) (Poly%core!option.Option. x0$8@) (Poly%vstd!seq.Seq<u8.>. s1$8@) (Poly%vstd!seq.Seq<u8.>. s0$8@)))) (=> (= x0$9@ (%Poly%core!option.Option. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$15@))))) (=> (= x1$9@ (%Poly%core!option.Option. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$15@))))) (=> (= s0$9@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$15@))))) (=> (= s1$9@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$15@))))) (and (=> %%location_label%%20 (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. x0$9@) (Poly%core!option.Option. x1$9@))) (=> (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. x0$9@) (Poly%core!option.Option. x1$9@)) (=> (= tmp%9 (not (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. s0$9@) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$9@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$9@))))))) (and (=> %%location_label%%21 tmp%9) (=> tmp%9 (=> (= idx$4@ (%I (as_type (%%choose%%2 INT 0 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$9@)) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$9@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$9@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$9@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$9@)) INT))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%10 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I (Add mid$6@ idx$4@))) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I (Add mid$6@ idx$4@))))) (and (=> %%location_label%%22 tmp%10) (=> tmp%10 %%switch_label%%10)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%10)) (and (not %%switch_label%%10) (=> %%location_label%%23 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)))))))))))))))))))))))))))) (=> (not (not (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$1@) (Poly%core!option.Option. o1$1@))))) (and (=> %%location_label%%24 (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$1@) (Poly%core!option.Option. o1$1@))) (=> (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$1@) (Poly%core!option.Option. o1$1@)) %%switch_label%%9)))) (and (not %%switch_label%%9) (=> (= mid$7@ (Add mid$6@ (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%core!option.Option. $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (Poly%core!option.Option. v$1@))))) %%switch_label%%8)))))))))))) (=> (not (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./Reply_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))))) (or (and (=> (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= k$3@ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= id@ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= o0$3@ (lib!cmessage_v.CMessage./Redirect/k (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= o1$2@ (lib!cmessage_v.CMessage./Redirect/id (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= mid$8@ 1) (or (and (=> (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$3@) (Poly%lib!keys_t.SHTKey. o0$3@)))) (=> (= tmp%%$16@ (tuple%2./tuple%2 (Poly%lib!keys_t.SHTKey. k$3@) (Poly%lib!keys_t.SHTKey. o0$3@))) (=> (= x0$10@ (%Poly%lib!keys_t.SHTKey. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$16@))))) (=> (= x1$10@ (%Poly%lib!keys_t.SHTKey. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$16@))))) (=> (= tmp%%$17@ (tuple%2./tuple%2 (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$10@)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x1$10@)))) (=> (= s0$10@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$17@))))) (=> (= s1$10@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$17@))))) (=> (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$10@) (Poly%lib!keys_t.SHTKey. x1$10@)) (=> (= tmp%%$18@ (ite (<= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$10@)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$10@))) (tuple%4./tuple%4 (Poly%lib!keys_t.SHTKey. x0$10@) (Poly%lib!keys_t.SHTKey. x1$10@) (Poly%vstd!seq.Seq<u8.>. s0$10@) (Poly%vstd!seq.Seq<u8.>. s1$10@)) (tuple%4./tuple%4 (Poly%lib!keys_t.SHTKey. x1$10@) (Poly%lib!keys_t.SHTKey. x0$10@) (Poly%vstd!seq.Seq<u8.>. s1$10@) (Poly%vstd!seq.Seq<u8.>. s0$10@)))) (=> (= x0$11@ (%Poly%lib!keys_t.SHTKey. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$18@))))) (=> (= x1$11@ (%Poly%lib!keys_t.SHTKey. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$18@))))) (=> (= s0$11@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$18@))))) (=> (= s1$11@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$18@))))) (and (=> %%location_label%%25 (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$11@) (Poly%lib!keys_t.SHTKey. x1$11@))) (=> (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x0$11@) (Poly%lib!keys_t.SHTKey. x1$11@)) (=> (= tmp%11 (not (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. s0$11@) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$11@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$11@))))))) (and (=> %%location_label%%26 tmp%11) (=> tmp%11 (=> (= idx$5@ (%I (as_type (%%choose%%2 INT 0 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$11@)) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$11@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$11@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$11@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$11@)) INT))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%12 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I (Add mid$8@ idx$5@))) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I (Add mid$8@ idx$5@))))) (and (=> %%location_label%%27 tmp%12) (=> tmp%12 %%switch_label%%17)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%17)) (and (not %%switch_label%%17) (=> %%location_label%%28 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)))))))))))))))))))))))))))) (=> (not (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$3@) (Poly%lib!keys_t.SHTKey. o0$3@))))) (and (=> %%location_label%%29 (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$3@) (Poly%lib!keys_t.SHTKey. o0$3@))) (=> (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$3@) (Poly%lib!keys_t.SHTKey. o0$3@)) %%switch_label%%16)))) (and (not %%switch_label%%16) (=> (= mid$9@ (Add mid$8@ (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. k$3@))))) (or (and (=> (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id@) (Poly%lib!io_t.EndPoint. o1$2@)))) (=> (= tmp%%$19@ (tuple%2./tuple%2 (Poly%lib!io_t.EndPoint. id@) (Poly%lib!io_t.EndPoint. o1$2@))) (=> (= x0$12@ (%Poly%lib!io_t.EndPoint. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$19@))))) (=> (= x1$12@ (%Poly%lib!io_t.EndPoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$19@))))) (=> (= tmp%%$20@ (tuple%2./tuple%2 (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x0$12@)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x1$12@)))) (=> (= s0$12@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$20@))))) (=> (= s1$12@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$20@))))) (=> (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x0$12@) (Poly%lib!io_t.EndPoint. x1$12@)) (=> (= tmp%%$21@ (ite (<= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$12@)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$12@))) (tuple%4./tuple%4 (Poly%lib!io_t.EndPoint. x0$12@) (Poly%lib!io_t.EndPoint. x1$12@) (Poly%vstd!seq.Seq<u8.>. s0$12@) (Poly%vstd!seq.Seq<u8.>. s1$12@)) (tuple%4./tuple%4 (Poly%lib!io_t.EndPoint. x1$12@) (Poly%lib!io_t.EndPoint. x0$12@) (Poly%vstd!seq.Seq<u8.>. s1$12@) (Poly%vstd!seq.Seq<u8.>. s0$12@)))) (=> (= x0$13@ (%Poly%lib!io_t.EndPoint. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$21@))))) (=> (= x1$13@ (%Poly%lib!io_t.EndPoint. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$21@))))) (=> (= s0$13@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$21@))))) (=> (= s1$13@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$21@))))) (and (=> %%location_label%%30 (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x0$13@) (Poly%lib!io_t.EndPoint. x1$13@))) (=> (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x0$13@) (Poly%lib!io_t.EndPoint. x1$13@)) (=> (= tmp%13 (not (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. s0$13@) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$13@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$13@))))))) (and (=> %%location_label%%31 tmp%13) (=> tmp%13 (=> (= idx$6@ (%I (as_type (%%choose%%2 INT 0 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$13@)) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$13@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$13@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$13@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$13@)) INT))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%14 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I (Add mid$9@ idx$6@))) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I (Add mid$9@ idx$6@))))) (and (=> %%location_label%%32 tmp%14) (=> tmp%14 %%switch_label%%15)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%15)) (and (not %%switch_label%%15) (=> %%location_label%%33 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)))))))))))))))))))))))))))) (=> (not (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id@) (Poly%lib!io_t.EndPoint. o1$2@))))) (and (=> %%location_label%%34 (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id@) (Poly%lib!io_t.EndPoint. o1$2@))) (=> (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id@) (Poly%lib!io_t.EndPoint. o1$2@)) %%switch_label%%14)))) (and (not %%switch_label%%14) (=> (= mid$10@ (Add mid$9@ (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. id@))))) %%switch_label%%13)))))))))))) (=> (not (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./Redirect_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))))) (or (and (=> (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= kr@ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= recipient@ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= o0$4@ (lib!cmessage_v.CMessage./Shard/kr (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= o1$3@ (lib!cmessage_v.CMessage./Shard/recipient (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= mid$11@ 1) (or (and (=> (not (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr@) (Poly%lib!keys_t.KeyRange. o0$4@)))) (=> (= tmp%%$22@ (tuple%2./tuple%2 (Poly%lib!keys_t.KeyRange. kr@) (Poly%lib!keys_t.KeyRange. o0$4@))) (=> (= x0$14@ (%Poly%lib!keys_t.KeyRange. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$22@))))) (=> (= x1$14@ (%Poly%lib!keys_t.KeyRange. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$22@))))) (=> (= tmp%%$23@ (tuple%2./tuple%2 (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. x0$14@)) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. x1$14@)))) (=> (= s0$14@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$23@))))) (=> (= s1$14@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$23@))))) (=> (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. x0$14@) (Poly%lib!keys_t.KeyRange. x1$14@)) (=> (= tmp%%$24@ (ite (<= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$14@)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$14@))) (tuple%4./tuple%4 (Poly%lib!keys_t.KeyRange. x0$14@) (Poly%lib!keys_t.KeyRange. x1$14@) (Poly%vstd!seq.Seq<u8.>. s0$14@) (Poly%vstd!seq.Seq<u8.>. s1$14@)) (tuple%4./tuple%4 (Poly%lib!keys_t.KeyRange. x1$14@) (Poly%lib!keys_t.KeyRange. x0$14@) (Poly%vstd!seq.Seq<u8.>. s1$14@) (Poly%vstd!seq.Seq<u8.>. s0$14@)))) (=> (= x0$15@ (%Poly%lib!keys_t.KeyRange. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$24@))))) (=> (= x1$15@ (%Poly%lib!keys_t.KeyRange. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$24@))))) (=> (= s0$15@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$24@))))) (=> (= s1$15@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$24@))))) (and (=> %%location_label%%35 (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. x0$15@) (Poly%lib!keys_t.KeyRange. x1$15@))) (=> (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. x0$15@) (Poly%lib!keys_t.KeyRange. x1$15@)) (=> (= tmp%15 (not (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. s0$15@) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$15@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$15@))))))) (and (=> %%location_label%%36 tmp%15) (=> tmp%15 (=> (= idx$7@ (%I (as_type (%%choose%%2 INT 0 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$15@)) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$15@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$15@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$15@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$15@)) INT))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%16 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I (Add mid$11@ idx$7@))) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I (Add mid$11@ idx$7@))))) (and (=> %%location_label%%37 tmp%16) (=> tmp%16 %%switch_label%%22)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%22)) (and (not %%switch_label%%22) (=> %%location_label%%38 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)))))))))))))))))))))))))))) (=> (not (not (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr@) (Poly%lib!keys_t.KeyRange. o0$4@))))) (and (=> %%location_label%%39 (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr@) (Poly%lib!keys_t.KeyRange. o0$4@))) (=> (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr@) (Poly%lib!keys_t.KeyRange. o0$4@)) %%switch_label%%21)))) (and (not %%switch_label%%21) (=> (= mid$12@ (Add mid$11@ (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. kr@))))) (or (and (=> (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient@) (Poly%lib!io_t.EndPoint. o1$3@)))) (=> (= tmp%%$25@ (tuple%2./tuple%2 (Poly%lib!io_t.EndPoint. recipient@) (Poly%lib!io_t.EndPoint. o1$3@))) (=> (= x0$16@ (%Poly%lib!io_t.EndPoint. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$25@))))) (=> (= x1$16@ (%Poly%lib!io_t.EndPoint. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$25@))))) (=> (= tmp%%$26@ (tuple%2./tuple%2 (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x0$16@)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x1$16@)))) (=> (= s0$16@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$26@))))) (=> (= s1$16@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$26@))))) (=> (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x0$16@) (Poly%lib!io_t.EndPoint. x1$16@)) (=> (= tmp%%$27@ (ite (<= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$16@)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$16@))) (tuple%4./tuple%4 (Poly%lib!io_t.EndPoint. x0$16@) (Poly%lib!io_t.EndPoint. x1$16@) (Poly%vstd!seq.Seq<u8.>. s0$16@) (Poly%vstd!seq.Seq<u8.>. s1$16@)) (tuple%4./tuple%4 (Poly%lib!io_t.EndPoint. x1$16@) (Poly%lib!io_t.EndPoint. x0$16@) (Poly%vstd!seq.Seq<u8.>. s1$16@) (Poly%vstd!seq.Seq<u8.>. s0$16@)))) (=> (= x0$17@ (%Poly%lib!io_t.EndPoint. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$27@))))) (=> (= x1$17@ (%Poly%lib!io_t.EndPoint. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$27@))))) (=> (= s0$17@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$27@))))) (=> (= s1$17@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$27@))))) (and (=> %%location_label%%40 (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x0$17@) (Poly%lib!io_t.EndPoint. x1$17@))) (=> (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x0$17@) (Poly%lib!io_t.EndPoint. x1$17@)) (=> (= tmp%17 (not (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. s0$17@) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$17@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$17@))))))) (and (=> %%location_label%%41 tmp%17) (=> tmp%17 (=> (= idx$8@ (%I (as_type (%%choose%%2 INT 0 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$17@)) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$17@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$17@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$17@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$17@)) INT))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%18 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I (Add mid$12@ idx$8@))) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I (Add mid$12@ idx$8@))))) (and (=> %%location_label%%42 tmp%18) (=> tmp%18 %%switch_label%%20)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%20)) (and (not %%switch_label%%20) (=> %%location_label%%43 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)))))))))))))))))))))))))))) (=> (not (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient@) (Poly%lib!io_t.EndPoint. o1$3@))))) (and (=> %%location_label%%44 (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient@) (Poly%lib!io_t.EndPoint. o1$3@))) (=> (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient@) (Poly%lib!io_t.EndPoint. o1$3@)) %%switch_label%%19)))) (and (not %%switch_label%%19) (=> (= mid$13@ (Add mid$12@ (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. recipient@))))) %%switch_label%%18)))))))))))) (=> (not (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./Shard_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))))) (or (and (=> (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./Delegate_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./Delegate_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= range@ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= h@ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= o0$5@ (lib!cmessage_v.CMessage./Delegate/range (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= o1$4@ (lib!cmessage_v.CMessage./Delegate/h (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (=> (= mid$14@ 1) (or (and (=> (not (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range@) (Poly%lib!keys_t.KeyRange. o0$5@)))) (=> (= tmp%%$28@ (tuple%2./tuple%2 (Poly%lib!keys_t.KeyRange. range@) (Poly%lib!keys_t.KeyRange. o0$5@))) (=> (= x0$18@ (%Poly%lib!keys_t.KeyRange. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$28@))))) (=> (= x1$18@ (%Poly%lib!keys_t.KeyRange. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$28@))))) (=> (= tmp%%$29@ (tuple%2./tuple%2 (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. x0$18@)) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. x1$18@)))) (=> (= s0$18@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$29@))))) (=> (= s1$18@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$29@))))) (=> (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. x0$18@) (Poly%lib!keys_t.KeyRange. x1$18@)) (=> (= tmp%%$30@ (ite (<= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$18@)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$18@))) (tuple%4./tuple%4 (Poly%lib!keys_t.KeyRange. x0$18@) (Poly%lib!keys_t.KeyRange. x1$18@) (Poly%vstd!seq.Seq<u8.>. s0$18@) (Poly%vstd!seq.Seq<u8.>. s1$18@)) (tuple%4./tuple%4 (Poly%lib!keys_t.KeyRange. x1$18@) (Poly%lib!keys_t.KeyRange. x0$18@) (Poly%vstd!seq.Seq<u8.>. s1$18@) (Poly%vstd!seq.Seq<u8.>. s0$18@)))) (=> (= x0$19@ (%Poly%lib!keys_t.KeyRange. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$30@))))) (=> (= x1$19@ (%Poly%lib!keys_t.KeyRange. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$30@))))) (=> (= s0$19@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$30@))))) (=> (= s1$19@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$30@))))) (and (=> %%location_label%%45 (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. x0$19@) (Poly%lib!keys_t.KeyRange. x1$19@))) (=> (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. x0$19@) (Poly%lib!keys_t.KeyRange. x1$19@)) (=> (= tmp%19 (not (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. s0$19@) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$19@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$19@))))))) (and (=> %%location_label%%46 tmp%19) (=> tmp%19 (=> (= idx$9@ (%I (as_type (%%choose%%2 INT 0 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$19@)) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$19@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$19@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$19@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$19@)) INT))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%20 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I (Add mid$14@ idx$9@))) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I (Add mid$14@ idx$9@))))) (and (=> %%location_label%%47 tmp%20) (=> tmp%20 %%switch_label%%27)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%27)) (and (not %%switch_label%%27) (=> %%location_label%%48 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)))))))))))))))))))))))))))) (=> (not (not (%B (lib!marshal_v.Marshalable.view_equal.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range@) (Poly%lib!keys_t.KeyRange. o0$5@))))) (and (=> %%location_label%%49 (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range@) (Poly%lib!keys_t.KeyRange. o0$5@))) (=> (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range@) (Poly%lib!keys_t.KeyRange. o0$5@)) %%switch_label%%26)))) (and (not %%switch_label%%26) (=> (= mid$15@ (Add mid$14@ (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ (TYPE%lib!keys_t.KeyRange. $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.KeyRange. range@))))) (or (and (=> (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h@) (Poly%lib!hashmap_t.CKeyHashMap. o1$4@)))) (=> (= tmp%%$31@ (tuple%2./tuple%2 (Poly%lib!hashmap_t.CKeyHashMap. h@) (Poly%lib!hashmap_t.CKeyHashMap. o1$4@))) (=> (= x0$20@ (%Poly%lib!hashmap_t.CKeyHashMap. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$31@))))) (=> (= x1$20@ (%Poly%lib!hashmap_t.CKeyHashMap. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$31@))))) (=> (= tmp%%$32@ (tuple%2./tuple%2 (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. x0$20@)) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. x1$20@)))) (=> (= s0$20@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$32@))))) (=> (= s1$20@ (%Poly%vstd!seq.Seq<u8.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$32@))))) (=> (ens%lib!marshal_v.Marshalable.lemma_view_equal_symmetric. $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. x0$20@) (Poly%lib!hashmap_t.CKeyHashMap. x1$20@)) (=> (= tmp%%$33@ (ite (<= (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$20@)) (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$20@))) (tuple%4./tuple%4 (Poly%lib!hashmap_t.CKeyHashMap. x0$20@) (Poly%lib!hashmap_t.CKeyHashMap. x1$20@) (Poly%vstd!seq.Seq<u8.>. s0$20@) (Poly%vstd!seq.Seq<u8.>. s1$20@)) (tuple%4./tuple%4 (Poly%lib!hashmap_t.CKeyHashMap. x1$20@) (Poly%lib!hashmap_t.CKeyHashMap. x0$20@) (Poly%vstd!seq.Seq<u8.>. s1$20@) (Poly%vstd!seq.Seq<u8.>. s0$20@)))) (=> (= x0$21@ (%Poly%lib!hashmap_t.CKeyHashMap. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$33@))))) (=> (= x1$21@ (%Poly%lib!hashmap_t.CKeyHashMap. (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$33@))))) (=> (= s0$21@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$33@))))) (=> (= s1$21@ (%Poly%vstd!seq.Seq<u8.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$33@))))) (and (=> %%location_label%%50 (req%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. x0$21@) (Poly%lib!hashmap_t.CKeyHashMap. x1$21@))) (=> (ens%lib!marshal_v.Marshalable.lemma_serialization_is_not_a_prefix_of. $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. x0$21@) (Poly%lib!hashmap_t.CKeyHashMap. x1$21@)) (=> (= tmp%21 (not (ext_eq false (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. s0$21@) (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$21@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$21@))))))) (and (=> %%location_label%%51 tmp%21) (=> tmp%21 (=> (= idx$10@ (%I (as_type (%%choose%%2 INT 0 (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$21@)) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$21@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$21@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s0$21@) $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. s1$21@)) INT))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%22 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I (Add mid$15@ idx$10@))) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I (Add mid$15@ idx$10@))))) (and (=> %%location_label%%52 tmp%22) (=> tmp%22 %%switch_label%%25)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%25)) (and (not %%switch_label%%25) (=> %%location_label%%53 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!)))))))))))))))))))))))))))) (=> (not (not (%B (lib!marshal_v.Marshalable.view_equal.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h@) (Poly%lib!hashmap_t.CKeyHashMap. o1$4@))))) (and (=> %%location_label%%54 (req%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h@) (Poly%lib!hashmap_t.CKeyHashMap. o1$4@))) (=> (ens%lib!marshal_v.Marshalable.lemma_same_views_serialize_the_same. $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h@) (Poly%lib!hashmap_t.CKeyHashMap. o1$4@)) %%switch_label%%24)))) (and (not %%switch_label%%24) (=> (= mid$16@ (Add mid$15@ (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!hashmap_t.CKeyHashMap. (Poly%lib!hashmap_t.CKeyHashMap. h@))))) %%switch_label%%23)))))))))))) (=> (not (and (and (is-tuple%2./tuple%2_ tmp%%@) (is-lib!cmessage_v.CMessage./Delegate_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@)))))) (is-lib!cmessage_v.CMessage./Delegate_ (%Poly%lib!cmessage_v.CMessage. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%@))))))) (or (and (=> (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@)))))) (=> (= tmp%23 (= (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@) (I 0)) (vstd!seq.Seq.index.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0)))) (and (=> %%location_label%%55 tmp%23) (=> tmp%23 %%switch_label%%28)))) (=> (not (= si@ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.subrange.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. so@) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. si@))))))) %%switch_label%%28)) (and (not %%switch_label%%28) %%switch_label%%23)))) (and (not %%switch_label%%23) %%switch_label%%18)))) (and (not %%switch_label%%18) %%switch_label%%13)))) (and (not %%switch_label%%13) %%switch_label%%8)))) (and (not %%switch_label%%8) %%switch_label%%3)))) (and (not %%switch_label%%3) %%switch_label%%0)))) (and (not %%switch_label%%0) (=> %%location_label%%56 (not (= (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!) (vstd!seq.Seq.subrange.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. other!) (I 0) (I (vstd!seq.Seq.len.? $ (UINT 8) (lib!marshal_v.Marshalable.ghost_serialize.? $ TYPE%lib!cmessage_v.CMessage. self!))))))))))))))
(check-sat)
(exit)
