(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.map. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.drop_first. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%22.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%lib!log.inv_v.active_metadata_bytes_are_equal. FuelId)
(declare-const fuel%lib!log.inv_v.metadata_types_set. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA. FuelId)
(declare-const fuel%lib!log.layout_v.RELATIVE_POS_OF_GLOBAL_VERSION_NUMBER. FuelId)
(declare-const fuel%lib!log.layout_v.RELATIVE_POS_OF_GLOBAL_LENGTH_OF_REGION_METADATA. FuelId)
(declare-const fuel%lib!log.layout_v.RELATIVE_POS_OF_GLOBAL_PROGRAM_GUID. FuelId)
(declare-const fuel%lib!log.layout_v.LENGTH_OF_GLOBAL_METADATA. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA. FuelId)
(declare-const fuel%lib!log.layout_v.RELATIVE_POS_OF_REGION_REGION_SIZE. FuelId)
(declare-const fuel%lib!log.layout_v.RELATIVE_POS_OF_REGION_LENGTH_OF_LOG_AREA. FuelId)
(declare-const fuel%lib!log.layout_v.RELATIVE_POS_OF_REGION_LOG_ID. FuelId)
(declare-const fuel%lib!log.layout_v.LENGTH_OF_REGION_METADATA. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE. FuelId)
(declare-const fuel%lib!log.layout_v.RELATIVE_POS_OF_LOG_LOG_LENGTH. FuelId)
(declare-const fuel%lib!log.layout_v.RELATIVE_POS_OF_LOG_PADDING. FuelId)
(declare-const fuel%lib!log.layout_v.RELATIVE_POS_OF_LOG_HEAD. FuelId)
(declare-const fuel%lib!log.layout_v.LENGTH_OF_LOG_METADATA. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE. FuelId)
(declare-const fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA. FuelId)
(declare-const fuel%lib!log.layout_v.MIN_LOG_AREA_SIZE. FuelId)
(declare-const fuel%lib!log.layout_v.LOG_PROGRAM_GUID. FuelId)
(declare-const fuel%lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%3.spec_size_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%3.spec_align_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%12.spec_size_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%12.spec_align_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%21.spec_size_of. FuelId)
(declare-const fuel%lib!log.layout_v.impl&%21.spec_align_of. FuelId)
(declare-const fuel%lib!log.layout_v.extract_global_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_global_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.extract_global_crc. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_global_crc. FuelId)
(declare-const fuel%lib!log.layout_v.extract_region_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_region_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.extract_region_crc. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_region_crc. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.extract_and_parse_log_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_log_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_and_check_log_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.get_log_metadata_pos. FuelId)
(declare-const fuel%lib!log.layout_v.get_log_crc_end. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_log_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_crc. FuelId)
(declare-const fuel%lib!log.layout_v.deserialize_log_crc. FuelId)
(declare-const fuel%lib!log.layout_v.parse_u32. FuelId)
(declare-const fuel%lib!log.layout_v.parse_u64. FuelId)
(declare-const fuel%lib!log.layout_v.parse_u128. FuelId)
(declare-const fuel%lib!log.layout_v.parse_global_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.parse_region_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.parse_log_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.relative_log_pos_to_log_area_offset. FuelId)
(declare-const fuel%lib!log.layout_v.log_area_offset_to_relative_log_pos. FuelId)
(declare-const fuel%lib!log.layout_v.extract_log_from_log_area. FuelId)
(declare-const fuel%lib!log.layout_v.recover_log_from_log_area_given_metadata. FuelId)
(declare-const fuel%lib!log.layout_v.recover_log. FuelId)
(declare-const fuel%lib!log.layout_v.recover_given_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.recover_cdb. FuelId)
(declare-const fuel%lib!log.layout_v.recover_state. FuelId)
(declare-const fuel%lib!log.logspec_t.impl&%0.drop_pending_appends. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.CDB_FALSE. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.CDB_TRUE. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.const_persistence_chunk_size. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.len. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.committed. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.impl&%6.can_crash_as. FuelId)
(declare-const fuel%lib!pmem.pmemspec_t.extract_bytes. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%15.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%15.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of. FuelId)
(declare-const fuel%lib!pmem.pmcopy_t.spec_padding_needed. FuelId)
(declare-const fuel%lib!util_v.nat_seq_max. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq_lib.impl&%0.map. fuel%vstd!seq_lib.impl&%0.drop_first. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%22.view. fuel%vstd!view.impl&%24.view. fuel%lib!log.inv_v.active_metadata_bytes_are_equal. fuel%lib!log.inv_v.metadata_types_set. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA. fuel%lib!log.layout_v.RELATIVE_POS_OF_GLOBAL_VERSION_NUMBER. fuel%lib!log.layout_v.RELATIVE_POS_OF_GLOBAL_LENGTH_OF_REGION_METADATA. fuel%lib!log.layout_v.RELATIVE_POS_OF_GLOBAL_PROGRAM_GUID. fuel%lib!log.layout_v.LENGTH_OF_GLOBAL_METADATA. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA. fuel%lib!log.layout_v.RELATIVE_POS_OF_REGION_REGION_SIZE. fuel%lib!log.layout_v.RELATIVE_POS_OF_REGION_LENGTH_OF_LOG_AREA. fuel%lib!log.layout_v.RELATIVE_POS_OF_REGION_LOG_ID. fuel%lib!log.layout_v.LENGTH_OF_REGION_METADATA. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE. fuel%lib!log.layout_v.RELATIVE_POS_OF_LOG_LOG_LENGTH. fuel%lib!log.layout_v.RELATIVE_POS_OF_LOG_PADDING. fuel%lib!log.layout_v.RELATIVE_POS_OF_LOG_HEAD. fuel%lib!log.layout_v.LENGTH_OF_LOG_METADATA. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE. fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA. fuel%lib!log.layout_v.MIN_LOG_AREA_SIZE. fuel%lib!log.layout_v.LOG_PROGRAM_GUID. fuel%lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER. fuel%lib!log.layout_v.impl&%3.spec_size_of. fuel%lib!log.layout_v.impl&%3.spec_align_of. fuel%lib!log.layout_v.impl&%12.spec_size_of. fuel%lib!log.layout_v.impl&%12.spec_align_of. fuel%lib!log.layout_v.impl&%21.spec_size_of. fuel%lib!log.layout_v.impl&%21.spec_align_of. fuel%lib!log.layout_v.extract_global_metadata. fuel%lib!log.layout_v.deserialize_global_metadata. fuel%lib!log.layout_v.extract_global_crc. fuel%lib!log.layout_v.deserialize_global_crc. fuel%lib!log.layout_v.extract_region_metadata. fuel%lib!log.layout_v.deserialize_region_metadata. fuel%lib!log.layout_v.extract_region_crc. fuel%lib!log.layout_v.deserialize_region_crc. fuel%lib!log.layout_v.extract_log_cdb. fuel%lib!log.layout_v.extract_and_parse_log_cdb. fuel%lib!log.layout_v.deserialize_log_cdb. fuel%lib!log.layout_v.deserialize_and_check_log_cdb. fuel%lib!log.layout_v.get_log_metadata_pos. fuel%lib!log.layout_v.get_log_crc_end. fuel%lib!log.layout_v.extract_log_metadata. fuel%lib!log.layout_v.deserialize_log_metadata. fuel%lib!log.layout_v.extract_log_crc. fuel%lib!log.layout_v.deserialize_log_crc. fuel%lib!log.layout_v.parse_u32. fuel%lib!log.layout_v.parse_u64. fuel%lib!log.layout_v.parse_u128. fuel%lib!log.layout_v.parse_global_metadata. fuel%lib!log.layout_v.parse_region_metadata. fuel%lib!log.layout_v.parse_log_metadata. fuel%lib!log.layout_v.relative_log_pos_to_log_area_offset. fuel%lib!log.layout_v.log_area_offset_to_relative_log_pos. fuel%lib!log.layout_v.extract_log_from_log_area. fuel%lib!log.layout_v.recover_log_from_log_area_given_metadata. fuel%lib!log.layout_v.recover_log. fuel%lib!log.layout_v.recover_given_cdb. fuel%lib!log.layout_v.recover_cdb. fuel%lib!log.layout_v.recover_state. fuel%lib!log.logspec_t.impl&%0.drop_pending_appends. fuel%lib!pmem.pmemspec_t.CDB_FALSE. fuel%lib!pmem.pmemspec_t.CDB_TRUE. fuel%lib!pmem.pmemspec_t.const_persistence_chunk_size. fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte. fuel%lib!pmem.pmemspec_t.impl&%6.len. fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range. fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes. fuel%lib!pmem.pmemspec_t.impl&%6.committed. fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes. fuel%lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush. fuel%lib!pmem.pmemspec_t.impl&%6.can_crash_as. fuel%lib!pmem.pmemspec_t.extract_bytes. fuel%lib!pmem.pmcopy_t.impl&%0.spec_crc. fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable. fuel%lib!pmem.pmcopy_t.impl&%7.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%7.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%15.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%15.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%23.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%23.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%27.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%27.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%55.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%55.spec_align_of. fuel%lib!pmem.pmcopy_t.impl&%60.spec_size_of. fuel%lib!pmem.pmcopy_t.impl&%60.spec_align_of. fuel%lib!pmem.pmcopy_t.spec_padding_needed. fuel%lib!util_v.nat_seq_max. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!log.layout_v.GlobalMetadata. 0) (lib!log.layout_v.RegionMetadata. 0) (lib!log.layout_v.LogMetadata. 0) (lib!log.logspec_t.AbstractLogState. 0) (lib!pmem.pmemspec_t.PersistentMemoryByte. 0) (lib!pmem.pmemspec_t.PersistentMemoryRegionView. 0) (tuple%0. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!log.layout_v.GlobalMetadata./GlobalMetadata (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?version_number Int) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?length_of_region_metadata Int) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?program_guid Int))) ((lib!log.layout_v.RegionMetadata./RegionMetadata (lib!log.layout_v.RegionMetadata./RegionMetadata/?region_size Int) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_area_len Int) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_id Int))) ((lib!log.layout_v.LogMetadata./LogMetadata (lib!log.layout_v.LogMetadata./LogMetadata/?log_length Int) (lib!log.layout_v.LogMetadata./LogMetadata/?_padding Int) (lib!log.layout_v.LogMetadata./LogMetadata/?head Int))) ((lib!log.logspec_t.AbstractLogState./AbstractLogState (lib!log.logspec_t.AbstractLogState./AbstractLogState/?head Int) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?log vstd!seq.Seq<u8.>.) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?pending vstd!seq.Seq<u8.>.) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?capacity Int))) ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush Int) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write core!option.Option.))) ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.))) ((tuple%0./tuple%0 ))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (lib!log.layout_v.GlobalMetadata.) Int)
(declare-fun lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (lib!log.layout_v.GlobalMetadata.) Int)
(declare-fun lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (lib!log.layout_v.GlobalMetadata.) Int)
(declare-fun lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (lib!log.layout_v.RegionMetadata.) Int)
(declare-fun lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (lib!log.layout_v.RegionMetadata.) Int)
(declare-fun lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (lib!log.layout_v.RegionMetadata.) Int)
(declare-fun lib!log.layout_v.LogMetadata./LogMetadata/log_length (lib!log.layout_v.LogMetadata.) Int)
(declare-fun lib!log.layout_v.LogMetadata./LogMetadata/_padding (lib!log.layout_v.LogMetadata.) Int)
(declare-fun lib!log.layout_v.LogMetadata./LogMetadata/head (lib!log.layout_v.LogMetadata.) Int)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/head (lib!log.logspec_t.AbstractLogState.) Int)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/log (lib!log.logspec_t.AbstractLogState.) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (lib!log.logspec_t.AbstractLogState.) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (lib!log.logspec_t.AbstractLogState.) Int)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (lib!pmem.pmemspec_t.PersistentMemoryByte.) Int)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (lib!pmem.pmemspec_t.PersistentMemoryByte.) core!option.Option.)
(declare-fun lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-const TYPE%lib!log.layout_v.GlobalMetadata. Type)
(declare-const TYPE%lib!log.layout_v.RegionMetadata. Type)
(declare-const TYPE%lib!log.layout_v.LogMetadata. Type)
(declare-const TYPE%lib!log.logspec_t.AbstractLogState. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. Type)
(declare-const TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly) vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!log.layout_v.GlobalMetadata. (lib!log.layout_v.GlobalMetadata.) Poly)
(declare-fun %Poly%lib!log.layout_v.GlobalMetadata. (Poly) lib!log.layout_v.GlobalMetadata.)
(declare-fun Poly%lib!log.layout_v.RegionMetadata. (lib!log.layout_v.RegionMetadata.) Poly)
(declare-fun %Poly%lib!log.layout_v.RegionMetadata. (Poly) lib!log.layout_v.RegionMetadata.)
(declare-fun Poly%lib!log.layout_v.LogMetadata. (lib!log.layout_v.LogMetadata.) Poly)
(declare-fun %Poly%lib!log.layout_v.LogMetadata. (Poly) lib!log.layout_v.LogMetadata.)
(declare-fun Poly%lib!log.logspec_t.AbstractLogState. (lib!log.logspec_t.AbstractLogState.) Poly)
(declare-fun %Poly%lib!log.logspec_t.AbstractLogState. (Poly) lib!log.logspec_t.AbstractLogState.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly) lib!pmem.pmemspec_t.PersistentMemoryByte.)
(declare-fun Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (lib!pmem.pmemspec_t.PersistentMemoryRegionView.) Poly)
(declare-fun %Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly) lib!pmem.pmemspec_t.PersistentMemoryRegionView.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)) )) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) ))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) (= x (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (%Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))) )))
(assert (forall ((x vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= x (%Poly%lib!log.layout_v.GlobalMetadata. (Poly%lib!log.layout_v.GlobalMetadata. x))) :pattern ((Poly%lib!log.layout_v.GlobalMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (= x (Poly%lib!log.layout_v.GlobalMetadata. (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((has_type x TYPE%lib!log.layout_v.GlobalMetadata.)) )))
(assert (forall ((_version_number! Int) (_length_of_region_metadata! Int) (_program_guid! Int)) (! (=> (and (uInv 64 _version_number!) (uInv 64 _length_of_region_metadata!) (uInv 128 _program_guid!)) (has_type (Poly%lib!log.layout_v.GlobalMetadata. (lib!log.layout_v.GlobalMetadata./GlobalMetadata _version_number! _length_of_region_metadata! _program_guid!)) TYPE%lib!log.layout_v.GlobalMetadata.)) :pattern ((has_type (Poly%lib!log.layout_v.GlobalMetadata. (lib!log.layout_v.GlobalMetadata./GlobalMetadata _version_number! _length_of_region_metadata! _program_guid!)) TYPE%lib!log.layout_v.GlobalMetadata.)) )))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number x) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?version_number x)) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (uInv 64 (lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/version_number (%Poly%lib!log.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!log.layout_v.GlobalMetadata.)) )))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata x) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?length_of_region_metadata x)) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (uInv 64 (lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/length_of_region_metadata (%Poly%lib!log.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!log.layout_v.GlobalMetadata.)) )))
(assert (forall ((x lib!log.layout_v.GlobalMetadata.)) (! (= (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid x) (lib!log.layout_v.GlobalMetadata./GlobalMetadata/?program_guid x)) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.GlobalMetadata.) (uInv 128 (lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. x)))) :pattern ((lib!log.layout_v.GlobalMetadata./GlobalMetadata/program_guid (%Poly%lib!log.layout_v.GlobalMetadata. x)) (has_type x TYPE%lib!log.layout_v.GlobalMetadata.)) )))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= x (%Poly%lib!log.layout_v.RegionMetadata. (Poly%lib!log.layout_v.RegionMetadata. x))) :pattern ((Poly%lib!log.layout_v.RegionMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (= x (Poly%lib!log.layout_v.RegionMetadata. (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((has_type x TYPE%lib!log.layout_v.RegionMetadata.)) )))
(assert (forall ((_region_size! Int) (_log_area_len! Int) (_log_id! Int)) (! (=> (and (uInv 64 _region_size!) (uInv 64 _log_area_len!) (uInv 128 _log_id!)) (has_type (Poly%lib!log.layout_v.RegionMetadata. (lib!log.layout_v.RegionMetadata./RegionMetadata _region_size! _log_area_len! _log_id!)) TYPE%lib!log.layout_v.RegionMetadata.)) :pattern ((has_type (Poly%lib!log.layout_v.RegionMetadata. (lib!log.layout_v.RegionMetadata./RegionMetadata _region_size! _log_area_len! _log_id!)) TYPE%lib!log.layout_v.RegionMetadata.)) )))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size x) (lib!log.layout_v.RegionMetadata./RegionMetadata/?region_size x)) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/region_size x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (uInv 64 (lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/region_size (%Poly%lib!log.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!log.layout_v.RegionMetadata.)) )))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len x) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_area_len x)) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (uInv 64 (lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_area_len (%Poly%lib!log.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!log.layout_v.RegionMetadata.)) )))
(assert (forall ((x lib!log.layout_v.RegionMetadata.)) (! (= (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id x) (lib!log.layout_v.RegionMetadata./RegionMetadata/?log_id x)) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_id x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.RegionMetadata.) (uInv 128 (lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. x)))) :pattern ((lib!log.layout_v.RegionMetadata./RegionMetadata/log_id (%Poly%lib!log.layout_v.RegionMetadata. x)) (has_type x TYPE%lib!log.layout_v.RegionMetadata.)) )))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= x (%Poly%lib!log.layout_v.LogMetadata. (Poly%lib!log.layout_v.LogMetadata. x))) :pattern ((Poly%lib!log.layout_v.LogMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (= x (Poly%lib!log.layout_v.LogMetadata. (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((has_type x TYPE%lib!log.layout_v.LogMetadata.)) )))
(assert (forall ((_log_length! Int) (__padding! Int) (_head! Int)) (! (=> (and (uInv 64 _log_length!) (uInv 64 __padding!) (uInv 128 _head!)) (has_type (Poly%lib!log.layout_v.LogMetadata. (lib!log.layout_v.LogMetadata./LogMetadata _log_length! __padding! _head!)) TYPE%lib!log.layout_v.LogMetadata.)) :pattern ((has_type (Poly%lib!log.layout_v.LogMetadata. (lib!log.layout_v.LogMetadata./LogMetadata _log_length! __padding! _head!)) TYPE%lib!log.layout_v.LogMetadata.)) )))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= (lib!log.layout_v.LogMetadata./LogMetadata/log_length x) (lib!log.layout_v.LogMetadata./LogMetadata/?log_length x)) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/log_length x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (uInv 64 (lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/log_length (%Poly%lib!log.layout_v.LogMetadata. x)) (has_type x TYPE%lib!log.layout_v.LogMetadata.)) )))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= (lib!log.layout_v.LogMetadata./LogMetadata/_padding x) (lib!log.layout_v.LogMetadata./LogMetadata/?_padding x)) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/_padding x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (uInv 64 (lib!log.layout_v.LogMetadata./LogMetadata/_padding (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/_padding (%Poly%lib!log.layout_v.LogMetadata. x)) (has_type x TYPE%lib!log.layout_v.LogMetadata.)) )))
(assert (forall ((x lib!log.layout_v.LogMetadata.)) (! (= (lib!log.layout_v.LogMetadata./LogMetadata/head x) (lib!log.layout_v.LogMetadata./LogMetadata/?head x)) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/head x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.layout_v.LogMetadata.) (uInv 128 (lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. x)))) :pattern ((lib!log.layout_v.LogMetadata./LogMetadata/head (%Poly%lib!log.layout_v.LogMetadata. x)) (has_type x TYPE%lib!log.layout_v.LogMetadata.)) )))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= x (%Poly%lib!log.logspec_t.AbstractLogState. (Poly%lib!log.logspec_t.AbstractLogState. x))) :pattern ((Poly%lib!log.logspec_t.AbstractLogState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!log.logspec_t.AbstractLogState.) (= x (Poly%lib!log.logspec_t.AbstractLogState. (%Poly%lib!log.logspec_t.AbstractLogState. x)))) :pattern ((has_type x TYPE%lib!log.logspec_t.AbstractLogState.)) )))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/head x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?head x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/head x)) )))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/log x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?log x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/log x)) )))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?pending x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/pending x)) )))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity x) (lib!log.logspec_t.AbstractLogState./AbstractLogState/?capacity x)) :pattern ((lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity x)) )))
(assert (forall ((x lib!log.logspec_t.AbstractLogState.)) (! (has_type (Poly%lib!log.logspec_t.AbstractLogState. x) TYPE%lib!log.logspec_t.AbstractLogState.) :pattern ((has_type (Poly%lib!log.logspec_t.AbstractLogState. x) TYPE%lib!log.logspec_t.AbstractLogState.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!log.logspec_t.AbstractLogState.) (has_type y TYPE%lib!log.logspec_t.AbstractLogState.) (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. x)) (lib!log.logspec_t.AbstractLogState./AbstractLogState/head (%Poly%lib!log.logspec_t.AbstractLogState. y))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. x))) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/log (%Poly%lib!log.logspec_t.AbstractLogState. y)))) (ext_eq deep (TYPE%vstd!seq.Seq. $ (UINT 8)) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. x))) (Poly%vstd!seq.Seq<u8.>. (lib!log.logspec_t.AbstractLogState./AbstractLogState/pending (%Poly%lib!log.logspec_t.AbstractLogState. y)))) (= (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. x)) (lib!log.logspec_t.AbstractLogState./AbstractLogState/capacity (%Poly%lib!log.logspec_t.AbstractLogState. y)))) (ext_eq deep TYPE%lib!log.logspec_t.AbstractLogState. x y)) :pattern ((ext_eq deep TYPE%lib!log.logspec_t.AbstractLogState. x y)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((_state_at_last_flush! Int) (_outstanding_write! core!option.Option.)) (! (=> (and (uInv 8 _state_at_last_flush!) (has_type (Poly%core!option.Option. _outstanding_write!) (TYPE%core!option.Option. $ (UINT 8)))) (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte _state_at_last_flush! _outstanding_write!)) TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?state_at_last_flush x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (uInv 8 (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryByte.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/?outstanding_write x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (TYPE%core!option.Option. $ (UINT 8)))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (= (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x)) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))) (ext_eq deep (TYPE%core!option.Option. $ (UINT 8)) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. x))) (Poly%core!option.Option. (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. x y)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= x (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) :pattern ((Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (= x (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x)))) :pattern ((has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (= (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x) (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/?state x)) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state x)) )))
(assert (forall ((x lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) (! (has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) :pattern ((has_type (Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x) TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (has_type y TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (ext_eq deep (TYPE%vstd!seq.Seq. $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x))) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. y))))) (ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)) :pattern ((ext_eq deep TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView. x y)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)) )))
(declare-fun %%apply%%2 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%2 Fn i) T)) :pattern ((has_type (%%apply%%2 Fn i) T)) )) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)) )))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))) )))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%2 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%2 Fn i)) )))
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopy. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.SpecPmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSafe. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&) (and (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&))) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopyHelper. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT 128)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 128)) (UINT 128)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.impl&%6.len.? (Poly) Int)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? (Dcr Type) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_size_of%default%.? (Dcr Type) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? (Dcr Type) Poly)
(declare-fun lib!pmem.pmcopy_t.SpecPmSized.spec_align_of%default%.? (Dcr Type) Poly)
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(declare-fun lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? (Poly Poly Poly) Bool)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable%default%.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmcopy_t.PmCopyHelper.spec_crc%default%.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.map.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.impl&%6.committed.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!pmem.pmemspec_t.impl&%5.flush_byte.? (Poly) Int)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!bytes.spec_u32_from_le_bytes.? (Poly) Int)
(declare-fun vstd!bytes.spec_u64_from_le_bytes.? (Poly) Int)
(declare-fun vstd!bytes.spec_u128_from_le_bytes.? (Poly) Int)
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(declare-fun vstd!seq_lib.impl&%0.drop_first.? (Dcr Type Poly) Poly)
(declare-fun lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? (Poly) Bool)
(declare-fun lib!pmem.pmemspec_t.spec_crc_u64.? (Poly) Int)
(declare-fun lib!pmem.pmemspec_t.CDB_FALSE.? () Int)
(declare-fun lib!pmem.pmemspec_t.CDB_TRUE.? () Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.? () Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? () Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_TRUE.? () Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_METADATA_FOR_CDB_FALSE.? () Int)
(declare-fun lib!pmem.pmcopy_t.spec_padding_needed.? (Poly Poly) Int)
(declare-fun lib!pmem.pmemspec_t.extract_bytes.? (Poly Poly Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CDB.? () Int)
(declare-fun lib!log.layout_v.extract_log_cdb.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_log_cdb.? (Poly) Int)
(declare-fun lib!log.layout_v.deserialize_and_check_log_cdb.? (Poly) core!option.Option.)
(declare-fun lib!log.inv_v.active_metadata_bytes_are_equal.? (Poly Poly) Bool)
(declare-fun lib!util_v.nat_seq_max.? (Poly) Int)
(declare-fun lib!util_v.rec%nat_seq_max.? (Poly Fuel) Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_FALSE.? () Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_LOG_CRC_FOR_CDB_TRUE.? () Int)
(declare-fun lib!log.layout_v.extract_and_parse_log_cdb.? (Poly) core!option.Option.)
(declare-fun lib!log.layout_v.extract_global_metadata.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_global_metadata.? (Poly) lib!log.layout_v.GlobalMetadata.)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_CRC.? () Int)
(declare-fun lib!log.layout_v.extract_global_crc.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_global_crc.? (Poly) Int)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_REGION_METADATA.? () Int)
(declare-fun lib!log.layout_v.extract_region_metadata.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_region_metadata.? (Poly) lib!log.layout_v.RegionMetadata.)
(declare-fun lib!log.layout_v.ABSOLUTE_POS_OF_REGION_CRC.? () Int)
(declare-fun lib!log.layout_v.extract_region_crc.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_region_crc.? (Poly) Int)
(declare-fun lib!log.layout_v.get_log_metadata_pos.? (Poly) Int)
(declare-fun lib!log.layout_v.extract_log_metadata.? (Poly Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_log_metadata.? (Poly Poly) lib!log.layout_v.LogMetadata.)
(declare-fun lib!log.layout_v.extract_log_crc.? (Poly Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.deserialize_log_crc.? (Poly Poly) Int)
(declare-fun lib!log.layout_v.get_log_crc_end.? (Poly) Int)
(declare-fun lib!log.layout_v.LOG_PROGRAM_GUID.? () Int)
(declare-fun lib!log.layout_v.LOG_PROGRAM_VERSION_NUMBER.? () Int)
(declare-fun lib!log.layout_v.MIN_LOG_AREA_SIZE.? () Int)
(declare-fun lib!log.layout_v.relative_log_pos_to_log_area_offset.? (Poly Poly Poly) Int)
(declare-fun lib!log.inv_v.metadata_types_set.? (Poly) Bool)
(declare-fun lib!log.layout_v.log_area_offset_to_relative_log_pos.? (Poly Poly Poly) Int)
(declare-fun lib!log.layout_v.RELATIVE_POS_OF_GLOBAL_VERSION_NUMBER.? () Int)
(declare-fun lib!log.layout_v.RELATIVE_POS_OF_GLOBAL_LENGTH_OF_REGION_METADATA.? () Int)
(declare-fun lib!log.layout_v.RELATIVE_POS_OF_GLOBAL_PROGRAM_GUID.? () Int)
(declare-fun lib!log.layout_v.LENGTH_OF_GLOBAL_METADATA.? () Int)
(declare-fun lib!log.layout_v.RELATIVE_POS_OF_REGION_REGION_SIZE.? () Int)
(declare-fun lib!log.layout_v.RELATIVE_POS_OF_REGION_LENGTH_OF_LOG_AREA.? () Int)
(declare-fun lib!log.layout_v.RELATIVE_POS_OF_REGION_LOG_ID.? () Int)
(declare-fun lib!log.layout_v.LENGTH_OF_REGION_METADATA.? () Int)
(declare-fun lib!log.layout_v.RELATIVE_POS_OF_LOG_LOG_LENGTH.? () Int)
(declare-fun lib!log.layout_v.RELATIVE_POS_OF_LOG_PADDING.? () Int)
(declare-fun lib!log.layout_v.RELATIVE_POS_OF_LOG_HEAD.? () Int)
(declare-fun lib!log.layout_v.LENGTH_OF_LOG_METADATA.? () Int)
(declare-fun lib!log.layout_v.parse_u32.? (Poly Poly) Int)
(declare-fun lib!log.layout_v.parse_u64.? (Poly Poly) Int)
(declare-fun lib!log.layout_v.parse_u128.? (Poly Poly) Int)
(declare-fun lib!log.layout_v.parse_global_metadata.? (Poly) lib!log.layout_v.GlobalMetadata.)
(declare-fun lib!log.layout_v.parse_region_metadata.? (Poly) lib!log.layout_v.RegionMetadata.)
(declare-fun lib!log.layout_v.parse_log_metadata.? (Poly) lib!log.layout_v.LogMetadata.)
(declare-fun lib!log.layout_v.extract_log_from_log_area.? (Poly Poly Poly) vstd!seq.Seq<u8.>.)
(declare-fun lib!log.layout_v.recover_log_from_log_area_given_metadata.? (Poly Poly Poly) core!option.Option.)
(declare-fun lib!log.layout_v.recover_log.? (Poly Poly Poly Poly) core!option.Option.)
(declare-fun lib!log.layout_v.recover_given_cdb.? (Poly Poly Poly) core!option.Option.)
(declare-fun lib!log.layout_v.recover_cdb.? (Poly) core!option.Option.)
(declare-fun lib!log.layout_v.recover_state.? (Poly Poly) core!option.Option.)
(declare-fun lib!pmem.pmemspec_t.const_persistence_chunk_size.? (Poly) Int)
(declare-fun lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_ignoring_outstanding_writes.? (Poly Poly Poly) Bool)
(declare-fun lib!pmem.pmemspec_t.impl&%6.chunk_corresponds_after_flush.? (Poly Poly Poly) Bool)
(declare-fun lib!pmem.pmemspec_t.impl&%6.can_crash_as.? (Poly Poly) Bool)
(declare-fun lib!log.logspec_t.impl&%0.drop_pending_appends.? (Poly) lib!log.logspec_t.AbstractLogState.)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.len.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.len.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.len.? self!) (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryRegionView.) (<= 0 (lib!pmem.pmemspec_t.impl&%6.len.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%6.len.? self!)) )))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? Self%&. Self%&) NAT) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? Self%&. Self%&) NAT) :pattern ((lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? Self%&. Self%&)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!)) ))))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.) (forall ((self! Poly) (i! Poly) (j! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! i! j!) (forall ((k$ Poly)) (! (=> (has_type k$ INT) (=> (and (<= (%I i!) (%I k$)) (< (%I k$) (%I j!))) (is-core!option.Option./None_ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) k$)))))) :pattern ((lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. (vstd!seq.Seq.index.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) k$)))) ))) :pattern ((lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! i! j!)) ))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? Self%&. Self%& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? Self%&. Self%& bytes!) Self%&)) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? Self%&. Self%& bytes!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? Self%&. Self%& bytes!) BOOL)) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? Self%&. Self%& bytes!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? Self%&. Self%& self!) (UINT 64))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.spec_crc.? Self%&. Self%& self!)) )))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%0.bytes_parseable.) (forall ((T&. Dcr) (T& Type) (bytes! Poly)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. T&. T&) (= (lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? T&. T& bytes!) (B (= (lib!pmem.pmcopy_t.PmCopyHelper.spec_to_bytes.? T&. T& (lib!pmem.pmcopy_t.PmCopyHelper.spec_from_bytes.? T&. T& bytes!)) bytes!)))) :pattern ((lib!pmem.pmcopy_t.PmCopyHelper.bytes_parseable.? T&. T& bytes!)) ))))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%3 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.map.))
(declare-fun %%lambda%%0 (Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$) (%%apply%%1 %%hole%%3 i$ (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) i$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.map.) (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (= (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (vstd!seq.Seq.new.? B&. B& $ (TYPE%fun%1. $ INT B&. B&) (I (vstd!seq.Seq.len.? A&. A& self!)) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self! (%Poly%fun%2. f!)))))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type f! (TYPE%fun%2. $ INT A&. A& B&. B&))) (has_type (vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!) (TYPE%vstd!seq.Seq. B&. B&))) :pattern ((vstd!seq_lib.impl&%0.map.? A&. A& B&. B& self! f!)) )))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.committed.))
(declare-fun %%lambda%%1 () %%Function%%)
(assert (forall ((_addr$ Poly) (b$ Poly)) (! (= (%%apply%%1 %%lambda%%1 _addr$ b$) (I (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. b$)))) :pattern ((%%apply%%1 %%lambda%%1 _addr$ b$)))))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.committed.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.committed.? self!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq_lib.impl&%0.map.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. $ (UINT 8) (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))) (Poly%fun%2. (mk_fun %%lambda%%1))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.committed.? self!)) ))))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%5.flush_byte.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!) (let ((tmp%%$ (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/outstanding_write (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)))) (ite (is-core!option.Option./None_ tmp%%$) (lib!pmem.pmemspec_t.PersistentMemoryByte./PersistentMemoryByte/state_at_last_flush (%Poly%lib!pmem.pmemspec_t.PersistentMemoryByte. self!)) (let ((b$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) b$)))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte.) (uInv 8 (lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!))) :pattern ((lib!pmem.pmemspec_t.impl&%5.flush_byte.? self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%4 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%2 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%2 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)) )))
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!)) ))))
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!)) ))))
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!))) ))))
(declare-fun req%vstd!bytes.spec_u32_from_le_bytes. (Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((s! Poly)) (! (= (req%vstd!bytes.spec_u32_from_le_bytes. s!) (=> %%global_location_label%%5 (= (vstd!seq.Seq.len.? $ (UINT 8) s!) 4))) :pattern ((req%vstd!bytes.spec_u32_from_le_bytes. s!)) )))
(assert (forall ((s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 32 (vstd!bytes.spec_u32_from_le_bytes.? s!))) :pattern ((vstd!bytes.spec_u32_from_le_bytes.? s!)) )))
(declare-fun req%vstd!bytes.spec_u64_from_le_bytes. (Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((s! Poly)) (! (= (req%vstd!bytes.spec_u64_from_le_bytes. s!) (=> %%global_location_label%%6 (= (vstd!seq.Seq.len.? $ (UINT 8) s!) 8))) :pattern ((req%vstd!bytes.spec_u64_from_le_bytes. s!)) )))
(assert (forall ((s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (vstd!bytes.spec_u64_from_le_bytes.? s!))) :pattern ((vstd!bytes.spec_u64_from_le_bytes.? s!)) )))
(declare-fun req%vstd!bytes.spec_u128_from_le_bytes. (Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((s! Poly)) (! (= (req%vstd!bytes.spec_u128_from_le_bytes. s!) (=> %%global_location_label%%7 (= (vstd!seq.Seq.len.? $ (UINT 8) s!) 16))) :pattern ((req%vstd!bytes.spec_u128_from_le_bytes. s!)) )))
(assert (forall ((s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 128 (vstd!bytes.spec_u128_from_le_bytes.? s!))) :pattern ((vstd!bytes.spec_u128_from_le_bytes.? s!)) )))
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(declare-fun req%vstd!seq_lib.impl&%0.drop_first. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.drop_first. A&. A& self!) (=> %%global_location_label%%8 (>= (vstd!seq.Seq.len.? A&. A& self!) 1))) :pattern ((req%vstd!seq_lib.impl&%0.drop_first. A&. A& self!)) )))
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.drop_first.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.drop_first.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.drop_first.? A&. A& self!) (vstd!seq.Seq.subrange.? A&. A& self! (I 1) (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq_lib.impl&%0.drop_first.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.drop_first.? A&. A& self!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.drop_first.? A&. A& self!)) )))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.) (forall ((self! Poly)) (! (= (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? self!) (lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes_in_range.? self! (I 0) (I (vstd!seq.Seq.len.? $ TYPE%lib!pmem.pmemspec_t.PersistentMemoryByte. (Poly%vstd!seq.Seq<lib!pmem.pmemspec_t.PersistentMemoryByte.>. (lib!pmem.pmemspec_t.PersistentMemoryRegionView./PersistentMemoryRegionView/state (%Poly%lib!pmem.pmemspec_t.PersistentMemoryRegionView. self!))))))) :pattern ((lib!pmem.pmemspec_t.impl&%6.no_outstanding_writes.? self!)) ))))
(assert (forall ((bytes! Poly)) (! (=> (has_type bytes! (TYPE%vstd!seq.Seq. $ (UINT 8))) (uInv 64 (lib!pmem.pmemspec_t.spec_crc_u64.? bytes!))) :pattern ((lib!pmem.pmemspec_t.spec_crc_u64.? bytes!)) )))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%19.spec_size_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_size_of.? $ (UINT 64)) (I 8))))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 64)))
(assert (fuel_bool_default fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of.))
(assert (=> (fuel_bool fuel%lib!pmem.pmcopy_t.impl&%19.spec_align_of.) (= (lib!pmem.pmcopy_t.SpecPmSized.spec_align_of.? $ (UINT 64)) (I 8))))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 64)))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 64)))
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 64)))
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. $ (UINT 64)))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.CDB_FALSE.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.CDB_FALSE.) (= lib!pmem.pmemspec_t.CDB_FALSE.? 11756720295082287198)))
(assert (uInv 64 lib!pmem.pmemspec_t.CDB_FALSE.?))
(assert (fuel_bool_default fuel%lib!pmem.pmemspec_t.CDB_TRUE.))
(assert (=> (fuel_bool fuel%lib!pmem.pmemspec_t.CDB_TRUE.) (= lib!pmem.pmemspec_t.CDB_TRUE.? 12331324665725530551)))
(assert (uInv 64 lib!pmem.pmemspec_t.CDB_TRUE.?))
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%22.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%22.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 128) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 128) self!)) ))))
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.) (= lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.? 0)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_GLOBAL_METADATA.?))
(assert (fuel_bool_default fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.))
(assert (=> (fuel_bool fuel%lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.) (= lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.? 256)))
(assert (uInv 64 lib!log.layout_v.ABSOLUTE_POS_OF_LOG_AREA.?))
(declare-const %return! Int)
(assert fuel_defaults)
(assert (not true))
(check-sat)
(exit)
