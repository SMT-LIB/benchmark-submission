(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%vstd!set_lib.axiom_is_empty. FuelId)
(declare-const fuel%lib!kv.durable.durablespec_t.impl&%1.item. FuelId)
(declare-const fuel%lib!kv.durable.durablespec_t.impl&%1.list. FuelId)
(declare-const fuel%lib!kv.durable.durablespec_t.impl&%2.spec_index. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.spec_index. FuelId)
(declare-const fuel%lib!kv.volatile.volatilespec_t.impl&%1.contains_key. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%0.check_permission. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.spec_index. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.empty. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.contains_key. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.construct_view_contents. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.create. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.read_item_and_list. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.read_list_entry_at_index. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.update_item. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.delete. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.append_to_list. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.update_list_entry_at_index. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.trim_list. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.trim_list_and_update_item. FuelId)
(declare-const fuel%lib!kv.kvspec_t.impl&%2.get_keys. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.is_empty. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!set_lib.impl&%0.is_empty. fuel%vstd!set_lib.axiom_is_empty. fuel%lib!kv.durable.durablespec_t.impl&%1.item. fuel%lib!kv.durable.durablespec_t.impl&%1.list. fuel%lib!kv.durable.durablespec_t.impl&%2.spec_index. fuel%lib!kv.volatile.volatilespec_t.impl&%1.spec_index. fuel%lib!kv.volatile.volatilespec_t.impl&%1.contains_key. fuel%lib!kv.kvspec_t.impl&%0.check_permission. fuel%lib!kv.kvspec_t.impl&%2.spec_index. fuel%lib!kv.kvspec_t.impl&%2.empty. fuel%lib!kv.kvspec_t.impl&%2.contains_key. fuel%lib!kv.kvspec_t.impl&%2.construct_view_contents. fuel%lib!kv.kvspec_t.impl&%2.create. fuel%lib!kv.kvspec_t.impl&%2.read_item_and_list. fuel%lib!kv.kvspec_t.impl&%2.read_list_entry_at_index. fuel%lib!kv.kvspec_t.impl&%2.update_item. fuel%lib!kv.kvspec_t.impl&%2.delete. fuel%lib!kv.kvspec_t.impl&%2.append_to_list. fuel%lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item. fuel%lib!kv.kvspec_t.impl&%2.update_list_entry_at_index. fuel%lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item. fuel%lib!kv.kvspec_t.impl&%2.trim_list. fuel%lib!kv.kvspec_t.impl&%2.trim_list_and_update_item. fuel%lib!kv.kvspec_t.impl&%2.get_keys. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (=> (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!set_lib.axiom_is_empty.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(declare-sort vstd!map.Map<int./int.>. 0)
(declare-sort vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<vstd!seq.Seq<u8.>.>. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (core!marker.PhantomData. 0) (lib!kv.durable.durablespec_t.DurableKvStoreList. 0) (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. 0) (lib!kv.durable.durablespec_t.DurableKvStoreView. 0) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. 0) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. 0) (lib!kv.volatile.volatilespec_t.VolatileKvIndexView. 0) (lib!kv.kvimpl_t.KvError. 0) (lib!kv.kvspec_t.TrustedKvPermission. 0) (lib!kv.kvspec_t.AbstractKvStoreState. 0) (tuple%0. 0) (tuple%2. 0) (tuple%6. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((core!marker.PhantomData./PhantomData )) ((lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/?list Poly) (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/?node_offset_map vstd!map.Map<int./int.>.))) ((lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/?key Poly) (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/?item Poly) (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/?list lib!kv.durable.durablespec_t.DurableKvStoreList.))) ((lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/?contents Poly) (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/?index_to_key_map Poly) (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/?_phantom core!option.Option.))) ((lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?start_index Int) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?live_index Int) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?physical_offset Int) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?free_entries Int))) ((lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?item_offset Int) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?list_node_offsets vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?list_len Int))) ((lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/?contents Poly) (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/?list_entries_per_node Int))) ((lib!kv.kvimpl_t.KvError./NotImplemented ) (lib!kv.kvimpl_t.KvError./InvalidParameter ) (lib!kv.kvimpl_t.KvError./InternalError ) (lib!kv.kvimpl_t.KvError./KeyNotFound ) (lib!kv.kvimpl_t.KvError./KeyAlreadyExists ) (lib!kv.kvimpl_t.KvError./InvalidKey (lib!kv.kvimpl_t.KvError./InvalidKey/?key Poly)) (lib!kv.kvimpl_t.KvError./IndexOutOfRange ) (lib!kv.kvimpl_t.KvError./RegionTooSmall (lib!kv.kvimpl_t.KvError./RegionTooSmall/?required Int) (lib!kv.kvimpl_t.KvError./RegionTooSmall/?actual Int)) (lib!kv.kvimpl_t.KvError./OutOfSpace ) (lib!kv.kvimpl_t.KvError./InvalidPersistentMemoryRegionProvided ) (lib!kv.kvimpl_t.KvError./SerializationError (lib!kv.kvimpl_t.KvError./SerializationError/?error Poly)) (lib!kv.kvimpl_t.KvError./DeserializationError (lib!kv.kvimpl_t.KvError./DeserializationError/?error Poly))) ((lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/?is_state_allowable %%Function%%) (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/?_phantom core!marker.PhantomData.))) ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?id Int) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?contents Poly) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?_phantom core!option.Option.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%6./tuple%6 (tuple%6./tuple%6/?0 Poly) (tuple%6./tuple%6/?1 Poly) (tuple%6./tuple%6/?2 Poly) (tuple%6./tuple%6/?3 Poly) (tuple%6./tuple%6/?4 Poly) (tuple%6./tuple%6/?5 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/list (lib!kv.durable.durablespec_t.DurableKvStoreList.) Poly)
(declare-fun lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/node_offset_map (lib!kv.durable.durablespec_t.DurableKvStoreList.) vstd!map.Map<int./int.>.)
(declare-fun lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/key (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.) Poly)
(declare-fun lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/item (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.) Poly)
(declare-fun lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/list (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.) lib!kv.durable.durablespec_t.DurableKvStoreList.)
(declare-fun lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/contents (lib!kv.durable.durablespec_t.DurableKvStoreView.) Poly)
(declare-fun lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/index_to_key_map (lib!kv.durable.durablespec_t.DurableKvStoreView.) Poly)
(declare-fun lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/_phantom (lib!kv.durable.durablespec_t.DurableKvStoreView.) core!option.Option.)
(declare-fun lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/start_index (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/live_index (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/physical_offset (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/free_entries (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/item_offset (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_node_offsets (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.)
(declare-fun lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_len (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) Int)
(declare-fun lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (lib!kv.volatile.volatilespec_t.VolatileKvIndexView.) Poly)
(declare-fun lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/list_entries_per_node (lib!kv.volatile.volatilespec_t.VolatileKvIndexView.) Int)
(declare-fun lib!kv.kvimpl_t.KvError./InvalidKey/key (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun lib!kv.kvimpl_t.KvError./RegionTooSmall/required (lib!kv.kvimpl_t.KvError.) Int)
(declare-fun lib!kv.kvimpl_t.KvError./RegionTooSmall/actual (lib!kv.kvimpl_t.KvError.) Int)
(declare-fun lib!kv.kvimpl_t.KvError./SerializationError/error (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun lib!kv.kvimpl_t.KvError./DeserializationError/error (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/is_state_allowable (lib!kv.kvspec_t.TrustedKvPermission.) %%Function%%)
(declare-fun lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/_phantom (lib!kv.kvspec_t.TrustedKvPermission.) core!marker.PhantomData.)
(declare-fun lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (lib!kv.kvspec_t.AbstractKvStoreState.) Int)
(declare-fun lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (lib!kv.kvspec_t.AbstractKvStoreState.) Poly)
(declare-fun lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom (lib!kv.kvspec_t.AbstractKvStoreState.) core!option.Option.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%6./tuple%6/0 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/1 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/2 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/3 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/4 (tuple%6.) Poly)
(declare-fun tuple%6./tuple%6/5 (tuple%6.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!marker.PhantomData. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!kv.durable.durablespec_t.DurableKvStoreList. (Dcr Type) Type)
(declare-fun TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-const TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. Type)
(declare-const TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. Type)
(declare-fun TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (Dcr Type) Type)
(declare-fun TYPE%lib!kv.kvimpl_t.KvError. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!kv.kvspec_t.TrustedKvPermission. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%lib!kv.kvspec_t.AbstractKvStoreState. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%6. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<int./int.>. (vstd!map.Map<int./int.>.) Poly)
(declare-fun %Poly%vstd!map.Map<int./int.>. (Poly) vstd!map.Map<int./int.>.)
(declare-fun Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (Poly) vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (vstd!seq.Seq<vstd!seq.Seq<u8.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (Poly) vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%core!marker.PhantomData. (core!marker.PhantomData.) Poly)
(declare-fun %Poly%core!marker.PhantomData. (Poly) core!marker.PhantomData.)
(declare-fun Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (lib!kv.durable.durablespec_t.DurableKvStoreList.) Poly)
(declare-fun %Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (Poly) lib!kv.durable.durablespec_t.DurableKvStoreList.)
(declare-fun Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.) Poly)
(declare-fun %Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. (Poly) lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.)
(declare-fun Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. (lib!kv.durable.durablespec_t.DurableKvStoreView.) Poly)
(declare-fun %Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. (Poly) lib!kv.durable.durablespec_t.DurableKvStoreView.)
(declare-fun Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) Poly)
(declare-fun %Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (Poly) lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)
(declare-fun Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) Poly)
(declare-fun %Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (Poly) lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)
(declare-fun Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView.) Poly)
(declare-fun %Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (Poly) lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)
(declare-fun Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError.) Poly)
(declare-fun %Poly%lib!kv.kvimpl_t.KvError. (Poly) lib!kv.kvimpl_t.KvError.)
(declare-fun Poly%lib!kv.kvspec_t.TrustedKvPermission. (lib!kv.kvspec_t.TrustedKvPermission.) Poly)
(declare-fun %Poly%lib!kv.kvspec_t.TrustedKvPermission. (Poly) lib!kv.kvspec_t.TrustedKvPermission.)
(declare-fun Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState.) Poly)
(declare-fun %Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly) lib!kv.kvspec_t.AbstractKvStoreState.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%6. (tuple%6.) Poly)
(declare-fun %Poly%tuple%6. (Poly) tuple%6.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<int./int.>.)) (! (= x (%Poly%vstd!map.Map<int./int.>. (Poly%vstd!map.Map<int./int.>. x))) :pattern ((Poly%vstd!map.Map<int./int.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ INT $ INT)) (= x (Poly%vstd!map.Map<int./int.>. (%Poly%vstd!map.Map<int./int.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ INT $ INT))) )))
(assert (forall ((x vstd!map.Map<int./int.>.)) (! (has_type (Poly%vstd!map.Map<int./int.>. x) (TYPE%vstd!map.Map. $ INT $ INT)) :pattern ((has_type (Poly%vstd!map.Map<int./int.>. x) (TYPE%vstd!map.Map. $ INT $ INT))) )))
(assert (forall ((x vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.)) (! (= x (%Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. x))) :pattern ((Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (= x (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. (%Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.))) )))
(assert (forall ((x vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>.)) (! (has_type (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. x) (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) :pattern ((has_type (Poly%vstd!map.Map<tuple%2<int./int.>./lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.>. x) (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ INT $ INT) $ TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= x (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. (%Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<u8.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))) )))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))) )))
(assert (forall ((x core!marker.PhantomData.)) (! (= x (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. x))) :pattern ((Poly%core!marker.PhantomData. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!marker.PhantomData. V&. V&)) (= x (Poly%core!marker.PhantomData. (%Poly%core!marker.PhantomData. x)))) :pattern ((has_type x (TYPE%core!marker.PhantomData. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (x core!marker.PhantomData.)) (! (has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&)) :pattern ((has_type (Poly%core!marker.PhantomData. x) (TYPE%core!marker.PhantomData. V&. V&))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreList.)) (! (= x (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. x))) :pattern ((Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. x)) )))
(assert (forall ((L&. Dcr) (L& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreList. L&. L&)) (= x (Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. x)))) :pattern ((has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreList. L&. L&))) )))
(assert (forall ((L&. Dcr) (L& Type) (_list! Poly) (_node_offset_map! vstd!map.Map<int./int.>.)) (! (=> (has_type _list! (TYPE%vstd!seq.Seq. L&. L&)) (has_type (Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList _list! _node_offset_map!)) (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreList. L&. L&))) :pattern ((has_type (Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList _list! _node_offset_map!)) (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreList. L&. L&))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreList.)) (! (= (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/list x) (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/?list x)) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/list x)) )))
(assert (forall ((L&. Dcr) (L& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreList. L&. L&)) (has_type (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/list (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. x)) (TYPE%vstd!seq.Seq. L&. L&))) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/list (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. x)) (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreList. L&. L&))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreList.)) (! (= (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/node_offset_map x) (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/?node_offset_map x)) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/node_offset_map x)) )))
(define-fun is-lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList_ ((c lib!kv.durable.durablespec_t.DurableKvStoreList.)) Bool ((_ is lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList) c))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreList.)) (! (=> (is-lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList_ x) (height_lt (height (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/list x)) (height (Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. x)))) :pattern ((height (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/list x))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.)) (! (= x (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. (Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x))) :pattern ((Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&)) (= x (Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x)))) :pattern ((has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&))) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (_key! Poly) (_item! Poly) (_list! lib!kv.durable.durablespec_t.DurableKvStoreList.)) (! (=> (and (has_type _key! K&) (has_type _item! I&) (has_type (Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. _list!) (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreList. L&. L&))) (has_type (Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry _key! _item! _list!)) (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&))) :pattern ((has_type (Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry _key! _item! _list!)) (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.)) (! (= (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/key x) (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/?key x)) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/key x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&)) (has_type (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/key (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x)) K&)) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/key (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x)) (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.)) (! (= (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/item x) (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/?item x)) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/item x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&)) (has_type (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/item (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x)) I&)) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/item (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x)) (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.)) (! (= (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/list x) (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/?list x)) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/list x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&)) (has_type (Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/list (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x))) (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreList. L&. L&))) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/list (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x)) (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&))) )))
(define-fun is-lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry_ ((c lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.)) Bool ((_ is lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry) c))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.)) (! (=> (is-lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry_ x) (height_lt (height (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/key x)) (height (Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x)))) :pattern ((height (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/key x))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.)) (! (=> (is-lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry_ x) (height_lt (height (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/item x)) (height (Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x)))) :pattern ((height (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/item x))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreViewEntry.)) (! (=> (is-lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry_ x) (height_lt (height (Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/list x))) (height (Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. x)))) :pattern ((height (Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/list x)))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreView.)) (! (= x (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. (Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x))) :pattern ((Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&)) (= x (Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x)))) :pattern ((has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (_contents! Poly) (_index_to_key_map! Poly) (__phantom! core!option.Option.)) (! (=> (and (has_type _contents! (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&))) (has_type _index_to_key_map! (TYPE%vstd!map.Map. $ INT K&. K&)) (has_type (Poly%core!option.Option. __phantom!) (TYPE%core!option.Option. E&. E&))) (has_type (Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView _contents! _index_to_key_map! __phantom!)) (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&))) :pattern ((has_type (Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView _contents! _index_to_key_map! __phantom!)) (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreView.)) (! (= (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/contents x) (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/?contents x)) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/contents x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&)) (has_type (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/contents (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x)) (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&)))) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/contents (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x)) (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreView.)) (! (= (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/index_to_key_map x) (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/?index_to_key_map x)) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/index_to_key_map x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&)) (has_type (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/index_to_key_map (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x)) (TYPE%vstd!map.Map. $ INT K&. K&))) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/index_to_key_map (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x)) (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreView.)) (! (= (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/_phantom x) (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/?_phantom x)) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/_phantom x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&)) (has_type (Poly%core!option.Option. (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/_phantom (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x))) (TYPE%core!option.Option. E&. E&))) :pattern ((lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/_phantom (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x)) (has_type x (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&))) )))
(define-fun is-lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView_ ((c lib!kv.durable.durablespec_t.DurableKvStoreView.)) Bool ((_ is lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView) c))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreView.)) (! (=> (is-lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView_ x) (height_lt (height (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/contents x)) (height (Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x)))) :pattern ((height (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/contents x))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreView.)) (! (=> (is-lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView_ x) (height_lt (height (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/index_to_key_map x)) (height (Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x)))) :pattern ((height (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/index_to_key_map x))) )))
(assert (forall ((x lib!kv.durable.durablespec_t.DurableKvStoreView.)) (! (=> (is-lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView_ x) (height_lt (height (Poly%core!option.Option. (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/_phantom x))) (height (Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. x)))) :pattern ((height (Poly%core!option.Option. (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/_phantom x)))) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (= x (%Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. x))) :pattern ((Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) (= x (Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. (%Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. x)))) :pattern ((has_type x TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/start_index x) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?start_index x)) :pattern ((lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/start_index x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/live_index x) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?live_index x)) :pattern ((lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/live_index x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/physical_offset x) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?physical_offset x)) :pattern ((lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/physical_offset x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/free_entries x) (lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/?free_entries x)) :pattern ((lib!kv.volatile.volatilespec_t.ListNodeIndexEntry./ListNodeIndexEntry/free_entries x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) (! (has_type (Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. x) TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.) :pattern ((has_type (Poly%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry. x) TYPE%lib!kv.volatile.volatilespec_t.ListNodeIndexEntry.)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (! (= x (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. x))) :pattern ((Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) (= x (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. x)))) :pattern ((has_type x TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/item_offset x) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?item_offset x)) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/item_offset x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_node_offsets x) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?list_node_offsets x)) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_node_offsets x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (! (= (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_len x) (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/?list_len x)) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/list_len x)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (! (has_type (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. x) TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.) :pattern ((has_type (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. x) TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) (! (= x (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x))) :pattern ((Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&)) (= x (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)))) :pattern ((has_type x (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_contents! Poly) (_list_entries_per_node! Int)) (! (=> (has_type _contents! (TYPE%vstd!map.Map. K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.)) (has_type (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView _contents! _list_entries_per_node!)) (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&))) :pattern ((has_type (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView _contents! _list_entries_per_node!)) (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&))) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) (! (= (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x) (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/?contents x)) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&)) (has_type (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)) (TYPE%vstd!map.Map. K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.))) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)) (has_type x (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&))) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) (! (= (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/list_entries_per_node x) (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/?list_entries_per_node x)) :pattern ((lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/list_entries_per_node x)) )))
(define-fun is-lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView_ ((c lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) Bool ((_ is lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView) c))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) (! (=> (is-lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView_ x) (height_lt (height (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x)) (height (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)))) :pattern ((height (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x))) )))
(assert (forall ((x lib!kv.volatile.volatilespec_t.VolatileKvIndexView.)) (! (=> (is-lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView_ x) (height_lt (height (fun_from_recursive_field (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x))) (height (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. x)))) :pattern ((height (fun_from_recursive_field (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents x)))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= x (%Poly%lib!kv.kvimpl_t.KvError. (Poly%lib!kv.kvimpl_t.KvError. x))) :pattern ((Poly%lib!kv.kvimpl_t.KvError. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (= x (Poly%lib!kv.kvimpl_t.KvError. (%Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./NotImplemented) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./NotImplemented) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidParameter) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidParameter) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InternalError) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InternalError) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyAlreadyExists) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyAlreadyExists) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_key! Poly)) (! (=> (has_type _key! K&) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./InvalidKey _key!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./InvalidKey _key!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./InvalidKey/key x) (lib!kv.kvimpl_t.KvError./InvalidKey/?key x)) :pattern ((lib!kv.kvimpl_t.KvError./InvalidKey/key x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.KvError./InvalidKey/key (%Poly%lib!kv.kvimpl_t.KvError. x)) K&)) :pattern ((lib!kv.kvimpl_t.KvError./InvalidKey/key (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./IndexOutOfRange) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./IndexOutOfRange) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_required! Int) (_actual! Int)) (! (=> (and (uInv SZ _required!) (uInv SZ _actual!)) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./RegionTooSmall _required! _actual!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./RegionTooSmall _required! _actual!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./RegionTooSmall/required x) (lib!kv.kvimpl_t.KvError./RegionTooSmall/?required x)) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/required x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (uInv SZ (lib!kv.kvimpl_t.KvError./RegionTooSmall/required (%Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/required (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./RegionTooSmall/actual x) (lib!kv.kvimpl_t.KvError./RegionTooSmall/?actual x)) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/actual x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (uInv SZ (lib!kv.kvimpl_t.KvError./RegionTooSmall/actual (%Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((lib!kv.kvimpl_t.KvError./RegionTooSmall/actual (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./OutOfSpace) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./OutOfSpace) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidPersistentMemoryRegionProvided) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./InvalidPersistentMemoryRegionProvided) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_error! Poly)) (! (=> (has_type _error! E&) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./SerializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./SerializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./SerializationError/error x) (lib!kv.kvimpl_t.KvError./SerializationError/?error x)) :pattern ((lib!kv.kvimpl_t.KvError./SerializationError/error x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.KvError./SerializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) E&)) :pattern ((lib!kv.kvimpl_t.KvError./SerializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (_error! Poly)) (! (=> (has_type _error! E&) (has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./DeserializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvimpl_t.KvError. (lib!kv.kvimpl_t.KvError./DeserializationError _error!)) (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (= (lib!kv.kvimpl_t.KvError./DeserializationError/error x) (lib!kv.kvimpl_t.KvError./DeserializationError/?error x)) :pattern ((lib!kv.kvimpl_t.KvError./DeserializationError/error x)) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)) (has_type (lib!kv.kvimpl_t.KvError./DeserializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) E&)) :pattern ((lib!kv.kvimpl_t.KvError./DeserializationError/error (%Poly%lib!kv.kvimpl_t.KvError. x)) (has_type x (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(define-fun is-lib!kv.kvimpl_t.KvError./InvalidKey_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./InvalidKey) c))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (=> (is-lib!kv.kvimpl_t.KvError./InvalidKey_ x) (height_lt (height (lib!kv.kvimpl_t.KvError./InvalidKey/key x)) (height (Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((height (lib!kv.kvimpl_t.KvError./InvalidKey/key x))) )))
(define-fun is-lib!kv.kvimpl_t.KvError./SerializationError_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./SerializationError) c))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (=> (is-lib!kv.kvimpl_t.KvError./SerializationError_ x) (height_lt (height (lib!kv.kvimpl_t.KvError./SerializationError/error x)) (height (Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((height (lib!kv.kvimpl_t.KvError./SerializationError/error x))) )))
(define-fun is-lib!kv.kvimpl_t.KvError./DeserializationError_ ((c lib!kv.kvimpl_t.KvError.)) Bool ((_ is lib!kv.kvimpl_t.KvError./DeserializationError) c))
(assert (forall ((x lib!kv.kvimpl_t.KvError.)) (! (=> (is-lib!kv.kvimpl_t.KvError./DeserializationError_ x) (height_lt (height (lib!kv.kvimpl_t.KvError./DeserializationError/error x)) (height (Poly%lib!kv.kvimpl_t.KvError. x)))) :pattern ((height (lib!kv.kvimpl_t.KvError./DeserializationError/error x))) )))
(assert (forall ((x lib!kv.kvspec_t.TrustedKvPermission.)) (! (= x (%Poly%lib!kv.kvspec_t.TrustedKvPermission. (Poly%lib!kv.kvspec_t.TrustedKvPermission. x))) :pattern ((Poly%lib!kv.kvspec_t.TrustedKvPermission. x)) )))
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&)) (= x (Poly%lib!kv.kvspec_t.TrustedKvPermission. (%Poly%lib!kv.kvspec_t.TrustedKvPermission. x)))) :pattern ((has_type x (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&))) )))
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (E&. Dcr) (E& Type) (_is_state_allowable! %%Function%%) (__phantom! core!marker.PhantomData.)) (! (=> (has_type (Poly%fun%1. _is_state_allowable!) (TYPE%fun%1. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) $ BOOL)) (has_type (Poly%lib!kv.kvspec_t.TrustedKvPermission. (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission _is_state_allowable! __phantom!)) (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvspec_t.TrustedKvPermission. (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission _is_state_allowable! __phantom!)) (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&))) )))
(assert (forall ((x lib!kv.kvspec_t.TrustedKvPermission.)) (! (= (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/is_state_allowable x) (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/?is_state_allowable x)) :pattern ((lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/is_state_allowable x)) )))
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&)) (has_type (Poly%fun%1. (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/is_state_allowable (%Poly%lib!kv.kvspec_t.TrustedKvPermission. x))) (TYPE%fun%1. $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) $ BOOL))) :pattern ((lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/is_state_allowable (%Poly%lib!kv.kvspec_t.TrustedKvPermission. x)) (has_type x (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&))) )))
(assert (forall ((x lib!kv.kvspec_t.TrustedKvPermission.)) (! (= (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/_phantom x) (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/?_phantom x)) :pattern ((lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/_phantom x)) )))
(define-fun is-lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission_ ((c lib!kv.kvspec_t.TrustedKvPermission.)) Bool ((_ is lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission) c))
(assert (forall ((x lib!kv.kvspec_t.TrustedKvPermission.)) (! (=> (is-lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission_ x) (height_lt (height (Poly%core!marker.PhantomData. (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/_phantom x))) (height (Poly%lib!kv.kvspec_t.TrustedKvPermission. x)))) :pattern ((height (Poly%core!marker.PhantomData. (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/_phantom x)))) )))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (= x (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. (Poly%lib!kv.kvspec_t.AbstractKvStoreState. x))) :pattern ((Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (= x (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)))) :pattern ((has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (_id! Int) (_contents! Poly) (__phantom! core!option.Option.)) (! (=> (and (uInv 128 _id!) (has_type _contents! (TYPE%vstd!map.Map. K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)))) (has_type (Poly%core!option.Option. __phantom!) (TYPE%core!option.Option. E&. E&))) (has_type (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState _id! _contents! __phantom!)) (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) :pattern ((has_type (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState _id! _contents! __phantom!)) (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (= (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id x) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?id x)) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (uInv 128 (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)))) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)) (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (= (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents x) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?contents x)) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)) (TYPE%vstd!map.Map. K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&))))) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)) (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) )))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (= (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom x) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/?_phantom x)) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom x)) )))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type (Poly%core!option.Option. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x))) (TYPE%core!option.Option. E&. E&))) :pattern ((lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)) (has_type x (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&))) )))
(define-fun is-lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState_ ((c lib!kv.kvspec_t.AbstractKvStoreState.)) Bool ((_ is lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState) c))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (=> (is-lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState_ x) (height_lt (height (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents x)) (height (Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)))) :pattern ((height (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents x))) )))
(assert (forall ((x lib!kv.kvspec_t.AbstractKvStoreState.)) (! (=> (is-lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState_ x) (height_lt (height (Poly%core!option.Option. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom x))) (height (Poly%lib!kv.kvspec_t.AbstractKvStoreState. x)))) :pattern ((height (Poly%core!option.Option. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/_phantom x)))) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%6.)) (! (= x (%Poly%tuple%6. (Poly%tuple%6. x))) :pattern ((Poly%tuple%6. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (= x (Poly%tuple%6. (%Poly%tuple%6. x)))) :pattern ((has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly) (_4! Poly) (_5! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&) (has_type _4! T%4&) (has_type _5! T%5&)) (has_type (Poly%tuple%6. (tuple%6./tuple%6 _0! _1! _2! _3! _4! _5!)) (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) :pattern ((has_type (Poly%tuple%6. (tuple%6./tuple%6 _0! _1! _2! _3! _4! _5!)) (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) )))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/0 x) (tuple%6./tuple%6/?0 x)) :pattern ((tuple%6./tuple%6/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/0 (%Poly%tuple%6. x)) T%0&)) :pattern ((tuple%6./tuple%6/0 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) )))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/1 x) (tuple%6./tuple%6/?1 x)) :pattern ((tuple%6./tuple%6/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/1 (%Poly%tuple%6. x)) T%1&)) :pattern ((tuple%6./tuple%6/1 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) )))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/2 x) (tuple%6./tuple%6/?2 x)) :pattern ((tuple%6./tuple%6/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/2 (%Poly%tuple%6. x)) T%2&)) :pattern ((tuple%6./tuple%6/2 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) )))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/3 x) (tuple%6./tuple%6/?3 x)) :pattern ((tuple%6./tuple%6/3 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/3 (%Poly%tuple%6. x)) T%3&)) :pattern ((tuple%6./tuple%6/3 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) )))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/4 x) (tuple%6./tuple%6/?4 x)) :pattern ((tuple%6./tuple%6/4 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/4 (%Poly%tuple%6. x)) T%4&)) :pattern ((tuple%6./tuple%6/4 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) )))
(assert (forall ((x tuple%6.)) (! (= (tuple%6./tuple%6/5 x) (tuple%6./tuple%6/?5 x)) :pattern ((tuple%6./tuple%6/5 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type (tuple%6./tuple%6/5 (%Poly%tuple%6. x)) T%5&)) :pattern ((tuple%6./tuple%6/5 (%Poly%tuple%6. x)) (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&))) )))
(define-fun is-tuple%6./tuple%6_ ((c tuple%6.)) Bool ((_ is tuple%6./tuple%6) c))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/0 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/0 x))) )))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/1 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/1 x))) )))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/2 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/2 x))) )))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/3 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/3 x))) )))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/4 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/4 x))) )))
(assert (forall ((x tuple%6.)) (! (=> (is-tuple%6./tuple%6_ x) (height_lt (height (tuple%6./tuple%6/5 x)) (height (Poly%tuple%6. x)))) :pattern ((height (tuple%6./tuple%6/5 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (has_type y (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&)) (ext_eq deep T%0& (tuple%6./tuple%6/0 (%Poly%tuple%6. x)) (tuple%6./tuple%6/0 (%Poly%tuple%6. y))) (ext_eq deep T%1& (tuple%6./tuple%6/1 (%Poly%tuple%6. x)) (tuple%6./tuple%6/1 (%Poly%tuple%6. y))) (ext_eq deep T%2& (tuple%6./tuple%6/2 (%Poly%tuple%6. x)) (tuple%6./tuple%6/2 (%Poly%tuple%6. y))) (ext_eq deep T%3& (tuple%6./tuple%6/3 (%Poly%tuple%6. x)) (tuple%6./tuple%6/3 (%Poly%tuple%6. y))) (ext_eq deep T%4& (tuple%6./tuple%6/4 (%Poly%tuple%6. x)) (tuple%6./tuple%6/4 (%Poly%tuple%6. y))) (ext_eq deep T%5& (tuple%6./tuple%6/5 (%Poly%tuple%6. x)) (tuple%6./tuple%6/5 (%Poly%tuple%6. y)))) (ext_eq deep (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&) x y)) :pattern ((ext_eq deep (TYPE%tuple%6. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5&) x y)) )))
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%core!fmt.Debug. (Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.PartialEq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%core!cmp.Eq. (Dcr Type) Bool)
(declare-fun tr_bound%core!hash.Hash. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!kv.durable.durableimpl_v.DurableKvStore. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!kv.kvimpl_t.Item. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.PmCopy. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.pmcopy_t.SpecPmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.wrpm_t.CheckPermission. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSafe. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.PmSized. (Dcr Type) Bool)
(declare-fun tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!fmt.Debug. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type)) (! true :pattern ((tr_bound%core!cmp.PartialEq. Self%&. Self%& Rhs&. Rhs&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%core!cmp.Eq. Self%&. Self%&) (tr_bound%core!cmp.PartialEq. Self%&. Self%& Self%&. Self%&)) :pattern ((tr_bound%core!cmp.Eq. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!hash.Hash. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type)) (! (=> (tr_bound%lib!kv.durable.durableimpl_v.DurableKvStore. Self%&. Self%& PM&. PM& K&. K& I&. I& L&. L& E&. E&) (and (tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. PM&. PM&) (tr_bound%core!hash.Hash. K&. K&) (tr_bound%core!cmp.Eq. K&. K&) (tr_bound%core!clone.Clone. K&. K&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. K&. K&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. I&. I&) (tr_bound%lib!kv.kvimpl_t.Item. I&. I& K&. K&) (tr_bound%core!fmt.Debug. I&. I&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. L&. L&) (tr_bound%core!fmt.Debug. L&. L&) (tr_bound%core!fmt.Debug. E&. E&))) :pattern ((tr_bound%lib!kv.durable.durableimpl_v.DurableKvStore. Self%&. Self%& PM&. PM& K&. K& I&. I& L&. L& E&. E&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type)) (! true :pattern ((tr_bound%lib!kv.kvimpl_t.Item. Self%&. Self%& K&. K&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&) (and (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&))) :pattern ((tr_bound%lib!pmem.pmcopy_t.PmCopy. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&) (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (State&. Dcr) (State& Type)) (! true :pattern ((tr_bound%lib!pmem.wrpm_t.CheckPermission. Self%&. Self%& State&. State&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.PmSafe. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (=> (tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&) (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. Self%&. Self%&)) :pattern ((tr_bound%lib!pmem.traits_t.PmSized. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. Self%&. Self%&)) )))
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state%default%.? (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun vstd!set_lib.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.is_empty.? (Dcr Type Dcr Type Poly) Bool)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!kv.durable.durablespec_t.impl&%2.spec_index.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) core!option.Option.)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun lib!kv.durable.durablespec_t.impl&%1.item.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun lib!kv.durable.durablespec_t.impl&%1.list.? (Dcr Type Dcr Type Dcr Type Poly) lib!kv.durable.durablespec_t.DurableKvStoreList.)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? (Dcr Type Poly Poly) core!option.Option.)
(declare-fun lib!kv.volatile.volatilespec_t.impl&%1.contains_key.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!kv.kvimpl_t.spec_phantom_data.? (Dcr Type) core!marker.PhantomData.)
(declare-fun lib!pmem.wrpm_t.CheckPermission.check_permission.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!pmem.wrpm_t.CheckPermission.check_permission%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!kv.kvspec_t.impl&%2.construct_view_contents.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun lib!kv.kvspec_t.impl&%2.spec_index.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) core!option.Option.)
(declare-fun lib!kv.kvspec_t.impl&%2.empty.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Bool)
(declare-fun lib!kv.kvspec_t.impl&%2.contains_key.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun lib!kv.kvspec_t.impl&%2.create.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(declare-fun lib!kv.kvspec_t.impl&%2.read_item_and_list.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) core!option.Option.)
(declare-fun lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(declare-fun lib!kv.kvspec_t.impl&%2.update_item.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(declare-fun lib!kv.kvspec_t.impl&%2.delete.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) core!result.Result.)
(declare-fun lib!kv.kvspec_t.impl&%2.append_to_list.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(declare-fun lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) core!result.Result.)
(declare-fun lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) core!result.Result.)
(declare-fun lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly Poly) core!result.Result.)
(declare-fun lib!kv.kvspec_t.impl&%2.trim_list.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) core!result.Result.)
(declare-fun lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly Poly) core!result.Result.)
(declare-fun lib!kv.kvspec_t.impl&%2.get_keys.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly) Poly)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%2 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (bytes! Poly) (id! Poly)) (! (=> (and (has_type bytes! (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (has_type id! (UINT 128))) (has_type (lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? Self%&. Self%& PM&. PM& K&. K& I&. I& L&. L& E&. E& bytes! id!) (TYPE%core!option.Option. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)))) :pattern ((lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? Self%&. Self%& PM&. PM& K&. K& I&. I& L&. L& E&. E& bytes! id!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_empty.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_empty.? A&. A& self!) (= (vstd!set.impl&%0.len.? A&. A& self!) 0)) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.is_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!map_lib.impl&%0.is_empty.? K&. K& V&. V& self!) (vstd!set_lib.impl&%0.is_empty.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!))) :pattern ((vstd!map_lib.impl&%0.is_empty.? K&. K& V&. V& self!)) ))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%lib!kv.durable.durablespec_t.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%lib!kv.durable.durablespec_t.impl&%2.spec_index.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (idx! Poly)) (! (= (lib!kv.durable.durablespec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! idx!) (ite (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&) (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/contents (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. self!))) idx!) (core!option.Option./Some (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&) (lib!kv.durable.durablespec_t.DurableKvStoreView./DurableKvStoreView/contents (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreView. self!)) idx!)) core!option.Option./None)) :pattern ((lib!kv.durable.durablespec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! idx!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (idx! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&)) (has_type idx! INT)) (has_type (Poly%core!option.Option. (lib!kv.durable.durablespec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! idx!)) (TYPE%core!option.Option. $ (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&)))) :pattern ((lib!kv.durable.durablespec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! idx!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%5 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(assert (fuel_bool_default fuel%lib!kv.durable.durablespec_t.impl&%1.item.))
(assert (=> (fuel_bool fuel%lib!kv.durable.durablespec_t.impl&%1.item.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (self! Poly)) (! (= (lib!kv.durable.durablespec_t.impl&%1.item.? K&. K& I&. I& L&. L& self!) (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/item (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. self!))) :pattern ((lib!kv.durable.durablespec_t.impl&%1.item.? K&. K& I&. I& L&. L& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&)) (has_type (lib!kv.durable.durablespec_t.impl&%1.item.? K&. K& I&. I& L&. L& self!) I&)) :pattern ((lib!kv.durable.durablespec_t.impl&%1.item.? K&. K& I&. I& L&. L& self!)) )))
(assert (fuel_bool_default fuel%lib!kv.durable.durablespec_t.impl&%1.list.))
(assert (=> (fuel_bool fuel%lib!kv.durable.durablespec_t.impl&%1.list.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (self! Poly)) (! (= (lib!kv.durable.durablespec_t.impl&%1.list.? K&. K& I&. I& L&. L& self!) (lib!kv.durable.durablespec_t.DurableKvStoreViewEntry./DurableKvStoreViewEntry/list (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. self!))) :pattern ((lib!kv.durable.durablespec_t.impl&%1.list.? K&. K& I&. I& L&. L& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. K&. K& I&. I& L&. L&)) (has_type (Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (lib!kv.durable.durablespec_t.impl&%1.list.? K&. K& I&. I& L&. L& self!)) (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreList. L&. L&))) :pattern ((lib!kv.durable.durablespec_t.impl&%1.list.? K&. K& I&. I& L&. L& self!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(assert (fuel_bool_default fuel%lib!kv.volatile.volatilespec_t.impl&%1.spec_index.))
(assert (=> (fuel_bool fuel%lib!kv.volatile.volatilespec_t.impl&%1.spec_index.) (forall ((K&. Dcr) (K& Type) (self! Poly) (key! Poly)) (! (= (lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? K&. K& self! key!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. self!))) key!) (core!option.Option./Some (vstd!map.impl&%0.index.? K&. K& $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (lib!kv.volatile.volatilespec_t.VolatileKvIndexView./VolatileKvIndexView/contents (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. self!)) key!)) core!option.Option./None)) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? K&. K& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&)) (has_type key! K&)) (has_type (Poly%core!option.Option. (lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? K&. K& self! key!)) (TYPE%core!option.Option. $ TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry.))) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? K&. K& self! key!)) )))
(assert (fuel_bool_default fuel%lib!kv.volatile.volatilespec_t.impl&%1.contains_key.))
(assert (=> (fuel_bool fuel%lib!kv.volatile.volatilespec_t.impl&%1.contains_key.) (forall ((K&. Dcr) (K& Type) (self! Poly) (key! Poly)) (! (= (lib!kv.volatile.volatilespec_t.impl&%1.contains_key.? K&. K& self! key!) (is-core!option.Option./Some_ (lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? K&. K& self! key!))) :pattern ((lib!kv.volatile.volatilespec_t.impl&%1.contains_key.? K&. K& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%core!fmt.Debug. E&. E&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%core!fmt.Debug. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%6 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) ))))
(assert (=> (fuel_bool fuel%vstd!set_lib.axiom_is_empty.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$)) )))) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& s!)) ))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (State&. Dcr) (State& Type) (self! Poly) (state! Poly)) (! (=> (and (has_type self! Self%&) (has_type state! State&)) (has_type (lib!pmem.wrpm_t.CheckPermission.check_permission.? Self%&. Self%& State&. State& self! state!) BOOL)) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? Self%&. Self%& State&. State& self! state!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.construct_view_contents.))
(declare-fun %%lambda%%0 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) k$) (B (lib!kv.volatile.volatilespec_t.impl&%1.contains_key.? %%hole%%0 %%hole%%1 %%hole%%2 k$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Dcr Type Dcr Type Dcr Type Poly Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Dcr) (%%hole%%10 Type) (%%hole%%11 Poly) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Dcr) (%%hole%%15 Type) (%%hole%%16 Dcr) (%%hole%%17 Type) (%%hole%%18 Dcr) (%%hole%%19 Type) (%%hole%%20 Dcr) (%%hole%%21 Type) (%%hole%%22 Dcr) (%%hole%%23 Type) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23) k$) (Poly%tuple%2. (let ((index_entry$ (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!kv.volatile.volatilespec_t.impl&%1.spec_index.? %%hole%%0 %%hole%%1 %%hole%%2 k$))))))) (let ((durable_entry$ (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!kv.durable.durablespec_t.impl&%2.spec_index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 (I (lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry./VolatileKvIndexEntry/item_offset (%Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. (Poly%lib!kv.volatile.volatilespec_t.VolatileKvIndexEntry. index_entry$))))))))))) (tuple%2./tuple%2 (lib!kv.durable.durablespec_t.impl&%1.item.? %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 (Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. durable_entry$)) (lib!kv.durable.durablespec_t.DurableKvStoreList./DurableKvStoreList/list (%Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (Poly%lib!kv.durable.durablespec_t.DurableKvStoreList. (lib!kv.durable.durablespec_t.impl&%1.list.? %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 (Poly%lib!kv.durable.durablespec_t.DurableKvStoreViewEntry. durable_entry$)))))))))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23) k$)))))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.construct_view_contents.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (volatile_store_state! Poly) (durable_store_state! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.construct_view_contents.? K&. K& I&. I& L&. L& E&. E& volatile_store_state! durable_store_state!) (vstd!map.impl&%0.new.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&))) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& volatile_store_state!))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& volatile_store_state! K&. K& I&. I& L&. L& E&. E& durable_store_state! K&. K& I&. I& L&. L& K&. K& I&. I& L&. L&))))) :pattern ((lib!kv.kvspec_t.impl&%2.construct_view_contents.? K&. K& I&. I& L&. L& E&. E& volatile_store_state! durable_store_state!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (volatile_store_state! Poly) (durable_store_state! Poly)) (! (=> (and (has_type volatile_store_state! (TYPE%lib!kv.volatile.volatilespec_t.VolatileKvIndexView. K&. K&)) (has_type durable_store_state! (TYPE%lib!kv.durable.durablespec_t.DurableKvStoreView. K&. K& I&. I& L&. L& E&. E&))) (has_type (lib!kv.kvspec_t.impl&%2.construct_view_contents.? K&. K& I&. I& L&. L& E&. E& volatile_store_state! durable_store_state!) (TYPE%vstd!map.Map. K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&))))) :pattern ((lib!kv.kvspec_t.impl&%2.construct_view_contents.? K&. K& I&. I& L&. L& E&. E& volatile_store_state! durable_store_state!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%0.check_permission.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%0.check_permission.) (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (E&. Dcr) (E& Type) (self! Poly) (state! Poly)) (! (=> (and (tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. PM&. PM&) (tr_bound%core!hash.Hash. K&. K&) (tr_bound%core!cmp.Eq. K&. K&) (tr_bound%core!clone.Clone. K&. K&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. K&. K&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. I&. I&) (tr_bound%lib!kv.kvimpl_t.Item. I&. I& K&. K&) (tr_bound%core!fmt.Debug. I&. I&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. L&. L&) (tr_bound%core!fmt.Debug. L&. L&) (tr_bound%lib!kv.durable.durableimpl_v.DurableKvStore. D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E&) (tr_bound%core!fmt.Debug. E&. E&)) (= (lib!pmem.wrpm_t.CheckPermission.check_permission.? $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) self! state!) (%%apply%%0 (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission/is_state_allowable (%Poly%lib!kv.kvspec_t.TrustedKvPermission. self!)) state!))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) self! state!)) ))))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.spec_index.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! key!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))) key!) (core!option.Option./Some (vstd!map.impl&%0.index.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key!)) core!option.Option./None)) :pattern ((lib!kv.kvspec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&)) (has_type (Poly%core!option.Option. (lib!kv.kvspec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! key!)) (TYPE%core!option.Option. $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&))))) :pattern ((lib!kv.kvspec_t.impl&%2.spec_index.? K&. K& I&. I& L&. L& E&. E& self! key!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.empty.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.empty.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.empty.? K&. K& I&. I& L&. L& E&. E& self!) (vstd!set_lib.impl&%0.is_empty.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))))) :pattern ((lib!kv.kvspec_t.impl&%2.empty.? K&. K& I&. I& L&. L& E&. E& self!)) ))))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.contains_key.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.contains_key.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.contains_key.? K&. K& I&. I& L&. L& E&. E& self! key!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))) key!)) :pattern ((lib!kv.kvspec_t.impl&%2.contains_key.? K&. K& I&. I& L&. L& E&. E& self! key!)) ))))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.create.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.create.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (item! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.create.? K&. K& I&. I& L&. L& E&. E& self! key! item!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))) key!) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyAlreadyExists)) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 item! (vstd!seq.Seq.empty.? L&. L&)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) :pattern ((lib!kv.kvspec_t.impl&%2.create.? K&. K& I&. I& L&. L& E&. E& self! key! item!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (item! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type item! I&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.create.? K&. K& I&. I& L&. L& E&. E& self! key! item!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.create.? K&. K& I&. I& L&. L& E&. E& self! key! item!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.read_item_and_list.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.read_item_and_list.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))) key!) (core!option.Option./Some (vstd!map.impl&%0.index.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key!)) core!option.Option./None)) :pattern ((lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&)) (has_type (Poly%core!option.Option. (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!)) (TYPE%core!option.Option. $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&))))) :pattern ((lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))) key!) (let ((tmp%%$ (%Poly%tuple%2. (vstd!map.impl&%0.index.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key!)))) (let ((offset$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((list$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (ite (> (vstd!seq.Seq.len.? L&. L& list$) (%I idx!)) (core!result.Result./Ok (vstd!seq.Seq.index.? L&. L& list$ idx!)) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./IndexOutOfRange)))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound)))) :pattern ((lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type idx! INT)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx!)) (TYPE%core!result.Result. L&. L& $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.read_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.update_item.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.update_item.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_item! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_item!) (let ((val$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ val$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. val$)))))) (let ((old_item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. val$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. val$))))))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 new_item! pages$))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_item!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_item! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type new_item! I&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_item!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_item!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.delete.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.delete.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.delete.? K&. K& I&. I& L&. L& E&. E& self! key!) (ite (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!))) key!) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.remove.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key!) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound)))) :pattern ((lib!kv.kvspec_t.impl&%2.delete.? K&. K& I&. I& L&. L& E&. E& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.delete.? K&. K& I&. I& L&. L& E&. E& self! key!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.delete.? K&. K& I&. I& L&. L& E&. E& self! key!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.append_to_list.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.append_to_list.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_list_entry! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.append_to_list.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 item$ (vstd!seq.Seq.push.? L&. L& pages$ new_list_entry!)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.append_to_list.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_list_entry! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type new_list_entry! L&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.append_to_list.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.append_to_list.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_list_entry! Poly) (new_item! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry! new_item!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 new_item! (vstd!seq.Seq.push.? L&. L& pages$ new_list_entry!)))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry! new_item!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (new_list_entry! Poly) (new_item! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type new_list_entry! L&) (has_type new_item! I&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry! new_item!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.append_to_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! new_list_entry! new_item!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly) (new_list_entry! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$1 (vstd!seq.Seq.update.? L&. L& pages$ idx! new_list_entry!))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 item$ pages$1))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly) (new_list_entry! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type idx! (UINT SZ)) (has_type new_list_entry! L&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.update_list_entry_at_index.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly) (new_list_entry! Poly) (new_item! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry! new_item!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$1 (vstd!seq.Seq.update.? L&. L& pages$ idx! new_list_entry!))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 new_item! pages$1))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry! new_item!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (idx! Poly) (new_list_entry! Poly) (new_item! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type idx! (UINT SZ)) (has_type new_list_entry! L&) (has_type new_item! I&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry! new_item!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.update_entry_at_index_and_item.? K&. K& I&. I& L&. L& E&. E& self! key! idx! new_list_entry! new_item!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.trim_list.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.trim_list.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (trim_length! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.trim_list.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$1 (vstd!seq.Seq.subrange.? L&. L& pages$ trim_length! (I (vstd!seq.Seq.len.? L&. L& pages$))))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 item$ pages$1))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.trim_list.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (trim_length! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type trim_length! INT)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.trim_list.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.trim_list.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (trim_length! Poly) (new_item! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length! new_item!) (let ((result$ (lib!kv.kvspec_t.impl&%2.read_item_and_list.? K&. K& I&. I& L&. L& E&. E& self! key!))) (ite (and (is-core!option.Option./Some_ result$) (is-tuple%2./tuple%2_ (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$)))))) (let ((item$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. result$))))))) (let ((pages$1 (vstd!seq.Seq.subrange.? L&. L& pages$ trim_length! (I (vstd!seq.Seq.len.? L&. L& pages$))))) (core!result.Result./Ok (Poly%lib!kv.kvspec_t.AbstractKvStoreState. (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState (%I (I (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/id (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) (vstd!map.impl&%0.insert.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)) key! (Poly%tuple%2. (tuple%2./tuple%2 new_item! pages$1))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))) (core!result.Result./Err (Poly%lib!kv.kvimpl_t.KvError. lib!kv.kvimpl_t.KvError./KeyNotFound))))) :pattern ((lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length! new_item!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly) (key! Poly) (trim_length! Poly) (new_item! Poly)) (! (=> (and (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type key! K&) (has_type trim_length! INT) (has_type new_item! I&)) (has_type (Poly%core!result.Result. (lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length! new_item!)) (TYPE%core!result.Result. $ (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&)))) :pattern ((lib!kv.kvspec_t.impl&%2.trim_list_and_update_item.? K&. K& I&. I& L&. L& E&. E& self! key! trim_length! new_item!)) )))
(assert (fuel_bool_default fuel%lib!kv.kvspec_t.impl&%2.get_keys.))
(assert (=> (fuel_bool fuel%lib!kv.kvspec_t.impl&%2.get_keys.) (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (lib!kv.kvspec_t.impl&%2.get_keys.? K&. K& I&. I& L&. L& E&. E& self!) (vstd!map.impl&%0.dom.? K&. K& $ (TYPE%tuple%2. I&. I& $ (TYPE%vstd!seq.Seq. L&. L&)) (lib!kv.kvspec_t.AbstractKvStoreState./AbstractKvStoreState/contents (%Poly%lib!kv.kvspec_t.AbstractKvStoreState. self!)))) :pattern ((lib!kv.kvspec_t.impl&%2.get_keys.? K&. K& I&. I& L&. L& E&. E& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)) (has_type (lib!kv.kvspec_t.impl&%2.get_keys.? K&. K& I&. I& L&. L& E&. E& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((lib!kv.kvspec_t.impl&%2.get_keys.? K&. K& I&. I& L&. L& E&. E& self!)) )))
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 128)))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%2. U&. U& T&. T&) $ (TYPE%tuple%2. U&. U& T&. T&))) )))
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Eq. U&. U&) (tr_bound%core!cmp.Eq. T&. T&)) (tr_bound%core!cmp.Eq. $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%tuple%2. U&. U& T&. T&))) )))
(assert (tr_bound%core!cmp.PartialEq. $ BOOL $ BOOL))
(assert (tr_bound%core!cmp.Eq. $ BOOL))
(assert (tr_bound%core!cmp.PartialEq. $ (UINT SZ) $ (UINT SZ)))
(assert (tr_bound%core!cmp.Eq. $ (UINT SZ)))
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 8) $ (UINT 8)))
(assert (tr_bound%core!cmp.Eq. $ (UINT 8)))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%core!option.Option. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!cmp.Eq. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%core!option.Option. T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type) (B&. Dcr) (B& Type)) (! (=> (tr_bound%core!cmp.PartialEq. A&. A& B&. B&) (tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)) :pattern ((tr_bound%core!cmp.PartialEq. (REF A&.) A& (REF B&.) B&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!cmp.Eq. A&. A&) (tr_bound%core!cmp.Eq. (REF A&.) A&)) :pattern ((tr_bound%core!cmp.Eq. (REF A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.PartialEq. $ (TYPE%core!marker.PhantomData. T&. T&) $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!marker.PhantomData. T&. T&) $ (TYPE%core!marker.PhantomData. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!cmp.Eq. $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%core!marker.PhantomData. T&. T&))) )))
(assert (tr_bound%core!cmp.PartialEq. $ (UINT 128) $ (UINT 128)))
(assert (tr_bound%core!cmp.Eq. $ (UINT 128)))
(assert (tr_bound%core!cmp.PartialEq. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(assert (tr_bound%core!cmp.Eq. $ TYPE%tuple%0.))
(assert (forall ((Y&. Dcr) (Y& Type) (X&. Dcr) (X& Type) (W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. Y&. Y& Y&. Y&) (tr_bound%core!cmp.PartialEq. X&. X& X&. X&) (tr_bound%core!cmp.PartialEq. W&. W& W&. W&) (tr_bound%core!cmp.PartialEq. V&. V& V&. V&) (tr_bound%core!cmp.PartialEq. U&. U& U&. U&) (tr_bound%core!cmp.PartialEq. T&. T& T&. T&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%6. Y&. Y& X&. X& W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%6. Y&. Y& X&. X& W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%tuple%6. Y&. Y& X&. X& W&. W& V&. V& U&. U& T&. T&) $ (TYPE%tuple%6. Y&. Y& X&. X& W&. W& V&. V& U&. U& T&. T&))) )))
(assert (forall ((Y&. Dcr) (Y& Type) (X&. Dcr) (X& Type) (W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!cmp.Eq. Y&. Y&) (tr_bound%core!cmp.Eq. X&. X&) (tr_bound%core!cmp.Eq. W&. W&) (tr_bound%core!cmp.Eq. V&. V&) (tr_bound%core!cmp.Eq. U&. U&) (tr_bound%core!cmp.Eq. T&. T&)) (tr_bound%core!cmp.Eq. $ (TYPE%tuple%6. Y&. Y& X&. X& W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%tuple%6. Y&. Y& X&. X& W&. W& V&. V& U&. U& T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. T&. T& T&. T&) (tr_bound%core!cmp.PartialEq. E&. E& E&. E&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%core!result.Result. T&. T& E&. E&) $ (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.Eq. T&. T&) (tr_bound%core!cmp.Eq. E&. E&)) (tr_bound%core!cmp.Eq. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!cmp.Eq. $ (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (tr_bound%core!fmt.Debug. $ (UINT 128)))
(assert (forall ((Y&. Dcr) (Y& Type) (X&. Dcr) (X& Type) (W&. Dcr) (W& Type) (V&. Dcr) (V& Type) (U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!fmt.Debug. Y&. Y&) (tr_bound%core!fmt.Debug. X&. X&) (tr_bound%core!fmt.Debug. W&. W&) (tr_bound%core!fmt.Debug. V&. V&) (tr_bound%core!fmt.Debug. U&. U&) (tr_bound%core!fmt.Debug. T&. T&)) (tr_bound%core!fmt.Debug. $ (TYPE%tuple%6. Y&. Y& X&. X& W&. W& V&. V& U&. U& T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%tuple%6. Y&. Y& X&. X& W&. W& V&. V& U&. U& T&. T&))) )))
(assert (forall ((U&. Dcr) (U& Type) (T&. Dcr) (T& Type)) (! (=> (and (tr_bound%core!fmt.Debug. U&. U&) (tr_bound%core!fmt.Debug. T&. T&)) (tr_bound%core!fmt.Debug. $ (TYPE%tuple%2. U&. U& T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%tuple%2. U&. U& T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%core!option.Option. T&. T&))) )))
(assert (tr_bound%core!fmt.Debug. $ (UINT SZ)))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. (REF T&.) T&)) :pattern ((tr_bound%core!fmt.Debug. (REF T&.) T&)) )))
(assert (tr_bound%core!fmt.Debug. $ (UINT 8)))
(assert (tr_bound%core!fmt.Debug. $ TYPE%tuple%0.))
(assert (tr_bound%core!fmt.Debug. $ BOOL))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!fmt.Debug. $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%core!marker.PhantomData. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!fmt.Debug. T&. T&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%core!fmt.Debug. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!fmt.Debug. $ (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)) )))
(assert (tr_bound%core!clone.Clone. $ (UINT 128)))
(assert (tr_bound%core!clone.Clone. $ (UINT 8)))
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!hash.Hash. $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%core!marker.PhantomData. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. (REF T&.) T&)) :pattern ((tr_bound%core!hash.Hash. (REF T&.) T&)) )))
(assert (forall ((T&. Dcr) (T& Type) (B&. Dcr) (B& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. B&. B&)) (tr_bound%core!hash.Hash. $ (TYPE%tuple%2. T&. T& B&. B&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%tuple%2. T&. T& B&. B&))) )))
(assert (tr_bound%core!hash.Hash. $ (UINT SZ)))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%core!option.Option. T&. T&))) )))
(assert (tr_bound%core!hash.Hash. $ (UINT 128)))
(assert (tr_bound%core!hash.Hash. $ BOOL))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. E&. E&)) (tr_bound%core!hash.Hash. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (B&. Dcr) (B& Type) (C&. Dcr) (C& Type) (D&. Dcr) (D& Type) (E&. Dcr) (E& Type) (F&. Dcr) (F& Type)) (! (=> (and (tr_bound%core!hash.Hash. T&. T&) (tr_bound%core!hash.Hash. B&. B&) (tr_bound%core!hash.Hash. C&. C&) (tr_bound%core!hash.Hash. D&. D&) (tr_bound%core!hash.Hash. E&. E&) (tr_bound%core!hash.Hash. F&. F&)) (tr_bound%core!hash.Hash. $ (TYPE%tuple%6. T&. T& B&. B& C&. C& D&. D& E&. E& F&. F&))) :pattern ((tr_bound%core!hash.Hash. $ (TYPE%tuple%6. T&. T& B&. B& C&. C& D&. D& E&. E& F&. F&))) )))
(assert (tr_bound%core!hash.Hash. $ (UINT 8)))
(assert (tr_bound%core!hash.Hash. $ TYPE%tuple%0.))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. E&. E&)) (tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (TYPE%core!marker.PhantomData. T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!marker.PhantomData. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)) )))
(assert (tr_bound%core!clone.Clone. $ BOOL))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) :pattern ((tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) )))
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. PM&. PM&) (tr_bound%core!hash.Hash. K&. K&) (tr_bound%core!cmp.Eq. K&. K&) (tr_bound%core!clone.Clone. K&. K&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. K&. K&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. I&. I&) (tr_bound%lib!kv.kvimpl_t.Item. I&. I& K&. K&) (tr_bound%core!fmt.Debug. I&. I&) (tr_bound%lib!pmem.pmcopy_t.PmCopy. L&. L&) (tr_bound%core!fmt.Debug. L&. L&) (tr_bound%lib!kv.durable.durableimpl_v.DurableKvStore. D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%lib!pmem.wrpm_t.CheckPermission. $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((tr_bound%lib!pmem.wrpm_t.CheckPermission. $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) )))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 8)))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 8)))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT 128)))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT 128)))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ (UINT SZ)))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ (UINT SZ)))
(assert (tr_bound%lib!pmem.traits_t.UnsafeSpecPmSized. $ BOOL))
(assert (tr_bound%lib!pmem.pmcopy_t.SpecPmSized. $ BOOL))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!cmp.PartialEq. K&. K& K&. K&) (tr_bound%core!cmp.PartialEq. E&. E& E&. E&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%core!cmp.PartialEq. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((tr_bound%core!cmp.PartialEq. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&) $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (forall ((K&. Dcr) (K& Type) (E&. Dcr) (E& Type)) (! (=> (and (tr_bound%core!clone.Clone. K&. K&) (tr_bound%core!clone.Clone. E&. E&) (tr_bound%core!fmt.Debug. K&. K&) (tr_bound%core!fmt.Debug. E&. E&)) (tr_bound%core!clone.Clone. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%lib!kv.kvimpl_t.KvError. K&. K& E&. E&))) )))
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT 8)))
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ (UINT SZ)))
(assert (tr_bound%lib!pmem.traits_t.PmSafe. $ BOOL))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 8)))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT 128)))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ (UINT SZ)))
(assert (tr_bound%lib!pmem.traits_t.PmSized. $ BOOL))
(declare-fun ens%lib!kv.kvspec_t.impl&%1.new_two_possibilities. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Int lib!kv.kvspec_t.AbstractKvStoreState. lib!kv.kvspec_t.AbstractKvStoreState. lib!kv.kvspec_t.TrustedKvPermission.) Bool)
(assert (forall ((PM&. Dcr) (PM& Type) (K&. Dcr) (K& Type) (I&. Dcr) (I& Type) (L&. Dcr) (L& Type) (D&. Dcr) (D& Type) (E&. Dcr) (E& Type) (kv_id! Int) (state1! lib!kv.kvspec_t.AbstractKvStoreState.) (state2! lib!kv.kvspec_t.AbstractKvStoreState.) (perm! lib!kv.kvspec_t.TrustedKvPermission.)) (! (= (ens%lib!kv.kvspec_t.impl&%1.new_two_possibilities. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E& kv_id! state1! state2! perm!) (and (has_type (Poly%lib!kv.kvspec_t.TrustedKvPermission. perm!) (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&)) (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (Poly%lib!kv.kvspec_t.TrustedKvPermission. perm!) s$)) (or (= (%Poly%core!option.Option. (lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E& s$ (I kv_id!))) (core!option.Option./Some (Poly%lib!kv.kvspec_t.AbstractKvStoreState. state1!))) (= (%Poly%core!option.Option. (lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E& s$ (I kv_id!))) (core!option.Option./Some (Poly%lib!kv.kvspec_t.AbstractKvStoreState. state2!)))))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (Poly%lib!kv.kvspec_t.TrustedKvPermission. perm!) s$)) )))) :pattern ((ens%lib!kv.kvspec_t.impl&%1.new_two_possibilities. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E& kv_id! state1! state2! perm!)) )))
(declare-const PM&. Dcr)
(declare-const PM& Type)
(declare-const K&. Dcr)
(declare-const K& Type)
(declare-const I&. Dcr)
(declare-const I& Type)
(declare-const L&. Dcr)
(declare-const L& Type)
(declare-const D&. Dcr)
(declare-const D& Type)
(declare-const E&. Dcr)
(declare-const E& Type)
(declare-const perm! lib!kv.kvspec_t.TrustedKvPermission.)
(declare-const kv_id! Int)
(declare-const state1! lib!kv.kvspec_t.AbstractKvStoreState.)
(declare-const state2! lib!kv.kvspec_t.AbstractKvStoreState.)
(assert fuel_defaults)
(assert (uInv 128 kv_id!))
(assert (has_type (Poly%lib!kv.kvspec_t.AbstractKvStoreState. state1!) (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)))
(assert (has_type (Poly%lib!kv.kvspec_t.AbstractKvStoreState. state2!) (TYPE%lib!kv.kvspec_t.AbstractKvStoreState. K&. K& I&. I& L&. L& E&. E&)))
(assert (tr_bound%lib!pmem.pmemspec_t.PersistentMemoryRegions. PM&. PM&))
(assert (tr_bound%core!hash.Hash. K&. K&))
(assert (tr_bound%core!cmp.Eq. K&. K&))
(assert (tr_bound%core!clone.Clone. K&. K&))
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. K&. K&))
(assert (tr_bound%core!fmt.Debug. K&. K&))
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. I&. I&))
(assert (tr_bound%lib!kv.kvimpl_t.Item. I&. I& K&. K&))
(assert (tr_bound%core!fmt.Debug. I&. I&))
(assert (tr_bound%lib!pmem.pmcopy_t.PmCopy. L&. L&))
(assert (tr_bound%core!fmt.Debug. L&. L&))
(assert (tr_bound%lib!kv.durable.durableimpl_v.DurableKvStore. D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E&))
(assert (tr_bound%core!fmt.Debug. E&. E&))
(declare-fun %%lambda%%2 (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly core!option.Option. Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly core!option.Option.) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (%%hole%%13 core!option.Option.) (%%hole%%14 Dcr) (%%hole%%15 Type) (%%hole%%16 Dcr) (%%hole%%17 Type) (%%hole%%18 Dcr) (%%hole%%19 Type) (%%hole%%20 Dcr) (%%hole%%21 Type) (%%hole%%22 Dcr) (%%hole%%23 Type) (%%hole%%24 Dcr) (%%hole%%25 Type) (%%hole%%26 Poly) (%%hole%%27 core!option.Option.) (s$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27) s$) (B (or (= (%Poly%core!option.Option. (lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 s$ %%hole%%12)) %%hole%%13) (= (%Poly%core!option.Option. (lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 s$ %%hole%%26)) %%hole%%27)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27) s$)))))
(declare-const %%location_label%%0 Bool)
(assert (not (=> (= perm! (lib!kv.kvspec_t.TrustedKvPermission./TrustedKvPermission (%Poly%fun%1. (Poly%fun%1. (mk_fun (%%lambda%%2 D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E& (I kv_id!) (core!option.Option./Some (Poly%lib!kv.kvspec_t.AbstractKvStoreState. state1!)) D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E& (I kv_id!) (core!option.Option./Some (Poly%lib!kv.kvspec_t.AbstractKvStoreState. state2!)))))) (%Poly%core!marker.PhantomData. (Poly%core!marker.PhantomData. (lib!kv.kvimpl_t.spec_phantom_data.? $ (TYPE%tuple%6. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&)))))) (=> %%location_label%%0 (forall ((s$ Poly)) (! (=> (has_type s$ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= (%B (lib!pmem.wrpm_t.CheckPermission.check_permission.? $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (Poly%lib!kv.kvspec_t.TrustedKvPermission. perm!) s$)) (or (= (%Poly%core!option.Option. (lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E& s$ (I kv_id!))) (core!option.Option./Some (Poly%lib!kv.kvspec_t.AbstractKvStoreState. state1!))) (= (%Poly%core!option.Option. (lib!kv.durable.durableimpl_v.DurableKvStore.recover_to_kv_state.? D&. D& PM&. PM& K&. K& I&. I& L&. L& E&. E& s$ (I kv_id!))) (core!option.Option./Some (Poly%lib!kv.kvspec_t.AbstractKvStoreState. state2!)))))) :pattern ((lib!pmem.wrpm_t.CheckPermission.check_permission.? $ (TYPE%lib!kv.kvspec_t.TrustedKvPermission. PM&. PM& K&. K& I&. I& L&. L& D&. D& E&. E&) $ (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (Poly%lib!kv.kvspec_t.TrustedKvPermission. perm!) s$)) ))))))
(check-sat)
(exit)
