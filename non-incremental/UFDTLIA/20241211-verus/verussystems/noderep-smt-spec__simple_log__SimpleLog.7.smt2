(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!state_machine_internal.impl&%1.update_at_index. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_2. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_1. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_read_version_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_1. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_2. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_1. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_add_op_to_log_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_incr_version_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_1. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_start. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_1. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_read_version. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_read_version_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_finish. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_1. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_2. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_start. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_1. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_add_op_to_log. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_add_op_to_log_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_incr_version. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_incr_version_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_finish. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_1. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_no_op. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%2.arrow_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize_enabled. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_strong. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_enabled. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_strong. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_enabled. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_strong. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_enabled. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start_strong. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start_enabled. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_strong. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_enabled. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_strong. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_enabled. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish_strong. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish_enabled. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op_strong. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op_enabled. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_by. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.next. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_strong_by. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_strong. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.init_by. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.init. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.invariant. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_version. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version. FuelId)
(declare-const fuel%lib!spec.simple_log.impl&%0.arrow_version. FuelId)
(declare-const fuel%lib!spec.simple_log.compute_nrstate_at_version. FuelId)
(declare-const fuel%lib!impl&%5.is_Internal. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!set.impl&%0.choose. fuel%vstd!state_machine_internal.impl&%1.update_at_index. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_2. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_0. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_1. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_read_version_0. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_0. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_1. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_2. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_0. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_1. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_add_op_to_log_0. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_incr_version_0. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_0. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_1. fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_start. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_0. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_1. fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_read_version. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_read_version_0. fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_finish. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_0. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_1. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_2. fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_start. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_0. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_1. fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_add_op_to_log. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_add_op_to_log_0. fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_incr_version. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_incr_version_0. fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_finish. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_0. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_1. fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_no_op. fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_dummy_to_use_type_params. fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!spec.simple_log.SimpleLog.impl&%2.arrow_0. fuel%lib!spec.simple_log.SimpleLog.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!spec.simple_log.SimpleLog.impl&%3.is_initialize. fuel%lib!spec.simple_log.SimpleLog.impl&%3.is_dummy_to_use_type_params. fuel%lib!spec.simple_log.SimpleLog.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize. fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize_enabled. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_strong. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_enabled. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_strong. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_enabled. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_strong. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_enabled. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start_strong. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start_enabled. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_strong. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_enabled. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_strong. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_enabled. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish_strong. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish_enabled. fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op. fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op_strong. fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op_enabled. fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_by. fuel%lib!spec.simple_log.SimpleLog.impl&%4.next. fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_strong_by. fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_strong. fuel%lib!spec.simple_log.SimpleLog.impl&%4.init_by. fuel%lib!spec.simple_log.SimpleLog.impl&%4.init. fuel%lib!spec.simple_log.SimpleLog.impl&%4.invariant. fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_version. fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version. fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version. fuel%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version. fuel%lib!spec.simple_log.impl&%0.arrow_version. fuel%lib!spec.simple_log.compute_nrstate_at_version. fuel%lib!impl&%5.is_Internal.))
(declare-fun proj%%lib!Dispatch./ReadOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./ReadOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./WriteOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./WriteOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./Response (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./Response (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./View (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./View (Dcr Type) Type)
(declare-sort vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. 0)
(declare-datatypes ((lib!spec.simple_log.SimpleLog.State. 0) (lib!spec.simple_log.SimpleLog.Step. 0) (lib!spec.simple_log.SimpleLog.Config. 0) (lib!spec.simple_log.ReadReq. 0) (lib!spec.simple_log.UpdateResp. 0) (lib!InputOperation. 0) (lib!OutputOperation. 0) (lib!AsyncLabel. 0) (tuple%0. 0) (tuple%2. 0)) (((lib!spec.simple_log.SimpleLog.State./State (lib!spec.simple_log.SimpleLog.State./State/?log Poly) (lib!spec.simple_log.SimpleLog.State./State/?version Int) (lib!spec.simple_log.SimpleLog.State./State/?readonly_reqs Poly) (lib!spec.simple_log.SimpleLog.State./State/?update_reqs Poly) (lib!spec.simple_log.SimpleLog.State./State/?update_resps vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.))) ((lib!spec.simple_log.SimpleLog.Step./readonly_start (lib!spec.simple_log.SimpleLog.Step./readonly_start/?0 Int) (lib!spec.simple_log.SimpleLog.Step./readonly_start/?1 Poly)) (lib!spec.simple_log.SimpleLog.Step./readonly_read_version (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/?0 Int)) (lib!spec.simple_log.SimpleLog.Step./readonly_finish (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?0 Int) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?1 Int) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?2 Poly)) (lib!spec.simple_log.SimpleLog.Step./update_start (lib!spec.simple_log.SimpleLog.Step./update_start/?0 Int) (lib!spec.simple_log.SimpleLog.Step./update_start/?1 Poly)) (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/?0 Int)) (lib!spec.simple_log.SimpleLog.Step./update_incr_version (lib!spec.simple_log.SimpleLog.Step./update_incr_version/?0 Int)) (lib!spec.simple_log.SimpleLog.Step./update_finish (lib!spec.simple_log.SimpleLog.Step./update_finish/?0 Int) (lib!spec.simple_log.SimpleLog.Step./update_finish/?1 Poly)) (lib!spec.simple_log.SimpleLog.Step./no_op ) (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/?0 lib!spec.simple_log.SimpleLog.State.))) ((lib!spec.simple_log.SimpleLog.Config./initialize ) (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/?0 lib!spec.simple_log.SimpleLog.State.))) ((lib!spec.simple_log.ReadReq./Init (lib!spec.simple_log.ReadReq./Init/?op Poly)) (lib!spec.simple_log.ReadReq./Req (lib!spec.simple_log.ReadReq./Req/?version Int) (lib!spec.simple_log.ReadReq./Req/?op Poly))) ((lib!spec.simple_log.UpdateResp./UpdateResp (lib!spec.simple_log.UpdateResp./UpdateResp/?0 Int))) ((lib!InputOperation./Read (lib!InputOperation./Read/?0 Poly)) (lib!InputOperation./Write (lib!InputOperation./Write/?0 Poly))) ((lib!OutputOperation./Read (lib!OutputOperation./Read/?0 Poly)) (lib!OutputOperation./Write (lib!OutputOperation./Write/?0 Poly))) ((lib!AsyncLabel./Internal ) (lib!AsyncLabel./Start (lib!AsyncLabel./Start/?0 Int) (lib!AsyncLabel./Start/?1 lib!InputOperation.)) (lib!AsyncLabel./End (lib!AsyncLabel./End/?0 Int) (lib!AsyncLabel./End/?1 lib!OutputOperation.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun lib!spec.simple_log.SimpleLog.State./State/log (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/version (lib!spec.simple_log.SimpleLog.State.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/update_reqs (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/update_resps (lib!spec.simple_log.SimpleLog.State.) vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (lib!spec.simple_log.SimpleLog.Step.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (lib!spec.simple_log.SimpleLog.Step.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_start/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_start/1 (lib!spec.simple_log.SimpleLog.Step.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_finish/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_finish/1 (lib!spec.simple_log.SimpleLog.Step.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 (lib!spec.simple_log.SimpleLog.Step.) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 (lib!spec.simple_log.SimpleLog.Config.) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!spec.simple_log.ReadReq./Init/op (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun lib!spec.simple_log.ReadReq./Req/version (lib!spec.simple_log.ReadReq.) Int)
(declare-fun lib!spec.simple_log.ReadReq./Req/op (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun lib!spec.simple_log.UpdateResp./UpdateResp/0 (lib!spec.simple_log.UpdateResp.) Int)
(declare-fun lib!InputOperation./Read/0 (lib!InputOperation.) Poly)
(declare-fun lib!InputOperation./Write/0 (lib!InputOperation.) Poly)
(declare-fun lib!OutputOperation./Read/0 (lib!OutputOperation.) Poly)
(declare-fun lib!OutputOperation./Write/0 (lib!OutputOperation.) Poly)
(declare-fun lib!AsyncLabel./Start/0 (lib!AsyncLabel.) Int)
(declare-fun lib!AsyncLabel./Start/1 (lib!AsyncLabel.) lib!InputOperation.)
(declare-fun lib!AsyncLabel./End/0 (lib!AsyncLabel.) Int)
(declare-fun lib!AsyncLabel./End/1 (lib!AsyncLabel.) lib!OutputOperation.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.simple_log.SimpleLog.State. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.simple_log.SimpleLog.Step. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.simple_log.SimpleLog.Config. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.simple_log.ReadReq. (Dcr Type) Type)
(declare-const TYPE%lib!spec.simple_log.UpdateResp. Type)
(declare-fun TYPE%lib!InputOperation. (Dcr Type) Type)
(declare-fun TYPE%lib!OutputOperation. (Dcr Type) Type)
(declare-fun TYPE%lib!AsyncLabel. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (Poly) vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)
(declare-fun Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun %Poly%lib!spec.simple_log.SimpleLog.State. (Poly) lib!spec.simple_log.SimpleLog.State.)
(declare-fun Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step.) Poly)
(declare-fun %Poly%lib!spec.simple_log.SimpleLog.Step. (Poly) lib!spec.simple_log.SimpleLog.Step.)
(declare-fun Poly%lib!spec.simple_log.SimpleLog.Config. (lib!spec.simple_log.SimpleLog.Config.) Poly)
(declare-fun %Poly%lib!spec.simple_log.SimpleLog.Config. (Poly) lib!spec.simple_log.SimpleLog.Config.)
(declare-fun Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun %Poly%lib!spec.simple_log.ReadReq. (Poly) lib!spec.simple_log.ReadReq.)
(declare-fun Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp.) Poly)
(declare-fun %Poly%lib!spec.simple_log.UpdateResp. (Poly) lib!spec.simple_log.UpdateResp.)
(declare-fun Poly%lib!InputOperation. (lib!InputOperation.) Poly)
(declare-fun %Poly%lib!InputOperation. (Poly) lib!InputOperation.)
(declare-fun Poly%lib!OutputOperation. (lib!OutputOperation.) Poly)
(declare-fun %Poly%lib!OutputOperation. (Poly) lib!OutputOperation.)
(declare-fun Poly%lib!AsyncLabel. (lib!AsyncLabel.) Poly)
(declare-fun %Poly%lib!AsyncLabel. (Poly) lib!AsyncLabel.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.)) (= x (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= x (%Poly%lib!spec.simple_log.SimpleLog.State. (Poly%lib!spec.simple_log.SimpleLog.State. x))) :pattern ((Poly%lib!spec.simple_log.SimpleLog.State. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (= x (Poly%lib!spec.simple_log.SimpleLog.State. (%Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_log! Poly) (_version! Int) (_readonly_reqs! Poly) (_update_reqs! Poly) (_update_resps! vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)) (! (=> (and (has_type _log! (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&))) (<= 0 _version!) (has_type _readonly_reqs! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)))) (has_type _update_reqs! (TYPE%vstd!map.Map. $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.State./State _log! _version! _readonly_reqs! _update_reqs! _update_resps!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.State./State _log! _version! _readonly_reqs! _update_reqs! _update_resps!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/log x) (lib!spec.simple_log.SimpleLog.State./State/?log x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/log x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/version x) (lib!spec.simple_log.SimpleLog.State./State/?version x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/version x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x) (lib!spec.simple_log.SimpleLog.State./State/?readonly_reqs x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&))))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs x) (lib!spec.simple_log.SimpleLog.State./State/?update_reqs x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/update_reqs x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (TYPE%vstd!map.Map. $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/update_resps x) (lib!spec.simple_log.SimpleLog.State./State/?update_resps x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/update_resps x)) )))
(define-fun is-lib!spec.simple_log.SimpleLog.State./State_ ((c lib!spec.simple_log.SimpleLog.State.)) Bool ((_ is lib!spec.simple_log.SimpleLog.State./State) c))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (=> (is-lib!spec.simple_log.SimpleLog.State./State_ x) (height_lt (height (lib!spec.simple_log.SimpleLog.State./State/log x)) (height (Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((height (lib!spec.simple_log.SimpleLog.State./State/log x))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (=> (is-lib!spec.simple_log.SimpleLog.State./State_ x) (height_lt (height (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x)) (height (Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((height (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (=> (is-lib!spec.simple_log.SimpleLog.State./State_ x) (height_lt (height (lib!spec.simple_log.SimpleLog.State./State/update_reqs x)) (height (Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((height (lib!spec.simple_log.SimpleLog.State./State/update_reqs x))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= x (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. x))) :pattern ((Poly%lib!spec.simple_log.SimpleLog.Step. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (= x (Poly%lib!spec.simple_log.SimpleLog.Step. (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Poly)) (! (=> (and (<= 0 _0!) (has_type _1! (proj%lib!Dispatch./ReadOperation DT&. DT&))) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_start _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_start _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_start/0 x) (lib!spec.simple_log.SimpleLog.Step./readonly_start/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_start/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_start/1 x) (lib!spec.simple_log.SimpleLog.Step./readonly_start/?1 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_start/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_read_version _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_read_version _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 x) (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Int) (_2! Poly)) (! (=> (and (<= 0 _0!) (<= 0 _1!) (has_type _2! (proj%lib!Dispatch./Response DT&. DT&))) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_finish _0! _1! _2!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_finish _0! _1! _2!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 x) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 x) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?1 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 x) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?2 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Poly)) (! (=> (and (<= 0 _0!) (has_type _1! (proj%lib!Dispatch./WriteOperation DT&. DT&))) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_start _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_start _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_start/0 x) (lib!spec.simple_log.SimpleLog.Step./update_start/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_start/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./update_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_start/1 x) (lib!spec.simple_log.SimpleLog.Step./update_start/?1 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_start/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.Step./update_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 x) (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_incr_version _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_incr_version _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 x) (lib!spec.simple_log.SimpleLog.Step./update_incr_version/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Poly)) (! (=> (and (<= 0 _0!) (has_type _1! (proj%lib!Dispatch./Response DT&. DT&))) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_finish _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_finish _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_finish/0 x) (lib!spec.simple_log.SimpleLog.Step./update_finish/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_finish/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./update_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_finish/1 x) (lib!spec.simple_log.SimpleLog.Step./update_finish/?1 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_finish/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.Step./update_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. lib!spec.simple_log.SimpleLog.Step./no_op) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. lib!spec.simple_log.SimpleLog.Step./no_op) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.simple_log.SimpleLog.State.)) (! (=> (has_type (Poly%lib!spec.simple_log.SimpleLog.State. _0!) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 x) (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x))) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params) c))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (=> (is-lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 x))) (height (Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 x)))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Config.)) (! (= x (%Poly%lib!spec.simple_log.SimpleLog.Config. (Poly%lib!spec.simple_log.SimpleLog.Config. x))) :pattern ((Poly%lib!spec.simple_log.SimpleLog.Config. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&)) (= x (Poly%lib!spec.simple_log.SimpleLog.Config. (%Poly%lib!spec.simple_log.SimpleLog.Config. x)))) :pattern ((has_type x (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!spec.simple_log.SimpleLog.Config. lib!spec.simple_log.SimpleLog.Config./initialize) (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&)) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Config. lib!spec.simple_log.SimpleLog.Config./initialize) (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.simple_log.SimpleLog.State.)) (! (=> (has_type (Poly%lib!spec.simple_log.SimpleLog.State. _0!) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.Config. (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Config. (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Config.)) (! (= (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 x) (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Config. x))) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Config. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&))) )))
(define-fun is-lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params_ ((c lib!spec.simple_log.SimpleLog.Config.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params) c))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Config.)) (! (=> (is-lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 x))) (height (Poly%lib!spec.simple_log.SimpleLog.Config. x)))) :pattern ((height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 x)))) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= x (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. x))) :pattern ((Poly%lib!spec.simple_log.ReadReq. x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (= x (Poly%lib!spec.simple_log.ReadReq. (%Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((R&. Dcr) (R& Type) (_op! Poly)) (! (=> (has_type _op! R&) (has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Init _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) :pattern ((has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Init _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Init/op x) (lib!spec.simple_log.ReadReq./Init/?op x)) :pattern ((lib!spec.simple_log.ReadReq./Init/op x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (has_type (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. x)) R&)) :pattern ((lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((R&. Dcr) (R& Type) (_version! Int) (_op! Poly)) (! (=> (and (<= 0 _version!) (has_type _op! R&)) (has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Req _version! _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) :pattern ((has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Req _version! _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Req/version x) (lib!spec.simple_log.ReadReq./Req/?version x)) :pattern ((lib!spec.simple_log.ReadReq./Req/version x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (<= 0 (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Req/op x) (lib!spec.simple_log.ReadReq./Req/?op x)) :pattern ((lib!spec.simple_log.ReadReq./Req/op x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (has_type (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. x)) R&)) :pattern ((lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(define-fun is-lib!spec.simple_log.ReadReq./Init_ ((c lib!spec.simple_log.ReadReq.)) Bool ((_ is lib!spec.simple_log.ReadReq./Init) c))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (=> (is-lib!spec.simple_log.ReadReq./Init_ x) (height_lt (height (lib!spec.simple_log.ReadReq./Init/op x)) (height (Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((height (lib!spec.simple_log.ReadReq./Init/op x))) )))
(define-fun is-lib!spec.simple_log.ReadReq./Req_ ((c lib!spec.simple_log.ReadReq.)) Bool ((_ is lib!spec.simple_log.ReadReq./Req) c))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (=> (is-lib!spec.simple_log.ReadReq./Req_ x) (height_lt (height (lib!spec.simple_log.ReadReq./Req/op x)) (height (Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((height (lib!spec.simple_log.ReadReq./Req/op x))) )))
(assert (forall ((x lib!spec.simple_log.UpdateResp.)) (! (= x (%Poly%lib!spec.simple_log.UpdateResp. (Poly%lib!spec.simple_log.UpdateResp. x))) :pattern ((Poly%lib!spec.simple_log.UpdateResp. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.simple_log.UpdateResp.) (= x (Poly%lib!spec.simple_log.UpdateResp. (%Poly%lib!spec.simple_log.UpdateResp. x)))) :pattern ((has_type x TYPE%lib!spec.simple_log.UpdateResp.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp./UpdateResp _0!)) TYPE%lib!spec.simple_log.UpdateResp.)) :pattern ((has_type (Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp./UpdateResp _0!)) TYPE%lib!spec.simple_log.UpdateResp.)) )))
(assert (forall ((x lib!spec.simple_log.UpdateResp.)) (! (= (lib!spec.simple_log.UpdateResp./UpdateResp/0 x) (lib!spec.simple_log.UpdateResp./UpdateResp/?0 x)) :pattern ((lib!spec.simple_log.UpdateResp./UpdateResp/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.simple_log.UpdateResp.) (<= 0 (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. x)))) :pattern ((lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. x)) (has_type x TYPE%lib!spec.simple_log.UpdateResp.)) )))
(assert (forall ((x lib!InputOperation.)) (! (= x (%Poly%lib!InputOperation. (Poly%lib!InputOperation. x))) :pattern ((Poly%lib!InputOperation. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (= x (Poly%lib!InputOperation. (%Poly%lib!InputOperation. x)))) :pattern ((has_type x (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!InputOperation./Read _0!)) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!InputOperation. (lib!InputOperation./Read _0!)) (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((x lib!InputOperation.)) (! (= (lib!InputOperation./Read/0 x) (lib!InputOperation./Read/?0 x)) :pattern ((lib!InputOperation./Read/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!InputOperation./Read/0 (%Poly%lib!InputOperation. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!InputOperation./Read/0 (%Poly%lib!InputOperation. x)) (has_type x (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!InputOperation./Write _0!)) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!InputOperation. (lib!InputOperation./Write _0!)) (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((x lib!InputOperation.)) (! (= (lib!InputOperation./Write/0 x) (lib!InputOperation./Write/?0 x)) :pattern ((lib!InputOperation./Write/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!InputOperation./Write/0 (%Poly%lib!InputOperation. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!InputOperation./Write/0 (%Poly%lib!InputOperation. x)) (has_type x (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((x lib!OutputOperation.)) (! (= x (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. x))) :pattern ((Poly%lib!OutputOperation. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (= x (Poly%lib!OutputOperation. (%Poly%lib!OutputOperation. x)))) :pattern ((has_type x (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./Response DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Read _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Read _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((x lib!OutputOperation.)) (! (= (lib!OutputOperation./Read/0 x) (lib!OutputOperation./Read/?0 x)) :pattern ((lib!OutputOperation./Read/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. x)) (has_type x (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./Response DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Write _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Write _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((x lib!OutputOperation.)) (! (= (lib!OutputOperation./Write/0 x) (lib!OutputOperation./Write/?0 x)) :pattern ((lib!OutputOperation./Write/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. x)) (has_type x (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((x lib!AsyncLabel.)) (! (= x (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. x))) :pattern ((Poly%lib!AsyncLabel. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (= x (Poly%lib!AsyncLabel. (%Poly%lib!AsyncLabel. x)))) :pattern ((has_type x (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!AsyncLabel. lib!AsyncLabel./Internal) (TYPE%lib!AsyncLabel. DT&. DT&)) :pattern ((has_type (Poly%lib!AsyncLabel. lib!AsyncLabel./Internal) (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! lib!InputOperation.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!InputOperation. _1!) (TYPE%lib!InputOperation. DT&. DT&))) (has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./Start _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./Start _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./Start/0 x) (lib!AsyncLabel./Start/?0 x)) :pattern ((lib!AsyncLabel./Start/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (<= 0 (lib!AsyncLabel./Start/0 (%Poly%lib!AsyncLabel. x)))) :pattern ((lib!AsyncLabel./Start/0 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./Start/1 x) (lib!AsyncLabel./Start/?1 x)) :pattern ((lib!AsyncLabel./Start/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!AsyncLabel./Start/1 (%Poly%lib!AsyncLabel. x))) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((lib!AsyncLabel./Start/1 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! lib!OutputOperation.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!OutputOperation. _1!) (TYPE%lib!OutputOperation. DT&. DT&))) (has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./End _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./End _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./End/0 x) (lib!AsyncLabel./End/?0 x)) :pattern ((lib!AsyncLabel./End/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (<= 0 (lib!AsyncLabel./End/0 (%Poly%lib!AsyncLabel. x)))) :pattern ((lib!AsyncLabel./End/0 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./End/1 x) (lib!AsyncLabel./End/?1 x)) :pattern ((lib!AsyncLabel./End/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!AsyncLabel./End/1 (%Poly%lib!AsyncLabel. x))) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((lib!AsyncLabel./End/1 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(define-fun is-lib!AsyncLabel./Start_ ((c lib!AsyncLabel.)) Bool ((_ is lib!AsyncLabel./Start) c))
(assert (forall ((x lib!AsyncLabel.)) (! (=> (is-lib!AsyncLabel./Start_ x) (height_lt (height (Poly%lib!InputOperation. (lib!AsyncLabel./Start/1 x))) (height (Poly%lib!AsyncLabel. x)))) :pattern ((height (Poly%lib!InputOperation. (lib!AsyncLabel./Start/1 x)))) )))
(define-fun is-lib!AsyncLabel./End_ ((c lib!AsyncLabel.)) Bool ((_ is lib!AsyncLabel./End) c))
(assert (forall ((x lib!AsyncLabel.)) (! (=> (is-lib!AsyncLabel./End_ x) (height_lt (height (Poly%lib!OutputOperation. (lib!AsyncLabel./End/1 x))) (height (Poly%lib!AsyncLabel. x)))) :pattern ((height (Poly%lib!OutputOperation. (lib!AsyncLabel./End/1 x)))) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(declare-fun tr_bound%lib!Dispatch. (Dcr Type) Bool)
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!state_machine_internal.impl&%1.update_at_index.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_2.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_1.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_read_version_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_1.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_2.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_1.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_add_op_to_log_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_incr_version_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_1.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%0.arrow_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_start.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_1.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_read_version.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_read_version_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_finish.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_1.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_2.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.is_update_start.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_1.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.is_update_add_op_to_log.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_update_add_op_to_log_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.is_update_incr_version.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_update_incr_version_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.is_update_finish.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_0.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_1.? (Dcr Type Poly) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.is_no_op.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.is_dummy_to_use_type_params.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%1.get_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%2.arrow_0.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%2.arrow_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%3.is_initialize.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%3.is_dummy_to_use_type_params.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%3.get_dummy_to_use_type_params_0.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.initialize.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.initialize_enabled.? (Dcr Type) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_strong.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_enabled.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_strong.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_enabled.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_strong.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_enabled.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_start.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_start_strong.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_start_enabled.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_strong.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_enabled.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_strong.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_enabled.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_finish.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_finish_strong.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_finish_enabled.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.no_op.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.no_op_strong.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.no_op_enabled.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.next_by.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.next.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.next_strong_by.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.next_strong.? (Dcr Type Poly Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.init_by.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.init.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.invariant.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.inv_version.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.? (Dcr Type Poly) Bool)
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.simple_log.impl&%0.arrow_version.? (Dcr Type Poly) Int)
(declare-fun lib!spec.simple_log.compute_nrstate_at_version.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.simple_log.rec%compute_nrstate_at_version.? (Dcr Type Poly Poly Fuel) Poly)
(declare-fun lib!Dispatch.init_spec.? (Dcr Type) Poly)
(declare-fun lib!Dispatch.init_spec%default%.? (Dcr Type) Poly)
(declare-fun lib!Dispatch.dispatch_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_spec%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_mut_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_mut_spec%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!impl&%5.is_Internal.? (Dcr Type Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!Dispatch.init_spec.? Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&)) :pattern ((lib!Dispatch.init_spec.? Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (ds! Poly) (op! Poly)) (! (=> (and (has_type ds! (proj%lib!Dispatch./View Self%&. Self%&)) (has_type op! (proj%lib!Dispatch./ReadOperation Self%&. Self%&))) (has_type (lib!Dispatch.dispatch_spec.? Self%&. Self%& ds! op!) (proj%lib!Dispatch./Response Self%&. Self%&))) :pattern ((lib!Dispatch.dispatch_spec.? Self%&. Self%& ds! op!)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (ds! Poly) (op! Poly)) (! (=> (and (has_type ds! (proj%lib!Dispatch./View Self%&. Self%&)) (has_type op! (proj%lib!Dispatch./WriteOperation Self%&. Self%&))) (has_type (lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!) (TYPE%tuple%2. (proj%%lib!Dispatch./View Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&) (proj%%lib!Dispatch./Response Self%&. Self%&) (proj%lib!Dispatch./Response Self%&. Self%&)))) :pattern ((lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.inv_version.? DT&. DT& self!) (let ((tmp%%$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. self!))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.inv_version.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. self!)))) rid$) (< (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. self!))) rid$))) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. self!)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. self!)))) rid$)) ))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.impl&%0.arrow_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.impl&%0.arrow_version.) (forall ((R&. Dcr) (R& Type) (self! Poly)) (! (= (lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!) (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. self!))) :pattern ((lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!)) ))))
(assert (forall ((R&. Dcr) (R& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (<= 0 (lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!))) :pattern ((lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.? DT&. DT& self!) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. self!))) rid$) (is-lib!spec.simple_log.ReadReq./Req_ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. self!)) rid$)))) (<= (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. self!)) rid$))) (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. self!))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. self!))) rid$)) ))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.invariant.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.invariant.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& self!) (and (and (lib!spec.simple_log.SimpleLog.impl&%4.inv_version.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.? DT&. DT& self!)) (lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize.) (forall ((DT&. Dcr) (DT& Type) (post! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.initialize.? DT&. DT& post!) (let ((update_tmp_log$ (vstd!seq.Seq.empty.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) (let ((update_tmp_version$ 0)) (let ((update_tmp_readonly_reqs$ (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&))))) (let ((update_tmp_update_reqs$ (vstd!map.impl&%0.empty.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) (let ((update_tmp_update_resps$ (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.)))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.initialize.? DT&. DT& post!)) ))))
(define-fun is-lib!spec.simple_log.SimpleLog.Config./initialize_ ((c lib!spec.simple_log.SimpleLog.Config.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.init_by.) (forall ((DT&. Dcr) (DT& Type) (post! Poly) (step! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.init_by.? DT&. DT& post! step!) (and (is-lib!spec.simple_log.SimpleLog.Config./initialize_ (%Poly%lib!spec.simple_log.SimpleLog.Config. step!)) (lib!spec.simple_log.SimpleLog.impl&%4.initialize.? DT&. DT& post!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.init_by.? DT&. DT& post! step!)) ))))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.init.) (forall ((DT&. Dcr) (DT& Type) (post! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.init.? DT&. DT& post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&)) (lib!spec.simple_log.SimpleLog.impl&%4.init_by.? DT&. DT& post! step$)) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.init_by.? DT&. DT& post! step$)) ))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.init.? DT&. DT& post!)) ))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(assert (fuel_bool_default fuel%vstd!state_machine_internal.impl&%1.update_at_index.))
(assert (=> (fuel_bool fuel%vstd!state_machine_internal.impl&%1.update_at_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!state_machine_internal.impl&%1.update_at_index.? K&. K& V&. V& self! k! v!) (vstd!map.impl&%0.insert.? K&. K& V&. V& self! k! v!)) :pattern ((vstd!state_machine_internal.impl&%1.update_at_index.? K&. K& V&. V& self! k! v!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type k! K&) (has_type v! V&)) (has_type (vstd!state_machine_internal.impl&%1.update_at_index.? K&. K& V&. V& self! k! v!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!state_machine_internal.impl&%1.update_at_index.? K&. K& V&. V& self! k! v!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (op! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.? DT&. DT& pre! post! label! rid! op!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./Start (%I rid!) (%Poly%lib!InputOperation. (Poly%lib!InputOperation. (lib!InputOperation./Read op!))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!)) (let ((update_tmp_readonly_reqs$1 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) update_tmp_readonly_reqs$ rid! (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Init op!))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$1) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.? DT&. DT& pre! post! label! rid! op!)) ))))
(assert (fuel_bool_default fuel%lib!impl&%5.is_Internal.))
(define-fun is-lib!AsyncLabel./Internal_ ((c lib!AsyncLabel.)) Bool ((_ is lib!AsyncLabel./Internal) c))
(assert (=> (fuel_bool fuel%lib!impl&%5.is_Internal.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%5.is_Internal.? DT&. DT& self!) (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%5.is_Internal.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.? DT&. DT& pre! post! label! rid!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!)))) (and (and (is-lib!spec.simple_log.ReadReq./Init_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) true)) (let ((op$ (ite (is-lib!spec.simple_log.ReadReq./Init_ tmp_for_match_0$) (let ((op$2 (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) op$2) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&))))) (let ((update_tmp_readonly_reqs$1 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) update_tmp_readonly_reqs$ rid! (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Req (%I (I (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) op$))))) (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$1))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.? DT&. DT& pre! post! label! rid!)) ))))
(declare-fun req%lib!spec.simple_log.compute_nrstate_at_version. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (= (req%lib!spec.simple_log.compute_nrstate_at_version. DT&. DT& log! version!) (=> %%global_location_label%%4 (and (<= 0 (%I version!)) (<= (%I version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) log!))))) :pattern ((req%lib!spec.simple_log.compute_nrstate_at_version. DT&. DT& log! version!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.compute_nrstate_at_version.))
(declare-const fuel_nat%lib!spec.simple_log.compute_nrstate_at_version. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly) (fuel% Fuel)) (! (= (lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! fuel%) (lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! zero)) :pattern ((lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! fuel%)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&))) (has_type version! NAT)) (= (lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel%)) (ite (= (%I version!) 0) (lib!Dispatch.init_spec.? DT&. DT&) (tuple%2./tuple%2/0 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! (I (nClip (Sub (%I version!) 1))) fuel%) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) log! (I (Sub (%I version!) 1))))))))) :pattern ((lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.compute_nrstate_at_version.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&))) (has_type version! NAT)) (= (lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& log! version!) (lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel_nat%lib!spec.simple_log.compute_nrstate_at_version.)))) :pattern ((lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& log! version!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (=> (and (has_type log! (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&))) (has_type version! NAT)) (has_type (lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& log! version!) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& log! version!)) )))
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (version! Poly)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version. DT&. DT& self! version!) (=> %%global_location_label%%5 (and (<= 0 (%I version!)) (<= (%I version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. self!))))))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version. DT&. DT& self! version!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (version! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& self! version!) (lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. self!)) version!)) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& self! version!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (version! Poly)) (! (=> (and (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type version! NAT)) (has_type (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& self! version!) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& self! version!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (version! Poly) (ret! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.? DT&. DT& pre! post! label! rid! version! ret!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./End (%I rid!) (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. (lib!OutputOperation./Read ret!))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!)))) (and (and (is-lib!spec.simple_log.ReadReq./Req_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (let ((current$ (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!spec.simple_log.ReadReq./Req_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (let ((current$ (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (tuple%2./tuple%2 op$ (I current$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT)))))) (let ((op$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((current$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (and (<= current$ (%I version!)) (<= (%I version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))))) (and (<= (%I version!) (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) (and (= ret! (lib!Dispatch.dispatch_spec.? DT&. DT& (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& pre! version!) op$)) (let ((update_tmp_readonly_reqs$ (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!))) (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$)))))))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.? DT&. DT& pre! post! label! rid! version! ret!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (op! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_start.? DT&. DT& pre! post! label! rid! op!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./Start (%I rid!) (%Poly%lib!InputOperation. (Poly%lib!InputOperation. (lib!InputOperation./Write op!))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!)) (let ((update_tmp_update_reqs$1 (vstd!map.impl&%0.insert.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) update_tmp_update_reqs$ rid! op!))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$1) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_start.? DT&. DT& pre! post! label! rid! op!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.? DT&. DT& pre! post! label! rid!) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!) (let ((update_tmp_log$ (vstd!seq.Seq.push.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!)))) (let ((update_tmp_update_reqs$ (vstd!map.impl&%0.remove.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!))) (let ((update_tmp_update_resps$ (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid! (Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp./UpdateResp (%I (I (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))))))))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.? DT&. DT& pre! post! label! rid!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (new_version! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.? DT&. DT& pre! post! label! new_version!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (and (<= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (%I new_version!)) (<= (%I new_version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))))) (let ((update_tmp_version$ (%I new_version!))) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.? DT&. DT& pre! post! label! new_version!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (ret! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_finish.? DT&. DT& pre! post! label! rid! ret!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./End (%I rid!) (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. (lib!OutputOperation./Write ret!))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!) (and (let ((uidx$ (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!))))) (and (let ((tmp%%$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (< uidx$ tmp%%$) (<= tmp%%$ (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))))) (and (= ret! (tuple%2./tuple%2/1 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& pre! (I uidx$)) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (I uidx$)))))) (let ((update_tmp_update_resps$ (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)))) (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_finish.? DT&. DT& pre! post! label! rid! ret!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.no_op.? DT&. DT& pre! post! label!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.no_op.? DT&. DT& pre! post! label!)) ))))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./readonly_start_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./readonly_start) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./readonly_read_version_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./readonly_read_version) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./readonly_finish_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./readonly_finish) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./update_start_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./update_start) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./update_incr_version_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./update_incr_version) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./update_finish_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./update_finish) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./no_op_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./no_op) c))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_by.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.next_by.? DT&. DT& pre! post! label! step!) (ite (is-lib!spec.simple_log.SimpleLog.Step./readonly_start_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((op$ (lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.? DT&. DT& pre! post! label! (I rid$) op$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./readonly_read_version_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.? DT&. DT& pre! post! label! (I rid$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./readonly_finish_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((version$ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((ret$ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.? DT&. DT& pre! post! label! (I rid$) (I version$) ret$)))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_start_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./update_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((op$ (lib!spec.simple_log.SimpleLog.Step./update_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_start.? DT&. DT& pre! post! label! (I rid$) op$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.? DT&. DT& pre! post! label! (I rid$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_incr_version_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((new_version$ (lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.? DT&. DT& pre! post! label! (I new_version$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_finish_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./update_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((ret$ (lib!spec.simple_log.SimpleLog.Step./update_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_finish.? DT&. DT& pre! post! label! (I rid$) ret$))) (and (is-lib!spec.simple_log.SimpleLog.Step./no_op_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (lib!spec.simple_log.SimpleLog.impl&%4.no_op.? DT&. DT& pre! post! label!)))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.next_by.? DT&. DT& pre! post! label! step!)) ))))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.next.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.next.? DT&. DT& pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (lib!spec.simple_log.SimpleLog.impl&%4.next_by.? DT&. DT& pre! post! label! step$)) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.next_by.? DT&. DT& pre! post! label! step$)) ))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.next.? DT&. DT& pre! post! label!)) ))))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%6 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%7 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)) )))
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%8 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%9 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%12 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%13 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%14 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%15 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%17 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%18 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%19 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%20 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%21 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%22 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%23 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%24 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%25 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%26 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%27 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%28 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%29 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%30 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%31 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%32 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%33 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%35 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%36 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%37 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%38 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%39 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%43 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%44 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%45 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_version. (Dcr Type lib!spec.simple_log.SimpleLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_version. DT&. DT& s!) (lib!spec.simple_log.SimpleLog.impl&%4.inv_version.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_version. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_version. (Dcr Type lib!spec.simple_log.SimpleLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.)) (! (= (ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_version. DT&. DT& s!) (lib!spec.simple_log.SimpleLog.impl&%4.inv_version.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!))) :pattern ((ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_version. DT&. DT& s!)) )))
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_update_resp_version. (Dcr Type lib!spec.simple_log.SimpleLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_update_resp_version. DT&. DT& s!) (lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_update_resp_version. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_update_resp_version. (Dcr Type lib!spec.simple_log.SimpleLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.)) (! (= (ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_update_resp_version. DT&. DT& s!) (lib!spec.simple_log.SimpleLog.impl&%4.inv_update_resp_version.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!))) :pattern ((ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_update_resp_version. DT&. DT& s!)) )))
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_readonly_req_version. (Dcr Type lib!spec.simple_log.SimpleLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_readonly_req_version. DT&. DT& s!) (lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_readonly_req_version. DT&. DT& s!)) )))
(declare-fun ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_readonly_req_version. (Dcr Type lib!spec.simple_log.SimpleLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.)) (! (= (ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_readonly_req_version. DT&. DT& s!) (lib!spec.simple_log.SimpleLog.impl&%4.inv_readonly_req_version.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!))) :pattern ((ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_readonly_req_version. DT&. DT& s!)) )))
(declare-fun ens%lib!VERUS_layout_of_usize. () Bool)
(assert (= ens%lib!VERUS_layout_of_usize. (= (vstd!layout.size_of.? $ (UINT SZ)) 8)))
(assert (= (vstd!layout.size_of.? $ (UINT SZ)) 8))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_2.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_2.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_2.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.impl&%0.arrow_2.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_2.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_1.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_1.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_1.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_start_1.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_read_version_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_read_version_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_read_version_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_read_version_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_read_version_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_read_version_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_1.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_1.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_1.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_1.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_2.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_2.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_2.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_2.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_readonly_finish_2.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_1.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_1.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_1.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_start_1.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_add_op_to_log_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_add_op_to_log_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_add_op_to_log_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_add_op_to_log_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_add_op_to_log_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_add_op_to_log_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_incr_version_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_incr_version_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_incr_version_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_incr_version_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_incr_version_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_incr_version_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_1.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_1.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_1.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_update_finish_1.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%0.arrow_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%0.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_start.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_start.? DT&. DT& self!) (is-lib!spec.simple_log.SimpleLog.Step./readonly_start_ (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_start.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_1.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_1.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_1.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_start_1.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_read_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_read_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_read_version.? DT&. DT& self!) (is-lib!spec.simple_log.SimpleLog.Step./readonly_read_version_ (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_read_version.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_read_version_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_read_version_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_read_version_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_read_version_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_read_version_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_read_version_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_finish.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_finish.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_finish.? DT&. DT& self!) (is-lib!spec.simple_log.SimpleLog.Step./readonly_finish_ (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.is_readonly_finish.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_1.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_1.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_1.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_1.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_2.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_2.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_2.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_2.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_readonly_finish_2.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_start.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_start.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.is_update_start.? DT&. DT& self!) (is-lib!spec.simple_log.SimpleLog.Step./update_start_ (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.is_update_start.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_1.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_1.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_1.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_start_1.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_add_op_to_log.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_add_op_to_log.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.is_update_add_op_to_log.? DT&. DT& self!) (is-lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log_ (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.is_update_add_op_to_log.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_add_op_to_log_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_add_op_to_log_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_update_add_op_to_log_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_add_op_to_log_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%1.get_update_add_op_to_log_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_add_op_to_log_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_incr_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_incr_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.is_update_incr_version.? DT&. DT& self!) (is-lib!spec.simple_log.SimpleLog.Step./update_incr_version_ (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.is_update_incr_version.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_incr_version_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_incr_version_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_update_incr_version_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_incr_version_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%1.get_update_incr_version_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_incr_version_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_finish.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_update_finish.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.is_update_finish.? DT&. DT& self!) (is-lib!spec.simple_log.SimpleLog.Step./update_finish_ (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.is_update_finish.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_0.? DT&. DT& self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_1.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_1.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./update_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_1.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_update_finish_1.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_no_op.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_no_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.is_no_op.? DT&. DT& self!) (is-lib!spec.simple_log.SimpleLog.Step./no_op_ (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.is_no_op.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_dummy_to_use_type_params.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.is_dummy_to_use_type_params.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.is_dummy_to_use_type_params.? DT&. DT& self!) (is-lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params_ (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.is_dummy_to_use_type_params.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%1.get_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%1.get_dummy_to_use_type_params_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%2.arrow_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%2.arrow_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%2.arrow_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Config. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%2.arrow_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.impl&%2.arrow_0.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%2.arrow_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%2.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%2.arrow_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Config. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%2.arrow_dummy_to_use_type_params_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%3.is_initialize.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%3.is_initialize.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%3.is_initialize.? DT&. DT& self!) (is-lib!spec.simple_log.SimpleLog.Config./initialize_ (%Poly%lib!spec.simple_log.SimpleLog.Config. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%3.is_initialize.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%3.is_dummy_to_use_type_params.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%3.is_dummy_to_use_type_params.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%3.is_dummy_to_use_type_params.? DT&. DT& self!) (is-lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params_ (%Poly%lib!spec.simple_log.SimpleLog.Config. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%3.is_dummy_to_use_type_params.? DT&. DT& self!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%3.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%3.get_dummy_to_use_type_params_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!) (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Config. self!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%3.get_dummy_to_use_type_params_0.? DT&. DT& self!)) )))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize_enabled.) (forall ((DT&. Dcr) (DT& Type)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.initialize_enabled.? DT&. DT&) true) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.initialize_enabled.? DT&. DT&)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_strong.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (op! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_strong.? DT&. DT& pre! post! label! rid! op!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./Start (%I rid!) (%Poly%lib!InputOperation. (Poly%lib!InputOperation. (lib!InputOperation./Read op!))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!)) (let ((update_tmp_readonly_reqs$1 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) update_tmp_readonly_reqs$ rid! (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Init op!))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$1) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_strong.? DT&. DT& pre! post! label! rid! op!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (label! Poly) (rid! Poly) (op! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_enabled.? DT&. DT& pre! label! rid! op!) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./Start (%I rid!) (%Poly%lib!InputOperation. (Poly%lib!InputOperation. (lib!InputOperation./Read op!))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!)))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_enabled.? DT&. DT& pre! label! rid! op!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_strong.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_strong.? DT&. DT& pre! post! label! rid!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!)))) (and (and (is-lib!spec.simple_log.ReadReq./Init_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) true)) (let ((op$ (ite (is-lib!spec.simple_log.ReadReq./Init_ tmp_for_match_0$) (let ((op$2 (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) op$2) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&))))) (let ((update_tmp_readonly_reqs$1 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) update_tmp_readonly_reqs$ rid! (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Req (%I (I (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) op$))))) (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$1))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_strong.? DT&. DT& pre! post! label! rid!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (label! Poly) (rid! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_enabled.? DT&. DT& pre! label! rid!) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!) (let ((tmp_for_match_0$ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!)))) (and (is-lib!spec.simple_log.ReadReq./Init_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) true)))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_enabled.? DT&. DT& pre! label! rid!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_strong.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (version! Poly) (ret! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_strong.? DT&. DT& pre! post! label! rid! version! ret!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./End (%I rid!) (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. (lib!OutputOperation./Read ret!))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!)))) (and (and (is-lib!spec.simple_log.ReadReq./Req_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (let ((current$ (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!spec.simple_log.ReadReq./Req_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (let ((current$ (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (tuple%2./tuple%2 op$ (I current$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT)))))) (let ((op$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((current$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (and (<= current$ (%I version!)) (<= (%I version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))))) (and (<= (%I version!) (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) (and (= ret! (lib!Dispatch.dispatch_spec.? DT&. DT& (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& pre! version!) op$)) (let ((update_tmp_readonly_reqs$ (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!))) (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$)))))))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_strong.? DT&. DT& pre! post! label! rid! version! ret!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (label! Poly) (rid! Poly) (version! Poly) (ret! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_enabled.? DT&. DT& pre! label! rid! version! ret!) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./End (%I rid!) (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. (lib!OutputOperation./Read ret!))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!) (let ((tmp_for_match_0$ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!)))) (and (and (is-lib!spec.simple_log.ReadReq./Req_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (let ((current$ (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!spec.simple_log.ReadReq./Req_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (let ((current$ (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (tuple%2./tuple%2 op$ (I current$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT)))))) (let ((op$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((current$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (and (<= current$ (%I version!)) (<= (%I version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))))) (and (<= (%I version!) (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) (= ret! (lib!Dispatch.dispatch_spec.? DT&. DT& (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& pre! version!) op$)))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_enabled.? DT&. DT& pre! label! rid! version! ret!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start_strong.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (op! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_start_strong.? DT&. DT& pre! post! label! rid! op!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./Start (%I rid!) (%Poly%lib!InputOperation. (Poly%lib!InputOperation. (lib!InputOperation./Write op!))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!)) (let ((update_tmp_update_reqs$1 (vstd!map.impl&%0.insert.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) update_tmp_update_reqs$ rid! op!))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$1) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_start_strong.? DT&. DT& pre! post! label! rid! op!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (label! Poly) (rid! Poly) (op! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_start_enabled.? DT&. DT& pre! label! rid! op!) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./Start (%I rid!) (%Poly%lib!InputOperation. (Poly%lib!InputOperation. (lib!InputOperation./Write op!))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!)))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_start_enabled.? DT&. DT& pre! label! rid! op!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_strong.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_strong.? DT&. DT& pre! post! label! rid!) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!) (let ((update_tmp_log$ (vstd!seq.Seq.push.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!)))) (let ((update_tmp_update_reqs$ (vstd!map.impl&%0.remove.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!))) (let ((update_tmp_update_resps$ (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid! (Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp./UpdateResp (%I (I (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))))))))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_strong.? DT&. DT& pre! post! label! rid!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (label! Poly) (rid! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_enabled.? DT&. DT& pre! label! rid!) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_enabled.? DT&. DT& pre! label! rid!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_strong.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (new_version! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_strong.? DT&. DT& pre! post! label! new_version!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (and (<= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (%I new_version!)) (<= (%I new_version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))))) (let ((update_tmp_version$ (%I new_version!))) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_strong.? DT&. DT& pre! post! label! new_version!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (label! Poly) (new_version! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_enabled.? DT&. DT& pre! label! new_version!) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (<= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (%I new_version!)) (<= (%I new_version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_enabled.? DT&. DT& pre! label! new_version!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish_strong.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (ret! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_finish_strong.? DT&. DT& pre! post! label! rid! ret!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./End (%I rid!) (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. (lib!OutputOperation./Write ret!))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!) (and (let ((uidx$ (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!))))) (and (let ((tmp%%$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (< uidx$ tmp%%$) (<= tmp%%$ (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))))) (and (= ret! (tuple%2./tuple%2/1 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& pre! (I uidx$)) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (I uidx$)))))) (let ((update_tmp_update_resps$ (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)))) (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_finish_strong.? DT&. DT& pre! post! label! rid! ret!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (label! Poly) (rid! Poly) (ret! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_finish_enabled.? DT&. DT& pre! label! rid! ret!) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./End (%I rid!) (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. (lib!OutputOperation./Write ret!))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!) (let ((uidx$ (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!))))) (and (let ((tmp%%$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (< uidx$ tmp%%$) (<= tmp%%$ (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))))) (= ret! (tuple%2./tuple%2/1 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& pre! (I uidx$)) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (I uidx$))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_finish_enabled.? DT&. DT& pre! label! rid! ret!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op_strong.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.no_op_strong.? DT&. DT& pre! post! label!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.no_op_strong.? DT&. DT& pre! post! label!)) ))))
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op_enabled.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op_enabled.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (label! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.no_op_enabled.? DT&. DT& pre! label!) (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.no_op_enabled.? DT&. DT& pre! label!)) ))))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_strong_by.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.next_strong_by.? DT&. DT& pre! post! label! step!) (ite (is-lib!spec.simple_log.SimpleLog.Step./readonly_start_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((op$ (lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_strong.? DT&. DT& pre! post! label! (I rid$) op$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./readonly_read_version_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_strong.? DT&. DT& pre! post! label! (I rid$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./readonly_finish_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((version$ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((ret$ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_strong.? DT&. DT& pre! post! label! (I rid$) (I version$) ret$)))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_start_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./update_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((op$ (lib!spec.simple_log.SimpleLog.Step./update_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_start_strong.? DT&. DT& pre! post! label! (I rid$) op$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_strong.? DT&. DT& pre! post! label! (I rid$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_incr_version_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((new_version$ (lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_strong.? DT&. DT& pre! post! label! (I new_version$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_finish_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./update_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((ret$ (lib!spec.simple_log.SimpleLog.Step./update_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_finish_strong.? DT&. DT& pre! post! label! (I rid$) ret$))) (and (is-lib!spec.simple_log.SimpleLog.Step./no_op_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (lib!spec.simple_log.SimpleLog.impl&%4.no_op_strong.? DT&. DT& pre! post! label!)))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.next_strong_by.? DT&. DT& pre! post! label! step!)) ))))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_strong.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.next_strong.? DT&. DT& pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (lib!spec.simple_log.SimpleLog.impl&%4.next_strong_by.? DT&. DT& pre! post! label! step$)) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.next_strong_by.? DT&. DT& pre! post! label! step$)) ))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.next_strong.? DT&. DT& pre! post! label!)) ))))
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.initialize_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State.) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (post! lib!spec.simple_log.SimpleLog.State.)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.initialize_inductive. DT&. DT& post!) (=> %%global_location_label%%46 (lib!spec.simple_log.SimpleLog.impl&%4.initialize.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. post!)))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.initialize_inductive. DT&. DT& post!)) )))
(declare-fun ens%lib!spec.simple_log.SimpleLog.impl&%4.initialize_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (post! lib!spec.simple_log.SimpleLog.State.)) (! (= (ens%lib!spec.simple_log.SimpleLog.impl&%4.initialize_inductive. DT&. DT& post!) (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. post!))) :pattern ((ens%lib!spec.simple_log.SimpleLog.impl&%4.initialize_inductive. DT&. DT& post!)) )))
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (rid! Int) (op! Poly)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_inductive. DT&. DT& pre! post! label! rid! op!) (=> %%global_location_label%%47 (and (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_strong.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!) (Poly%lib!spec.simple_log.SimpleLog.State. post!) (Poly%lib!AsyncLabel. label!) (I rid!) op!)))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_inductive. DT&. DT& pre! post! label! rid! op!)) )))
(declare-fun ens%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (rid! Int) (op! Poly)) (! (= (ens%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_inductive. DT&. DT& pre! post! label! rid! op!) (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. post!))) :pattern ((ens%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start_inductive. DT&. DT& pre! post! label! rid! op!)) )))
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (rid! Int)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_inductive. DT&. DT& pre! post! label! rid!) (=> %%global_location_label%%48 (and (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_strong.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!) (Poly%lib!spec.simple_log.SimpleLog.State. post!) (Poly%lib!AsyncLabel. label!) (I rid!))))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_inductive. DT&. DT& pre! post! label! rid!)) )))
(declare-fun ens%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (rid! Int)) (! (= (ens%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_inductive. DT&. DT& pre! post! label! rid!) (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. post!))) :pattern ((ens%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version_inductive. DT&. DT& pre! post! label! rid!)) )))
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int Int Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (rid! Int) (version! Int) (ret! Poly)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_inductive. DT&. DT& pre! post! label! rid! version! ret!) (=> %%global_location_label%%49 (and (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_strong.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!) (Poly%lib!spec.simple_log.SimpleLog.State. post!) (Poly%lib!AsyncLabel. label!) (I rid!) (I version!) ret!)))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_inductive. DT&. DT& pre! post! label! rid! version! ret!)) )))
(declare-fun ens%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int Int Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (rid! Int) (version! Int) (ret! Poly)) (! (= (ens%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_inductive. DT&. DT& pre! post! label! rid! version! ret!) (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. post!))) :pattern ((ens%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish_inductive. DT&. DT& pre! post! label! rid! version! ret!)) )))
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.update_start_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (rid! Int) (op! Poly)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.update_start_inductive. DT&. DT& pre! post! label! rid! op!) (=> %%global_location_label%%50 (and (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (lib!spec.simple_log.SimpleLog.impl&%4.update_start_strong.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!) (Poly%lib!spec.simple_log.SimpleLog.State. post!) (Poly%lib!AsyncLabel. label!) (I rid!) op!)))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.update_start_inductive. DT&. DT& pre! post! label! rid! op!)) )))
(declare-fun ens%lib!spec.simple_log.SimpleLog.impl&%4.update_start_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (rid! Int) (op! Poly)) (! (= (ens%lib!spec.simple_log.SimpleLog.impl&%4.update_start_inductive. DT&. DT& pre! post! label! rid! op!) (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. post!))) :pattern ((ens%lib!spec.simple_log.SimpleLog.impl&%4.update_start_inductive. DT&. DT& pre! post! label! rid! op!)) )))
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int) Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (rid! Int)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_inductive. DT&. DT& pre! post! label! rid!) (=> %%global_location_label%%51 (and (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_strong.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!) (Poly%lib!spec.simple_log.SimpleLog.State. post!) (Poly%lib!AsyncLabel. label!) (I rid!))))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_inductive. DT&. DT& pre! post! label! rid!)) )))
(declare-fun ens%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (rid! Int)) (! (= (ens%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_inductive. DT&. DT& pre! post! label! rid!) (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. post!))) :pattern ((ens%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log_inductive. DT&. DT& pre! post! label! rid!)) )))
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (new_version! Int)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_inductive. DT&. DT& pre! post! label! new_version!) (=> %%global_location_label%%52 (and (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_strong.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!) (Poly%lib!spec.simple_log.SimpleLog.State. post!) (Poly%lib!AsyncLabel. label!) (I new_version!))))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_inductive. DT&. DT& pre! post! label! new_version!)) )))
(declare-fun ens%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_inductive. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre! lib!spec.simple_log.SimpleLog.State.) (post! lib!spec.simple_log.SimpleLog.State.) (label! lib!AsyncLabel.) (new_version! Int)) (! (= (ens%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_inductive. DT&. DT& pre! post! label! new_version!) (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. post!))) :pattern ((ens%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_inductive. DT&. DT& pre! post! label! new_version!)) )))
(declare-const DT&. Dcr)
(declare-const DT& Type)
(declare-const pre! lib!spec.simple_log.SimpleLog.State.)
(declare-const post! lib!spec.simple_log.SimpleLog.State.)
(declare-const label! lib!AsyncLabel.)
(declare-const new_version! Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!spec.simple_log.SimpleLog.State. pre!) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)))
(assert (has_type (Poly%lib!spec.simple_log.SimpleLog.State. post!) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)))
(assert (has_type (Poly%lib!AsyncLabel. label!) (TYPE%lib!AsyncLabel. DT&. DT&)))
(assert (<= 0 new_version!))
(assert (tr_bound%lib!Dispatch. DT&. DT&))
(assert (and (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version_strong.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. pre!) (Poly%lib!spec.simple_log.SimpleLog.State. post!) (Poly%lib!AsyncLabel. label!) (I new_version!))))
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(declare-const %%location_label%%3 Bool)
(assert (not (and (=> %%location_label%%0 (req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_version. DT&. DT& post!)) (=> (ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_version. DT&. DT& post!) (and (=> %%location_label%%1 (req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_update_resp_version. DT&. DT& post!)) (=> (ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_update_resp_version. DT&. DT& post!) (and (=> %%location_label%%2 (req%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_readonly_req_version. DT&. DT& post!)) (=> (ens%lib!spec.simple_log.SimpleLog.impl&%4.lemma_msg_inv_readonly_req_version. DT&. DT& post!) (=> %%location_label%%3 (lib!spec.simple_log.SimpleLog.impl&%4.invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. post!)))))))))))
(check-sat)
(exit)
