(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module spec::unbounded_log'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%lib!spec.utils.seq_to_set. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_Init. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_VersionUpperBound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_ReadyToRead. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.is_Done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Done_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Done_node_id. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%1.arrow_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%1.arrow_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_node_id. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_version_upper_bound. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_node_id. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%2.op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Init. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Placed. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Placed_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Applied. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Applied_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Applied_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Done_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%4.arrow_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%4.arrow_Placed_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%4.arrow_Placed_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%4.arrow_Applied_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%4.arrow_Applied_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%4.arrow_Done_ret. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%4.arrow_Done_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.is_Ready. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.is_Placed. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.is_LoadedLocalVersion. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_lversion. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.is_Loop. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.is_UpdatedVersion. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_tail. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%6.arrow_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%6.arrow_Placed_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_lversion. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_lversion. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_idx. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_tail. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_tail. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%7.queued_ops. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%7.queued_ops_set. FuelId)
(declare-const fuel%lib!spec.unbounded_log.combiner_request_ids. FuelId)
(declare-const fuel%lib!spec.unbounded_log.combiner_request_id_fresh. FuelId)
(declare-const fuel%lib!spec.unbounded_log.get_fresh_nat. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogNoEntriesFromHere. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogRangeNoNodeId. FuelId)
(declare-const fuel%lib!spec.unbounded_log.LogRangeMatchesQueue. FuelId)
(declare-const fuel%lib!spec.unbounded_log.QueueRidsUpdateDone. FuelId)
(declare-const fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced. FuelId)
(declare-const fuel%lib!spec.unbounded_log.compute_nrstate_at_version. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.impl&%0.choose. fuel%vstd!set_lib.impl&%0.is_empty. fuel%lib!spec.utils.seq_to_set. fuel%lib!spec.unbounded_log.impl&%0.is_Init. fuel%lib!spec.unbounded_log.impl&%0.get_Init_op. fuel%lib!spec.unbounded_log.impl&%0.is_VersionUpperBound. fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op. fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound. fuel%lib!spec.unbounded_log.impl&%0.is_ReadyToRead. fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op. fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_version_upper_bound. fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id. fuel%lib!spec.unbounded_log.impl&%0.is_Done. fuel%lib!spec.unbounded_log.impl&%0.get_Done_op. fuel%lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound. fuel%lib!spec.unbounded_log.impl&%0.get_Done_node_id. fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret. fuel%lib!spec.unbounded_log.impl&%1.arrow_ret. fuel%lib!spec.unbounded_log.impl&%1.arrow_Init_op. fuel%lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_op. fuel%lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_version_upper_bound. fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_op. fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_version_upper_bound. fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_node_id. fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_op. fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_version_upper_bound. fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_node_id. fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_ret. fuel%lib!spec.unbounded_log.impl&%2.op. fuel%lib!spec.unbounded_log.impl&%3.is_Init. fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. fuel%lib!spec.unbounded_log.impl&%3.is_Placed. fuel%lib!spec.unbounded_log.impl&%3.get_Placed_op. fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx. fuel%lib!spec.unbounded_log.impl&%3.is_Applied. fuel%lib!spec.unbounded_log.impl&%3.get_Applied_ret. fuel%lib!spec.unbounded_log.impl&%3.get_Applied_idx. fuel%lib!spec.unbounded_log.impl&%3.is_Done. fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. fuel%lib!spec.unbounded_log.impl&%3.get_Done_idx. fuel%lib!spec.unbounded_log.impl&%4.arrow_Init_op. fuel%lib!spec.unbounded_log.impl&%4.arrow_Placed_op. fuel%lib!spec.unbounded_log.impl&%4.arrow_Placed_idx. fuel%lib!spec.unbounded_log.impl&%4.arrow_Applied_ret. fuel%lib!spec.unbounded_log.impl&%4.arrow_Applied_idx. fuel%lib!spec.unbounded_log.impl&%4.arrow_Done_ret. fuel%lib!spec.unbounded_log.impl&%4.arrow_Done_idx. fuel%lib!spec.unbounded_log.impl&%5.is_Ready. fuel%lib!spec.unbounded_log.impl&%5.is_Placed. fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops. fuel%lib!spec.unbounded_log.impl&%5.is_LoadedLocalVersion. fuel%lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_queued_ops. fuel%lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_lversion. fuel%lib!spec.unbounded_log.impl&%5.is_Loop. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx. fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail. fuel%lib!spec.unbounded_log.impl&%5.is_UpdatedVersion. fuel%lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_queued_ops. fuel%lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_tail. fuel%lib!spec.unbounded_log.impl&%6.arrow_idx. fuel%lib!spec.unbounded_log.impl&%6.arrow_Placed_queued_ops. fuel%lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_queued_ops. fuel%lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_lversion. fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_queued_ops. fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_lversion. fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_idx. fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_tail. fuel%lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_queued_ops. fuel%lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_tail. fuel%lib!spec.unbounded_log.impl&%7.queued_ops. fuel%lib!spec.unbounded_log.impl&%7.queued_ops_set. fuel%lib!spec.unbounded_log.combiner_request_ids. fuel%lib!spec.unbounded_log.combiner_request_id_fresh. fuel%lib!spec.unbounded_log.get_fresh_nat. fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere. fuel%lib!spec.unbounded_log.LogNoEntriesFromHere. fuel%lib!spec.unbounded_log.LogRangeNoNodeId. fuel%lib!spec.unbounded_log.LogRangeMatchesQueue. fuel%lib!spec.unbounded_log.QueueRidsUpdateDone. fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced. fuel%lib!spec.unbounded_log.compute_nrstate_at_version.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%lib!Dispatch./ReadOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./ReadOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./WriteOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./WriteOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./Response (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./Response (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./View (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./View (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. 0)
(declare-sort vstd!seq.Seq<nat.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-datatypes ((lib!spec.types.LogEntry. 0) (lib!spec.unbounded_log.ReadonlyState. 0) (lib!spec.unbounded_log.UpdateState. 0) (lib!spec.unbounded_log.CombinerState. 0) (tuple%0. 0) (tuple%2. 0)) (((lib!spec.types.LogEntry./LogEntry (lib!spec.types.LogEntry./LogEntry/?op Poly) (lib!spec.types.LogEntry./LogEntry/?node_id Int))) ((lib!spec.unbounded_log.ReadonlyState./Init (lib!spec.unbounded_log.ReadonlyState./Init/?op Poly)) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?op Poly) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?version_upper_bound Int)) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?op Poly) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?version_upper_bound Int) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?node_id Int)) (lib!spec.unbounded_log.ReadonlyState./Done (lib!spec.unbounded_log.ReadonlyState./Done/?op Poly) (lib!spec.unbounded_log.ReadonlyState./Done/?version_upper_bound Int) (lib!spec.unbounded_log.ReadonlyState./Done/?node_id Int) (lib!spec.unbounded_log.ReadonlyState./Done/?ret Poly))) ((lib!spec.unbounded_log.UpdateState./Init (lib!spec.unbounded_log.UpdateState./Init/?op Poly)) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.unbounded_log.UpdateState./Placed/?op Poly) (lib!spec.unbounded_log.UpdateState./Placed/?idx Int)) (lib!spec.unbounded_log.UpdateState./Applied (lib!spec.unbounded_log.UpdateState./Applied/?ret Poly) (lib!spec.unbounded_log.UpdateState./Applied/?idx Int)) (lib!spec.unbounded_log.UpdateState./Done (lib!spec.unbounded_log.UpdateState./Done/?ret Poly) (lib!spec.unbounded_log.UpdateState./Done/?idx Int))) ((lib!spec.unbounded_log.CombinerState./Ready ) (lib!spec.unbounded_log.CombinerState./Placed (lib!spec.unbounded_log.CombinerState./Placed/?queued_ops vstd!seq.Seq<nat.>.)) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?lversion Int)) (lib!spec.unbounded_log.CombinerState./Loop (lib!spec.unbounded_log.CombinerState./Loop/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./Loop/?lversion Int) (lib!spec.unbounded_log.CombinerState./Loop/?idx Int) (lib!spec.unbounded_log.CombinerState./Loop/?tail Int)) (lib!spec.unbounded_log.CombinerState./UpdatedVersion (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?queued_ops vstd!seq.Seq<nat.>.) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?tail Int))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun lib!spec.types.LogEntry./LogEntry/op (lib!spec.types.LogEntry.) Poly)
(declare-fun lib!spec.types.LogEntry./LogEntry/node_id (lib!spec.types.LogEntry.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Init/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/op (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/node_id (lib!spec.unbounded_log.ReadonlyState.) Int)
(declare-fun lib!spec.unbounded_log.ReadonlyState./Done/ret (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Init/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Placed/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/lversion (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/idx (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./Loop/tail (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (lib!spec.unbounded_log.CombinerState.) vstd!seq.Seq<nat.>.)
(declare-fun lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (lib!spec.unbounded_log.CombinerState.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.types.LogEntry. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.ReadonlyState. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UpdateState. (Dcr Type) Type)
(declare-const TYPE%lib!spec.unbounded_log.CombinerState. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly) vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)
(declare-fun Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq<nat.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<nat.>. (Poly) vstd!seq.Seq<nat.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry.) Poly)
(declare-fun %Poly%lib!spec.types.LogEntry. (Poly) lib!spec.types.LogEntry.)
(declare-fun Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.ReadonlyState. (Poly) lib!spec.unbounded_log.ReadonlyState.)
(declare-fun Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UpdateState. (Poly) lib!spec.unbounded_log.UpdateState.)
(declare-fun Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.CombinerState. (Poly) lib!spec.unbounded_log.CombinerState.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.)) (= x (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.))) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (= x (%Poly%vstd!seq.Seq<nat.>. (Poly%vstd!seq.Seq<nat.>. x))) :pattern ((Poly%vstd!seq.Seq<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ NAT)) (= x (Poly%vstd!seq.Seq<nat.>. (%Poly%vstd!seq.Seq<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!seq.Seq<nat.>.)) (! (has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT)) :pattern ((has_type (Poly%vstd!seq.Seq<nat.>. x) (TYPE%vstd!seq.Seq. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= x (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. x))) :pattern ((Poly%lib!spec.types.LogEntry. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (= x (Poly%lib!spec.types.LogEntry. (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _node_id!)) (has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.types.LogEntry. (lib!spec.types.LogEntry./LogEntry _op! _node_id!)) (TYPE%lib!spec.types.LogEntry. DT&. DT&))) )))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/op x) (lib!spec.types.LogEntry./LogEntry/?op x)) :pattern ((lib!spec.types.LogEntry./LogEntry/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (has_type (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))) )))
(assert (forall ((x lib!spec.types.LogEntry.)) (! (= (lib!spec.types.LogEntry./LogEntry/node_id x) (lib!spec.types.LogEntry./LogEntry/?node_id x)) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&)) (<= 0 (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)))) :pattern ((lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. x)) (has_type x (TYPE%lib!spec.types.LogEntry. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= x (%Poly%lib!spec.unbounded_log.ReadonlyState. (Poly%lib!spec.unbounded_log.ReadonlyState. x))) :pattern ((Poly%lib!spec.unbounded_log.ReadonlyState. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.ReadonlyState. (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly)) (! (=> (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init _op!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Init _op!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Init/op x) (lib!spec.unbounded_log.ReadonlyState./Init/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Init/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound _op! _version_upper_bound!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound _op! _version_upper_bound!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op x) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int) (_node_id! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!) (<= 0 _node_id!)) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead _op! _version_upper_bound! _node_id!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./ReadyToRead _op! _version_upper_bound! _node_id!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id x) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/?node_id x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_version_upper_bound! Int) (_node_id! Int) (_ret! Poly)) (! (=> (and (has_type _op! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (<= 0 _version_upper_bound!) (<= 0 _node_id!) (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done _op! _version_upper_bound! _node_id! _ret!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.ReadonlyState. (lib!spec.unbounded_log.ReadonlyState./Done _op! _version_upper_bound! _node_id! _ret!)) (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/op x) (lib!spec.unbounded_log.ReadonlyState./Done/?op x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound x) (lib!spec.unbounded_log.ReadonlyState./Done/?version_upper_bound x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/node_id x) (lib!spec.unbounded_log.ReadonlyState./Done/?node_id x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/node_id x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.ReadonlyState.)) (! (= (lib!spec.unbounded_log.ReadonlyState./Done/ret x) (lib!spec.unbounded_log.ReadonlyState./Done/?ret x)) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/ret x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. x)) (has_type x (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= x (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. x))) :pattern ((Poly%lib!spec.unbounded_log.UpdateState. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UpdateState. (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly)) (! (=> (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Init/op x) (lib!spec.unbounded_log.UpdateState./Init/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_idx! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/op x) (lib!spec.unbounded_log.UpdateState./Placed/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/idx x) (lib!spec.unbounded_log.UpdateState./Placed/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/ret x) (lib!spec.unbounded_log.UpdateState./Applied/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/idx x) (lib!spec.unbounded_log.UpdateState./Applied/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/ret x) (lib!spec.unbounded_log.UpdateState./Done/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/idx x) (lib!spec.unbounded_log.UpdateState./Done/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= x (%Poly%lib!spec.unbounded_log.CombinerState. (Poly%lib!spec.unbounded_log.CombinerState. x))) :pattern ((Poly%lib!spec.unbounded_log.CombinerState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (= x (Poly%lib!spec.unbounded_log.CombinerState. (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (has_type (Poly%lib!spec.unbounded_log.CombinerState. lib!spec.unbounded_log.CombinerState./Ready) TYPE%lib!spec.unbounded_log.CombinerState.))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.)) (! (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed _queued_ops!)) TYPE%lib!spec.unbounded_log.CombinerState.) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Placed _queued_ops!)) TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Placed/queued_ops x) (lib!spec.unbounded_log.CombinerState./Placed/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./Placed/queued_ops x)) )))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_lversion! Int)) (! (=> (<= 0 _lversion!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion _queued_ops! _lversion!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion _queued_ops! _lversion!)) TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops x) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops x)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion x) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/?lversion x)) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_lversion! Int) (_idx! Int) (_tail! Int)) (! (=> (and (<= 0 _lversion!) (<= 0 _idx!) (<= 0 _tail!)) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop _queued_ops! _lversion! _idx! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./Loop _queued_ops! _lversion! _idx! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/queued_ops x) (lib!spec.unbounded_log.CombinerState./Loop/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/queued_ops x)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/lversion x) (lib!spec.unbounded_log.CombinerState./Loop/?lversion x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/lversion x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/idx x) (lib!spec.unbounded_log.CombinerState./Loop/?idx x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/idx x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./Loop/tail x) (lib!spec.unbounded_log.CombinerState./Loop/?tail x)) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/tail x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((_queued_ops! vstd!seq.Seq<nat.>.) (_tail! Int)) (! (=> (<= 0 _tail!) (has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion _queued_ops! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) :pattern ((has_type (Poly%lib!spec.unbounded_log.CombinerState. (lib!spec.unbounded_log.CombinerState./UpdatedVersion _queued_ops! _tail!)) TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops x) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?queued_ops x)) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops x)) )))
(assert (forall ((x lib!spec.unbounded_log.CombinerState.)) (! (= (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail x) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/?tail x)) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)))) :pattern ((lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. x)) (has_type x TYPE%lib!spec.unbounded_log.CombinerState.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%lib!Dispatch. (Dcr Type) Bool)
(set-info :comment ";; Function-Decl vstd::layout::size_of")
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::filter")
(declare-fun vstd!seq_lib.impl&%0.filter.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::is_empty")
(declare-fun vstd!set_lib.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::utils::seq_to_set")
(declare-fun lib!spec.utils.seq_to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::is_Init")
(declare-fun lib!spec.unbounded_log.impl&%0.is_Init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_Init_op")
(declare-fun lib!spec.unbounded_log.impl&%0.get_Init_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::is_VersionUpperBound")
(declare-fun lib!spec.unbounded_log.impl&%0.is_VersionUpperBound.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_VersionUpperBound_op")
(declare-fun lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_VersionUpperBound_version_upper_bound")
(declare-fun lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::is_ReadyToRead")
(declare-fun lib!spec.unbounded_log.impl&%0.is_ReadyToRead.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_ReadyToRead_op")
(declare-fun lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_ReadyToRead_version_upper_bound")
(declare-fun lib!spec.unbounded_log.impl&%0.get_ReadyToRead_version_upper_bound.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_ReadyToRead_node_id")
(declare-fun lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::is_Done")
(declare-fun lib!spec.unbounded_log.impl&%0.is_Done.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_Done_op")
(declare-fun lib!spec.unbounded_log.impl&%0.get_Done_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_Done_version_upper_bound")
(declare-fun lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_Done_node_id")
(declare-fun lib!spec.unbounded_log.impl&%0.get_Done_node_id.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::get_Done_ret")
(declare-fun lib!spec.unbounded_log.impl&%0.get_Done_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::arrow_ret")
(declare-fun lib!spec.unbounded_log.impl&%1.arrow_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::arrow_Init_op")
(declare-fun lib!spec.unbounded_log.impl&%1.arrow_Init_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::arrow_VersionUpperBound_op")
(declare-fun lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::arrow_VersionUpperBound_version_upper_bound")
(declare-fun lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_version_upper_bound.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::arrow_ReadyToRead_op")
(declare-fun lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::arrow_ReadyToRead_version_upper_bound")
(declare-fun lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_version_upper_bound.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::arrow_ReadyToRead_node_id")
(declare-fun lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_node_id.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::arrow_Done_op")
(declare-fun lib!spec.unbounded_log.impl&%1.arrow_Done_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::arrow_Done_version_upper_bound")
(declare-fun lib!spec.unbounded_log.impl&%1.arrow_Done_version_upper_bound.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::arrow_Done_node_id")
(declare-fun lib!spec.unbounded_log.impl&%1.arrow_Done_node_id.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::arrow_Done_ret")
(declare-fun lib!spec.unbounded_log.impl&%1.arrow_Done_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::ReadonlyState::op")
(declare-fun lib!spec.unbounded_log.impl&%2.op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Init")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Init_op")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Init_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Placed")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Placed.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Placed_op")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Placed_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Placed_idx")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Placed_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Applied")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Applied.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Applied_ret")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Applied_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Applied_idx")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Applied_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Done")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Done.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Done_ret")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Done_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Done_idx")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Done_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::arrow_Init_op")
(declare-fun lib!spec.unbounded_log.impl&%4.arrow_Init_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::arrow_Placed_op")
(declare-fun lib!spec.unbounded_log.impl&%4.arrow_Placed_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::arrow_Placed_idx")
(declare-fun lib!spec.unbounded_log.impl&%4.arrow_Placed_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::arrow_Applied_ret")
(declare-fun lib!spec.unbounded_log.impl&%4.arrow_Applied_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::arrow_Applied_idx")
(declare-fun lib!spec.unbounded_log.impl&%4.arrow_Applied_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::arrow_Done_ret")
(declare-fun lib!spec.unbounded_log.impl&%4.arrow_Done_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::arrow_Done_idx")
(declare-fun lib!spec.unbounded_log.impl&%4.arrow_Done_idx.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::is_Ready")
(declare-fun lib!spec.unbounded_log.impl&%5.is_Ready.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::is_Placed")
(declare-fun lib!spec.unbounded_log.impl&%5.is_Placed.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Placed_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::is_LoadedLocalVersion")
(declare-fun lib!spec.unbounded_log.impl&%5.is_LoadedLocalVersion.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_LoadedLocalVersion_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_LoadedLocalVersion_lversion")
(declare-fun lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_lversion.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::is_Loop")
(declare-fun lib!spec.unbounded_log.impl&%5.is_Loop.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_lversion")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_idx")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_idx.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_Loop_tail")
(declare-fun lib!spec.unbounded_log.impl&%5.get_Loop_tail.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::is_UpdatedVersion")
(declare-fun lib!spec.unbounded_log.impl&%5.is_UpdatedVersion.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_UpdatedVersion_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::get_UpdatedVersion_tail")
(declare-fun lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_tail.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::arrow_idx")
(declare-fun lib!spec.unbounded_log.impl&%6.arrow_idx.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::arrow_Placed_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%6.arrow_Placed_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::arrow_LoadedLocalVersion_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::arrow_LoadedLocalVersion_lversion")
(declare-fun lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_lversion.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::arrow_Loop_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%6.arrow_Loop_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::arrow_Loop_lversion")
(declare-fun lib!spec.unbounded_log.impl&%6.arrow_Loop_lversion.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::arrow_Loop_idx")
(declare-fun lib!spec.unbounded_log.impl&%6.arrow_Loop_idx.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::arrow_Loop_tail")
(declare-fun lib!spec.unbounded_log.impl&%6.arrow_Loop_tail.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::arrow_UpdatedVersion_queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::arrow_UpdatedVersion_tail")
(declare-fun lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_tail.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::queued_ops")
(declare-fun lib!spec.unbounded_log.impl&%7.queued_ops.? (Poly) vstd!seq.Seq<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::CombinerState::queued_ops_set")
(declare-fun lib!spec.unbounded_log.impl&%7.queued_ops_set.? (Poly) vstd!set.Set<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::combiner_request_ids")
(declare-fun lib!spec.unbounded_log.combiner_request_ids.? (Poly) vstd!set.Set<nat.>.)
(declare-fun lib!spec.unbounded_log.rec%combiner_request_ids.? (Poly Fuel) vstd!set.Set<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::combiner_request_id_fresh")
(declare-fun lib!spec.unbounded_log.combiner_request_id_fresh.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::get_fresh_nat")
(declare-fun lib!spec.unbounded_log.get_fresh_nat.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogContainsEntriesUpToHere")
(declare-fun lib!spec.unbounded_log.LogContainsEntriesUpToHere.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogNoEntriesFromHere")
(declare-fun lib!spec.unbounded_log.LogNoEntriesFromHere.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogRangeNoNodeId")
(declare-fun lib!spec.unbounded_log.LogRangeNoNodeId.? (Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.unbounded_log.rec%LogRangeNoNodeId.? (Dcr Type Poly Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::LogRangeMatchesQueue")
(declare-fun lib!spec.unbounded_log.LogRangeMatchesQueue.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? (Dcr Type Poly Poly Poly Poly Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::QueueRidsUpdateDone")
(declare-fun lib!spec.unbounded_log.QueueRidsUpdateDone.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::QueueRidsUpdatePlaced")
(declare-fun lib!spec.unbounded_log.QueueRidsUpdatePlaced.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::compute_nrstate_at_version")
(declare-fun lib!spec.unbounded_log.compute_nrstate_at_version.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.unbounded_log.rec%compute_nrstate_at_version.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::init_spec")
(declare-fun lib!Dispatch.init_spec.? (Dcr Type) Poly)
(declare-fun lib!Dispatch.init_spec%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::dispatch_mut_spec")
(declare-fun lib!Dispatch.dispatch_mut_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_mut_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Axioms lib::Dispatch::init_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!Dispatch.init_spec.? Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&)) :pattern ((lib!Dispatch.init_spec.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms lib::Dispatch::dispatch_mut_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (ds! Poly) (op! Poly)) (! (=> (and (has_type ds! (proj%lib!Dispatch./View Self%&. Self%&)) (has_type op! (proj%lib!Dispatch./WriteOperation Self%&. Self%&))) (has_type (lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!) (TYPE%tuple%2. (proj%%lib!Dispatch./View Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&) (proj%%lib!Dispatch./Response Self%&. Self%&) (proj%lib!Dispatch./Response Self%&. Self%&)))) :pattern ((lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Init")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Init.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Init_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Init) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Init.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Init.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Init.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Init_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Done")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Done.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Done_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Done) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Done.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Done_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::is_Init")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_Init.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./Init_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./Init) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_Init.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_Init.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./Init_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_Init.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_Init_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Init_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::is_Done")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_Done.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./Done_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./Done) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_Done.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_Done.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./Done_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_Done.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_Done_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_ret.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeNoNodeId")
(declare-fun req%lib!spec.unbounded_log.LogRangeNoNodeId. (Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly)) (! (= (req%lib!spec.unbounded_log.LogRangeNoNodeId. DT&. DT& log! start! end! node_id!) (=> %%global_location_label%%3 (<= (%I start!) (%I end!)))) :pattern ((req%lib!spec.unbounded_log.LogRangeNoNodeId. DT&. DT& log! start! end! node_id!)) )))
(set-info :comment ";; Spec-Termination lib::spec::unbounded_log::LogRangeNoNodeId")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1380:1: 1385:10 (#0)")
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogRangeNoNodeId")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogRangeNoNodeId.))
(declare-const fuel_nat%lib!spec.unbounded_log.LogRangeNoNodeId. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly) (fuel% Fuel)) (! (= (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! fuel%) (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! zero)) :pattern ((lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! fuel%)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type start! NAT) (has_type end! NAT) (has_type node_id! NAT) (<= (%I start!) (%I end!))) (= (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! (succ fuel%)) (=> (< (%I start!) (%I end!)) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) start!) (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! start!))) (%I node_id!)))) (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! (I (nClip (Add (%I start!) 1))) end! node_id! fuel%))))) :pattern ((lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogRangeNoNodeId.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly) (end! Poly) (node_id! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type start! NAT) (has_type end! NAT) (has_type node_id! NAT) (<= (%I start!) (%I end!))) (= (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& log! start! end! node_id!) (lib!spec.unbounded_log.rec%LogRangeNoNodeId.? DT&. DT& log! start! end! node_id! (succ fuel_nat%lib!spec.unbounded_log.LogRangeNoNodeId.)))) :pattern ((lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& log! start! end! node_id!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogContainsEntriesUpToHere")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogContainsEntriesUpToHere.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (end! Poly)) (! (= (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& log! end!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I end!))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$)) ))) :pattern ((lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& log! end!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Placed")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Placed.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Placed_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Placed) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Placed.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Placed.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Placed.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Placed_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Placed_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Placed_idx.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue. (Dcr Type Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(declare-const %%global_location_label%%5 Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!) (and (=> %%global_location_label%%4 (and (<= 0 (%I queueIndex!)) (<= (%I queueIndex!) (vstd!seq.Seq.len.? $ NAT queue!)))) (=> %%global_location_label%%5 (lib!spec.unbounded_log.LogContainsEntriesUpToHere.? DT&. DT& log! logIndexUpper!)) (=> %%global_location_label%%6 (<= (%I logIndexLower!) (%I logIndexUpper!))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!)) )))
(set-info :comment ";; Spec-Termination lib::spec::unbounded_log::LogRangeMatchesQueue")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1396:1: 1404:10 (#0)")
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogRangeMatchesQueue")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogRangeMatchesQueue.))
(declare-const fuel_nat%lib!spec.unbounded_log.LogRangeMatchesQueue. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly) (fuel% Fuel)) (! (= (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! fuel%) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! zero)) :pattern ((lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! fuel%)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type queue! (TYPE%vstd!seq.Seq. $ NAT)) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type queueIndex! NAT) (has_type logIndexLower! NAT) (has_type logIndexUpper! NAT) (has_type nodeId! NAT) (has_type updates! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) (<= (%I logIndexLower!) (%I logIndexUpper!))) (= (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! (succ fuel%)) (and (=> (= logIndexLower! logIndexUpper!) (= (%I queueIndex!) (vstd!seq.Seq.len.? $ NAT queue!))) (=> (< (%I logIndexLower!) (%I logIndexUpper!)) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) logIndexLower!) (=> (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! logIndexLower!))) (%I nodeId!)) (and (and (and (and (< (%I queueIndex!) (vstd!seq.Seq.len.? $ NAT queue!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) (vstd!seq.Seq.index.? $ NAT queue! queueIndex!))) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! (vstd!seq.Seq.index.? $ NAT queue! queueIndex!))))) (= (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! (vstd!seq.Seq.index.? $ NAT queue! queueIndex!)))) (%I logIndexLower!))) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! (I (nClip (Add (%I queueIndex!) 1))) (I (nClip (Add (%I logIndexLower!) 1))) logIndexUpper! nodeId! updates! fuel%)))) (=> (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! logIndexLower!))) (%I nodeId!))) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! (I (nClip (Add (%I logIndexLower!) 1))) logIndexUpper! nodeId! updates! fuel%))))))) :pattern ((lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogRangeMatchesQueue.) (forall ((DT&. Dcr) (DT& Type) (queue! Poly) (log! Poly) (queueIndex! Poly) (logIndexLower! Poly) (logIndexUpper! Poly) (nodeId! Poly) (updates! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type queue! (TYPE%vstd!seq.Seq. $ NAT)) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type queueIndex! NAT) (has_type logIndexLower! NAT) (has_type logIndexUpper! NAT) (has_type nodeId! NAT) (has_type updates! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) (<= (%I logIndexLower!) (%I logIndexUpper!))) (= (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!) (lib!spec.unbounded_log.rec%LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates! (succ fuel_nat%lib!spec.unbounded_log.LogRangeMatchesQueue.)))) :pattern ((lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%7 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::QueueRidsUpdatePlaced")
(declare-fun req%lib!spec.unbounded_log.QueueRidsUpdatePlaced. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (req%lib!spec.unbounded_log.QueueRidsUpdatePlaced. DT&. DT& queued_ops! localUpdates! bound!) (=> %%global_location_label%%8 (and (<= 0 (%I bound!)) (<= (%I bound!) (vstd!seq.Seq.len.? $ NAT queued_ops!))))) :pattern ((req%lib!spec.unbounded_log.QueueRidsUpdatePlaced. DT&. DT& queued_ops! localUpdates! bound!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::QueueRidsUpdatePlaced")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.QueueRidsUpdatePlaced.) (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& queued_ops! localUpdates! bound!) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= (%I bound!) (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ NAT queued_ops!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates!) (vstd!seq.Seq.index.? $ NAT queued_ops! j$)) (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates! (vstd!seq.Seq.index.? $ NAT queued_ops! j$))))))) :pattern ((vstd!seq.Seq.index.? $ NAT queued_ops! j$)) ))) :pattern ((lib!spec.unbounded_log.QueueRidsUpdatePlaced.? DT&. DT& queued_ops! localUpdates! bound!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Applied")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Applied.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Applied_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Applied) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Applied.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Applied.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Applied.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::QueueRidsUpdateDone")
(declare-fun req%lib!spec.unbounded_log.QueueRidsUpdateDone. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (req%lib!spec.unbounded_log.QueueRidsUpdateDone. DT&. DT& queued_ops! localUpdates! bound!) (=> %%global_location_label%%9 (and (<= 0 (%I bound!)) (<= (%I bound!) (vstd!seq.Seq.len.? $ NAT queued_ops!))))) :pattern ((req%lib!spec.unbounded_log.QueueRidsUpdateDone. DT&. DT& queued_ops! localUpdates! bound!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::QueueRidsUpdateDone")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.QueueRidsUpdateDone.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.QueueRidsUpdateDone.) (forall ((DT&. Dcr) (DT& Type) (queued_ops! Poly) (localUpdates! Poly) (bound! Poly)) (! (= (lib!spec.unbounded_log.QueueRidsUpdateDone.? DT&. DT& queued_ops! localUpdates! bound!) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) (%I bound!))) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates!) (vstd!seq.Seq.index.? $ NAT queued_ops! j$)) (or (is-lib!spec.unbounded_log.UpdateState./Applied_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates! (vstd!seq.Seq.index.? $ NAT queued_ops! j$)))) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) localUpdates! (vstd!seq.Seq.index.? $ NAT queued_ops! j$)))))))) :pattern ((vstd!seq.Seq.index.? $ NAT queued_ops! j$)) ))) :pattern ((lib!spec.unbounded_log.QueueRidsUpdateDone.? DT&. DT& queued_ops! localUpdates! bound!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::LogNoEntriesFromHere")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.LogNoEntriesFromHere.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.LogNoEntriesFromHere.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (start! Poly)) (! (= (lib!spec.unbounded_log.LogNoEntriesFromHere.? DT&. DT& log! start!) (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (<= (%I start!) (%I i$)) (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$)) ))) :pattern ((lib!spec.unbounded_log.LogNoEntriesFromHere.? DT&. DT& log! start!)) ))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::compute_nrstate_at_version")
(declare-fun req%lib!spec.unbounded_log.compute_nrstate_at_version. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (= (req%lib!spec.unbounded_log.compute_nrstate_at_version. DT&. DT& log! version!) (=> %%global_location_label%%10 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) (%I version!))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log!) i$)) )))) :pattern ((req%lib!spec.unbounded_log.compute_nrstate_at_version. DT&. DT& log! version!)) )))
(set-info :comment ";; Spec-Termination lib::spec::unbounded_log::compute_nrstate_at_version")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:2029:1: 2032:14 (#0)")
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::compute_nrstate_at_version")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.compute_nrstate_at_version.))
(declare-const fuel_nat%lib!spec.unbounded_log.compute_nrstate_at_version. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly) (fuel% Fuel)) (! (= (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! fuel%) (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! zero)) :pattern ((lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! fuel%)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type version! NAT)) (= (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel%)) (ite (= (%I version!) 0) (lib!Dispatch.init_spec.? DT&. DT&) (let ((ver$ (nClip (Sub (%I version!) 1)))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! (I ver$) fuel%) (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! (I ver$))))))))))) :pattern ((lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.compute_nrstate_at_version.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type version! NAT)) (= (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!) (lib!spec.unbounded_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel_nat%lib!spec.unbounded_log.compute_nrstate_at_version.)))) :pattern ((lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (=> (and (has_type log! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&))) (has_type version! NAT)) (has_type (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& log! version!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%7.queued_ops.))
(define-fun is-lib!spec.unbounded_log.CombinerState./Ready_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Ready) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./Placed_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Placed) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./LoadedLocalVersion) c))
(define-fun is-lib!spec.unbounded_log.CombinerState./Loop_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./Loop) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%7.queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%7.queued_ops.? self!) (ite (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (%Poly%vstd!seq.Seq<nat.>. (vstd!seq.Seq.empty.? $ NAT)) (ite (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (ite (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (ite (is-lib!spec.unbounded_log.CombinerState./Loop_ (%Poly%lib!spec.unbounded_log.CombinerState. self!)) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$) (let ((queued_ops$ (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!)))) queued_ops$)))))) :pattern ((lib!spec.unbounded_log.impl&%7.queued_ops.? self!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%11 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%12 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::layout::size_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%13 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%14 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%15 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%16 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%17 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%18 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%19 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%20 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%21 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%22 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%23 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%26 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%27 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%28 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%29 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%30 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%31 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%32 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%33 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::filter")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (has_type (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::filter_lemma_broadcast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. (Dcr Type Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))))) (and (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 pred! (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!)) (vstd!seq.Seq.index.? A&. A& self! i$))) )) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! (Poly%fun%1. pred!))) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_lemma_broadcast. A&. A& self! pred!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_lemma_broadcast")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (pred! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (and (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)))) (and (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))) (vstd!seq_lib.impl&%0.contains.? A&. A& self! (vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) i$)) )) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (%B (%%apply%%0 (%Poly%fun%1. pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) (vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$)))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!) (vstd!seq.Seq.index.? A&. A& self! i$))) ))) (<= (vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!)) (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& self! pred!))) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::filter_distributes_over_add_broacast")
(declare-fun ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. (Dcr Type Poly Poly %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! %%Function%%)) (! (= (ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) (Poly%fun%1. pred!)) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! (Poly%fun%1. pred!)) (vstd!seq_lib.impl&%0.filter.? A&. A& b! (Poly%fun%1. pred!))))) :pattern ((ens%vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast. A&. A& a! b! pred!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::filter_distributes_over_add_broacast")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (pred! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type pred! (TYPE%fun%1. A&. A& $ BOOL))) (= (vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!) (vstd!seq.Seq.add.? A&. A& (vstd!seq_lib.impl&%0.filter.? A&. A& a! pred!) (vstd!seq_lib.impl&%0.filter.? A&. A& b! pred!)))) :pattern ((vstd!seq_lib.impl&%0.filter.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) pred!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%0 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::seq_to_set_is_finite_broadcast")
(declare-fun ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (= (ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((ens%vstd!seq_lib.seq_to_set_is_finite_broadcast. A&. A& seq!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite_broadcast")
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%34 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%35 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%36 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%37 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%38 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%42 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%43 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%44 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%45 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%46 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%47 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%48 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%49 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%50 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::is_empty")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_empty.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_empty.? A&. A& self!) (= (vstd!set.impl&%0.len.? A&. A& self!) 0)) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& self!)) ))))
(set-info :comment ";; Function-Specs vstd::set_lib::axiom_is_empty")
(declare-fun req%vstd!set_lib.axiom_is_empty. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set_lib.axiom_is_empty. A&. A& s!) (and (=> %%global_location_label%%51 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%52 (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))))) :pattern ((req%vstd!set_lib.axiom_is_empty. A&. A& s!)) )))
(declare-fun ens%vstd!set_lib.axiom_is_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set_lib.axiom_is_empty. A&. A& s!) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$)) ))) :pattern ((ens%vstd!set_lib.axiom_is_empty. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set_lib::axiom_is_empty")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$)) )))) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs lib::VERUS_layout_of_usize")
(declare-fun ens%lib!VERUS_layout_of_usize. () Bool)
(assert (= ens%lib!VERUS_layout_of_usize. (= (vstd!layout.size_of.? $ (UINT SZ)) 8)))
(set-info :comment ";; Broadcast lib::VERUS_layout_of_usize")
(assert (= (vstd!layout.size_of.? $ (UINT SZ)) 8))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::is_Ready")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.is_Ready.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.is_Ready.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.is_Ready.? self!) (is-lib!spec.unbounded_log.CombinerState./Ready_ (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.is_Ready.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::is_Placed")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.is_Placed.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.is_Placed.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.is_Placed.? self!) (is-lib!spec.unbounded_log.CombinerState./Placed_ (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.is_Placed.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Placed_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Placed_queued_ops.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Placed_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Placed_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Placed_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Placed_op.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Placed_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Placed_op.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Placed_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::utils::seq_to_set")
(assert (fuel_bool_default fuel%lib!spec.utils.seq_to_set.))
(assert (=> (fuel_bool fuel%lib!spec.utils.seq_to_set.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (= (lib!spec.utils.seq_to_set.? A&. A& seq!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& seq!))))) :pattern ((lib!spec.utils.seq_to_set.? A&. A& seq!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (lib!spec.utils.seq_to_set.? A&. A& seq!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((lib!spec.utils.seq_to_set.? A&. A& seq!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::is_VersionUpperBound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_VersionUpperBound.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./VersionUpperBound) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_VersionUpperBound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_VersionUpperBound.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_VersionUpperBound.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_VersionUpperBound_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_VersionUpperBound_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_VersionUpperBound_version_upper_bound.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::is_ReadyToRead")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.is_ReadyToRead.))
(define-fun is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ ((c lib!spec.unbounded_log.ReadonlyState.)) Bool ((_ is lib!spec.unbounded_log.ReadonlyState./ReadyToRead) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.is_ReadyToRead.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.is_ReadyToRead.? DT&. DT& self!) (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.is_ReadyToRead.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_ReadyToRead_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_ReadyToRead_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_ReadyToRead_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_ReadyToRead_version_upper_bound.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_ReadyToRead_version_upper_bound.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%0.get_ReadyToRead_version_upper_bound.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_ReadyToRead_version_upper_bound.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_ReadyToRead_node_id")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_ReadyToRead_node_id.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_Done_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Done_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Done_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Done_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%0.get_Done_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_Done_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_version_upper_bound.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::get_Done_node_id")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%0.get_Done_node_id.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%0.get_Done_node_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%0.get_Done_node_id.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_node_id.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%0.get_Done_node_id.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%0.get_Done_node_id.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::arrow_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%1.arrow_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%1.arrow_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%1.arrow_ret.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_ret.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%1.arrow_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_ret.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::arrow_Init_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%1.arrow_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%1.arrow_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%1.arrow_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_Init_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%1.arrow_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_Init_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::arrow_VersionUpperBound_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::arrow_VersionUpperBound_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_version_upper_bound.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_version_upper_bound.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_version_upper_bound.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_VersionUpperBound_version_upper_bound.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::arrow_ReadyToRead_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::arrow_ReadyToRead_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_version_upper_bound.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_version_upper_bound.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_version_upper_bound.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_version_upper_bound.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::arrow_ReadyToRead_node_id")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_node_id.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_node_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_node_id.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_node_id.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_node_id.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_ReadyToRead_node_id.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::arrow_Done_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%1.arrow_Done_op.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_Done_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%1.arrow_Done_op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_Done_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::arrow_Done_version_upper_bound")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_version_upper_bound.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_version_upper_bound.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%1.arrow_Done_version_upper_bound.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/version_upper_bound (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_Done_version_upper_bound.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%1.arrow_Done_version_upper_bound.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_Done_version_upper_bound.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::arrow_Done_node_id")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_node_id.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_node_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%1.arrow_Done_node_id.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/node_id (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_Done_node_id.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%1.arrow_Done_node_id.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_Done_node_id.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::arrow_Done_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%1.arrow_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%1.arrow_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.ReadonlyState./Done/ret (%Poly%lib!spec.unbounded_log.ReadonlyState. self!))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_Done_ret.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%1.arrow_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%1.arrow_Done_ret.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::ReadonlyState::op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%2.op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%2.op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%2.op.? DT&. DT& self!) (ite (is-lib!spec.unbounded_log.ReadonlyState./Init_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!)) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Init/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!)))) op$) (ite (is-lib!spec.unbounded_log.ReadonlyState./VersionUpperBound_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!)) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./VersionUpperBound/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!)))) op$) (ite (is-lib!spec.unbounded_log.ReadonlyState./ReadyToRead_ (%Poly%lib!spec.unbounded_log.ReadonlyState. self!)) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./ReadyToRead/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!)))) op$) (let ((op$ (lib!spec.unbounded_log.ReadonlyState./Done/op (%Poly%lib!spec.unbounded_log.ReadonlyState. self!)))) op$))))) :pattern ((lib!spec.unbounded_log.impl&%2.op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.ReadonlyState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%2.op.? DT&. DT& self!) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%2.op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Applied_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Applied_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Applied_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Applied_ret.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Applied_ret.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Applied_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Applied_ret.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Applied_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Applied_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Applied_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Applied_idx.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Applied_idx.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%3.get_Applied_idx.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Applied_idx.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Done_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Done_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Done_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Done_idx.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_idx.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%3.get_Done_idx.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_idx.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::arrow_Init_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%4.arrow_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%4.arrow_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%4.arrow_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Init_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%4.arrow_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Init_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::arrow_Placed_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%4.arrow_Placed_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%4.arrow_Placed_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%4.arrow_Placed_op.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Placed_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%4.arrow_Placed_op.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Placed_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::arrow_Placed_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%4.arrow_Placed_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%4.arrow_Placed_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%4.arrow_Placed_idx.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Placed_idx.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%4.arrow_Placed_idx.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Placed_idx.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::arrow_Applied_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%4.arrow_Applied_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%4.arrow_Applied_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%4.arrow_Applied_ret.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Applied_ret.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%4.arrow_Applied_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Applied_ret.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::arrow_Applied_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%4.arrow_Applied_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%4.arrow_Applied_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%4.arrow_Applied_idx.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Applied_idx.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%4.arrow_Applied_idx.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Applied_idx.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::arrow_Done_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%4.arrow_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%4.arrow_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%4.arrow_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Done_ret.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%4.arrow_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Done_ret.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::arrow_Done_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%4.arrow_Done_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%4.arrow_Done_idx.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%4.arrow_Done_idx.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Done_idx.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.impl&%4.arrow_Done_idx.? DT&. DT& self!))) :pattern ((lib!spec.unbounded_log.impl&%4.arrow_Done_idx.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::is_LoadedLocalVersion")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.is_LoadedLocalVersion.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.is_LoadedLocalVersion.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.is_LoadedLocalVersion.? self!) (is-lib!spec.unbounded_log.CombinerState./LoadedLocalVersion_ (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.is_LoadedLocalVersion.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_LoadedLocalVersion_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_queued_ops.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_LoadedLocalVersion_lversion")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_lversion.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_lversion.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_lversion.? self!) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_lversion.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_lversion.? self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_LoadedLocalVersion_lversion.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::is_Loop")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.is_Loop.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.is_Loop.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.is_Loop.? self!) (is-lib!spec.unbounded_log.CombinerState./Loop_ (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.is_Loop.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_queued_ops.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_lversion")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_lversion.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!) (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_lversion.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_idx.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!) (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_idx.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_Loop_tail")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_Loop_tail.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!) (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_Loop_tail.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::is_UpdatedVersion")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.is_UpdatedVersion.))
(define-fun is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ ((c lib!spec.unbounded_log.CombinerState.)) Bool ((_ is lib!spec.unbounded_log.CombinerState./UpdatedVersion) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.is_UpdatedVersion.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.is_UpdatedVersion.? self!) (is-lib!spec.unbounded_log.CombinerState./UpdatedVersion_ (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.is_UpdatedVersion.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_UpdatedVersion_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_queued_ops.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::get_UpdatedVersion_tail")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_tail.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_tail.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_tail.? self!) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_tail.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_tail.? self!))) :pattern ((lib!spec.unbounded_log.impl&%5.get_UpdatedVersion_tail.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::arrow_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%6.arrow_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%6.arrow_idx.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%6.arrow_idx.? self!) (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_idx.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%6.arrow_idx.? self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_idx.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::arrow_Placed_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%6.arrow_Placed_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%6.arrow_Placed_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%6.arrow_Placed_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./Placed/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_Placed_queued_ops.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::arrow_LoadedLocalVersion_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_queued_ops.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::arrow_LoadedLocalVersion_lversion")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_lversion.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_lversion.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_lversion.? self!) (lib!spec.unbounded_log.CombinerState./LoadedLocalVersion/lversion (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_lversion.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_lversion.? self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_LoadedLocalVersion_lversion.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::arrow_Loop_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%6.arrow_Loop_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./Loop/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_Loop_queued_ops.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::arrow_Loop_lversion")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_lversion.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_lversion.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%6.arrow_Loop_lversion.? self!) (lib!spec.unbounded_log.CombinerState./Loop/lversion (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_Loop_lversion.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%6.arrow_Loop_lversion.? self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_Loop_lversion.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::arrow_Loop_idx")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_idx.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_idx.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%6.arrow_Loop_idx.? self!) (lib!spec.unbounded_log.CombinerState./Loop/idx (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_Loop_idx.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%6.arrow_Loop_idx.? self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_Loop_idx.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::arrow_Loop_tail")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_tail.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%6.arrow_Loop_tail.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%6.arrow_Loop_tail.? self!) (lib!spec.unbounded_log.CombinerState./Loop/tail (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_Loop_tail.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%6.arrow_Loop_tail.? self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_Loop_tail.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::arrow_UpdatedVersion_queued_ops")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_queued_ops.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_queued_ops.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_queued_ops.? self!) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/queued_ops (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_queued_ops.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::arrow_UpdatedVersion_tail")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_tail.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_tail.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_tail.? self!) (lib!spec.unbounded_log.CombinerState./UpdatedVersion/tail (%Poly%lib!spec.unbounded_log.CombinerState. self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_tail.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.unbounded_log.CombinerState.) (<= 0 (lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_tail.? self!))) :pattern ((lib!spec.unbounded_log.impl&%6.arrow_UpdatedVersion_tail.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::CombinerState::queued_ops_set")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%7.queued_ops_set.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%7.queued_ops_set.) (forall ((self! Poly)) (! (= (lib!spec.unbounded_log.impl&%7.queued_ops_set.? self!) (%Poly%vstd!set.Set<nat.>. (lib!spec.utils.seq_to_set.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? self!))))) :pattern ((lib!spec.unbounded_log.impl&%7.queued_ops_set.? self!)) ))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::combiner_request_ids")
(declare-fun req%lib!spec.unbounded_log.combiner_request_ids. (Poly) Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((combiners! Poly)) (! (= (req%lib!spec.unbounded_log.combiner_request_ids. combiners!) (=> %%global_location_label%%53 (and (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!)) (>= (vstd!set.impl&%0.len.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!)) 0)))) :pattern ((req%lib!spec.unbounded_log.combiner_request_ids. combiners!)) )))
(set-info :comment ";; Spec-Termination lib::spec::unbounded_log::combiner_request_ids")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1190:1: 1190:91 (#0)")
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::combiner_request_ids")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.combiner_request_ids.))
(declare-const fuel_nat%lib!spec.unbounded_log.combiner_request_ids. Fuel)
(assert (forall ((combiners! Poly) (fuel% Fuel)) (! (= (lib!spec.unbounded_log.rec%combiner_request_ids.? combiners! fuel%) (lib!spec.unbounded_log.rec%combiner_request_ids.? combiners! zero)) :pattern ((lib!spec.unbounded_log.rec%combiner_request_ids.? combiners! fuel%)) )))
(assert (forall ((combiners! Poly) (fuel% Fuel)) (! (=> (and (has_type combiners! (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.)) (and (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!)) (>= (vstd!set.impl&%0.len.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!)) 0))) (= (lib!spec.unbounded_log.rec%combiner_request_ids.? combiners! (succ fuel%)) (%Poly%vstd!set.Set<nat.>. (ite (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!)) (ite (= (vstd!set.impl&%0.len.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!)) 0) (vstd!set.impl&%0.empty.? $ NAT) (let ((node_id$ (%I (vstd!set.impl&%0.choose.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!))))) (let ((req_ids$ (lib!spec.unbounded_log.rec%combiner_request_ids.? (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners! (I node_id$)) fuel%))) (vstd!set.impl&%0.union.? $ NAT (Poly%vstd!set.Set<nat.>. req_ids$) (lib!spec.utils.seq_to_set.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners! (I node_id$))))))))) (vstd!pervasive.arbitrary.? $ (TYPE%vstd!set.Set. $ NAT)))))) :pattern ((lib!spec.unbounded_log.rec%combiner_request_ids.? combiners! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.combiner_request_ids.) (forall ((combiners! Poly)) (! (=> (and (has_type combiners! (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.)) (and (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!)) (>= (vstd!set.impl&%0.len.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!)) 0))) (= (lib!spec.unbounded_log.combiner_request_ids.? combiners!) (lib!spec.unbounded_log.rec%combiner_request_ids.? combiners! (succ fuel_nat%lib!spec.unbounded_log.combiner_request_ids.)))) :pattern ((lib!spec.unbounded_log.combiner_request_ids.? combiners!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::combiner_request_id_fresh")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.combiner_request_id_fresh.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.combiner_request_id_fresh.) (forall ((combiners! Poly) (rid! Poly)) (! (= (lib!spec.unbounded_log.combiner_request_id_fresh.? combiners! rid!) (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!) n$) (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners! n$))) rid!)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiners!) n$)) ))) :pattern ((lib!spec.unbounded_log.combiner_request_id_fresh.? combiners! rid!)) ))))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::get_fresh_nat")
(declare-fun req%lib!spec.unbounded_log.get_fresh_nat. (Poly Poly) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((reqs! Poly) (combiner! Poly)) (! (= (req%lib!spec.unbounded_log.get_fresh_nat. reqs! combiner!) (=> %%global_location_label%%54 (and (vstd!set.impl&%0.finite.? $ NAT reqs!) (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. combiner!))))) :pattern ((req%lib!spec.unbounded_log.get_fresh_nat. reqs! combiner!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::get_fresh_nat")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.get_fresh_nat.))
(declare-fun %%choose%%1 (Type Dcr Type Poly Poly Dcr Type Poly Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Poly) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Poly)) (! (=> (exists ((n$ Poly)) (! (and (has_type n$ %%hole%%0) (and (not (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 n$)) (lib!spec.unbounded_log.combiner_request_id_fresh.? %%hole%%4 n$))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%5 %%hole%%6 %%hole%%7 n$)) :pattern ((lib!spec.unbounded_log.combiner_request_id_fresh.? %%hole%%8 n$)) )) (exists ((n$ Poly)) (! (and (and (has_type n$ %%hole%%0) (and (not (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 n$)) (lib!spec.unbounded_log.combiner_request_id_fresh.? %%hole%%4 n$))) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) n$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%5 %%hole%%6 %%hole%%7 n$)) :pattern ((lib!spec.unbounded_log.combiner_request_id_fresh.? %%hole%%8 n$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8)))))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.get_fresh_nat.) (forall ((reqs! Poly) (combiner! Poly)) (! (= (lib!spec.unbounded_log.get_fresh_nat.? reqs! combiner!) (%I (as_type (%%choose%%1 NAT $ NAT reqs! combiner! $ NAT reqs! combiner!) NAT))) :pattern ((lib!spec.unbounded_log.get_fresh_nat.? reqs! combiner!)) ))))
(assert (forall ((reqs! Poly) (combiner! Poly)) (! (=> (and (has_type reqs! (TYPE%vstd!set.Set. $ NAT)) (has_type combiner! (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState.))) (<= 0 (lib!spec.unbounded_log.get_fresh_nat.? reqs! combiner!))) :pattern ((lib!spec.unbounded_log.get_fresh_nat.? reqs! combiner!)) )))
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::concat_LogRangeNoNodeId_LogRangeMatchesQueue")
(declare-fun req%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Int Poly) Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (a! Int) (b! Int) (c! Int) (nodeId! Int) (updates! Poly)) (! (= (req%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! a! b! c! nodeId! updates!) (and (=> %%global_location_label%%55 (and (<= a! b!) (<= b! c!))) (=> %%global_location_label%%56 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%57 (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& log! (I a!) (I b!) (I nodeId!))) (=> %%global_location_label%%58 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I b!) (I c!) (I nodeId!) updates!)))) :pattern ((req%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! a! b! c! nodeId! updates!)) )))
(declare-fun ens%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Int Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (a! Int) (b! Int) (c! Int) (nodeId! Int) (updates! Poly)) (! (= (ens%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! a! b! c! nodeId! updates!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I a!) (I c!) (I nodeId!) updates!)) :pattern ((ens%lib!spec.unbounded_log.concat_LogRangeNoNodeId_LogRangeMatchesQueue. DT&. DT& queue! log! queueIndex! a! b! c! nodeId! updates!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::concat_LogRangeNoNodeId_LogRangeMatchesQueue")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1992:7: 2001:2 (#0)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue_update_change")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Poly Poly) Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (nodeId! Int) (updates1! Poly) (updates2! Poly)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!) (and (=> %%global_location_label%%59 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%60 (<= logIndexLower! logIndexUpper!)) (=> %%global_location_label%%61 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I nodeId!) updates1!)) (=> %%global_location_label%%62 (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1!) rid$) (=> (and (is-lib!spec.unbounded_log.UpdateState./Placed_ (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1! rid$))) (let ((tmp%%$ (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1! rid$))))) (and (<= logIndexLower! tmp%%$) (< tmp%%$ logIndexUpper!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates2!) rid$) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates2! rid$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1! rid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1!) rid$)) ))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (nodeId! Int) (updates1! Poly) (updates2! Poly)) (! (= (ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I nodeId!) updates2!)) :pattern ((ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::LogRangeMatchesQueue_update_change")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1476:7: 1485:2 (#0)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue_update_change_2")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Poly Poly) Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (nodeId! Int) (updates1! Poly) (updates2! Poly)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!) (and (=> %%global_location_label%%63 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%64 (<= logIndexLower! logIndexUpper!)) (=> %%global_location_label%%65 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I nodeId!) updates1!)) (=> %%global_location_label%%66 (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1!) rid$) (=> (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!) rid$) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates2!) rid$) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates2! rid$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1! rid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates1!) rid$)) ))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. (Dcr Type vstd!seq.Seq<nat.>. Poly Int Int Int Int Poly Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (nodeId! Int) (updates1! Poly) (updates2! Poly)) (! (= (ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I nodeId!) updates2!)) :pattern ((ens%lib!spec.unbounded_log.LogRangeMatchesQueue_update_change_2. DT&. DT& queue! log! queueIndex! logIndexLower! logIndexUpper! nodeId! updates1! updates2!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::LogRangeMatchesQueue_update_change_2")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1542:7: 1551:2 (#0)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue_append")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue_append. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue_append. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!) (and (=> %%global_location_label%%67 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%68 (<= logIndexLower! logIndexUpper!)) (=> %%global_location_label%%69 (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) node_id!)) (=> %%global_location_label%%70 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) (I new_rid!))) (=> %%global_location_label%%71 (= (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! (I new_rid!))) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) (%I (I logIndexUpper!))))) (=> %%global_location_label%%72 (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!) (I new_rid!)))) (=> %%global_location_label%%73 (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$) (not (= (%I rid$) new_rid!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) rid$) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! rid$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! rid$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$)) ))) (=> %%global_location_label%%74 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I node_id!) updates!)) (=> %%global_location_label%%75 (= new_log! (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! (I logIndexUpper!) (Poly%lib!spec.types.LogEntry. log_entry!)))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue_append. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (vstd!seq.Seq.push.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!) (I new_rid!)) new_log! (I queueIndex!) (I logIndexLower!) (I (nClip (Add logIndexUpper! 1))) (I node_id!) new_updates!)) :pattern ((ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::LogRangeMatchesQueue_append")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1607:7: 1619:2 (#0)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeNoNodeId_append_other")
(declare-fun req%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. (Dcr Type Poly Poly Int Int Int lib!spec.types.LogEntry.) Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (new_log! Poly) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (req%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. DT&. DT& log! new_log! logIndexLower! logIndexUpper! node_id! log_entry!) (and (=> %%global_location_label%%76 (<= logIndexLower! logIndexUpper!)) (=> %%global_location_label%%77 (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) node_id!))) (=> %%global_location_label%%78 (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& log! (I logIndexLower!) (I logIndexUpper!) (I node_id!))) (=> %%global_location_label%%79 (= new_log! (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! (I logIndexUpper!) (Poly%lib!spec.types.LogEntry. log_entry!)))))) :pattern ((req%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. DT&. DT& log! new_log! logIndexLower! logIndexUpper! node_id! log_entry!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. (Dcr Type Poly Poly Int Int Int lib!spec.types.LogEntry.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (new_log! Poly) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (ens%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. DT&. DT& log! new_log! logIndexLower! logIndexUpper! node_id! log_entry!) (lib!spec.unbounded_log.LogRangeNoNodeId.? DT&. DT& new_log! (I logIndexLower!) (I (nClip (Add logIndexUpper! 1))) (I node_id!))) :pattern ((ens%lib!spec.unbounded_log.LogRangeNoNodeId_append_other. DT&. DT& log! new_log! logIndexLower! logIndexUpper! node_id! log_entry!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::LogRangeNoNodeId_append_other")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1909:7: 1916:2 (#0)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue_append_other_augment")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(declare-const %%global_location_label%%87 Bool)
(declare-const %%global_location_label%%88 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!) (and (=> %%global_location_label%%80 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%81 (<= logIndexLower! logIndexUpper!)) (=> %%global_location_label%%82 (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) node_id!))) (=> %%global_location_label%%83 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) (I new_rid!))) (=> %%global_location_label%%84 (= (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! (I new_rid!))) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) (%I (I logIndexUpper!))))) (=> %%global_location_label%%85 (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!) (I new_rid!)))) (=> %%global_location_label%%86 (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$) (not (= (%I rid$) new_rid!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) rid$) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! rid$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! rid$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$)) ))) (=> %%global_location_label%%87 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I node_id!) updates!)) (=> %%global_location_label%%88 (= new_log! (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! (I logIndexUpper!) (Poly%lib!spec.types.LogEntry. log_entry!)))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) new_log! (I queueIndex!) (I logIndexLower!) (I (nClip (Add logIndexUpper! 1))) (I node_id!) new_updates!)) :pattern ((ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other_augment. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! node_id! updates! new_updates! new_rid! log_entry!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::LogRangeMatchesQueue_append_other_augment")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1805:7: 1817:2 (#0)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::LogRangeMatchesQueue_append_other")
(declare-fun req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(declare-const %%global_location_label%%91 Bool)
(declare-const %%global_location_label%%92 Bool)
(declare-const %%global_location_label%%93 Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (logLen! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! logLen! node_id! updates! new_updates! new_rid! log_entry!) (and (=> %%global_location_label%%89 (and (<= 0 queueIndex!) (<= queueIndex! (vstd!seq.Seq.len.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!))))) (=> %%global_location_label%%90 (and (<= logIndexLower! logIndexUpper!) (<= logIndexUpper! logLen!))) (=> %%global_location_label%%91 (not (= (lib!spec.types.LogEntry./LogEntry/node_id (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) node_id!))) (=> %%global_location_label%%92 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) (I new_rid!))) (=> %%global_location_label%%93 (= (%Poly%lib!spec.unbounded_log.UpdateState. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! (I new_rid!))) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.types.LogEntry./LogEntry/op (%Poly%lib!spec.types.LogEntry. (Poly%lib!spec.types.LogEntry. log_entry!))) (%I (I logLen!))))) (=> %%global_location_label%%94 (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. queue!) (I new_rid!)))) (=> %%global_location_label%%95 (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$) (not (= (%I rid$) new_rid!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates!) rid$) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) new_updates! rid$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates! rid$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&) updates!) rid$)) ))) (=> %%global_location_label%%96 (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I node_id!) updates!)) (=> %%global_location_label%%97 (= new_log! (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) log! (I logLen!) (Poly%lib!spec.types.LogEntry. log_entry!)))))) :pattern ((req%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! logLen! node_id! updates! new_updates! new_rid! log_entry!)) )))
(declare-fun ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. (Dcr Type vstd!seq.Seq<nat.>. Poly Poly Int Int Int Int Int Poly Poly Int lib!spec.types.LogEntry.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (queue! vstd!seq.Seq<nat.>.) (log! Poly) (new_log! Poly) (queueIndex! Int) (logIndexLower! Int) (logIndexUpper! Int) (logLen! Int) (node_id! Int) (updates! Poly) (new_updates! Poly) (new_rid! Int) (log_entry! lib!spec.types.LogEntry.)) (! (= (ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! logLen! node_id! updates! new_updates! new_rid! log_entry!) (lib!spec.unbounded_log.LogRangeMatchesQueue.? DT&. DT& (Poly%vstd!seq.Seq<nat.>. queue!) new_log! (I queueIndex!) (I logIndexLower!) (I logIndexUpper!) (I node_id!) new_updates!)) :pattern ((ens%lib!spec.unbounded_log.LogRangeMatchesQueue_append_other. DT&. DT& queue! log! new_log! queueIndex! logIndexLower! logIndexUpper! logLen! node_id! updates! new_updates! new_rid! log_entry!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::LogRangeMatchesQueue_append_other")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1723:7: 1736:2 (#0)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::compute_nrstate_at_version_preserves")
(declare-fun req%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%98 Bool)
(declare-const %%global_location_label%%99 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly) (version! Int)) (! (= (req%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. DT&. DT& a! b! version!) (and (=> %%global_location_label%%98 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) version!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) a!) i$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) a!) i$)) ))) (=> %%global_location_label%%99 (forall ((i$ Poly)) (! (=> (has_type i$ NAT) (=> (and (<= 0 (%I i$)) (< (%I i$) version!)) (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) a! i$) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) b! i$)))) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) a! i$)) :pattern ((vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.types.LogEntry. DT&. DT&) b! i$)) ))))) :pattern ((req%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. DT&. DT& a! b! version!)) )))
(declare-fun ens%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly) (version! Int)) (! (= (ens%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. DT&. DT& a! b! version!) (= (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& a! (I version!)) (lib!spec.unbounded_log.compute_nrstate_at_version.? DT&. DT& b! (I version!)))) :pattern ((ens%lib!spec.unbounded_log.compute_nrstate_at_version_preserves. DT&. DT& a! b! version!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::compute_nrstate_at_version_preserves")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:2045:1: 2049:2 (#0)")
(set-info :comment ";; Function-Specs lib::spec::unbounded_log::combiner_request_ids_not_contains")
(declare-fun req%lib!spec.unbounded_log.combiner_request_ids_not_contains. (vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. Int) Bool)
(declare-const %%global_location_label%%100 Bool)
(assert (forall ((combiners! vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.) (rid! Int)) (! (= (req%lib!spec.unbounded_log.combiner_request_ids_not_contains. combiners! rid!) (=> %%global_location_label%%100 (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!))))) :pattern ((req%lib!spec.unbounded_log.combiner_request_ids_not_contains. combiners! rid!)) )))
(declare-fun ens%lib!spec.unbounded_log.combiner_request_ids_not_contains. (vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. Int) Bool)
(assert (forall ((combiners! vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.) (rid! Int)) (! (= (ens%lib!spec.unbounded_log.combiner_request_ids_not_contains. combiners! rid!) (= (lib!spec.unbounded_log.combiner_request_id_fresh.? (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) (I rid!)) (not (vstd!set.impl&%0.contains.? $ NAT (Poly%vstd!set.Set<nat.>. (lib!spec.unbounded_log.combiner_request_ids.? (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!))) (I rid!))))) :pattern ((ens%lib!spec.unbounded_log.combiner_request_ids_not_contains. combiners! rid!)) )))
(set-info :comment ";; Function-Def lib::spec::unbounded_log::combiner_request_ids_not_contains")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/unbounded_log.rs:1245:1: 1245:98 (#0)")
(declare-const combiners! vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)
(declare-const rid! Int)
(declare-const tmp%1 vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>.)
(declare-const tmp%2 Bool)
(declare-const n@ Poly)
(declare-const tmp%3 Bool)
(declare-const node_id@ Int)
(declare-const decrease%init0 Int)
(assert fuel_defaults)
(assert (<= 0 rid!))
(assert (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!))))
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%5 Bool)
(assert (not (=> (= decrease%init0 (vstd!set.impl&%0.len.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!)))) (or (and (=> (not (ext_eq false (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!)) (vstd!set.impl&%0.empty.? $ NAT))) (=> (= node_id@ (%I (vstd!set.impl&%0.choose.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!))))) (=> (= tmp%1 (%Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) (I node_id@)))) (and (=> %%location_label%%0 (check_decrease_int (let ((combiners!$0 tmp%1) (rid!$1 rid!)) (vstd!set.impl&%0.len.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!$0)))) decrease%init0 false)) (and (=> %%location_label%%1 (req%lib!spec.unbounded_log.combiner_request_ids_not_contains. tmp%1 rid!)) (=> (ens%lib!spec.unbounded_log.combiner_request_ids_not_contains. tmp%1 rid!) (=> (= tmp%2 (= (lib!spec.unbounded_log.combiner_request_id_fresh.? (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) (I node_id@)) (I rid!)) (not (vstd!set.impl&%0.contains.? $ NAT (Poly%vstd!set.Set<nat.>. (lib!spec.unbounded_log.combiner_request_ids.? (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) (I node_id@)))) (I rid!))))) (and (=> %%location_label%%2 tmp%2) (=> tmp%2 (or (and (=> (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) (I node_id@)))) (I rid!))) (or (and (=> (lib!spec.unbounded_log.combiner_request_id_fresh.? (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) (I node_id@)) (I rid!)) (and (=> (has_type n@ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!)) n@) (or (and (=> (not (= (%I n@) node_id@)) (=> (= tmp%3 (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) (I node_id@))) n@)) (and (=> %%location_label%%3 tmp%3) (=> tmp%3 %%switch_label%%3)))) (=> (not (not (= (%I n@) node_id@))) %%switch_label%%3)) (and (not %%switch_label%%3) (=> %%location_label%%4 (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) n@))) (I rid!)))))))) (=> (forall ((n$ Poly)) (! (=> (has_type n$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!)) n$) (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) n$))) (I rid!))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!)) n$)) )) %%switch_label%%2))) (=> (not (lib!spec.unbounded_log.combiner_request_id_fresh.? (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) (I node_id@)) (I rid!))) %%switch_label%%2)) (and (not %%switch_label%%2) %%switch_label%%1))) (=> (not (not (vstd!seq_lib.impl&%0.contains.? $ NAT (Poly%vstd!seq.Seq<nat.>. (lib!spec.unbounded_log.impl&%7.queued_ops.? (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) (I node_id@)))) (I rid!)))) %%switch_label%%1)) (and (not %%switch_label%%1) %%switch_label%%0))))))))))) (=> (not (not (ext_eq false (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.unbounded_log.CombinerState. (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!)) (vstd!set.impl&%0.empty.? $ NAT)))) %%switch_label%%0)) (and (not %%switch_label%%0) (=> %%location_label%%5 (= (lib!spec.unbounded_log.combiner_request_id_fresh.? (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!) (I rid!)) (not (vstd!set.impl&%0.contains.? $ NAT (Poly%vstd!set.Set<nat.>. (lib!spec.unbounded_log.combiner_request_ids.? (Poly%vstd!map.Map<nat./lib!spec.unbounded_log.CombinerState.>. combiners!))) (I rid!))))))))))
(check-sat)
(exit)
