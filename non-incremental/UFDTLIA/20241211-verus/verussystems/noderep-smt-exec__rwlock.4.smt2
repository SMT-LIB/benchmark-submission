(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module exec::rwlock'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.result.impl&%0.is_Ok. FuelId)
(declare-const fuel%vstd!std_specs.result.is_ok. FuelId)
(declare-const fuel%vstd!std_specs.result.is_err. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%0.inv. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.constant. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%20.inv. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%21.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%21.constant. FuelId)
(declare-const fuel%vstd!invariant.AtomicInvariant.inv. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.choose. FuelId)
(declare-const fuel%vstd!multiset.impl&%0.dom. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%8.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%22.view. FuelId)
(declare-const fuel%vstd!view.impl&%38.view. FuelId)
(declare-const fuel%vstd!view.impl&%40.view. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict. FuelId)
(declare-const fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict. FuelId)
(declare-const fuel%lib!exec.rwlock.impl&%0.view. FuelId)
(declare-const fuel%lib!exec.rwlock.MAX_RC. FuelId)
(declare-const fuel%lib!exec.rwlock.impl&%1.atomic_inv. FuelId)
(declare-const fuel%lib!exec.rwlock.impl&%2.atomic_inv. FuelId)
(declare-const fuel%lib!exec.rwlock.impl&%3.wf. FuelId)
(declare-const fuel%lib!exec.rwlock.impl&%4.inv. FuelId)
(declare-const fuel%lib!exec.rwlock.impl&%4.thread_id_valid. FuelId)
(declare-const fuel%lib!exec.rwlock.impl&%4.max_threads. FuelId)
(declare-const fuel%lib!exec.rwlock.impl&%4.wf_read_handle. FuelId)
(declare-const fuel%lib!exec.rwlock.impl&%4.wf_write_handle. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.result.impl&%0.is_Ok. fuel%vstd!std_specs.result.is_ok. fuel%vstd!std_specs.result.is_err. fuel%vstd!atomic_ghost.impl&%0.inv. fuel%vstd!atomic_ghost.impl&%1.well_formed. fuel%vstd!atomic_ghost.impl&%1.constant. fuel%vstd!atomic_ghost.impl&%20.inv. fuel%vstd!atomic_ghost.impl&%21.well_formed. fuel%vstd!atomic_ghost.impl&%21.constant. fuel%vstd!invariant.AtomicInvariant.inv. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!multiset.impl&%0.subset_of. fuel%vstd!multiset.impl&%0.choose. fuel%vstd!multiset.impl&%0.dom. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!set.impl&%0.choose. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%8.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%22.view. fuel%vstd!view.impl&%38.view. fuel%vstd!view.impl&%40.view. fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree. fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict. fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict. fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree. fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict. fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree. fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict. fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict. fuel%lib!exec.rwlock.impl&%0.view. fuel%lib!exec.rwlock.MAX_RC. fuel%lib!exec.rwlock.impl&%1.atomic_inv. fuel%lib!exec.rwlock.impl&%2.atomic_inv. fuel%lib!exec.rwlock.impl&%3.wf. fuel%lib!exec.rwlock.impl&%4.inv. fuel%lib!exec.rwlock.impl&%4.thread_id_valid. fuel%lib!exec.rwlock.impl&%4.max_threads. fuel%lib!exec.rwlock.impl&%4.wf_read_handle. fuel%lib!exec.rwlock.impl&%4.wf_write_handle.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!alloc.Global. 0)
(declare-sort vstd!atomic.PAtomicBool. 0)
(declare-sort vstd!atomic.PAtomicU64. 0)
(declare-sort vstd!atomic.PermissionBool. 0)
(declare-sort vstd!atomic.PermissionU64. 0)
(declare-sort vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>. 0)
(declare-sort vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>. 0)
(declare-sort vstd!cell.CellId. 0)
(declare-sort vstd!invariant.OpenInvariantCredit. 0)
(declare-sort vstd!map.Map<int./int.>. 0)
(declare-sort vstd!multiset.Multiset<int.>. 0)
(declare-sort vstd!set.Set<int.>. 0)
(declare-datatypes ((core!option.Option. 0) (core!result.Result. 0) (vstd!atomic.PermissionDataBool. 0) (vstd!atomic.PermissionDataU64. 0) (vstd!atomic_ghost.AtomicU64. 0) (vstd!atomic_ghost.AtomicBool. 0) (vstd!cell.PointsToData. 0) (lib!spec.rwlock.RwLockSpec.exc_locked_token_data. 0) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data. 0) (lib!spec.rwlock.RwLockSpec.exc_pending_token_data. 0) (lib!spec.rwlock.RwLockSpec.exc_guard_token_data. 0) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data. 0) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data. 0) (lib!exec.rwlock.RwLockWriteGuard. 0) (lib!exec.rwlock.RwLockReadGuard. 0) (lib!exec.rwlock.RwLock. 0) (lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. 0) (lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. 0) (lib!exec.CachePadded. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0) (tuple%7. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((core!result.Result./Ok (core!result.Result./Ok/?0 Poly)) (core!result.Result./Err (core!result.Result./Err/?0 Poly))) ((vstd!atomic.PermissionDataBool./PermissionDataBool (vstd!atomic.PermissionDataBool./PermissionDataBool/?patomic Int) (vstd!atomic.PermissionDataBool./PermissionDataBool/?value Bool))) ((vstd!atomic.PermissionDataU64./PermissionDataU64 (vstd!atomic.PermissionDataU64./PermissionDataU64/?patomic Int) (vstd!atomic.PermissionDataU64./PermissionDataU64/?value Int))) ((vstd!atomic_ghost.AtomicU64./AtomicU64 (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic vstd!atomic.PAtomicU64.) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv Poly))) ((vstd!atomic_ghost.AtomicBool./AtomicBool (vstd!atomic_ghost.AtomicBool./AtomicBool/?patomic vstd!atomic.PAtomicBool.) (vstd!atomic_ghost.AtomicBool./AtomicBool/?atomic_inv Poly))) ((vstd!cell.PointsToData./PointsToData (vstd!cell.PointsToData./PointsToData/?pcell vstd!cell.CellId.) (vstd!cell.PointsToData./PointsToData/?value core!option.Option.))) ((lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/?instance Poly) (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/?value Bool))) ((lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?instance Poly) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?key Int) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?value Int))) ((lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/?instance Poly) (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/?value Int))) ((lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/?instance Poly) (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/?value tuple%0.))) ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?instance Poly) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?key Int) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?count Int))) ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?instance Poly) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?key tuple%2.) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?count Int))) ((lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/?handle Poly) (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/?cell_perms Poly))) ((lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/?tid Int) (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/?perms Poly) (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/?handle Poly))) ((lib!exec.rwlock.RwLock./RwLock (lib!exec.rwlock.RwLock./RwLock/?data Poly) (lib!exec.rwlock.RwLock./RwLock/?exc_locked lib!exec.CachePadded.) (lib!exec.rwlock.RwLock./RwLock/?ref_counts Poly) (lib!exec.rwlock.RwLock./RwLock/?inst Poly) (lib!exec.rwlock.RwLock./RwLock/?user_inv Poly))) ((lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked./InvariantPredicate_auto_RwLock_exc_locked )) ((lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts./InvariantPredicate_auto_RwLock_ref_counts )) ((lib!exec.CachePadded./CachePadded (lib!exec.CachePadded./CachePadded/?0 Poly))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%7./tuple%7 (tuple%7./tuple%7/?0 Poly) (tuple%7./tuple%7/?1 Poly) (tuple%7./tuple%7/?2 Poly) (tuple%7./tuple%7/?3 Poly) (tuple%7./tuple%7/?4 Poly) (tuple%7./tuple%7/?5 Poly) (tuple%7./tuple%7/?6 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun core!result.Result./Ok/0 (core!result.Result.) Poly)
(declare-fun core!result.Result./Err/0 (core!result.Result.) Poly)
(declare-fun vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (vstd!atomic.PermissionDataBool.) Int)
(declare-fun vstd!atomic.PermissionDataBool./PermissionDataBool/value (vstd!atomic.PermissionDataBool.) Bool)
(declare-fun vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (vstd!atomic.PermissionDataU64.) Int)
(declare-fun vstd!atomic.PermissionDataU64./PermissionDataU64/value (vstd!atomic.PermissionDataU64.) Int)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (vstd!atomic_ghost.AtomicU64.) vstd!atomic.PAtomicU64.)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun vstd!atomic_ghost.AtomicBool./AtomicBool/patomic (vstd!atomic_ghost.AtomicBool.) vstd!atomic.PAtomicBool.)
(declare-fun vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (vstd!atomic_ghost.AtomicBool.) Poly)
(declare-fun vstd!cell.PointsToData./PointsToData/pcell (vstd!cell.PointsToData.) vstd!cell.CellId.)
(declare-fun vstd!cell.PointsToData./PointsToData/value (vstd!cell.PointsToData.) core!option.Option.)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (lib!spec.rwlock.RwLockSpec.exc_locked_token_data.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value (lib!spec.rwlock.RwLockSpec.exc_locked_token_data.) Bool)
(declare-fun lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance (lib!spec.rwlock.RwLockSpec.ref_counts_token_data.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/key (lib!spec.rwlock.RwLockSpec.ref_counts_token_data.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value (lib!spec.rwlock.RwLockSpec.ref_counts_token_data.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (lib!spec.rwlock.RwLockSpec.exc_pending_token_data.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (lib!spec.rwlock.RwLockSpec.exc_pending_token_data.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance (lib!spec.rwlock.RwLockSpec.exc_guard_token_data.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/value (lib!spec.rwlock.RwLockSpec.exc_guard_token_data.) tuple%0.)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (lib!spec.rwlock.RwLockSpec.shared_pending_token_data.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (lib!spec.rwlock.RwLockSpec.shared_pending_token_data.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (lib!spec.rwlock.RwLockSpec.shared_pending_token_data.) Int)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (lib!spec.rwlock.RwLockSpec.shared_guard_token_data.) Poly)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (lib!spec.rwlock.RwLockSpec.shared_guard_token_data.) tuple%2.)
(declare-fun lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (lib!spec.rwlock.RwLockSpec.shared_guard_token_data.) Int)
(declare-fun lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/handle (lib!exec.rwlock.RwLockWriteGuard.) Poly)
(declare-fun lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/cell_perms (lib!exec.rwlock.RwLockWriteGuard.) Poly)
(declare-fun lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/tid (lib!exec.rwlock.RwLockReadGuard.) Int)
(declare-fun lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/perms (lib!exec.rwlock.RwLockReadGuard.) Poly)
(declare-fun lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/handle (lib!exec.rwlock.RwLockReadGuard.) Poly)
(declare-fun lib!exec.rwlock.RwLock./RwLock/data (lib!exec.rwlock.RwLock.) Poly)
(declare-fun lib!exec.rwlock.RwLock./RwLock/exc_locked (lib!exec.rwlock.RwLock.) lib!exec.CachePadded.)
(declare-fun lib!exec.rwlock.RwLock./RwLock/ref_counts (lib!exec.rwlock.RwLock.) Poly)
(declare-fun lib!exec.rwlock.RwLock./RwLock/inst (lib!exec.rwlock.RwLock.) Poly)
(declare-fun lib!exec.rwlock.RwLock./RwLock/user_inv (lib!exec.rwlock.RwLock.) Poly)
(declare-fun lib!exec.CachePadded./CachePadded/0 (lib!exec.CachePadded.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%7./tuple%7/0 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/1 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/2 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/3 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/4 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/5 (tuple%7.) Poly)
(declare-fun tuple%7./tuple%7/6 (tuple%7.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%core!result.Result. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%alloc!alloc.Global. Type)
(declare-const TYPE%vstd!atomic.PAtomicBool. Type)
(declare-const TYPE%vstd!atomic.PermissionBool. Type)
(declare-const TYPE%vstd!atomic.PermissionDataBool. Type)
(declare-const TYPE%vstd!atomic.PAtomicU64. Type)
(declare-const TYPE%vstd!atomic.PermissionU64. Type)
(declare-const TYPE%vstd!atomic.PermissionDataU64. Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredU64. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicU64. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredBool. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicBool. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PCell. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsToData. (Dcr Type) Type)
(declare-const TYPE%vstd!cell.CellId. Type)
(declare-fun TYPE%vstd!invariant.AtomicInvariant. (Dcr Type Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!invariant.OpenInvariantCredit. Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!multiset.Multiset. (Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.rwlock.RwLockWriteGuard. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.rwlock.RwLockReadGuard. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.rwlock.RwLock. (Dcr Type) Type)
(declare-const TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. Type)
(declare-const TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. Type)
(declare-fun TYPE%lib!exec.CachePadded. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%7. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!alloc.Global. (alloc!alloc.Global.) Poly)
(declare-fun %Poly%alloc!alloc.Global. (Poly) alloc!alloc.Global.)
(declare-fun Poly%vstd!atomic.PAtomicBool. (vstd!atomic.PAtomicBool.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicBool. (Poly) vstd!atomic.PAtomicBool.)
(declare-fun Poly%vstd!atomic.PAtomicU64. (vstd!atomic.PAtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicU64. (Poly) vstd!atomic.PAtomicU64.)
(declare-fun Poly%vstd!atomic.PermissionBool. (vstd!atomic.PermissionBool.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionBool. (Poly) vstd!atomic.PermissionBool.)
(declare-fun Poly%vstd!atomic.PermissionU64. (vstd!atomic.PermissionU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionU64. (Poly) vstd!atomic.PermissionU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>. (vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>. (Poly) vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>. (vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>. (Poly) vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>.)
(declare-fun Poly%vstd!cell.CellId. (vstd!cell.CellId.) Poly)
(declare-fun %Poly%vstd!cell.CellId. (Poly) vstd!cell.CellId.)
(declare-fun Poly%vstd!invariant.OpenInvariantCredit. (vstd!invariant.OpenInvariantCredit.) Poly)
(declare-fun %Poly%vstd!invariant.OpenInvariantCredit. (Poly) vstd!invariant.OpenInvariantCredit.)
(declare-fun Poly%vstd!map.Map<int./int.>. (vstd!map.Map<int./int.>.) Poly)
(declare-fun %Poly%vstd!map.Map<int./int.>. (Poly) vstd!map.Map<int./int.>.)
(declare-fun Poly%vstd!multiset.Multiset<int.>. (vstd!multiset.Multiset<int.>.) Poly)
(declare-fun %Poly%vstd!multiset.Multiset<int.>. (Poly) vstd!multiset.Multiset<int.>.)
(declare-fun Poly%vstd!set.Set<int.>. (vstd!set.Set<int.>.) Poly)
(declare-fun %Poly%vstd!set.Set<int.>. (Poly) vstd!set.Set<int.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%core!result.Result. (core!result.Result.) Poly)
(declare-fun %Poly%core!result.Result. (Poly) core!result.Result.)
(declare-fun Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.PermissionDataBool.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionDataBool. (Poly) vstd!atomic.PermissionDataBool.)
(declare-fun Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionDataU64. (Poly) vstd!atomic.PermissionDataU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicU64. (Poly) vstd!atomic_ghost.AtomicU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicBool. (Poly) vstd!atomic_ghost.AtomicBool.)
(declare-fun Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData.) Poly)
(declare-fun %Poly%vstd!cell.PointsToData. (Poly) vstd!cell.PointsToData.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.exc_locked_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly) lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.ref_counts_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly) lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.exc_pending_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly) lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.exc_guard_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Poly) lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.shared_pending_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly) lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)
(declare-fun Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data.) Poly)
(declare-fun %Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly) lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)
(declare-fun Poly%lib!exec.rwlock.RwLockWriteGuard. (lib!exec.rwlock.RwLockWriteGuard.) Poly)
(declare-fun %Poly%lib!exec.rwlock.RwLockWriteGuard. (Poly) lib!exec.rwlock.RwLockWriteGuard.)
(declare-fun Poly%lib!exec.rwlock.RwLockReadGuard. (lib!exec.rwlock.RwLockReadGuard.) Poly)
(declare-fun %Poly%lib!exec.rwlock.RwLockReadGuard. (Poly) lib!exec.rwlock.RwLockReadGuard.)
(declare-fun Poly%lib!exec.rwlock.RwLock. (lib!exec.rwlock.RwLock.) Poly)
(declare-fun %Poly%lib!exec.rwlock.RwLock. (Poly) lib!exec.rwlock.RwLock.)
(declare-fun Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. (lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.) Poly)
(declare-fun %Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. (Poly) lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.)
(declare-fun Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. (lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.) Poly)
(declare-fun %Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. (Poly) lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)
(declare-fun Poly%lib!exec.CachePadded. (lib!exec.CachePadded.) Poly)
(declare-fun %Poly%lib!exec.CachePadded. (Poly) lib!exec.CachePadded.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%7. (tuple%7.) Poly)
(declare-fun %Poly%tuple%7. (Poly) tuple%7.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x alloc!alloc.Global.)) (! (= x (%Poly%alloc!alloc.Global. (Poly%alloc!alloc.Global. x))) :pattern ((Poly%alloc!alloc.Global. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%alloc!alloc.Global.) (= x (Poly%alloc!alloc.Global. (%Poly%alloc!alloc.Global. x)))) :pattern ((has_type x TYPE%alloc!alloc.Global.)) )))
(assert (forall ((x alloc!alloc.Global.)) (! (has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.) :pattern ((has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.)) )))
(assert (forall ((x vstd!atomic.PAtomicBool.)) (! (= x (%Poly%vstd!atomic.PAtomicBool. (Poly%vstd!atomic.PAtomicBool. x))) :pattern ((Poly%vstd!atomic.PAtomicBool. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicBool.) (= x (Poly%vstd!atomic.PAtomicBool. (%Poly%vstd!atomic.PAtomicBool. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicBool.)) )))
(assert (forall ((x vstd!atomic.PAtomicBool.)) (! (has_type (Poly%vstd!atomic.PAtomicBool. x) TYPE%vstd!atomic.PAtomicBool.) :pattern ((has_type (Poly%vstd!atomic.PAtomicBool. x) TYPE%vstd!atomic.PAtomicBool.)) )))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (= x (%Poly%vstd!atomic.PAtomicU64. (Poly%vstd!atomic.PAtomicU64. x))) :pattern ((Poly%vstd!atomic.PAtomicU64. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicU64.) (= x (Poly%vstd!atomic.PAtomicU64. (%Poly%vstd!atomic.PAtomicU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicU64.)) )))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.) :pattern ((has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.)) )))
(assert (forall ((x vstd!atomic.PermissionBool.)) (! (= x (%Poly%vstd!atomic.PermissionBool. (Poly%vstd!atomic.PermissionBool. x))) :pattern ((Poly%vstd!atomic.PermissionBool. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionBool.) (= x (Poly%vstd!atomic.PermissionBool. (%Poly%vstd!atomic.PermissionBool. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionBool.)) )))
(assert (forall ((x vstd!atomic.PermissionBool.)) (! (has_type (Poly%vstd!atomic.PermissionBool. x) TYPE%vstd!atomic.PermissionBool.) :pattern ((has_type (Poly%vstd!atomic.PermissionBool. x) TYPE%vstd!atomic.PermissionBool.)) )))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (= x (%Poly%vstd!atomic.PermissionU64. (Poly%vstd!atomic.PermissionU64. x))) :pattern ((Poly%vstd!atomic.PermissionU64. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionU64.) (= x (Poly%vstd!atomic.PermissionU64. (%Poly%vstd!atomic.PermissionU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionU64.)) )))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.) :pattern ((has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.)) )))
(assert (forall ((x vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>. (Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPredBool. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.)) (= x (Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>. (%Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPredBool. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.))) )))
(assert (forall ((x vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>.)) (! (has_type (Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>. x) (TYPE%vstd!atomic_ghost.AtomicPredBool. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.)) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPredBool<lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.>. x) (TYPE%vstd!atomic_ghost.AtomicPredBool. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.))) )))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>. (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (= x (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>. (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.))) )))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>.)) (! (has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.))) )))
(assert (forall ((x vstd!cell.CellId.)) (! (= x (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. x))) :pattern ((Poly%vstd!cell.CellId. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!cell.CellId.) (= x (Poly%vstd!cell.CellId. (%Poly%vstd!cell.CellId. x)))) :pattern ((has_type x TYPE%vstd!cell.CellId.)) )))
(assert (forall ((x vstd!cell.CellId.)) (! (has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.) :pattern ((has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.)) )))
(assert (forall ((x vstd!invariant.OpenInvariantCredit.)) (! (= x (%Poly%vstd!invariant.OpenInvariantCredit. (Poly%vstd!invariant.OpenInvariantCredit. x))) :pattern ((Poly%vstd!invariant.OpenInvariantCredit. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!invariant.OpenInvariantCredit.) (= x (Poly%vstd!invariant.OpenInvariantCredit. (%Poly%vstd!invariant.OpenInvariantCredit. x)))) :pattern ((has_type x TYPE%vstd!invariant.OpenInvariantCredit.)) )))
(assert (forall ((x vstd!invariant.OpenInvariantCredit.)) (! (has_type (Poly%vstd!invariant.OpenInvariantCredit. x) TYPE%vstd!invariant.OpenInvariantCredit.) :pattern ((has_type (Poly%vstd!invariant.OpenInvariantCredit. x) TYPE%vstd!invariant.OpenInvariantCredit.)) )))
(assert (forall ((x vstd!map.Map<int./int.>.)) (! (= x (%Poly%vstd!map.Map<int./int.>. (Poly%vstd!map.Map<int./int.>. x))) :pattern ((Poly%vstd!map.Map<int./int.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ INT $ INT)) (= x (Poly%vstd!map.Map<int./int.>. (%Poly%vstd!map.Map<int./int.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ INT $ INT))) )))
(assert (forall ((x vstd!map.Map<int./int.>.)) (! (has_type (Poly%vstd!map.Map<int./int.>. x) (TYPE%vstd!map.Map. $ INT $ INT)) :pattern ((has_type (Poly%vstd!map.Map<int./int.>. x) (TYPE%vstd!map.Map. $ INT $ INT))) )))
(assert (forall ((x vstd!multiset.Multiset<int.>.)) (! (= x (%Poly%vstd!multiset.Multiset<int.>. (Poly%vstd!multiset.Multiset<int.>. x))) :pattern ((Poly%vstd!multiset.Multiset<int.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!multiset.Multiset. $ INT)) (= x (Poly%vstd!multiset.Multiset<int.>. (%Poly%vstd!multiset.Multiset<int.>. x)))) :pattern ((has_type x (TYPE%vstd!multiset.Multiset. $ INT))) )))
(assert (forall ((x vstd!multiset.Multiset<int.>.)) (! (has_type (Poly%vstd!multiset.Multiset<int.>. x) (TYPE%vstd!multiset.Multiset. $ INT)) :pattern ((has_type (Poly%vstd!multiset.Multiset<int.>. x) (TYPE%vstd!multiset.Multiset. $ INT))) )))
(assert (forall ((x vstd!set.Set<int.>.)) (! (= x (%Poly%vstd!set.Set<int.>. (Poly%vstd!set.Set<int.>. x))) :pattern ((Poly%vstd!set.Set<int.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ INT)) (= x (Poly%vstd!set.Set<int.>. (%Poly%vstd!set.Set<int.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ INT))) )))
(assert (forall ((x vstd!set.Set<int.>.)) (! (has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT)) :pattern ((has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x core!result.Result.)) (! (= x (%Poly%core!result.Result. (Poly%core!result.Result. x))) :pattern ((Poly%core!result.Result. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (= x (Poly%core!result.Result. (%Poly%core!result.Result. x)))) :pattern ((has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Ok _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Ok/0 x) (core!result.Result./Ok/?0 x)) :pattern ((core!result.Result./Ok/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Ok/0 (%Poly%core!result.Result. x)) T&)) :pattern ((core!result.Result./Ok/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (_0! Poly)) (! (=> (has_type _0! E&) (has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) :pattern ((has_type (Poly%core!result.Result. (core!result.Result./Err _0!)) (TYPE%core!result.Result. T&. T& E&. E&))) )))
(assert (forall ((x core!result.Result.)) (! (= (core!result.Result./Err/0 x) (core!result.Result./Err/?0 x)) :pattern ((core!result.Result./Err/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (x Poly)) (! (=> (has_type x (TYPE%core!result.Result. T&. T& E&. E&)) (has_type (core!result.Result./Err/0 (%Poly%core!result.Result. x)) E&)) :pattern ((core!result.Result./Err/0 (%Poly%core!result.Result. x)) (has_type x (TYPE%core!result.Result. T&. T& E&. E&))) )))
(define-fun is-core!result.Result./Ok_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Ok) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Ok_ x) (height_lt (height (core!result.Result./Ok/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Ok/0 x))) )))
(define-fun is-core!result.Result./Err_ ((c core!result.Result.)) Bool ((_ is core!result.Result./Err) c))
(assert (forall ((x core!result.Result.)) (! (=> (is-core!result.Result./Err_ x) (height_lt (height (core!result.Result./Err/0 x)) (height (Poly%core!result.Result. x)))) :pattern ((height (core!result.Result./Err/0 x))) )))
(assert (forall ((x vstd!atomic.PermissionDataBool.)) (! (= x (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. x))) :pattern ((Poly%vstd!atomic.PermissionDataBool. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionDataBool.) (= x (Poly%vstd!atomic.PermissionDataBool. (%Poly%vstd!atomic.PermissionDataBool. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionDataBool.)) )))
(assert (forall ((x vstd!atomic.PermissionDataBool.)) (! (= (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic x) (vstd!atomic.PermissionDataBool./PermissionDataBool/?patomic x)) :pattern ((vstd!atomic.PermissionDataBool./PermissionDataBool/patomic x)) )))
(assert (forall ((x vstd!atomic.PermissionDataBool.)) (! (= (vstd!atomic.PermissionDataBool./PermissionDataBool/value x) (vstd!atomic.PermissionDataBool./PermissionDataBool/?value x)) :pattern ((vstd!atomic.PermissionDataBool./PermissionDataBool/value x)) )))
(assert (forall ((x vstd!atomic.PermissionDataBool.)) (! (has_type (Poly%vstd!atomic.PermissionDataBool. x) TYPE%vstd!atomic.PermissionDataBool.) :pattern ((has_type (Poly%vstd!atomic.PermissionDataBool. x) TYPE%vstd!atomic.PermissionDataBool.)) )))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= x (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. x))) :pattern ((Poly%vstd!atomic.PermissionDataU64. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionDataU64.) (= x (Poly%vstd!atomic.PermissionDataU64. (%Poly%vstd!atomic.PermissionDataU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionDataU64.)) )))
(assert (forall ((_patomic! Int) (_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64./PermissionDataU64 _patomic! _value!)) TYPE%vstd!atomic.PermissionDataU64.)) :pattern ((has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64./PermissionDataU64 _patomic! _value!)) TYPE%vstd!atomic.PermissionDataU64.)) )))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic x) (vstd!atomic.PermissionDataU64./PermissionDataU64/?patomic x)) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/patomic x)) )))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value x) (vstd!atomic.PermissionDataU64./PermissionDataU64/?value x)) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionDataU64.) (uInv 64 (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. x)))) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. x)) (has_type x TYPE%vstd!atomic.PermissionDataU64.)) )))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicU64. (Poly%vstd!atomic_ghost.AtomicU64. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicU64. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicU64. (%Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) )))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicU64.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) )))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x)) )))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)) )))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) )))
(define-fun is-vstd!atomic_ghost.AtomicU64./AtomicU64_ ((c vstd!atomic_ghost.AtomicU64.)) Bool ((_ is vstd!atomic_ghost.AtomicU64./AtomicU64) c))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (=> (is-vstd!atomic_ghost.AtomicU64./AtomicU64_ x) (height_lt (height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x))) )))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicBool. (Poly%vstd!atomic_ghost.AtomicBool. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicBool. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicBool. (%Poly%vstd!atomic_ghost.AtomicBool. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))) )))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicBool.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))) )))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= (vstd!atomic_ghost.AtomicBool./AtomicBool/patomic x) (vstd!atomic_ghost.AtomicBool./AtomicBool/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/patomic x)) )))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (= (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x) (vstd!atomic_ghost.AtomicBool./AtomicBool/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x)) )))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&))) )))
(define-fun is-vstd!atomic_ghost.AtomicBool./AtomicBool_ ((c vstd!atomic_ghost.AtomicBool.)) Bool ((_ is vstd!atomic_ghost.AtomicBool./AtomicBool) c))
(assert (forall ((x vstd!atomic_ghost.AtomicBool.)) (! (=> (is-vstd!atomic_ghost.AtomicBool./AtomicBool_ x) (height_lt (height (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicBool. x)))) :pattern ((height (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv x))) )))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= x (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. x))) :pattern ((Poly%vstd!cell.PointsToData. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (= x (Poly%vstd!cell.PointsToData. (%Poly%vstd!cell.PointsToData. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsToData. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_pcell! vstd!cell.CellId.) (_value! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))) )))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/pcell x) (vstd!cell.PointsToData./PointsToData/?pcell x)) :pattern ((vstd!cell.PointsToData./PointsToData/pcell x)) )))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/value x) (vstd!cell.PointsToData./PointsToData/?value x)) :pattern ((vstd!cell.PointsToData./PointsToData/value x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (has_type (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x))) (TYPE%core!option.Option. V&. V&))) :pattern ((vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x)) (has_type x (TYPE%vstd!cell.PointsToData. V&. V&))) )))
(define-fun is-vstd!cell.PointsToData./PointsToData_ ((c vstd!cell.PointsToData.)) Bool ((_ is vstd!cell.PointsToData./PointsToData) c))
(assert (forall ((x vstd!cell.PointsToData.)) (! (=> (is-vstd!cell.PointsToData./PointsToData_ x) (height_lt (height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x))) (height (Poly%vstd!cell.PointsToData. x)))) :pattern ((height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x)))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! Poly) (_value! Bool)) (! (=> (has_type _instance! (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance x) (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x)) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value x) (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/?value x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data_ ((c lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance x)) (height (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance x))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! Poly) (_key! Int) (_value! Int)) (! (=> (has_type _instance! (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data _instance! _key! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data _instance! _key! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance x) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x)) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/key x) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?key x)) :pattern ((lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/key x)) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value x) (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/?value x)) :pattern ((lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data_ ((c lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance x)) (height (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance x))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! Poly) (_value! Int)) (! (=> (has_type _instance! (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance x) (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x)) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value x) (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/?value x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data_ ((c lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance x)) (height (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance x))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! Poly) (_value! tuple%0.)) (! (=> (has_type _instance! (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data _instance! _value!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance x) (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x)) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/value x) (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/?value x)) :pattern ((lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/value x)) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data_ ((c lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance x)) (height (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance x))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! Poly) (_key! Int) (_count! Int)) (! (=> (and (has_type _instance! (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (<= 0 _count!)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data _instance! _key! _count!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data _instance! _key! _count!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance x) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key x) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?key x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key x)) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count x) (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/?count x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&)) (<= 0 (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data_ ((c lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance x)) (height (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance x))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (= x (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x))) :pattern ((Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&)) (= x (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_instance! Poly) (_key! tuple%2.) (_count! Int)) (! (=> (and (has_type _instance! (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (Poly%tuple%2. _key!) (TYPE%tuple%2. $ INT T&. T&)) (<= 0 _count!)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data _instance! _key! _count!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) :pattern ((has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data _instance! _key! _count!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance x) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?instance x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key x) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?key x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&)) (has_type (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x))) (TYPE%tuple%2. $ INT T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count x) (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/?count x)) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&)) (<= 0 (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)))) :pattern ((lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)) (has_type x (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) )))
(define-fun is-lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data_ ((c lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) Bool ((_ is lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data) c))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data_ x) (height_lt (height (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance x)) (height (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)))) :pattern ((height (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance x))) )))
(assert (forall ((x lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)) (! (=> (is-lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data_ x) (height_lt (height (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key x))) (height (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. x)))) :pattern ((height (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key x)))) )))
(assert (forall ((x lib!exec.rwlock.RwLockWriteGuard.)) (! (= x (%Poly%lib!exec.rwlock.RwLockWriteGuard. (Poly%lib!exec.rwlock.RwLockWriteGuard. x))) :pattern ((Poly%lib!exec.rwlock.RwLockWriteGuard. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLockWriteGuard. T&. T&)) (= x (Poly%lib!exec.rwlock.RwLockWriteGuard. (%Poly%lib!exec.rwlock.RwLockWriteGuard. x)))) :pattern ((has_type x (TYPE%lib!exec.rwlock.RwLockWriteGuard. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_handle! Poly) (_cell_perms! Poly)) (! (=> (and (has_type _handle! (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. $ (TYPE%vstd!cell.PointsTo. T&. T&))) (has_type _cell_perms! (TYPE%vstd!cell.PointsTo. T&. T&))) (has_type (Poly%lib!exec.rwlock.RwLockWriteGuard. (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard _handle! _cell_perms!)) (TYPE%lib!exec.rwlock.RwLockWriteGuard. T&. T&))) :pattern ((has_type (Poly%lib!exec.rwlock.RwLockWriteGuard. (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard _handle! _cell_perms!)) (TYPE%lib!exec.rwlock.RwLockWriteGuard. T&. T&))) )))
(assert (forall ((x lib!exec.rwlock.RwLockWriteGuard.)) (! (= (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/handle x) (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/?handle x)) :pattern ((lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/handle x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLockWriteGuard. T&. T&)) (has_type (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/handle (%Poly%lib!exec.rwlock.RwLockWriteGuard. x)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. $ (TYPE%vstd!cell.PointsTo. T&. T&)))) :pattern ((lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/handle (%Poly%lib!exec.rwlock.RwLockWriteGuard. x)) (has_type x (TYPE%lib!exec.rwlock.RwLockWriteGuard. T&. T&))) )))
(assert (forall ((x lib!exec.rwlock.RwLockWriteGuard.)) (! (= (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/cell_perms x) (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/?cell_perms x)) :pattern ((lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/cell_perms x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLockWriteGuard. T&. T&)) (has_type (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/cell_perms (%Poly%lib!exec.rwlock.RwLockWriteGuard. x)) (TYPE%vstd!cell.PointsTo. T&. T&))) :pattern ((lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/cell_perms (%Poly%lib!exec.rwlock.RwLockWriteGuard. x)) (has_type x (TYPE%lib!exec.rwlock.RwLockWriteGuard. T&. T&))) )))
(define-fun is-lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard_ ((c lib!exec.rwlock.RwLockWriteGuard.)) Bool ((_ is lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard) c))
(assert (forall ((x lib!exec.rwlock.RwLockWriteGuard.)) (! (=> (is-lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard_ x) (height_lt (height (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/handle x)) (height (Poly%lib!exec.rwlock.RwLockWriteGuard. x)))) :pattern ((height (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/handle x))) )))
(assert (forall ((x lib!exec.rwlock.RwLockWriteGuard.)) (! (=> (is-lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard_ x) (height_lt (height (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/cell_perms x)) (height (Poly%lib!exec.rwlock.RwLockWriteGuard. x)))) :pattern ((height (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/cell_perms x))) )))
(assert (forall ((x lib!exec.rwlock.RwLockReadGuard.)) (! (= x (%Poly%lib!exec.rwlock.RwLockReadGuard. (Poly%lib!exec.rwlock.RwLockReadGuard. x))) :pattern ((Poly%lib!exec.rwlock.RwLockReadGuard. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLockReadGuard. T&. T&)) (= x (Poly%lib!exec.rwlock.RwLockReadGuard. (%Poly%lib!exec.rwlock.RwLockReadGuard. x)))) :pattern ((has_type x (TYPE%lib!exec.rwlock.RwLockReadGuard. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_tid! Int) (_perms! Poly) (_handle! Poly)) (! (=> (and (uInv SZ _tid!) (has_type _perms! (TYPE%vstd!cell.PointsTo. T&. T&)) (has_type _handle! (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. $ (TYPE%vstd!cell.PointsTo. T&. T&)))) (has_type (Poly%lib!exec.rwlock.RwLockReadGuard. (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard _tid! _perms! _handle!)) (TYPE%lib!exec.rwlock.RwLockReadGuard. T&. T&))) :pattern ((has_type (Poly%lib!exec.rwlock.RwLockReadGuard. (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard _tid! _perms! _handle!)) (TYPE%lib!exec.rwlock.RwLockReadGuard. T&. T&))) )))
(assert (forall ((x lib!exec.rwlock.RwLockReadGuard.)) (! (= (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/tid x) (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/?tid x)) :pattern ((lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/tid x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLockReadGuard. T&. T&)) (uInv SZ (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/tid (%Poly%lib!exec.rwlock.RwLockReadGuard. x)))) :pattern ((lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/tid (%Poly%lib!exec.rwlock.RwLockReadGuard. x)) (has_type x (TYPE%lib!exec.rwlock.RwLockReadGuard. T&. T&))) )))
(assert (forall ((x lib!exec.rwlock.RwLockReadGuard.)) (! (= (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/perms x) (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/?perms x)) :pattern ((lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/perms x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLockReadGuard. T&. T&)) (has_type (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/perms (%Poly%lib!exec.rwlock.RwLockReadGuard. x)) (TYPE%vstd!cell.PointsTo. T&. T&))) :pattern ((lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/perms (%Poly%lib!exec.rwlock.RwLockReadGuard. x)) (has_type x (TYPE%lib!exec.rwlock.RwLockReadGuard. T&. T&))) )))
(assert (forall ((x lib!exec.rwlock.RwLockReadGuard.)) (! (= (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/handle x) (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/?handle x)) :pattern ((lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/handle x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLockReadGuard. T&. T&)) (has_type (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/handle (%Poly%lib!exec.rwlock.RwLockReadGuard. x)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. $ (TYPE%vstd!cell.PointsTo. T&. T&)))) :pattern ((lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/handle (%Poly%lib!exec.rwlock.RwLockReadGuard. x)) (has_type x (TYPE%lib!exec.rwlock.RwLockReadGuard. T&. T&))) )))
(define-fun is-lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard_ ((c lib!exec.rwlock.RwLockReadGuard.)) Bool ((_ is lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard) c))
(assert (forall ((x lib!exec.rwlock.RwLockReadGuard.)) (! (=> (is-lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard_ x) (height_lt (height (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/perms x)) (height (Poly%lib!exec.rwlock.RwLockReadGuard. x)))) :pattern ((height (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/perms x))) )))
(assert (forall ((x lib!exec.rwlock.RwLockReadGuard.)) (! (=> (is-lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard_ x) (height_lt (height (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/handle x)) (height (Poly%lib!exec.rwlock.RwLockReadGuard. x)))) :pattern ((height (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/handle x))) )))
(assert (forall ((x lib!exec.rwlock.RwLock.)) (! (= x (%Poly%lib!exec.rwlock.RwLock. (Poly%lib!exec.rwlock.RwLock. x))) :pattern ((Poly%lib!exec.rwlock.RwLock. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&)) (= x (Poly%lib!exec.rwlock.RwLock. (%Poly%lib!exec.rwlock.RwLock. x)))) :pattern ((has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_data! Poly) (_exc_locked! lib!exec.CachePadded.) (_ref_counts! Poly) (_inst! Poly) (_user_inv! Poly)) (! (=> (and (has_type _data! (TYPE%vstd!cell.PCell. T&. T&)) (has_type (Poly%lib!exec.CachePadded. _exc_locked!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicBool. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.))) (has_type _ref_counts! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.)) (has_type _inst! (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&))) (has_type _user_inv! (TYPE%vstd!set.Set. T&. T&))) (has_type (Poly%lib!exec.rwlock.RwLock. (lib!exec.rwlock.RwLock./RwLock _data! _exc_locked! _ref_counts! _inst! _user_inv!)) (TYPE%lib!exec.rwlock.RwLock. T&. T&))) :pattern ((has_type (Poly%lib!exec.rwlock.RwLock. (lib!exec.rwlock.RwLock./RwLock _data! _exc_locked! _ref_counts! _inst! _user_inv!)) (TYPE%lib!exec.rwlock.RwLock. T&. T&))) )))
(assert (forall ((x lib!exec.rwlock.RwLock.)) (! (= (lib!exec.rwlock.RwLock./RwLock/data x) (lib!exec.rwlock.RwLock./RwLock/?data x)) :pattern ((lib!exec.rwlock.RwLock./RwLock/data x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&)) (has_type (lib!exec.rwlock.RwLock./RwLock/data (%Poly%lib!exec.rwlock.RwLock. x)) (TYPE%vstd!cell.PCell. T&. T&))) :pattern ((lib!exec.rwlock.RwLock./RwLock/data (%Poly%lib!exec.rwlock.RwLock. x)) (has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&))) )))
(assert (forall ((x lib!exec.rwlock.RwLock.)) (! (= (lib!exec.rwlock.RwLock./RwLock/exc_locked x) (lib!exec.rwlock.RwLock./RwLock/?exc_locked x)) :pattern ((lib!exec.rwlock.RwLock./RwLock/exc_locked x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.rwlock.RwLock./RwLock/exc_locked (%Poly%lib!exec.rwlock.RwLock. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicBool. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.)))) :pattern ((lib!exec.rwlock.RwLock./RwLock/exc_locked (%Poly%lib!exec.rwlock.RwLock. x)) (has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&))) )))
(assert (forall ((x lib!exec.rwlock.RwLock.)) (! (= (lib!exec.rwlock.RwLock./RwLock/ref_counts x) (lib!exec.rwlock.RwLock./RwLock/?ref_counts x)) :pattern ((lib!exec.rwlock.RwLock./RwLock/ref_counts x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&)) (has_type (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. x)) (has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&))) )))
(assert (forall ((x lib!exec.rwlock.RwLock.)) (! (= (lib!exec.rwlock.RwLock./RwLock/inst x) (lib!exec.rwlock.RwLock./RwLock/?inst x)) :pattern ((lib!exec.rwlock.RwLock./RwLock/inst x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&)) (has_type (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. x)) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)))) :pattern ((lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. x)) (has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&))) )))
(assert (forall ((x lib!exec.rwlock.RwLock.)) (! (= (lib!exec.rwlock.RwLock./RwLock/user_inv x) (lib!exec.rwlock.RwLock./RwLock/?user_inv x)) :pattern ((lib!exec.rwlock.RwLock./RwLock/user_inv x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&)) (has_type (lib!exec.rwlock.RwLock./RwLock/user_inv (%Poly%lib!exec.rwlock.RwLock. x)) (TYPE%vstd!set.Set. T&. T&))) :pattern ((lib!exec.rwlock.RwLock./RwLock/user_inv (%Poly%lib!exec.rwlock.RwLock. x)) (has_type x (TYPE%lib!exec.rwlock.RwLock. T&. T&))) )))
(define-fun is-lib!exec.rwlock.RwLock./RwLock_ ((c lib!exec.rwlock.RwLock.)) Bool ((_ is lib!exec.rwlock.RwLock./RwLock) c))
(assert (forall ((x lib!exec.rwlock.RwLock.)) (! (=> (is-lib!exec.rwlock.RwLock./RwLock_ x) (height_lt (height (lib!exec.rwlock.RwLock./RwLock/data x)) (height (Poly%lib!exec.rwlock.RwLock. x)))) :pattern ((height (lib!exec.rwlock.RwLock./RwLock/data x))) )))
(assert (forall ((x lib!exec.rwlock.RwLock.)) (! (=> (is-lib!exec.rwlock.RwLock./RwLock_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.rwlock.RwLock./RwLock/exc_locked x))) (height (Poly%lib!exec.rwlock.RwLock. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.rwlock.RwLock./RwLock/exc_locked x)))) )))
(assert (forall ((x lib!exec.rwlock.RwLock.)) (! (=> (is-lib!exec.rwlock.RwLock./RwLock_ x) (height_lt (height (lib!exec.rwlock.RwLock./RwLock/ref_counts x)) (height (Poly%lib!exec.rwlock.RwLock. x)))) :pattern ((height (lib!exec.rwlock.RwLock./RwLock/ref_counts x))) )))
(assert (forall ((x lib!exec.rwlock.RwLock.)) (! (=> (is-lib!exec.rwlock.RwLock./RwLock_ x) (height_lt (height (lib!exec.rwlock.RwLock./RwLock/inst x)) (height (Poly%lib!exec.rwlock.RwLock. x)))) :pattern ((height (lib!exec.rwlock.RwLock./RwLock/inst x))) )))
(assert (forall ((x lib!exec.rwlock.RwLock.)) (! (=> (is-lib!exec.rwlock.RwLock./RwLock_ x) (height_lt (height (lib!exec.rwlock.RwLock./RwLock/user_inv x)) (height (Poly%lib!exec.rwlock.RwLock. x)))) :pattern ((height (lib!exec.rwlock.RwLock./RwLock/user_inv x))) )))
(assert (forall ((x lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.)) (! (= x (%Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. (Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. x))) :pattern ((Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.) (= x (Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. (%Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. x)))) :pattern ((has_type x TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.)) )))
(assert (forall ((x lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.)) (! (has_type (Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. x) TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.) :pattern ((has_type (Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. x) TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked.)) )))
(assert (forall ((x lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (! (= x (%Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. (Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. x))) :pattern ((Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.) (= x (Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. (%Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. x)))) :pattern ((has_type x TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) )))
(assert (forall ((x lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (! (has_type (Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. x) TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.) :pattern ((has_type (Poly%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. x) TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) )))
(assert (forall ((x lib!exec.CachePadded.)) (! (= x (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. x))) :pattern ((Poly%lib!exec.CachePadded. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.CachePadded. T&. T&)) (= x (Poly%lib!exec.CachePadded. (%Poly%lib!exec.CachePadded. x)))) :pattern ((has_type x (TYPE%lib!exec.CachePadded. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%lib!exec.CachePadded. (lib!exec.CachePadded./CachePadded _0!)) (TYPE%lib!exec.CachePadded. T&. T&))) :pattern ((has_type (Poly%lib!exec.CachePadded. (lib!exec.CachePadded./CachePadded _0!)) (TYPE%lib!exec.CachePadded. T&. T&))) )))
(assert (forall ((x lib!exec.CachePadded.)) (! (= (lib!exec.CachePadded./CachePadded/0 x) (lib!exec.CachePadded./CachePadded/?0 x)) :pattern ((lib!exec.CachePadded./CachePadded/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.CachePadded. T&. T&)) (has_type (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. x)) T&)) :pattern ((lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. x)) (has_type x (TYPE%lib!exec.CachePadded. T&. T&))) )))
(define-fun is-lib!exec.CachePadded./CachePadded_ ((c lib!exec.CachePadded.)) Bool ((_ is lib!exec.CachePadded./CachePadded) c))
(assert (forall ((x lib!exec.CachePadded.)) (! (=> (is-lib!exec.CachePadded./CachePadded_ x) (height_lt (height (lib!exec.CachePadded./CachePadded/0 x)) (height (Poly%lib!exec.CachePadded. x)))) :pattern ((height (lib!exec.CachePadded./CachePadded/0 x))) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) )))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))) )))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) )))
(assert (forall ((x tuple%7.)) (! (= x (%Poly%tuple%7. (Poly%tuple%7. x))) :pattern ((Poly%tuple%7. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (= x (Poly%tuple%7. (%Poly%tuple%7. x)))) :pattern ((has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly) (_4! Poly) (_5! Poly) (_6! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&) (has_type _4! T%4&) (has_type _5! T%5&) (has_type _6! T%6&)) (has_type (Poly%tuple%7. (tuple%7./tuple%7 _0! _1! _2! _3! _4! _5! _6!)) (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) :pattern ((has_type (Poly%tuple%7. (tuple%7./tuple%7 _0! _1! _2! _3! _4! _5! _6!)) (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/0 x) (tuple%7./tuple%7/?0 x)) :pattern ((tuple%7./tuple%7/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/0 (%Poly%tuple%7. x)) T%0&)) :pattern ((tuple%7./tuple%7/0 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/1 x) (tuple%7./tuple%7/?1 x)) :pattern ((tuple%7./tuple%7/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/1 (%Poly%tuple%7. x)) T%1&)) :pattern ((tuple%7./tuple%7/1 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/2 x) (tuple%7./tuple%7/?2 x)) :pattern ((tuple%7./tuple%7/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/2 (%Poly%tuple%7. x)) T%2&)) :pattern ((tuple%7./tuple%7/2 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/3 x) (tuple%7./tuple%7/?3 x)) :pattern ((tuple%7./tuple%7/3 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/3 (%Poly%tuple%7. x)) T%3&)) :pattern ((tuple%7./tuple%7/3 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/4 x) (tuple%7./tuple%7/?4 x)) :pattern ((tuple%7./tuple%7/4 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/4 (%Poly%tuple%7. x)) T%4&)) :pattern ((tuple%7./tuple%7/4 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/5 x) (tuple%7./tuple%7/?5 x)) :pattern ((tuple%7./tuple%7/5 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/5 (%Poly%tuple%7. x)) T%5&)) :pattern ((tuple%7./tuple%7/5 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(assert (forall ((x tuple%7.)) (! (= (tuple%7./tuple%7/6 x) (tuple%7./tuple%7/?6 x)) :pattern ((tuple%7./tuple%7/6 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type (tuple%7./tuple%7/6 (%Poly%tuple%7. x)) T%6&)) :pattern ((tuple%7./tuple%7/6 (%Poly%tuple%7. x)) (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&))) )))
(define-fun is-tuple%7./tuple%7_ ((c tuple%7.)) Bool ((_ is tuple%7./tuple%7) c))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/0 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/0 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/1 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/1 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/2 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/2 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/3 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/3 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/4 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/4 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/5 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/5 x))) )))
(assert (forall ((x tuple%7.)) (! (=> (is-tuple%7./tuple%7_ x) (height_lt (height (tuple%7./tuple%7/6 x)) (height (Poly%tuple%7. x)))) :pattern ((height (tuple%7./tuple%7/6 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (has_type y (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&)) (ext_eq deep T%0& (tuple%7./tuple%7/0 (%Poly%tuple%7. x)) (tuple%7./tuple%7/0 (%Poly%tuple%7. y))) (ext_eq deep T%1& (tuple%7./tuple%7/1 (%Poly%tuple%7. x)) (tuple%7./tuple%7/1 (%Poly%tuple%7. y))) (ext_eq deep T%2& (tuple%7./tuple%7/2 (%Poly%tuple%7. x)) (tuple%7./tuple%7/2 (%Poly%tuple%7. y))) (ext_eq deep T%3& (tuple%7./tuple%7/3 (%Poly%tuple%7. x)) (tuple%7./tuple%7/3 (%Poly%tuple%7. y))) (ext_eq deep T%4& (tuple%7./tuple%7/4 (%Poly%tuple%7. x)) (tuple%7./tuple%7/4 (%Poly%tuple%7. y))) (ext_eq deep T%5& (tuple%7./tuple%7/5 (%Poly%tuple%7. x)) (tuple%7./tuple%7/5 (%Poly%tuple%7. y))) (ext_eq deep T%6& (tuple%7./tuple%7/6 (%Poly%tuple%7. x)) (tuple%7./tuple%7/6 (%Poly%tuple%7. y)))) (ext_eq deep (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&) x y)) :pattern ((ext_eq deep (TYPE%tuple%7. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. (Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!invariant.InvariantPredicate. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. (Dcr Type Dcr Type Dcr Type) Bool)
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::result::is_ok")
(declare-fun vstd!std_specs.result.is_ok.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::result::is_err")
(declare-fun vstd!std_specs.result.is_err.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%0::view")
(declare-fun vstd!atomic.impl&%0.view.? (Poly) vstd!atomic.PermissionDataBool.)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%1::id")
(declare-fun vstd!atomic.impl&%1.id.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%8::view")
(declare-fun vstd!atomic.impl&%8.view.? (Poly) vstd!atomic.PermissionDataU64.)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%9::id")
(declare-fun vstd!atomic.impl&%9.id.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::AtomicInvariantPredicate::atomic_inv")
(declare-fun vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv%default%.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%1::well_formed")
(declare-fun vstd!atomic_ghost.impl&%1.well_formed.? (Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%1::constant")
(declare-fun vstd!atomic_ghost.impl&%1.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%21::well_formed")
(declare-fun vstd!atomic_ghost.impl&%21.well_formed.? (Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%21::constant")
(declare-fun vstd!atomic_ghost.impl&%21.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::cell::impl&%2::view")
(declare-fun vstd!cell.impl&%2.view.? (Dcr Type Poly) vstd!cell.PointsToData.)
(set-info :comment ";; Function-Decl vstd::cell::impl&%3::id")
(declare-fun vstd!cell.impl&%3.id.? (Dcr Type Poly) vstd!cell.CellId.)
(set-info :comment ";; Function-Decl vstd::invariant::InvariantPredicate::inv")
(declare-fun vstd!invariant.InvariantPredicate.inv.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!invariant.InvariantPredicate.inv%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::invariant::impl&%0::constant")
(declare-fun vstd!invariant.impl&%0.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::invariant::AtomicInvariant::namespace")
(declare-fun vstd!invariant.AtomicInvariant.namespace.? (Dcr Type Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::invariant::AtomicInvariant::inv")
(declare-fun vstd!invariant.AtomicInvariant.inv.? (Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::count")
(declare-fun vstd!multiset.impl&%0.count.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::len")
(declare-fun vstd!multiset.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::empty")
(declare-fun vstd!multiset.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::from_map")
(declare-fun vstd!multiset.impl&%0.from_map.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::singleton")
(declare-fun vstd!multiset.impl&%0.singleton.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::add")
(declare-fun vstd!multiset.impl&%0.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::sub")
(declare-fun vstd!multiset.impl&%0.sub.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::subset_of")
(declare-fun vstd!multiset.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::filter")
(declare-fun vstd!multiset.impl&%0.filter.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::choose")
(declare-fun vstd!multiset.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::multiset::impl&%0::dom")
(declare-fun vstd!multiset.impl&%0.dom.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_locked::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%4.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.exc_locked_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::ref_counts::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%5.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.ref_counts_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::ref_counts::map_agree")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::ref_counts::map_agree_strict")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_pending::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%6.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.exc_pending_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_pending::option_agree_strict")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_pending::option_agree")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_guard::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%7.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.exc_guard_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_guard::option_agree_strict")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::exc_guard::option_agree")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::shared_pending::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%8.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.shared_pending_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::shared_pending::multiset_agree_strict")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::shared_guard::view")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%9.view.? (Dcr Type Poly) lib!spec.rwlock.RwLockSpec.shared_guard_token_data.)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::shared_guard::multiset_agree_strict")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Instance::user_inv")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%10.user_inv.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::rwlock::RwLockSpec::Instance::rc_width")
(declare-fun lib!spec.rwlock.RwLockSpec.impl&%10.rc_width.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::rwlock::RwLockReadGuard::view")
(declare-fun lib!exec.rwlock.impl&%0.view.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::exec::rwlock::MAX_RC")
(declare-fun lib!exec.rwlock.MAX_RC.? () Int)
(set-info :comment ";; Function-Decl lib::exec::rwlock::RwLock::wf")
(declare-fun lib!exec.rwlock.impl&%3.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::rwlock::RwLock::inv")
(declare-fun lib!exec.rwlock.impl&%4.inv.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::rwlock::RwLock::thread_id_valid")
(declare-fun lib!exec.rwlock.impl&%4.thread_id_valid.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::rwlock::RwLock::max_threads")
(declare-fun lib!exec.rwlock.impl&%4.max_threads.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::rwlock::RwLock::wf_read_handle")
(declare-fun lib!exec.rwlock.impl&%4.wf_read_handle.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::rwlock::RwLock::wf_write_handle")
(declare-fun lib!exec.rwlock.impl&%4.wf_write_handle.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::option::OptionAdditionalFns::tracked_unwrap")
(declare-fun req%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (= (req%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self!) (=> %%global_location_label%%0 (%B (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))) :pattern ((req%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self!)) )))
(declare-fun ens%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (t! Poly)) (! (= (ens%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self! t!) (and (has_type t! T&) (= t! (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))) :pattern ((ens%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self! t!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::ResultAdditionalSpecFns::is_Ok")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!) BOOL)) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? Self%&. Self%& T&. T& E&. E& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::impl&%0::is_Ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.impl&%0.is_Ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (self! Poly)) (! (= (vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!) (B (is-core!result.Result./Ok_ (%Poly%core!result.Result. self!)))) :pattern ((vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.? $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%3 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%4 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%5 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::is_ok")
(assert (fuel_bool_default fuel%vstd!std_specs.result.is_ok.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.is_ok.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! Poly)) (! (= (vstd!std_specs.result.is_ok.? T&. T& E&. E& result!) (is-core!result.Result./Ok_ (%Poly%core!result.Result. result!))) :pattern ((vstd!std_specs.result.is_ok.? T&. T& E&. E& result!)) ))))
(set-info :comment ";; Function-Specs core::result::impl&%0::is_ok")
(declare-fun ens%core!result.impl&%0.is_ok. (Dcr Type Dcr Type core!result.Result. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.) (b! Bool)) (! (= (ens%core!result.impl&%0.is_ok. T&. T& E&. E& result! b!) (= b! (is-core!result.Result./Ok_ (%Poly%core!result.Result. (Poly%core!result.Result. result!))))) :pattern ((ens%core!result.impl&%0.is_ok. T&. T& E&. E& result! b!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::result::is_err")
(assert (fuel_bool_default fuel%vstd!std_specs.result.is_err.))
(assert (=> (fuel_bool fuel%vstd!std_specs.result.is_err.) (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! Poly)) (! (= (vstd!std_specs.result.is_err.? T&. T& E&. E& result!) (is-core!result.Result./Err_ (%Poly%core!result.Result. result!))) :pattern ((vstd!std_specs.result.is_err.? T&. T& E&. E& result!)) ))))
(set-info :comment ";; Function-Specs core::result::impl&%0::is_err")
(declare-fun ens%core!result.impl&%0.is_err. (Dcr Type Dcr Type core!result.Result. Bool) Bool)
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type) (result! core!result.Result.) (b! Bool)) (! (= (ens%core!result.impl&%0.is_err. T&. T& E&. E& result! b!) (= b! (is-core!result.Result./Err_ (%Poly%core!result.Result. (Poly%core!result.Result. result!))))) :pattern ((ens%core!result.impl&%0.is_err. T&. T& E&. E& result! b!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::vec_index")
(declare-fun req%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int)) (! (= (req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!) (=> %%global_location_label%%6 (< i! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!))))) :pattern ((req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!)) )))
(declare-fun ens%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!) (and (has_type element! T&) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (I i!))))) :pattern ((ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::axiom_spec_len")
(declare-fun ens%vstd!std_specs.vec.axiom_spec_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (= (ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!)) )))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::len")
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%0::new")
(declare-fun ens%alloc!vec.impl&%0.new. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%alloc!vec.impl&%0.new. T&. T& v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ TYPE%alloc!alloc.Global.) v!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%0.new. T&. T& v!)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::push")
(declare-fun ens%alloc!vec.impl&%1.push. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (value! Poly)) (! (= (ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq.Seq.push.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) value!)))) :pattern ((ens%alloc!vec.impl&%1.push. T&. T& A&. A& pre%vec! vec! value!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%7 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%8 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%1::load")
(declare-fun req%vstd!atomic.impl&%1.load. (vstd!atomic.PAtomicBool. vstd!atomic.PermissionBool.) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((self! vstd!atomic.PAtomicBool.) (perm! vstd!atomic.PermissionBool.)) (! (= (req%vstd!atomic.impl&%1.load. self! perm!) (=> %%global_location_label%%9 (= (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. self!)) (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm!)))))))) :pattern ((req%vstd!atomic.impl&%1.load. self! perm!)) )))
(declare-fun ens%vstd!atomic.impl&%1.load. (vstd!atomic.PAtomicBool. vstd!atomic.PermissionBool. Bool) Bool)
(assert (forall ((self! vstd!atomic.PAtomicBool.) (perm! vstd!atomic.PermissionBool.) (ret! Bool)) (! (= (ens%vstd!atomic.impl&%1.load. self! perm! ret!) (= (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm!))))) ret!)) :pattern ((ens%vstd!atomic.impl&%1.load. self! perm! ret!)) )))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%1::store")
(declare-fun req%vstd!atomic.impl&%1.store. (vstd!atomic.PAtomicBool. vstd!atomic.PermissionBool. Bool) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((self! vstd!atomic.PAtomicBool.) (pre%perm! vstd!atomic.PermissionBool.) (v! Bool)) (! (= (req%vstd!atomic.impl&%1.store. self! pre%perm! v!) (=> %%global_location_label%%10 (= (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. self!)) (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. pre%perm!)))))))) :pattern ((req%vstd!atomic.impl&%1.store. self! pre%perm! v!)) )))
(declare-fun ens%vstd!atomic.impl&%1.store. (vstd!atomic.PAtomicBool. vstd!atomic.PermissionBool. vstd!atomic.PermissionBool. Bool) Bool)
(assert (forall ((self! vstd!atomic.PAtomicBool.) (pre%perm! vstd!atomic.PermissionBool.) (perm! vstd!atomic.PermissionBool.) (v! Bool)) (! (= (ens%vstd!atomic.impl&%1.store. self! pre%perm! perm! v!) (and (= (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm!))))) v!) (= (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. self!)) (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm!)))))))) :pattern ((ens%vstd!atomic.impl&%1.store. self! pre%perm! perm! v!)) )))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%1::compare_exchange")
(declare-fun req%vstd!atomic.impl&%1.compare_exchange. (vstd!atomic.PAtomicBool. vstd!atomic.PermissionBool. Bool Bool) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((self! vstd!atomic.PAtomicBool.) (pre%perm! vstd!atomic.PermissionBool.) (current! Bool) (new! Bool)) (! (= (req%vstd!atomic.impl&%1.compare_exchange. self! pre%perm! current! new!) (=> %%global_location_label%%11 (= (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. self!)) (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. pre%perm!)))))))) :pattern ((req%vstd!atomic.impl&%1.compare_exchange. self! pre%perm! current! new!)) )))
(declare-fun ens%vstd!atomic.impl&%1.compare_exchange. (vstd!atomic.PAtomicBool. vstd!atomic.PermissionBool. vstd!atomic.PermissionBool. Bool Bool core!result.Result.) Bool)
(assert (forall ((self! vstd!atomic.PAtomicBool.) (pre%perm! vstd!atomic.PermissionBool.) (perm! vstd!atomic.PermissionBool.) (current! Bool) (new! Bool) (ret! core!result.Result.)) (! (= (ens%vstd!atomic.impl&%1.compare_exchange. self! pre%perm! perm! current! new! ret!) (and (has_type (Poly%core!result.Result. ret!) (TYPE%core!result.Result. $ BOOL $ BOOL)) (and (= (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. self!)) (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm!)))))) (ite (is-core!result.Result./Ok_ ret!) (let ((r$ (%B (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. ret!)))))) (and (and (= current! (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. pre%perm!)))))) (= (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm!))))) new!)) (= r$ (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. pre%perm!)))))))) (let ((r$ (%B (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. ret!)))))) (and (and (not (= current! (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. pre%perm!))))))) (= (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm!))))) (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. pre%perm!))))))) (= r$ (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. pre%perm!)))))))))))) :pattern ((ens%vstd!atomic.impl&%1.compare_exchange. self! pre%perm! perm! current! new! ret!)) )))
(set-info :comment ";; Function-Axioms vstd::atomic::impl&%8::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%vstd!atomic.PermissionU64.) (has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? self!)) TYPE%vstd!atomic.PermissionDataU64.)) :pattern ((vstd!atomic.impl&%8.view.? self!)) )))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%9::load")
(declare-fun req%vstd!atomic.impl&%9.load. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64.) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (perm! vstd!atomic.PermissionU64.)) (! (= (req%vstd!atomic.impl&%9.load. self! perm!) (=> %%global_location_label%%12 (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!)))))))) :pattern ((req%vstd!atomic.impl&%9.load. self! perm!)) )))
(declare-fun ens%vstd!atomic.impl&%9.load. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. Int) Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (perm! vstd!atomic.PermissionU64.) (ret! Int)) (! (= (ens%vstd!atomic.impl&%9.load. self! perm! ret!) (and (uInv 64 ret!) (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!))))) ret!))) :pattern ((ens%vstd!atomic.impl&%9.load. self! perm! ret!)) )))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%9::compare_exchange")
(declare-fun req%vstd!atomic.impl&%9.compare_exchange. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. Int Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (pre%perm! vstd!atomic.PermissionU64.) (current! Int) (new! Int)) (! (= (req%vstd!atomic.impl&%9.compare_exchange. self! pre%perm! current! new!) (=> %%global_location_label%%13 (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))))) :pattern ((req%vstd!atomic.impl&%9.compare_exchange. self! pre%perm! current! new!)) )))
(declare-fun ens%vstd!atomic.impl&%9.compare_exchange. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. vstd!atomic.PermissionU64. Int Int core!result.Result.) Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (pre%perm! vstd!atomic.PermissionU64.) (perm! vstd!atomic.PermissionU64.) (current! Int) (new! Int) (ret! core!result.Result.)) (! (= (ens%vstd!atomic.impl&%9.compare_exchange. self! pre%perm! perm! current! new! ret!) (and (has_type (Poly%core!result.Result. ret!) (TYPE%core!result.Result. $ (UINT 64) $ (UINT 64))) (and (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!)))))) (ite (is-core!result.Result./Ok_ ret!) (let ((r$ (%I (core!result.Result./Ok/0 (%Poly%core!result.Result. (Poly%core!result.Result. ret!)))))) (and (and (= current! (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))) (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!))))) new!)) (= r$ (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))))) (let ((r$ (%I (core!result.Result./Err/0 (%Poly%core!result.Result. (Poly%core!result.Result. ret!)))))) (and (and (not (= current! (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!))))))) (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!))))) (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!))))))) (= r$ (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))))))))) :pattern ((ens%vstd!atomic.impl&%9.compare_exchange. self! pre%perm! perm! current! new! ret!)) )))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::AtomicInvariantPredicate::atomic_inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (G&. Dcr) (G& Type) (k! Poly) (v! Poly) (g! Poly)) (! (=> (and (has_type k! K&) (has_type v! V&) (has_type g! G&)) (has_type (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Self%&. Self%& K&. K& V&. V& G&. G& k! v! g!) BOOL)) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Self%&. Self%& K&. K& V&. V& G&. G& k! v! g!)) )))
(set-info :comment ";; Function-Axioms vstd::cell::impl&%2::view")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!cell.PointsTo. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& self!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((vstd!cell.impl&%2.view.? V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::new")
(declare-fun ens%vstd!cell.impl&%3.new. (Dcr Type Poly tuple%2.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (v! Poly) (pt! tuple%2.)) (! (= (ens%vstd!cell.impl&%3.new. V&. V& v! pt!) (and (has_type (Poly%tuple%2. pt!) (TYPE%tuple%2. $ (TYPE%vstd!cell.PCell. V&. V&) (TRACKED $) (TYPE%vstd!cell.PointsTo. V&. V&))) (= (vstd!cell.impl&%2.view.? V&. V& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. pt!)))) (vstd!cell.PointsToData./PointsToData (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? V&. V& (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. pt!)))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some v!))))))) :pattern ((ens%vstd!cell.impl&%3.new. V&. V& v! pt!)) )))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::put")
(declare-fun req%vstd!cell.impl&%3.put. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly) (v! Poly)) (! (= (req%vstd!cell.impl&%3.put. V&. V& self! pre%perm! v!) (=> %%global_location_label%%14 (= (vstd!cell.impl&%2.view.? V&. V& pre%perm!) (vstd!cell.PointsToData./PointsToData (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? V&. V& self!))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((req%vstd!cell.impl&%3.put. V&. V& self! pre%perm! v!)) )))
(declare-fun ens%vstd!cell.impl&%3.put. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!cell.impl&%3.put. V&. V& self! pre%perm! perm! v!) (and (has_type perm! (TYPE%vstd!cell.PointsTo. V&. V&)) (= (vstd!cell.impl&%2.view.? V&. V& perm!) (vstd!cell.PointsToData./PointsToData (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? V&. V& self!))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some v!))))))) :pattern ((ens%vstd!cell.impl&%3.put. V&. V& self! pre%perm! perm! v!)) )))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::take")
(declare-fun req%vstd!cell.impl&%3.take. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly)) (! (= (req%vstd!cell.impl&%3.take. V&. V& self! pre%perm!) (and (=> %%global_location_label%%15 (= (vstd!cell.impl&%3.id.? V&. V& self!) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))) (=> %%global_location_label%%16 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))))))))) :pattern ((req%vstd!cell.impl&%3.take. V&. V& self! pre%perm!)) )))
(declare-fun ens%vstd!cell.impl&%3.take. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!cell.impl&%3.take. V&. V& self! pre%perm! perm! v!) (and (has_type v! V&) (has_type perm! (TYPE%vstd!cell.PointsTo. V&. V&)) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!))))) (= (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))) core!option.Option./None) (= v! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))))))) :pattern ((ens%vstd!cell.impl&%3.take. V&. V& self! pre%perm! perm! v!)) )))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::borrow")
(declare-fun req%vstd!cell.impl&%3.borrow. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (perm! Poly)) (! (= (req%vstd!cell.impl&%3.borrow. V&. V& self! perm!) (and (=> %%global_location_label%%17 (= (vstd!cell.impl&%3.id.? V&. V& self!) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))))) (=> %%global_location_label%%18 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))))))))))) :pattern ((req%vstd!cell.impl&%3.borrow. V&. V& self! perm!)) )))
(declare-fun ens%vstd!cell.impl&%3.borrow. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!cell.impl&%3.borrow. V&. V& self! perm! v!) (and (has_type v! V&) (= v! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))))))))) :pattern ((ens%vstd!cell.impl&%3.borrow. V&. V& self! perm! v!)) )))
(set-info :comment ";; Function-Axioms vstd::invariant::InvariantPredicate::inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (k! Poly) (v! Poly)) (! (=> (and (has_type k! K&) (has_type v! V&)) (has_type (vstd!invariant.InvariantPredicate.inv.? Self%&. Self%& K&. K& V&. V& k! v!) BOOL)) :pattern ((vstd!invariant.InvariantPredicate.inv.? Self%&. Self%& K&. K& V&. V& k! v!)) )))
(set-info :comment ";; Function-Axioms vstd::invariant::impl&%0::constant")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!invariant.AtomicInvariant. K&. K& V&. V& Pred&. Pred&)) (has_type (vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!) K&)) :pattern ((vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!)) )))
(set-info :comment ";; Function-Axioms vstd::invariant::AtomicInvariant::inv")
(assert (fuel_bool_default fuel%vstd!invariant.AtomicInvariant.inv.))
(assert (=> (fuel_bool fuel%vstd!invariant.AtomicInvariant.inv.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (Pred&. Dcr) (Pred& Type) (self! Poly) (v! Poly)) (! (= (vstd!invariant.AtomicInvariant.inv.? K&. K& V&. V& Pred&. Pred& self! v!) (%B (vstd!invariant.InvariantPredicate.inv.? Pred&. Pred& K&. K& V&. V& (vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!) v!))) :pattern ((vstd!invariant.AtomicInvariant.inv.? K&. K& V&. V& Pred&. Pred& self! v!)) ))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::tracked_remove")
(declare-fun req%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!) (=> %%global_location_label%%19 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!)) )))
(declare-fun ens%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!) (and (has_type v! V&) (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.remove.? K&. K& V&. V& pre%self! key!)) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& pre%self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%20 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%21 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%22 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%23 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%24 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%25 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%26 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::count")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type value! V&)) (<= 0 (vstd!multiset.impl&%0.count.? V&. V& self! value!))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& self! value!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::len")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (<= 0 (vstd!multiset.impl&%0.len.? V&. V& self!))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::empty")
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (vstd!multiset.impl&%0.empty.? V&. V&) (TYPE%vstd!multiset.Multiset. V&. V&)) :pattern ((vstd!multiset.impl&%0.empty.? V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::from_map")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!map.Map. V&. V& $ NAT)) (has_type (vstd!multiset.impl&%0.from_map.? V&. V& m!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.from_map.? V&. V& m!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::singleton")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (has_type (vstd!multiset.impl&%0.singleton.? V&. V& v!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.singleton.? V&. V& v!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::add")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (has_type (vstd!multiset.impl&%0.add.? V&. V& self! m2!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.add.? V&. V& self! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::sub")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (has_type (vstd!multiset.impl&%0.sub.? V&. V& self! m2!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.sub.? V&. V& self! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::filter")
(assert (forall ((V&. Dcr) (V& Type) (impl%1&. Dcr) (impl%1& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type f! impl%1&)) (has_type (vstd!multiset.impl&%0.filter.? V&. V& impl%1&. impl%1& self! f!) (TYPE%vstd!multiset.Multiset. V&. V&))) :pattern ((vstd!multiset.impl&%0.filter.? V&. V& impl%1&. impl%1& self! f!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_empty")
(declare-fun ens%vstd!multiset.axiom_multiset_empty. (Dcr Type Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_empty. V&. V& v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!) 0)) :pattern ((ens%vstd!multiset.axiom_multiset_empty. V&. V& v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_empty")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!) 0)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&) v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_contained")
(declare-fun req%vstd!multiset.axiom_multiset_contained. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (= (req%vstd!multiset.axiom_multiset_contained. V&. V& m! v!) (and (=> %%global_location_label%%27 (vstd!set.impl&%0.finite.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!))) (=> %%global_location_label%%28 (vstd!set.impl&%0.contains.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!) v!)))) :pattern ((req%vstd!multiset.axiom_multiset_contained. V&. V& m! v!)) )))
(declare-fun ens%vstd!multiset.axiom_multiset_contained. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_contained. V&. V& m! v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!) (%I (vstd!map.impl&%0.index.? V&. V& $ NAT m! v!)))) :pattern ((ens%vstd!multiset.axiom_multiset_contained. V&. V& m! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_contained")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. V&. V& $ NAT)) (has_type v! V&)) (=> (and (vstd!set.impl&%0.finite.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!)) (vstd!set.impl&%0.contains.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!) v!)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!) (%I (vstd!map.impl&%0.index.? V&. V& $ NAT m! v!))))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_new_not_contained")
(declare-fun req%vstd!multiset.axiom_multiset_new_not_contained. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (= (req%vstd!multiset.axiom_multiset_new_not_contained. V&. V& m! v!) (and (=> %%global_location_label%%29 (vstd!set.impl&%0.finite.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!))) (=> %%global_location_label%%30 (not (vstd!set.impl&%0.contains.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!) v!))))) :pattern ((req%vstd!multiset.axiom_multiset_new_not_contained. V&. V& m! v!)) )))
(declare-fun ens%vstd!multiset.axiom_multiset_new_not_contained. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_new_not_contained. V&. V& m! v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!) 0)) :pattern ((ens%vstd!multiset.axiom_multiset_new_not_contained. V&. V& m! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_new_not_contained")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. V&. V& $ NAT)) (has_type v! V&)) (=> (and (vstd!set.impl&%0.finite.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!)) (not (vstd!set.impl&%0.contains.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!) v!))) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!) 0))) :pattern ((vstd!set.impl&%0.contains.? V&. V& (vstd!map.impl&%0.dom.? V&. V& $ NAT m!) v!)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.from_map.? V&. V& m!) v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_singleton")
(declare-fun ens%vstd!multiset.axiom_multiset_singleton. (Dcr Type Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_singleton. V&. V& v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) v!) 1)) :pattern ((ens%vstd!multiset.axiom_multiset_singleton. V&. V& v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_singleton")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) v!) 1)) :pattern ((vstd!multiset.impl&%0.singleton.? V&. V& v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_singleton_different")
(declare-fun ens%vstd!multiset.axiom_multiset_singleton_different. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (v! Poly) (w! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_singleton_different. V&. V& v! w!) (=> (not (= v! w!)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!) 0))) :pattern ((ens%vstd!multiset.axiom_multiset_singleton_different. V&. V& v! w!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_singleton_different")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly) (w! Poly)) (! (=> (and (has_type v! V&) (has_type w! V&)) (=> (not (= v! w!)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!) 0))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!) w!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_add")
(declare-fun ens%vstd!multiset.axiom_multiset_add. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_add. V&. V& m1! m2! v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!) (nClip (Add (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!))))) :pattern ((ens%vstd!multiset.axiom_multiset_add. V&. V& m1! m2! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_add")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!) (nClip (Add (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!))))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!) v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_sub")
(declare-fun ens%vstd!multiset.axiom_multiset_sub. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_sub. V&. V& m1! m2! v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!) v!) (ite (>= (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) (Sub (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) 0))) :pattern ((ens%vstd!multiset.axiom_multiset_sub. V&. V& m1! m2! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_sub")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly) (v! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!) v!) (ite (>= (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) (Sub (vstd!multiset.impl&%0.count.? V&. V& m1! v!) (vstd!multiset.impl&%0.count.? V&. V& m2! v!)) 0))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!) v!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_ext_equal")
(declare-fun ens%vstd!multiset.axiom_multiset_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_ext_equal. V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (forall ((v$ Poly)) (! (=> (has_type v$ V&) (= (vstd!multiset.impl&%0.count.? V&. V& m1! v$) (vstd!multiset.impl&%0.count.? V&. V& m2! v$))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m1! v$)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m2! v$)) )))) :pattern ((ens%vstd!multiset.axiom_multiset_ext_equal. V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_ext_equal")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (forall ((v$ Poly)) (! (=> (has_type v$ V&) (= (vstd!multiset.impl&%0.count.? V&. V& m1! v$) (vstd!multiset.impl&%0.count.? V&. V& m2! v$))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m1! v$)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m2! v$)) )))) :pattern ((ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_ext_equal_deep")
(declare-fun ens%vstd!multiset.axiom_multiset_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_ext_equal_deep. V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!))) :pattern ((ens%vstd!multiset.axiom_multiset_ext_equal_deep. V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_ext_equal_deep")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!) (ext_eq false (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!))) :pattern ((ext_eq true (TYPE%vstd!multiset.Multiset. V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_len_empty")
(declare-fun ens%vstd!multiset.axiom_len_empty. (Dcr Type) Bool)
(assert (forall ((V&. Dcr) (V& Type)) (! (= (ens%vstd!multiset.axiom_len_empty. V&. V&) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&)) 0)) :pattern ((ens%vstd!multiset.axiom_len_empty. V&. V&)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_empty")
(assert (forall ((V&. Dcr) (V& Type)) (! (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&)) 0) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.empty.? V&. V&))) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_len_singleton")
(declare-fun ens%vstd!multiset.axiom_len_singleton. (Dcr Type Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (= (ens%vstd!multiset.axiom_len_singleton. V&. V& v!) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!)) 1)) :pattern ((ens%vstd!multiset.axiom_len_singleton. V&. V& v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_singleton")
(assert (forall ((V&. Dcr) (V& Type) (v! Poly)) (! (=> (has_type v! V&) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!)) 1)) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.singleton.? V&. V& v!))) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_len_add")
(declare-fun ens%vstd!multiset.axiom_len_add. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!multiset.axiom_len_add. V&. V& m1! m2!) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!)) (nClip (Add (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!))))) :pattern ((ens%vstd!multiset.axiom_len_add. V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_add")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!)) (nClip (Add (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!))))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.add.? V&. V& m1! m2!))) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.subset_of.) (forall ((V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!multiset.impl&%0.subset_of.? V&. V& self! m2!) (forall ((v$ Poly)) (! (=> (has_type v$ V&) (<= (vstd!multiset.impl&%0.count.? V&. V& self! v$) (vstd!multiset.impl&%0.count.? V&. V& m2! v$))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& self! v$)) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m2! v$)) ))) :pattern ((vstd!multiset.impl&%0.subset_of.? V&. V& self! m2!)) ))))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_len_sub")
(declare-fun req%vstd!multiset.axiom_len_sub. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (req%vstd!multiset.axiom_len_sub. V&. V& m1! m2!) (=> %%global_location_label%%31 (vstd!multiset.impl&%0.subset_of.? V&. V& m2! m1!))) :pattern ((req%vstd!multiset.axiom_len_sub. V&. V& m1! m2!)) )))
(declare-fun ens%vstd!multiset.axiom_len_sub. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!multiset.axiom_len_sub. V&. V& m1! m2!) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!)) (Sub (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!)))) :pattern ((ens%vstd!multiset.axiom_len_sub. V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_len_sub")
(assert (forall ((V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type m2! (TYPE%vstd!multiset.Multiset. V&. V&))) (=> (vstd!multiset.impl&%0.subset_of.? V&. V& m2! m1!) (= (vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!)) (Sub (vstd!multiset.impl&%0.len.? V&. V& m1!) (vstd!multiset.impl&%0.len.? V&. V& m2!))))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& (vstd!multiset.impl&%0.sub.? V&. V& m1! m2!))) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_count_le_len")
(declare-fun ens%vstd!multiset.axiom_count_le_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (= (ens%vstd!multiset.axiom_count_le_len. V&. V& m! v!) (<= (vstd!multiset.impl&%0.count.? V&. V& m! v!) (vstd!multiset.impl&%0.len.? V&. V& m!))) :pattern ((ens%vstd!multiset.axiom_count_le_len. V&. V& m! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_count_le_len")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (v! Poly)) (! (=> (and (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type v! V&)) (<= (vstd!multiset.impl&%0.count.? V&. V& m! v!) (vstd!multiset.impl&%0.len.? V&. V& m!))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& m! v!) (vstd!multiset.impl&%0.len.? V&. V& m!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_filter_count")
(declare-fun ens%vstd!multiset.axiom_filter_count. (Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (f! %%Function%%) (v! Poly)) (! (= (ens%vstd!multiset.axiom_filter_count. V&. V& m! f! v!) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.filter.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) m! (Poly%fun%1. f!)) v!) (ite (%B (%%apply%%0 f! v!)) (vstd!multiset.impl&%0.count.? V&. V& m! v!) 0))) :pattern ((ens%vstd!multiset.axiom_filter_count. V&. V& m! f! v!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_filter_count")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly) (f! Poly) (v! Poly)) (! (=> (and (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type f! (TYPE%fun%1. V&. V& $ BOOL)) (has_type v! V&)) (= (vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.filter.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) m! f!) v!) (ite (%B (%%apply%%0 (%Poly%fun%1. f!) v!)) (vstd!multiset.impl&%0.count.? V&. V& m! v!) 0))) :pattern ((vstd!multiset.impl&%0.count.? V&. V& (vstd!multiset.impl&%0.filter.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) m! f!) v!)) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Int Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Int) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly)) (! (=> (exists ((v$ Poly)) (! (and (has_type v$ %%hole%%0) (> (vstd!multiset.impl&%0.count.? %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%4)) :pattern ((vstd!multiset.impl&%0.count.? %%hole%%5 %%hole%%6 %%hole%%7 v$)) )) (exists ((v$ Poly)) (! (and (and (has_type v$ %%hole%%0) (> (vstd!multiset.impl&%0.count.? %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%4)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) v$)) :pattern ((vstd!multiset.impl&%0.count.? %%hole%%5 %%hole%%6 %%hole%%7 v$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7)))))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.choose.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!multiset.impl&%0.choose.? V&. V& self!) (as_type (%%choose%%0 V& V&. V& self! 0 V&. V& self!) V&)) :pattern ((vstd!multiset.impl&%0.choose.? V&. V& self!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type (vstd!multiset.impl&%0.choose.? V&. V& self!) V&)) :pattern ((vstd!multiset.impl&%0.choose.? V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_choose_count")
(declare-fun req%vstd!multiset.axiom_choose_count. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (= (req%vstd!multiset.axiom_choose_count. V&. V& m!) (=> %%global_location_label%%32 (not (= (vstd!multiset.impl&%0.len.? V&. V& m!) 0)))) :pattern ((req%vstd!multiset.axiom_choose_count. V&. V& m!)) )))
(declare-fun ens%vstd!multiset.axiom_choose_count. (Dcr Type Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (= (ens%vstd!multiset.axiom_choose_count. V&. V& m!) (> (vstd!multiset.impl&%0.count.? V&. V& m! (vstd!multiset.impl&%0.choose.? V&. V& m!)) 0)) :pattern ((ens%vstd!multiset.axiom_choose_count. V&. V& m!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_choose_count")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (=> (not (= (vstd!multiset.impl&%0.len.? V&. V& m!) 0)) (> (vstd!multiset.impl&%0.count.? V&. V& m! (vstd!multiset.impl&%0.choose.? V&. V& m!)) 0))) :pattern ((vstd!multiset.impl&%0.len.? V&. V& m!) (vstd!multiset.impl&%0.count.? V&. V& m! (vstd!multiset.impl&%0.choose.? V&. V& m!))) )))
(set-info :comment ";; Function-Axioms vstd::multiset::impl&%0::dom")
(assert (fuel_bool_default fuel%vstd!multiset.impl&%0.dom.))
(declare-fun %%lambda%%0 (Dcr Type Poly Int) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Int) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$) (B (> (vstd!multiset.impl&%0.count.? %%hole%%0 %%hole%%1 %%hole%%2 v$) %%hole%%3))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$)))))
(assert (=> (fuel_bool fuel%vstd!multiset.impl&%0.dom.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!multiset.impl&%0.dom.? V&. V& self!) (vstd!set.impl&%0.new.? V&. V& $ (TYPE%fun%1. V&. V& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 V&. V& self! 0))))) :pattern ((vstd!multiset.impl&%0.dom.? V&. V& self!)) ))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!multiset.Multiset. V&. V&)) (has_type (vstd!multiset.impl&%0.dom.? V&. V& self!) (TYPE%vstd!set.Set. V&. V&))) :pattern ((vstd!multiset.impl&%0.dom.? V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::multiset::axiom_multiset_always_finite")
(declare-fun ens%vstd!multiset.axiom_multiset_always_finite. (Dcr Type Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (= (ens%vstd!multiset.axiom_multiset_always_finite. V&. V& m!) (vstd!set.impl&%0.finite.? V&. V& (vstd!multiset.impl&%0.dom.? V&. V& m!))) :pattern ((ens%vstd!multiset.axiom_multiset_always_finite. V&. V& m!)) )))
(set-info :comment ";; Broadcast vstd::multiset::axiom_multiset_always_finite")
(assert (forall ((V&. Dcr) (V& Type) (m! Poly)) (! (=> (has_type m! (TYPE%vstd!multiset.Multiset. V&. V&)) (vstd!set.impl&%0.finite.? V&. V& (vstd!multiset.impl&%0.dom.? V&. V& m!))) :pattern ((vstd!set.impl&%0.finite.? V&. V& (vstd!multiset.impl&%0.dom.? V&. V& m!))) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%33 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%34 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%35 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%36 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%37 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%38 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%39 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%40 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%41 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%42 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%43 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%44 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%45 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%46 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%47 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%48 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%49 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%50 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%51 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%52 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%53 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%54 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%55 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%56 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%1 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%1 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%57 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%58 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%59 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%60 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%61 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%62 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%63 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_locked::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::ref_counts::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_pending::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_guard::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%7.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%7.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::shared_pending::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::shared_guard::view")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&)) (has_type (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& self!)) (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::Instance::clone")
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%10.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (s! Poly)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%10.clone. T&. T& self! s!) (and (has_type s! (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (= self! s!))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%10.clone. T&. T& self! s!)) )))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::Instance::user_inv")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&)) (has_type (lib!spec.rwlock.RwLockSpec.impl&%10.user_inv.? T&. T& self!) (TYPE%vstd!set.Set. T&. T&))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%10.user_inv.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%0::inv")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%0.inv.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%0.inv.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k_loc! Poly) (perm_g! Poly)) (! (= (vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) k_loc! perm_g!) (B (let ((k$ (tuple%2./tuple%2/0 (%Poly%tuple%2. k_loc!)))) (let ((loc$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. k_loc!))))) (let ((perm$ (%Poly%vstd!atomic.PermissionU64. (tuple%2./tuple%2/0 (%Poly%tuple%2. perm_g!))))) (let ((g$ (tuple%2./tuple%2/1 (%Poly%tuple%2. perm_g!)))) (and (= (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm$))))) loc$) (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ (UINT 64) G&. G& k$ (I (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm$)))))) g$))))))))) :pattern ((vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) k_loc! perm_g!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ (UINT 64) G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))) )))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%1::well_formed")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.well_formed.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%1::constant")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.constant.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!)) )))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%20::inv")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%20.inv.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%20.inv.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k_loc! Poly) (perm_g! Poly)) (! (= (vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) k_loc! perm_g!) (B (let ((k$ (tuple%2./tuple%2/0 (%Poly%tuple%2. k_loc!)))) (let ((loc$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. k_loc!))))) (let ((perm$ (%Poly%vstd!atomic.PermissionBool. (tuple%2./tuple%2/0 (%Poly%tuple%2. perm_g!))))) (let ((g$ (tuple%2./tuple%2/1 (%Poly%tuple%2. perm_g!)))) (and (= (vstd!atomic.PermissionDataBool./PermissionDataBool/patomic (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm$))))) loc$) (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ BOOL G&. G& k$ (B (vstd!atomic.PermissionDataBool./PermissionDataBool/value (%Poly%vstd!atomic.PermissionDataBool. (Poly%vstd!atomic.PermissionDataBool. (vstd!atomic.impl&%0.view.? (Poly%vstd!atomic.PermissionBool. perm$)))))) g$))))))))) :pattern ((vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) k_loc! perm_g!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ BOOL G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&))) )))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%21::well_formed")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%21.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%21.well_formed.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%21.well_formed.? K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) (vstd!atomic.impl&%1.id.? (Poly%vstd!atomic.PAtomicBool. (vstd!atomic_ghost.AtomicBool./AtomicBool/patomic (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) :pattern ((vstd!atomic_ghost.impl&%21.well_formed.? K&. K& G&. G& Pred&. Pred& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%21::constant")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%21.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%21.constant.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionBool. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredBool. Pred&. Pred&) (vstd!atomic_ghost.AtomicBool./AtomicBool/atomic_inv (%Poly%vstd!atomic_ghost.AtomicBool. self!)))))) :pattern ((vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& self!)) )))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (BOX A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (BOX A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (RC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (RC A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (ARC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (ARC A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%8::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%8.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%8.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%18::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%22::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%22.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%22.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%38::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%38.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%38.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%40::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%40.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%40.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::ref_counts::map_agree")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.) (forall ((T&. Dcr) (T& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.? T&. T& token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ INT) (=> (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map!) key$) (and (and (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map! key$))))) instance!) (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map! key$))))) (%I key$))) (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map! key$))))) (%I (vstd!map.impl&%0.index.? $ INT $ INT m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map! key$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.? T&. T& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::ref_counts::map_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.) (forall ((T&. Dcr) (T& Type) (token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.? T&. T& token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&) token_map!) (vstd!map.impl&%0.dom.? $ INT $ INT m!)) (lib!spec.rwlock.RwLockSpec.impl&%5.map_agree.? T&. T& token_map! m! instance!))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.? T&. T& token_map! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_pending::option_agree")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.) (forall ((T&. Dcr) (T& Type) (token_opt! Poly) (opt! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.? T&. T& token_opt! opt! instance!) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. opt!)))) (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. token_opt!)))) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. token_opt!)))))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. opt!))))) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. token_opt!)))))) instance!)))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.? T&. T& token_opt! opt! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_pending::option_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict.) (forall ((T&. Dcr) (T& Type) (token_opt! Poly) (opt! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict.? T&. T& token_opt! opt! instance!) (and (lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.? T&. T& token_opt! opt! instance!) (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. opt!)))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. token_opt!))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%6.option_agree_strict.? T&. T& token_opt! opt! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_guard::option_agree")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.) (forall ((T&. Dcr) (T& Type) (token_opt! Poly) (opt! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.? T&. T& token_opt! opt! instance!) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. opt!)))) (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. token_opt!)))) (= (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%7.view.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. token_opt!)))))) (%Poly%tuple%0. (core!option.Option./Some/0 (%Poly%core!option.Option. opt!))))) (= (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%7.view.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. token_opt!)))))) instance!)))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.? T&. T& token_opt! opt! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::exc_guard::option_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict.) (forall ((T&. Dcr) (T& Type) (token_opt! Poly) (opt! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict.? T&. T& token_opt! opt! instance!) (and (lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.? T&. T& token_opt! opt! instance!) (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. opt!)))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. token_opt!))))))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%7.option_agree_strict.? T&. T& token_opt! opt! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::shared_pending::multiset_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.) (forall ((T&. Dcr) (T& Type) (tokens! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.? T&. T& tokens! m! instance!) (forall ((x$ Poly)) (! (=> (has_type x$ INT) (and (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens!) x$) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens! x$))))) instance!)) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens! x$))))) (vstd!multiset.impl&%0.count.? $ INT m! x$))) (= (lib!spec.rwlock.RwLockSpec.shared_pending_token_data./shared_pending_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%8.view.? T&. T& (vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens! x$))))) (%I x$)))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens!) x$)) :pattern ((vstd!map.impl&%0.index.? $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&) tokens! x$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.? T&. T& tokens! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::rwlock::RwLockSpec::shared_guard::multiset_agree_strict")
(assert (fuel_bool_default fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.))
(assert (=> (fuel_bool fuel%lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.) (forall ((T&. Dcr) (T& Type) (tokens! Poly) (m! Poly) (instance! Poly)) (! (= (lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.? T&. T& tokens! m! instance!) (forall ((x$ Poly)) (! (=> (has_type x$ (TYPE%tuple%2. $ INT T&. T&)) (and (and (and (vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ INT T&. T&) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens!) x$) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens! x$))))) instance!)) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens! x$))))) (vstd!multiset.impl&%0.count.? $ (TYPE%tuple%2. $ INT T&. T&) m! x$))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? T&. T& (vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens! x$))))) (%Poly%tuple%2. x$)))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%tuple%2. $ INT T&. T&) (vstd!map.impl&%0.dom.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens!) x$)) :pattern ((vstd!map.impl&%0.index.? $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&) tokens! x$)) ))) :pattern ((lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.? T&. T& tokens! m! instance!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::rwlock::RwLock::max_threads")
(assert (fuel_bool_default fuel%lib!exec.rwlock.impl&%4.max_threads.))
(assert (=> (fuel_bool fuel%lib!exec.rwlock.impl&%4.max_threads.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!exec.rwlock.impl&%4.max_threads.? T&. T& self!) (vstd!seq.Seq.len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.) (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. self!))))) :pattern ((lib!exec.rwlock.impl&%4.max_threads.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.rwlock.RwLock. T&. T&)) (<= 0 (lib!exec.rwlock.impl&%4.max_threads.? T&. T& self!))) :pattern ((lib!exec.rwlock.impl&%4.max_threads.? T&. T& self!)) )))
(set-info :comment ";; Function-Def lib::exec::rwlock::MAX_RC")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/rwlock.rs:53:1: 53:47 (#0)")
(set-info :comment ";; Function-Axioms lib::exec::rwlock::MAX_RC")
(assert (fuel_bool_default fuel%lib!exec.rwlock.MAX_RC.))
(assert (=> (fuel_bool fuel%lib!exec.rwlock.MAX_RC.) (= lib!exec.rwlock.MAX_RC.? 18446744073709551600)))
(assert (uInv 64 lib!exec.rwlock.MAX_RC.?))
(set-info :comment ";; Function-Axioms lib::exec::rwlock::InvariantPredicate_auto_RwLock_ref_counts::atomic_inv")
(assert (fuel_bool_default fuel%lib!exec.rwlock.impl&%2.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!exec.rwlock.impl&%2.atomic_inv.) (forall ((T&. Dcr) (T& Type) (declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (UINT 64) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((inst$ (tuple%2./tuple%2/0 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!)))) (let ((i$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. declare_struct_with_invariants_tmp_k!))))) (let ((v$ (%I declare_struct_with_invariants_tmp_v!))) (let ((g$ declare_struct_with_invariants_tmp_g!)) (and (and (and (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) g$)))) inst$) (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) g$)))) i$)) (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) g$)))) v$)) (<= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) g$)))) lib!exec.rwlock.MAX_RC.?)))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (UINT 64) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (UINT 64) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (UINT 64) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)))) )))
(set-info :comment ";; Function-Axioms lib::exec::rwlock::InvariantPredicate_auto_RwLock_exc_locked::atomic_inv")
(assert (fuel_bool_default fuel%lib!exec.rwlock.impl&%1.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!exec.rwlock.impl&%1.atomic_inv.) (forall ((T&. Dcr) (T& Type) (declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ BOOL $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. $ (TYPE%vstd!cell.PointsTo. T&. T&)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((inst$ declare_struct_with_invariants_tmp_k!)) (let ((b$ (%B declare_struct_with_invariants_tmp_v!))) (let ((g$ declare_struct_with_invariants_tmp_g!)) (and (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) g$)))) inst$) (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) g$)))) b$))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ BOOL $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. $ (TYPE%vstd!cell.PointsTo. T&. T&)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ BOOL $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. $ (TYPE%vstd!cell.PointsTo. T&. T&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ BOOL $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. $ (TYPE%vstd!cell.PointsTo. T&. T&)))) )))
(set-info :comment ";; Function-Axioms lib::exec::rwlock::RwLock::wf")
(assert (fuel_bool_default fuel%lib!exec.rwlock.impl&%3.wf.))
(assert (=> (fuel_bool fuel%lib!exec.rwlock.impl&%3.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!exec.rwlock.impl&%3.wf.? T&. T& self!) (and (and (and (and (and (= (lib!spec.rwlock.RwLockSpec.impl&%10.rc_width.? $ (TYPE%vstd!cell.PointsTo. T&. T&) (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. self!))) (vstd!seq.Seq.len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.) (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. self!))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.) (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. self!)))))) (and (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.) (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. self!))) i$)))) (= (%Poly%tuple%2. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.) (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. self!))) i$))))) (tuple%2./tuple%2 (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. self!)) i$))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.) (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. self!))) i$)) ))) (forall ((v$ Poly)) (! (=> (has_type v$ (TYPE%vstd!cell.PointsTo. T&. T&)) (= (vstd!set.impl&%0.contains.? $ (TYPE%vstd!cell.PointsTo. T&. T&) (lib!spec.rwlock.RwLockSpec.impl&%10.user_inv.? $ (TYPE%vstd!cell.PointsTo. T&. T&) (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. self!))) v$) (and (and (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? T&. T& v$)))) (vstd!cell.impl&%3.id.? T&. T& (lib!exec.rwlock.RwLock./RwLock/data (%Poly%lib!exec.rwlock.RwLock. self!)))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? T&. T& v$)))))))))) (vstd!set.impl&%0.contains.? T&. T& (lib!exec.rwlock.RwLock./RwLock/user_inv (%Poly%lib!exec.rwlock.RwLock. self!)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? T&. T& v$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%vstd!cell.PointsTo. T&. T&) (lib!spec.rwlock.RwLockSpec.impl&%10.user_inv.? $ (TYPE%vstd!cell.PointsTo. T&. T&) (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. self!))) v$)) ))) (vstd!atomic_ghost.impl&%21.well_formed.? (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.rwlock.RwLock./RwLock/exc_locked (%Poly%lib!exec.rwlock.RwLock. self!))))))) (= (vstd!atomic_ghost.impl&%21.constant.? (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_exc_locked. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.rwlock.RwLock./RwLock/exc_locked (%Poly%lib!exec.rwlock.RwLock. self!)))))) (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. self!)))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.) (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. self!)))))) (and (and (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.) (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. self!))) i$)))) (= (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.) (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. self!))) i$)))))) (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. self!)))) (= (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.) (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. self!))) i$)))))) i$)))) :pattern ((lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.) (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. self!))) i$)))) )))) :pattern ((lib!exec.rwlock.impl&%3.wf.? T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::rwlock::RwLock::inv")
(assert (fuel_bool_default fuel%lib!exec.rwlock.impl&%4.inv.))
(assert (=> (fuel_bool fuel%lib!exec.rwlock.impl&%4.inv.) (forall ((T&. Dcr) (T& Type) (self! Poly) (t! Poly)) (! (= (lib!exec.rwlock.impl&%4.inv.? T&. T& self! t!) (vstd!set.impl&%0.contains.? T&. T& (lib!exec.rwlock.RwLock./RwLock/user_inv (%Poly%lib!exec.rwlock.RwLock. self!)) t!)) :pattern ((lib!exec.rwlock.impl&%4.inv.? T&. T& self! t!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::rwlock::RwLockReadGuard::view")
(assert (fuel_bool_default fuel%lib!exec.rwlock.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!exec.rwlock.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (lib!exec.rwlock.impl&%0.view.? T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? T&. T& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/handle (%Poly%lib!exec.rwlock.RwLockReadGuard. self!))))))))))))))))) :pattern ((lib!exec.rwlock.impl&%0.view.? T&. T& self!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.rwlock.RwLockReadGuard. T&. T&)) (has_type (lib!exec.rwlock.impl&%0.view.? T&. T& self!) T&)) :pattern ((lib!exec.rwlock.impl&%0.view.? T&. T& self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::rwlock::RwLock::thread_id_valid")
(assert (fuel_bool_default fuel%lib!exec.rwlock.impl&%4.thread_id_valid.))
(assert (=> (fuel_bool fuel%lib!exec.rwlock.impl&%4.thread_id_valid.) (forall ((T&. Dcr) (T& Type) (self! Poly) (t! Poly)) (! (= (lib!exec.rwlock.impl&%4.thread_id_valid.? T&. T& self! t!) (and (<= 0 (%I t!)) (< (%I t!) (lib!exec.rwlock.impl&%4.max_threads.? T&. T& self!)))) :pattern ((lib!exec.rwlock.impl&%4.thread_id_valid.? T&. T& self! t!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::rwlock::RwLock::wf_read_handle")
(assert (fuel_bool_default fuel%lib!exec.rwlock.impl&%4.wf_read_handle.))
(assert (=> (fuel_bool fuel%lib!exec.rwlock.impl&%4.wf_read_handle.) (forall ((T&. Dcr) (T& Type) (self! Poly) (read_handle! Poly)) (! (= (lib!exec.rwlock.impl&%4.wf_read_handle.? T&. T& self! read_handle!) (and (and (and (and (and (lib!exec.rwlock.impl&%4.thread_id_valid.? T&. T& self! (I (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/tid (%Poly%lib!exec.rwlock.RwLockReadGuard. read_handle!)))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/handle (%Poly%lib!exec.rwlock.RwLockReadGuard. read_handle!)))))) (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. self!)))) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/count (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/handle (%Poly%lib!exec.rwlock.RwLockReadGuard. read_handle!)))))) 1)) (= (lib!spec.rwlock.RwLockSpec.shared_guard_token_data./shared_guard_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.shared_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%9.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/handle (%Poly%lib!exec.rwlock.RwLockReadGuard. read_handle!)))))) (tuple%2./tuple%2 (I (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/tid (%Poly%lib!exec.rwlock.RwLockReadGuard. read_handle!))) (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/perms (%Poly%lib!exec.rwlock.RwLockReadGuard. read_handle!))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? T&. T& (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/perms (%Poly%lib!exec.rwlock.RwLockReadGuard. read_handle!)))))) (vstd!cell.impl&%3.id.? T&. T& (lib!exec.rwlock.RwLock./RwLock/data (%Poly%lib!exec.rwlock.RwLock. self!))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? T&. T& (lib!exec.rwlock.RwLockReadGuard./RwLockReadGuard/perms (%Poly%lib!exec.rwlock.RwLockReadGuard. read_handle!))))))))))))) :pattern ((lib!exec.rwlock.impl&%4.wf_read_handle.? T&. T& self! read_handle!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::rwlock::RwLock::wf_write_handle")
(assert (fuel_bool_default fuel%lib!exec.rwlock.impl&%4.wf_write_handle.))
(assert (=> (fuel_bool fuel%lib!exec.rwlock.impl&%4.wf_write_handle.) (forall ((T&. Dcr) (T& Type) (self! Poly) (write_handle! Poly)) (! (= (lib!exec.rwlock.impl&%4.wf_write_handle.? T&. T& self! write_handle!) (and (and (= (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%7.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/handle (%Poly%lib!exec.rwlock.RwLockWriteGuard. write_handle!)))))) (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. self!))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? T&. T& (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/cell_perms (%Poly%lib!exec.rwlock.RwLockWriteGuard. write_handle!)))))) (vstd!cell.impl&%3.id.? T&. T& (lib!exec.rwlock.RwLock./RwLock/data (%Poly%lib!exec.rwlock.RwLock. self!))))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? T&. T& (lib!exec.rwlock.RwLockWriteGuard./RwLockWriteGuard/cell_perms (%Poly%lib!exec.rwlock.RwLockWriteGuard. write_handle!))))))))))))) :pattern ((lib!exec.rwlock.impl&%4.wf_write_handle.? T&. T& self! write_handle!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (E&. Dcr) (E& Type)) (! (tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&) :pattern ((tr_bound%vstd!std_specs.result.ResultAdditionalSpecFns. $ (TYPE%core!result.Result. T&. T& E&. E&) T&. T& E&. E&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::atomic_ghost::impl&%21::new")
(declare-fun req%vstd!atomic_ghost.impl&%21.new. (Dcr Type Dcr Type Dcr Type Poly Bool Poly) Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Bool) (g! Poly)) (! (= (req%vstd!atomic_ghost.impl&%21.new. K&. K& G&. G& Pred&. Pred& k! u! g!) (=> %%global_location_label%%64 (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ BOOL G&. G& k! (B u!) g!)))) :pattern ((req%vstd!atomic_ghost.impl&%21.new. K&. K& G&. G& Pred&. Pred& k! u! g!)) )))
(declare-fun ens%vstd!atomic_ghost.impl&%21.new. (Dcr Type Dcr Type Dcr Type Poly Bool Poly vstd!atomic_ghost.AtomicBool.) Bool)
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Bool) (g! Poly) (t! vstd!atomic_ghost.AtomicBool.)) (! (= (ens%vstd!atomic_ghost.impl&%21.new. K&. K& G&. G& Pred&. Pred& k! u! g! t!) (and (has_type (Poly%vstd!atomic_ghost.AtomicBool. t!) (TYPE%vstd!atomic_ghost.AtomicBool. K&. K& G&. G& Pred&. Pred&)) (and (vstd!atomic_ghost.impl&%21.well_formed.? K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicBool. t!)) (= (vstd!atomic_ghost.impl&%21.constant.? K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicBool. t!)) k!)))) :pattern ((ens%vstd!atomic_ghost.impl&%21.new. K&. K& G&. G& Pred&. Pred& k! u! g! t!)) )))
(set-info :comment ";; Function-Specs vstd::atomic_ghost::impl&%1::new")
(declare-fun req%vstd!atomic_ghost.impl&%1.new. (Dcr Type Dcr Type Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Int) (g! Poly)) (! (= (req%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g!) (=> %%global_location_label%%65 (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ (UINT 64) G&. G& k! (I u!) g!)))) :pattern ((req%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g!)) )))
(declare-fun ens%vstd!atomic_ghost.impl&%1.new. (Dcr Type Dcr Type Dcr Type Poly Int Poly vstd!atomic_ghost.AtomicU64.) Bool)
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Int) (g! Poly) (t! vstd!atomic_ghost.AtomicU64.)) (! (= (ens%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g! t!) (and (has_type (Poly%vstd!atomic_ghost.AtomicU64. t!) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (and (vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicU64. t!)) (= (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicU64. t!)) k!)))) :pattern ((ens%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g! t!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::Instance::initialize")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. (Dcr Type Int Poly Poly core!option.Option.) Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((T&. Dcr) (T& Type) (rc_width! Int) (init_t! Poly) (user_inv! Poly) (param_token_storage! core!option.Option.)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. T&. T& rc_width! init_t! user_inv! param_token_storage!) (and (=> %%global_location_label%%66 (< 0 rc_width!)) (=> %%global_location_label%%67 (vstd!set.impl&%0.contains.? T&. T& user_inv! init_t!)) (=> %%global_location_label%%68 (= param_token_storage! (core!option.Option./Some init_t!))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. T&. T& rc_width! init_t! user_inv! param_token_storage!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. (Dcr Type Int Poly Poly core!option.Option. tuple%7.) Bool)
(declare-fun %%lambda%%1 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1) i$) (B (and (<= %%hole%%0 (%I i$)) (< (%I i$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1) i$)))))
(declare-fun %%lambda%%2 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0) i$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0) i$)))))
(assert (forall ((T&. Dcr) (T& Type) (rc_width! Int) (init_t! Poly) (user_inv! Poly) (param_token_storage! core!option.Option.) (tmp_tuple! tuple%7.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. T&. T& rc_width! init_t! user_inv! param_token_storage! tmp_tuple!) (and (has_type (Poly%tuple%7. tmp_tuple!) (TYPE%tuple%7. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. T&. T&) (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&) (TRACKED $) (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. T&. T&)) (TRACKED $) (TYPE%core!option.Option. $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&)) (TRACKED $) (TYPE%core!option.Option. $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&)) (TRACKED $) (TYPE%vstd!map.Map. $ INT $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_pending. T&. T&)) (TRACKED $) (TYPE%vstd!map.Map. $ (TYPE%tuple%2. $ INT T&. T&) $ (TYPE%lib!spec.rwlock.RwLockSpec.shared_guard. T&. T&)))) (let ((instance$ (tuple%7./tuple%7/0 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!))))) (let ((param_token_exc_locked$ (tuple%7./tuple%7/1 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!))))) (let ((param_token_ref_counts$ (tuple%7./tuple%7/2 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!))))) (let ((param_token_exc_pending$ (%Poly%core!option.Option. (tuple%7./tuple%7/3 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!)))))) (let ((param_token_exc_guard$ (%Poly%core!option.Option. (tuple%7./tuple%7/4 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!)))))) (let ((param_token_shared_pending$ (tuple%7./tuple%7/5 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!))))) (let ((param_token_shared_guard$ (tuple%7./tuple%7/6 (%Poly%tuple%7. (Poly%tuple%7. tmp_tuple!))))) (let ((instance$1 instance$)) (let ((param_token_exc_locked$1 param_token_exc_locked$)) (let ((param_token_ref_counts$1 param_token_ref_counts$)) (let ((param_token_exc_pending$1 param_token_exc_pending$)) (let ((param_token_exc_guard$1 param_token_exc_guard$)) (let ((param_token_shared_pending$1 param_token_shared_pending$)) (let ((param_token_shared_guard$1 param_token_shared_guard$)) (and (and (and (and (and (and (and (and (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& param_token_exc_locked$1)))) instance$1) (= (lib!spec.rwlock.RwLockSpec.impl&%10.user_inv.? T&. T& instance$1) user_inv!)) (= (lib!spec.rwlock.RwLockSpec.impl&%10.rc_width.? T&. T& instance$1) rc_width!)) (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& param_token_exc_locked$1)))) false)) (lib!spec.rwlock.RwLockSpec.impl&%5.map_agree_strict.? T&. T& param_token_ref_counts$1 (vstd!map.impl&%0.new.? $ INT $ INT $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ INT) (Poly%fun%1. (mk_fun (%%lambda%%1 0 rc_width!))) (Poly%fun%1. (mk_fun (%%lambda%%2 (I 0))))) instance$1)) (and (lib!spec.rwlock.RwLockSpec.impl&%6.option_agree.? T&. T& (Poly%core!option.Option. param_token_exc_pending$1) (Poly%core!option.Option. core!option.Option./None) instance$1) (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. param_token_exc_pending$1)))))))) (and (lib!spec.rwlock.RwLockSpec.impl&%7.option_agree.? T&. T& (Poly%core!option.Option. param_token_exc_guard$1) (Poly%core!option.Option. core!option.Option./None) instance$1) (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. param_token_exc_guard$1)))))))) (lib!spec.rwlock.RwLockSpec.impl&%8.multiset_agree_strict.? T&. T& param_token_shared_pending$1 (vstd!multiset.impl&%0.empty.? $ INT) instance$1)) (lib!spec.rwlock.RwLockSpec.impl&%9.multiset_agree_strict.? T&. T& param_token_shared_guard$1 (vstd!multiset.impl&%0.empty.? $ (TYPE%tuple%2. $ INT T&. T&)) instance$1)))))))))))))))))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%10.initialize. T&. T& rc_width! init_t! user_inv! param_token_storage! tmp_tuple!)) )))
(set-info :comment ";; Function-Specs lib::exec::rwlock::RwLock::new")
(declare-fun req%lib!exec.rwlock.impl&%4.new. (Dcr Type Int Poly %%Function%%) Bool)
(declare-const %%global_location_label%%69 Bool)
(assert (forall ((T&. Dcr) (T& Type) (rc_width! Int) (t! Poly) (inv! %%Function%%)) (! (= (req%lib!exec.rwlock.impl&%4.new. T&. T& rc_width! t! inv!) (=> %%global_location_label%%69 (and (< 0 rc_width!) (%B (%%apply%%0 inv! t!))))) :pattern ((req%lib!exec.rwlock.impl&%4.new. T&. T& rc_width! t! inv!)) )))
(declare-fun ens%lib!exec.rwlock.impl&%4.new. (Dcr Type Int Poly %%Function%% lib!exec.rwlock.RwLock.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (rc_width! Int) (t! Poly) (inv! %%Function%%) (s! lib!exec.rwlock.RwLock.)) (! (= (ens%lib!exec.rwlock.impl&%4.new. T&. T& rc_width! t! inv! s!) (and (has_type (Poly%lib!exec.rwlock.RwLock. s!) (TYPE%lib!exec.rwlock.RwLock. T&. T&)) (and (lib!exec.rwlock.impl&%3.wf.? T&. T& (Poly%lib!exec.rwlock.RwLock. s!)) (= (lib!exec.rwlock.impl&%4.max_threads.? T&. T& (Poly%lib!exec.rwlock.RwLock. s!)) rc_width!)) (forall ((v$ Poly)) (! (=> (has_type v$ T&) (= (lib!exec.rwlock.impl&%4.inv.? T&. T& (Poly%lib!exec.rwlock.RwLock. s!) v$) (%B (%%apply%%0 inv! v$)))) :pattern ((lib!exec.rwlock.impl&%4.inv.? T&. T& (Poly%lib!exec.rwlock.RwLock. s!) v$)) )))) :pattern ((ens%lib!exec.rwlock.impl&%4.new. T&. T& rc_width! t! inv! s!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::Instance::exc_start")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (pre%param_token_exc_locked! Poly)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. T&. T& self! pre%param_token_exc_locked!) (and (=> %%global_location_label%%70 (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& pre%param_token_exc_locked!)))) self!)) (=> %%global_location_label%%71 (not (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& pre%param_token_exc_locked!)))))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. T&. T& self! pre%param_token_exc_locked!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (pre%param_token_exc_locked! Poly) (param_token_exc_locked! Poly) (param_token_0_exc_pending! Poly)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. T&. T& self! pre%param_token_exc_locked! param_token_exc_locked! param_token_0_exc_pending!) (and (has_type param_token_0_exc_pending! (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&)) (has_type param_token_exc_locked! (TYPE%lib!spec.rwlock.RwLockSpec.exc_locked. T&. T&)) (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& param_token_exc_locked!)))) self!) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& param_token_0_exc_pending!)))) self!) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& param_token_0_exc_pending!)))) 0) (= (lib!spec.rwlock.RwLockSpec.exc_locked_token_data./exc_locked_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_locked_token_data. (lib!spec.rwlock.RwLockSpec.impl&%4.view.? T&. T& param_token_exc_locked!)))) true))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_start. T&. T& self! pre%param_token_exc_locked! param_token_exc_locked! param_token_0_exc_pending!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::Instance::exc_check_count")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (param_token_1_ref_counts! Poly) (param_token_0_exc_pending! Poly)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. T&. T& self! param_token_1_ref_counts! param_token_0_exc_pending!) (and (=> %%global_location_label%%72 (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& param_token_1_ref_counts!)))) self!)) (=> %%global_location_label%%73 (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& param_token_0_exc_pending!)))) self!)) (=> %%global_location_label%%74 true) (=> %%global_location_label%%75 (let ((r$ (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& param_token_0_exc_pending!)))))) (and (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/key (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& param_token_1_ref_counts!)))) r$) (= (lib!spec.rwlock.RwLockSpec.ref_counts_token_data./ref_counts_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (Poly%lib!spec.rwlock.RwLockSpec.ref_counts_token_data. (lib!spec.rwlock.RwLockSpec.impl&%5.view.? T&. T& param_token_1_ref_counts!)))) 0)))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. T&. T& self! param_token_1_ref_counts! param_token_0_exc_pending!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (param_token_1_ref_counts! Poly) (param_token_0_exc_pending! Poly) (param_token_2_exc_pending! Poly)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. T&. T& self! param_token_1_ref_counts! param_token_0_exc_pending! param_token_2_exc_pending!) (and (has_type param_token_2_exc_pending! (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. T&. T&)) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& param_token_2_exc_pending!)))) self!) (let ((r$ (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& param_token_0_exc_pending!)))))) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& param_token_2_exc_pending!)))) (Add r$ 1))))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_check_count. T&. T& self! param_token_1_ref_counts! param_token_0_exc_pending! param_token_2_exc_pending!)) )))
(set-info :comment ";; Function-Specs lib::spec::rwlock::RwLockSpec::Instance::exc_finish")
(declare-fun req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_finish. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (param_token_0_exc_pending! Poly)) (! (= (req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_finish. T&. T& self! param_token_0_exc_pending!) (and (=> %%global_location_label%%76 (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& param_token_0_exc_pending!)))) self!)) (=> %%global_location_label%%77 (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? T&. T& param_token_0_exc_pending!)))) (lib!spec.rwlock.RwLockSpec.impl&%10.rc_width.? T&. T& self!))))) :pattern ((req%lib!spec.rwlock.RwLockSpec.impl&%10.exc_finish. T&. T& self! param_token_0_exc_pending!)) )))
(declare-fun ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_finish. (Dcr Type Poly Poly tuple%3.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (param_token_0_exc_pending! Poly) (tmp_tuple! tuple%3.)) (! (= (ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_finish. T&. T& self! param_token_0_exc_pending! tmp_tuple!) (and (has_type (Poly%tuple%3. tmp_tuple!) (TYPE%tuple%3. (GHOST $) (TYPE%core!option.Option. T&. T&) (TRACKED T&.) T& (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.exc_guard. T&. T&))) (let ((original_field_storage$ (%Poly%core!option.Option. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!)))))) (let ((param_token_2_storage$ (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!))))) (let ((param_token_1_exc_guard$ (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp_tuple!))))) (let ((original_field_storage$1 original_field_storage$)) (let ((param_token_2_storage$1 param_token_2_storage$)) (let ((param_token_1_exc_guard$1 param_token_1_exc_guard$)) (and (and (and (= (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%7.view.? T&. T& param_token_1_exc_guard$1)))) self!) (= (lib!spec.rwlock.RwLockSpec.exc_guard_token_data./exc_guard_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_guard_token_data. (lib!spec.rwlock.RwLockSpec.impl&%7.view.? T&. T& param_token_1_exc_guard$1)))) tuple%0./tuple%0)) (let ((x$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. original_field_storage$1))))) (= param_token_2_storage$1 x$))) (let ((x$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. original_field_storage$1))))) (vstd!set.impl&%0.contains.? T&. T& (lib!spec.rwlock.RwLockSpec.impl&%10.user_inv.? T&. T& self!) x$))))))))))) :pattern ((ens%lib!spec.rwlock.RwLockSpec.impl&%10.exc_finish. T&. T& self! param_token_0_exc_pending! tmp_tuple!)) )))
(set-info :comment ";; Function-Specs lib::exec::rwlock::RwLock::acquire_write")
(declare-fun req%lib!exec.rwlock.impl&%4.acquire_write. (Dcr Type lib!exec.rwlock.RwLock.) Bool)
(declare-const %%global_location_label%%78 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!exec.rwlock.RwLock.)) (! (= (req%lib!exec.rwlock.impl&%4.acquire_write. T&. T& self!) (=> %%global_location_label%%78 (lib!exec.rwlock.impl&%3.wf.? T&. T& (Poly%lib!exec.rwlock.RwLock. self!)))) :pattern ((req%lib!exec.rwlock.impl&%4.acquire_write. T&. T& self!)) )))
(declare-fun ens%lib!exec.rwlock.impl&%4.acquire_write. (Dcr Type lib!exec.rwlock.RwLock. tuple%2.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! lib!exec.rwlock.RwLock.) (res! tuple%2.)) (! (= (ens%lib!exec.rwlock.impl&%4.acquire_write. T&. T& self! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. T&. T& (TRACKED $) (TYPE%lib!exec.rwlock.RwLockWriteGuard. T&. T&))) (and (and (lib!exec.rwlock.impl&%3.wf.? T&. T& (Poly%lib!exec.rwlock.RwLock. self!)) (lib!exec.rwlock.impl&%4.wf_write_handle.? T&. T& (Poly%lib!exec.rwlock.RwLock. self!) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!))))) (lib!exec.rwlock.impl&%4.inv.? T&. T& (Poly%lib!exec.rwlock.RwLock. self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))))))) :pattern ((ens%lib!exec.rwlock.impl&%4.acquire_write. T&. T& self! res!)) )))
(set-info :comment ";; Function-Def lib::exec::rwlock::RwLock::acquire_write")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/rwlock.rs:287:9: 304:10 (#0)")
(set-info :comment ";; Function-Def lib::exec::rwlock::RwLock::acquire_write")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/rwlock.rs:319:13: 337:14 (#0)")
(set-info :comment ";; Function-Def lib::exec::rwlock::RwLock::acquire_write")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/rwlock.rs:310:9: 339:10 (#0)")
(declare-const T&. Dcr)
(declare-const T& Type)
(declare-const res! tuple%2.)
(declare-const self! lib!exec.rwlock.RwLock.)
(declare-const verus_tmp_token@0 core!option.Option.)
(declare-const tmp%1 Poly)
(declare-const pair@0 tuple%2.)
(declare-const verus_tmp_perm@0 vstd!atomic.PermissionBool.)
(declare-const verus_tmp_g@0 Poly)
(declare-const tmp%2 vstd!atomic.PAtomicBool.)
(declare-const verus_tmp_res@ core!result.Result.)
(declare-const tmp%3 Poly)
(declare-const tmp%4 Poly)
(declare-const verus_tmp$1@ tuple%2.)
(declare-const perm@0 vstd!atomic.PermissionBool.)
(declare-const g@0 Poly)
(declare-const verus_tmp$2@0 Bool)
(declare-const verus_tmp$3@0 core!result.Result.)
(declare-const res@0 core!result.Result.)
(declare-const verus_tmp$4@0 Bool)
(declare-const result$1@ core!result.Result.)
(declare-const atomic@ vstd!atomic_ghost.AtomicBool.)
(declare-const operand1@ Bool)
(declare-const operand2@ Bool)
(declare-const credit@ vstd!invariant.OpenInvariantCredit.)
(declare-const result@ core!result.Result.)
(declare-const verus_tmp_token$1@0 Poly)
(declare-const tmp%5 Int)
(declare-const tmp%6 Poly)
(declare-const tmp%7 Poly)
(declare-const tmp%8 Poly)
(declare-const tmp%9 Poly)
(declare-const pair$1@0 tuple%2.)
(declare-const verus_tmp_perm$1@ vstd!atomic.PermissionU64.)
(declare-const verus_tmp_g$1@0 Poly)
(declare-const tmp%10 vstd!atomic.PAtomicU64.)
(declare-const verus_tmp_res$1@ Int)
(declare-const tmp%11 Poly)
(declare-const verus_tmp$6@ tuple%2.)
(declare-const perm$1@0 vstd!atomic.PermissionU64.)
(declare-const g$1@0 Poly)
(declare-const verus_tmp$7@0 Int)
(declare-const res$1@0 Int)
(declare-const verus_tmp$8@0 Int)
(declare-const verus_tmp$9@0 Int)
(declare-const result$3@ Int)
(declare-const atomic$1@ vstd!atomic_ghost.AtomicU64.)
(declare-const credit$1@ vstd!invariant.OpenInvariantCredit.)
(declare-const result$2@ Int)
(declare-const taken@0 Bool)
(declare-const tmp%12 Poly)
(declare-const verus_tmp_cell_perms@ Poly)
(declare-const verus_tmp_handle@ Poly)
(declare-const tmp%13 Poly)
(declare-const verus_tmp@ core!option.Option.)
(declare-const token@0 core!option.Option.)
(declare-const acquired@0 Bool)
(declare-const verus_tmp$5@ Poly)
(declare-const token$1@0 Poly)
(declare-const idx@0 Int)
(declare-const verus_tmp$10@ tuple%3.)
(declare-const cell_perms@0 Poly)
(declare-const handle@0 Poly)
(declare-const t@ Poly)
(assert fuel_defaults)
(assert (has_type (Poly%lib!exec.rwlock.RwLock. self!) (TYPE%lib!exec.rwlock.RwLock. T&. T&)))
(assert (has_type (Poly%core!option.Option. verus_tmp@) (TYPE%core!option.Option. $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. $ (TYPE%vstd!cell.PointsTo. T&. T&)))))
(assert (has_type (Poly%core!option.Option. verus_tmp_token@0) (TYPE%core!option.Option. $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. $ (TYPE%vstd!cell.PointsTo. T&. T&)))))
(assert (has_type (Poly%core!option.Option. token@0) (TYPE%core!option.Option. $ (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. $ (TYPE%vstd!cell.PointsTo. T&. T&)))))
(assert (has_type verus_tmp$5@ (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. $ (TYPE%vstd!cell.PointsTo. T&. T&))))
(assert (has_type verus_tmp_token$1@0 (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. $ (TYPE%vstd!cell.PointsTo. T&. T&))))
(assert (has_type token$1@0 (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. $ (TYPE%vstd!cell.PointsTo. T&. T&))))
(assert (uInv SZ idx@0))
(assert (uInv SZ tmp%5))
(assert (has_type tmp%6 (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global.)))
(declare-const pair$1@1 tuple%2.)
(declare-const perm$1@1 vstd!atomic.PermissionU64.)
(declare-const g$1@1 Poly)
(declare-const verus_tmp$7@1 Int)
(declare-const res$1@1 Int)
(declare-const verus_tmp$8@1 Int)
(declare-const verus_tmp$9@1 Int)
(declare-const token$1@1 Poly)
(declare-const taken@1 Bool)
(declare-const idx@1 Int)
(set-info :comment ";; invariant not satisfied before loop")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; invariant not satisfied before loop")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; invariant not satisfied before loop")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; invariant not satisfied before loop")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; invariant not satisfied before loop")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; possible arithmetic underflow/overflow")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; invariant not satisfied at end of loop body")
(declare-const %%location_label%%9 Bool)
(assert (not (=> (lib!exec.rwlock.impl&%3.wf.? T&. T& (Poly%lib!exec.rwlock.RwLock. self!)) (=> (<= idx@0 (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global. (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. (Poly%lib!exec.rwlock.RwLock. self!))))) (=> (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) token$1@0)))) (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. (Poly%lib!exec.rwlock.RwLock. self!)))) (=> (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) token$1@0)))) idx@0) (=> (= tmp%6 (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. (Poly%lib!exec.rwlock.RwLock. self!)))) (=> (ens%alloc!vec.impl&%1.len. $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global. tmp%6 tmp%5) (=> (< idx@0 tmp%5) (=> (= taken@0 true) (and (=> %%location_label%%0 (lib!exec.rwlock.impl&%3.wf.? T&. T& (Poly%lib!exec.rwlock.RwLock. self!))) (and (=> %%location_label%%1 (< idx@0 (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global. (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. (Poly%lib!exec.rwlock.RwLock. self!)))))) (and (=> %%location_label%%2 (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) token$1@0)))) (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. (Poly%lib!exec.rwlock.RwLock. self!))))) (and (=> %%location_label%%3 (=> taken@0 (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) token$1@0)))) idx@0))) (and (=> %%location_label%%4 (=> (not taken@0) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) token$1@0)))) (Add idx@0 1)))) (=> (has_type token$1@1 (TYPE%lib!spec.rwlock.RwLockSpec.exc_pending. $ (TYPE%vstd!cell.PointsTo. T&. T&))) (=> (lib!exec.rwlock.impl&%3.wf.? T&. T& (Poly%lib!exec.rwlock.RwLock. self!)) (=> (< idx@0 (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global. (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. (Poly%lib!exec.rwlock.RwLock. self!))))) (=> (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) token$1@1)))) (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. (Poly%lib!exec.rwlock.RwLock. self!)))) (=> (=> taken@1 (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) token$1@1)))) idx@0)) (=> (=> (not taken@1) (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) token$1@1)))) (Add idx@0 1))) (=> (not taken@1) (and (=> %%location_label%%5 (uInv SZ (Add idx@0 1))) (=> (= idx@1 (uClip SZ (Add idx@0 1))) (and (=> %%location_label%%6 (lib!exec.rwlock.impl&%3.wf.? T&. T& (Poly%lib!exec.rwlock.RwLock. self!))) (and (=> %%location_label%%7 (<= idx@1 (vstd!std_specs.vec.spec_vec_len.? $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (TRACKED $) (TYPE%lib!spec.rwlock.RwLockSpec.Instance. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ INT) $ (TYPE%lib!spec.rwlock.RwLockSpec.ref_counts. $ (TYPE%vstd!cell.PointsTo. T&. T&)) $ TYPE%lib!exec.rwlock.InvariantPredicate_auto_RwLock_ref_counts.)) $ TYPE%alloc!alloc.Global. (lib!exec.rwlock.RwLock./RwLock/ref_counts (%Poly%lib!exec.rwlock.RwLock. (Poly%lib!exec.rwlock.RwLock. self!)))))) (and (=> %%location_label%%8 (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/instance (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) token$1@1)))) (lib!exec.rwlock.RwLock./RwLock/inst (%Poly%lib!exec.rwlock.RwLock. (Poly%lib!exec.rwlock.RwLock. self!))))) (=> %%location_label%%9 (= (lib!spec.rwlock.RwLockSpec.exc_pending_token_data./exc_pending_token_data/value (%Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (Poly%lib!spec.rwlock.RwLockSpec.exc_pending_token_data. (lib!spec.rwlock.RwLockSpec.impl&%6.view.? $ (TYPE%vstd!cell.PointsTo. T&. T&) token$1@1)))) idx@1)))))))))))))))))))))))))))))
(check-sat)
(exit)
