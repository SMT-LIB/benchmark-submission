(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module exec::context'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%2.spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%0.inv. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.well_formed. FuelId)
(declare-const fuel%vstd!atomic_ghost.impl&%1.constant. FuelId)
(declare-const fuel%vstd!invariant.AtomicInvariant.inv. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%8.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%16.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%22.view. FuelId)
(declare-const fuel%vstd!view.impl&%38.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.wf2. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.wf. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.thread_id_spec. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.replica_token. FuelId)
(declare-const fuel%lib!exec.context.impl&%0.replica_id_spec. FuelId)
(declare-const fuel%lib!exec.context.impl&%2.atomic_inv. FuelId)
(declare-const fuel%lib!exec.context.impl&%3.wf. FuelId)
(declare-const fuel%lib!exec.context.impl&%5.inv. FuelId)
(declare-const fuel%lib!exec.context.impl&%6.enqueue_op_pre. FuelId)
(declare-const fuel%lib!exec.context.impl&%6.enqueue_op_post. FuelId)
(declare-const fuel%lib!exec.context.impl&%6.dequeue_resp_pre. FuelId)
(declare-const fuel%lib!exec.context.impl&%6.dequeue_resp_post. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.wf. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.id_spec. FuelId)
(declare-const fuel%lib!exec.replica.impl&%0.view. FuelId)
(declare-const fuel%lib!exec.replica.impl&%2.atomic_inv. FuelId)
(declare-const fuel%lib!exec.replica.impl&%4.spec_id. FuelId)
(declare-const fuel%lib!exec.replica.impl&%6.inv. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Init. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.is_Done. FuelId)
(declare-const fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%0.is_Idle. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%0.is_Waiting. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%0.get_Waiting_0. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%2.is_Empty. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%2.is_Request. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%2.is_InProgress. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%2.is_Response. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%4.get_ReqId. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%5.is_Collecting. FuelId)
(declare-const fuel%lib!spec.flat_combiner.impl&%5.get_Collecting_0. FuelId)
(declare-const fuel%lib!constants.MAX_THREADS_PER_REPLICA. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.vec.impl&%2.spec_len. fuel%vstd!std_specs.vec.impl&%2.spec_index. fuel%vstd!atomic_ghost.impl&%0.inv. fuel%vstd!atomic_ghost.impl&%1.well_formed. fuel%vstd!atomic_ghost.impl&%1.constant. fuel%vstd!invariant.AtomicInvariant.inv. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%8.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%16.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%22.view. fuel%vstd!view.impl&%38.view. fuel%vstd!view.impl&%42.view. fuel%lib!exec.context.impl&%0.wf2. fuel%lib!exec.context.impl&%0.wf. fuel%lib!exec.context.impl&%0.thread_id_spec. fuel%lib!exec.context.impl&%0.replica_token. fuel%lib!exec.context.impl&%0.replica_id_spec. fuel%lib!exec.context.impl&%2.atomic_inv. fuel%lib!exec.context.impl&%3.wf. fuel%lib!exec.context.impl&%5.inv. fuel%lib!exec.context.impl&%6.enqueue_op_pre. fuel%lib!exec.context.impl&%6.enqueue_op_post. fuel%lib!exec.context.impl&%6.dequeue_resp_pre. fuel%lib!exec.context.impl&%6.dequeue_resp_post. fuel%lib!exec.replica.impl&%0.wf. fuel%lib!exec.replica.impl&%0.id_spec. fuel%lib!exec.replica.impl&%0.view. fuel%lib!exec.replica.impl&%2.atomic_inv. fuel%lib!exec.replica.impl&%4.spec_id. fuel%lib!exec.replica.impl&%6.inv. fuel%lib!spec.unbounded_log.impl&%3.is_Init. fuel%lib!spec.unbounded_log.impl&%3.get_Init_op. fuel%lib!spec.unbounded_log.impl&%3.is_Done. fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret. fuel%lib!spec.flat_combiner.impl&%0.is_Idle. fuel%lib!spec.flat_combiner.impl&%0.is_Waiting. fuel%lib!spec.flat_combiner.impl&%0.get_Waiting_0. fuel%lib!spec.flat_combiner.impl&%2.is_Empty. fuel%lib!spec.flat_combiner.impl&%2.is_Request. fuel%lib!spec.flat_combiner.impl&%2.is_InProgress. fuel%lib!spec.flat_combiner.impl&%2.is_Response. fuel%lib!spec.flat_combiner.impl&%4.get_ReqId. fuel%lib!spec.flat_combiner.impl&%5.is_Collecting. fuel%lib!spec.flat_combiner.impl&%5.get_Collecting_0. fuel%lib!constants.MAX_THREADS_PER_REPLICA.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./WriteOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./WriteOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./Response (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./Response (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!alloc.Global. 0)
(declare-sort alloc!vec.Vec<usize./alloc!alloc.Global.>. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.Instance. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.clients. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.combiner. 0)
(declare-sort lib!spec.flat_combiner.FlatCombiner.slots. 0)
(declare-sort vstd!atomic.PAtomicU64. 0)
(declare-sort vstd!atomic.PermissionU64. 0)
(declare-sort vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>. 0)
(declare-sort vstd!cell.CellId. 0)
(declare-sort vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. 0)
(declare-sort vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. 0)
(declare-sort vstd!invariant.OpenInvariantCredit. 0)
(declare-sort vstd!seq.Seq<core!option.Option<nat.>.>. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!atomic.PermissionDataU64. 0) (vstd!atomic_ghost.AtomicU64. 0) (vstd!cell.PointsToData. 0) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. 0) (lib!spec.flat_combiner.FlatCombiner.clients_token_data. 0) (lib!spec.flat_combiner.FlatCombiner.slots_token_data. 0) (lib!spec.flat_combiner.FlatCombiner.combiner_token_data. 0) (lib!exec.context.ThreadToken. 0) (lib!exec.context.PendingOperation. 0) (lib!exec.context.Context. 0) (lib!exec.context.InvariantPredicate_auto_Context_atomic. 0) (lib!exec.context.ContextGhost. 0) (lib!exec.context.FCClientRequestResponseGhost. 0) (lib!exec.replica.ReplicaToken. 0) (lib!exec.replica.ReplicatedDataStructure. 0) (lib!exec.replica.Replica. 0) (lib!exec.replica.InvariantPredicate_auto_Replica_combiner. 0) (lib!exec.replica.CombinerLockStateGhost. 0) (lib!spec.unbounded_log.UpdateState. 0) (lib!spec.flat_combiner.ClientState. 0) (lib!spec.flat_combiner.SlotState. 0) (lib!spec.flat_combiner.CombinerState. 0) (lib!exec.CachePadded. 0) (tuple%0. 0) (tuple%2. 0) (tuple%4. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!atomic.PermissionDataU64./PermissionDataU64 (vstd!atomic.PermissionDataU64./PermissionDataU64/?patomic Int) (vstd!atomic.PermissionDataU64./PermissionDataU64/?value Int))) ((vstd!atomic_ghost.AtomicU64./AtomicU64 (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic vstd!atomic.PAtomicU64.) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv Poly))) ((vstd!cell.PointsToData./PointsToData (vstd!cell.PointsToData./PointsToData/?pcell vstd!cell.CellId.) (vstd!cell.PointsToData./PointsToData/?value core!option.Option.))) ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?instance Poly) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?key Int) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?value lib!spec.unbounded_log.UpdateState.))) ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?key Int) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?value lib!spec.flat_combiner.ClientState.))) ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?key Int) (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?value lib!spec.flat_combiner.SlotState.))) ((lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/?instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/?value lib!spec.flat_combiner.CombinerState.))) ((lib!exec.context.ThreadToken./ThreadToken (lib!exec.context.ThreadToken./ThreadToken/?rid lib!exec.replica.ReplicaToken.) (lib!exec.context.ThreadToken./ThreadToken/?tid Int) (lib!exec.context.ThreadToken./ThreadToken/?fc_client lib!spec.flat_combiner.FlatCombiner.clients.) (lib!exec.context.ThreadToken./ThreadToken/?batch_perm Poly))) ((lib!exec.context.PendingOperation./PendingOperation (lib!exec.context.PendingOperation./PendingOperation/?op Poly) (lib!exec.context.PendingOperation./PendingOperation/?resp core!option.Option.))) ((lib!exec.context.Context./Context (lib!exec.context.Context./Context/?batch lib!exec.CachePadded.) (lib!exec.context.Context./Context/?atomic lib!exec.CachePadded.) (lib!exec.context.Context./Context/?thread_id_g Int) (lib!exec.context.Context./Context/?flat_combiner_instance lib!spec.flat_combiner.FlatCombiner.Instance.) (lib!exec.context.Context./Context/?unbounded_log_instance Poly))) ((lib!exec.context.InvariantPredicate_auto_Context_atomic./InvariantPredicate_auto_Context_atomic )) ((lib!exec.context.ContextGhost./ContextGhost (lib!exec.context.ContextGhost./ContextGhost/?batch_perms core!option.Option.) (lib!exec.context.ContextGhost./ContextGhost/?slots lib!spec.flat_combiner.FlatCombiner.slots.) (lib!exec.context.ContextGhost./ContextGhost/?update core!option.Option.))) ((lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/?batch_perms core!option.Option.) (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/?cell_id vstd!cell.CellId.) (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/?local_updates core!option.Option.) (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/?fc_clients lib!spec.flat_combiner.FlatCombiner.clients.))) ((lib!exec.replica.ReplicaToken./ReplicaToken (lib!exec.replica.ReplicaToken./ReplicaToken/?rid Int))) ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?data Poly) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?replica Poly) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?combiner Poly) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?cb_combiner Poly))) ((lib!exec.replica.Replica./Replica (lib!exec.replica.Replica./Replica/?replica_token lib!exec.replica.ReplicaToken.) (lib!exec.replica.Replica./Replica/?combiner lib!exec.CachePadded.) (lib!exec.replica.Replica./Replica/?contexts Poly) (lib!exec.replica.Replica./Replica/?collected_operations Poly) (lib!exec.replica.Replica./Replica/?collected_operations_per_thread vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (lib!exec.replica.Replica./Replica/?responses Poly) (lib!exec.replica.Replica./Replica/?data lib!exec.CachePadded.) (lib!exec.replica.Replica./Replica/?num_threads Int) (lib!exec.replica.Replica./Replica/?thread_tokens Poly) (lib!exec.replica.Replica./Replica/?unbounded_log_instance Poly) (lib!exec.replica.Replica./Replica/?cyclic_buffer_instance Poly) (lib!exec.replica.Replica./Replica/?flat_combiner_instance lib!spec.flat_combiner.FlatCombiner.Instance.))) ((lib!exec.replica.InvariantPredicate_auto_Replica_combiner./InvariantPredicate_auto_Replica_combiner )) ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?flat_combiner lib!spec.flat_combiner.FlatCombiner.combiner.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_perm Poly) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_per_thread_perm vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?responses_token Poly))) ((lib!spec.unbounded_log.UpdateState./Init (lib!spec.unbounded_log.UpdateState./Init/?op Poly)) (lib!spec.unbounded_log.UpdateState./Placed (lib!spec.unbounded_log.UpdateState./Placed/?op Poly) (lib!spec.unbounded_log.UpdateState./Placed/?idx Int)) (lib!spec.unbounded_log.UpdateState./Applied (lib!spec.unbounded_log.UpdateState./Applied/?ret Poly) (lib!spec.unbounded_log.UpdateState./Applied/?idx Int)) (lib!spec.unbounded_log.UpdateState./Done (lib!spec.unbounded_log.UpdateState./Done/?ret Poly) (lib!spec.unbounded_log.UpdateState./Done/?idx Int))) ((lib!spec.flat_combiner.ClientState./Idle ) (lib!spec.flat_combiner.ClientState./Waiting (lib!spec.flat_combiner.ClientState./Waiting/?0 Int))) ((lib!spec.flat_combiner.SlotState./Empty ) (lib!spec.flat_combiner.SlotState./Request (lib!spec.flat_combiner.SlotState./Request/?0 Int)) (lib!spec.flat_combiner.SlotState./InProgress (lib!spec.flat_combiner.SlotState./InProgress/?0 Int)) (lib!spec.flat_combiner.SlotState./Response (lib!spec.flat_combiner.SlotState./Response/?0 Int))) ((lib!spec.flat_combiner.CombinerState./Collecting (lib!spec.flat_combiner.CombinerState./Collecting/?0 vstd!seq.Seq<core!option.Option<nat.>.>.)) (lib!spec.flat_combiner.CombinerState./Responding (lib!spec.flat_combiner.CombinerState./Responding/?0 vstd!seq.Seq<core!option.Option<nat.>.>.) (lib!spec.flat_combiner.CombinerState./Responding/?1 Int))) ((lib!exec.CachePadded./CachePadded (lib!exec.CachePadded./CachePadded/?0 Poly))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (vstd!atomic.PermissionDataU64.) Int)
(declare-fun vstd!atomic.PermissionDataU64./PermissionDataU64/value (vstd!atomic.PermissionDataU64.) Int)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (vstd!atomic_ghost.AtomicU64.) vstd!atomic.PAtomicU64.)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun vstd!cell.PointsToData./PointsToData/pcell (vstd!cell.PointsToData.) vstd!cell.CellId.)
(declare-fun vstd!cell.PointsToData./PointsToData/value (vstd!cell.PointsToData.) core!option.Option.)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Poly)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Int)
(declare-fun lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) lib!spec.unbounded_log.UpdateState.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) lib!spec.flat_combiner.ClientState.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (lib!spec.flat_combiner.FlatCombiner.slots_token_data.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (lib!spec.flat_combiner.FlatCombiner.slots_token_data.) Int)
(declare-fun lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (lib!spec.flat_combiner.FlatCombiner.slots_token_data.) lib!spec.flat_combiner.SlotState.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/instance (lib!spec.flat_combiner.FlatCombiner.combiner_token_data.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value (lib!spec.flat_combiner.FlatCombiner.combiner_token_data.) lib!spec.flat_combiner.CombinerState.)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/rid (lib!exec.context.ThreadToken.) lib!exec.replica.ReplicaToken.)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/tid (lib!exec.context.ThreadToken.) Int)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/fc_client (lib!exec.context.ThreadToken.) lib!spec.flat_combiner.FlatCombiner.clients.)
(declare-fun lib!exec.context.ThreadToken./ThreadToken/batch_perm (lib!exec.context.ThreadToken.) Poly)
(declare-fun lib!exec.context.PendingOperation./PendingOperation/op (lib!exec.context.PendingOperation.) Poly)
(declare-fun lib!exec.context.PendingOperation./PendingOperation/resp (lib!exec.context.PendingOperation.) core!option.Option.)
(declare-fun lib!exec.context.Context./Context/batch (lib!exec.context.Context.) lib!exec.CachePadded.)
(declare-fun lib!exec.context.Context./Context/atomic (lib!exec.context.Context.) lib!exec.CachePadded.)
(declare-fun lib!exec.context.Context./Context/thread_id_g (lib!exec.context.Context.) Int)
(declare-fun lib!exec.context.Context./Context/flat_combiner_instance (lib!exec.context.Context.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!exec.context.Context./Context/unbounded_log_instance (lib!exec.context.Context.) Poly)
(declare-fun lib!exec.context.ContextGhost./ContextGhost/batch_perms (lib!exec.context.ContextGhost.) core!option.Option.)
(declare-fun lib!exec.context.ContextGhost./ContextGhost/slots (lib!exec.context.ContextGhost.) lib!spec.flat_combiner.FlatCombiner.slots.)
(declare-fun lib!exec.context.ContextGhost./ContextGhost/update (lib!exec.context.ContextGhost.) core!option.Option.)
(declare-fun lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms (lib!exec.context.FCClientRequestResponseGhost.) core!option.Option.)
(declare-fun lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id (lib!exec.context.FCClientRequestResponseGhost.) vstd!cell.CellId.)
(declare-fun lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (lib!exec.context.FCClientRequestResponseGhost.) core!option.Option.)
(declare-fun lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (lib!exec.context.FCClientRequestResponseGhost.) lib!spec.flat_combiner.FlatCombiner.clients.)
(declare-fun lib!exec.replica.ReplicaToken./ReplicaToken/rid (lib!exec.replica.ReplicaToken.) Int)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/replica_token (lib!exec.replica.Replica.) lib!exec.replica.ReplicaToken.)
(declare-fun lib!exec.replica.Replica./Replica/combiner (lib!exec.replica.Replica.) lib!exec.CachePadded.)
(declare-fun lib!exec.replica.Replica./Replica/contexts (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/collected_operations (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/collected_operations_per_thread (lib!exec.replica.Replica.) vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun lib!exec.replica.Replica./Replica/responses (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/data (lib!exec.replica.Replica.) lib!exec.CachePadded.)
(declare-fun lib!exec.replica.Replica./Replica/num_threads (lib!exec.replica.Replica.) Int)
(declare-fun lib!exec.replica.Replica./Replica/thread_tokens (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/unbounded_log_instance (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/cyclic_buffer_instance (lib!exec.replica.Replica.) Poly)
(declare-fun lib!exec.replica.Replica./Replica/flat_combiner_instance (lib!exec.replica.Replica.) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner (lib!exec.replica.CombinerLockStateGhost.) lib!spec.flat_combiner.FlatCombiner.combiner.)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (lib!exec.replica.CombinerLockStateGhost.) Poly)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm (lib!exec.replica.CombinerLockStateGhost.) vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (lib!exec.replica.CombinerLockStateGhost.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Init/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/op (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Placed/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Applied/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/ret (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun lib!spec.unbounded_log.UpdateState./Done/idx (lib!spec.unbounded_log.UpdateState.) Int)
(declare-fun lib!spec.flat_combiner.ClientState./Waiting/0 (lib!spec.flat_combiner.ClientState.) Int)
(declare-fun lib!spec.flat_combiner.SlotState./Request/0 (lib!spec.flat_combiner.SlotState.) Int)
(declare-fun lib!spec.flat_combiner.SlotState./InProgress/0 (lib!spec.flat_combiner.SlotState.) Int)
(declare-fun lib!spec.flat_combiner.SlotState./Response/0 (lib!spec.flat_combiner.SlotState.) Int)
(declare-fun lib!spec.flat_combiner.CombinerState./Collecting/0 (lib!spec.flat_combiner.CombinerState.) vstd!seq.Seq<core!option.Option<nat.>.>.)
(declare-fun lib!spec.flat_combiner.CombinerState./Responding/0 (lib!spec.flat_combiner.CombinerState.) vstd!seq.Seq<core!option.Option<nat.>.>.)
(declare-fun lib!spec.flat_combiner.CombinerState./Responding/1 (lib!spec.flat_combiner.CombinerState.) Int)
(declare-fun lib!exec.CachePadded./CachePadded/0 (lib!exec.CachePadded.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-const TYPE%alloc!alloc.Global. Type)
(declare-const TYPE%vstd!atomic.PAtomicU64. Type)
(declare-const TYPE%vstd!atomic.PermissionU64. Type)
(declare-const TYPE%vstd!atomic.PermissionDataU64. Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredU64. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicU64. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PCell. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PointsToData. (Dcr Type) Type)
(declare-const TYPE%vstd!cell.CellId. Type)
(declare-fun TYPE%vstd!invariant.AtomicInvariant. (Dcr Type Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!invariant.OpenInvariantCredit. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. (Dcr Type) Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.clients. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.slots. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.combiner. Type)
(declare-const TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. Type)
(declare-fun TYPE%lib!exec.context.ThreadToken. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.context.PendingOperation. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.context.Context. (Dcr Type) Type)
(declare-const TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. Type)
(declare-fun TYPE%lib!exec.context.ContextGhost. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.context.FCClientRequestResponseGhost. (Dcr Type) Type)
(declare-const TYPE%lib!exec.replica.ReplicaToken. Type)
(declare-fun TYPE%lib!exec.replica.ReplicatedDataStructure. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.replica.Replica. (Dcr Type) Type)
(declare-const TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. Type)
(declare-fun TYPE%lib!exec.replica.CombinerLockStateGhost. (Dcr Type) Type)
(declare-fun TYPE%lib!exec.rwlock.RwLock. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.unbounded_log.UpdateState. (Dcr Type) Type)
(declare-const TYPE%lib!spec.flat_combiner.ClientState. Type)
(declare-const TYPE%lib!spec.flat_combiner.SlotState. Type)
(declare-const TYPE%lib!spec.flat_combiner.CombinerState. Type)
(declare-fun TYPE%lib!exec.CachePadded. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!alloc.Global. (alloc!alloc.Global.) Poly)
(declare-fun %Poly%alloc!alloc.Global. (Poly) alloc!alloc.Global.)
(declare-fun Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (alloc!vec.Vec<usize./alloc!alloc.Global.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (Poly) alloc!vec.Vec<usize./alloc!alloc.Global.>.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!spec.flat_combiner.FlatCombiner.Instance.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (Poly) lib!spec.flat_combiner.FlatCombiner.Instance.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!spec.flat_combiner.FlatCombiner.clients.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.clients. (Poly) lib!spec.flat_combiner.FlatCombiner.clients.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (lib!spec.flat_combiner.FlatCombiner.combiner.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (Poly) lib!spec.flat_combiner.FlatCombiner.combiner.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!spec.flat_combiner.FlatCombiner.slots.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.slots. (Poly) lib!spec.flat_combiner.FlatCombiner.slots.)
(declare-fun Poly%vstd!atomic.PAtomicU64. (vstd!atomic.PAtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicU64. (Poly) vstd!atomic.PAtomicU64.)
(declare-fun Poly%vstd!atomic.PermissionU64. (vstd!atomic.PermissionU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionU64. (Poly) vstd!atomic.PermissionU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>. (vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>. (Poly) vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>.)
(declare-fun Poly%vstd!cell.CellId. (vstd!cell.CellId.) Poly)
(declare-fun %Poly%vstd!cell.CellId. (Poly) vstd!cell.CellId.)
(declare-fun Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly) vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) Poly)
(declare-fun %Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly) vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)
(declare-fun Poly%vstd!invariant.OpenInvariantCredit. (vstd!invariant.OpenInvariantCredit.) Poly)
(declare-fun %Poly%vstd!invariant.OpenInvariantCredit. (Poly) vstd!invariant.OpenInvariantCredit.)
(declare-fun Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (vstd!seq.Seq<core!option.Option<nat.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (Poly) vstd!seq.Seq<core!option.Option<nat.>.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionDataU64. (Poly) vstd!atomic.PermissionDataU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicU64. (Poly) vstd!atomic_ghost.AtomicU64.)
(declare-fun Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData.) Poly)
(declare-fun %Poly%vstd!cell.PointsToData. (Poly) vstd!cell.PointsToData.)
(declare-fun Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly) lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly) lib!spec.flat_combiner.FlatCombiner.clients_token_data.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.slots_token_data.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly) lib!spec.flat_combiner.FlatCombiner.slots_token_data.)
(declare-fun Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.combiner_token_data.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (Poly) lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)
(declare-fun Poly%lib!exec.context.ThreadToken. (lib!exec.context.ThreadToken.) Poly)
(declare-fun %Poly%lib!exec.context.ThreadToken. (Poly) lib!exec.context.ThreadToken.)
(declare-fun Poly%lib!exec.context.PendingOperation. (lib!exec.context.PendingOperation.) Poly)
(declare-fun %Poly%lib!exec.context.PendingOperation. (Poly) lib!exec.context.PendingOperation.)
(declare-fun Poly%lib!exec.context.Context. (lib!exec.context.Context.) Poly)
(declare-fun %Poly%lib!exec.context.Context. (Poly) lib!exec.context.Context.)
(declare-fun Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.context.InvariantPredicate_auto_Context_atomic.) Poly)
(declare-fun %Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (Poly) lib!exec.context.InvariantPredicate_auto_Context_atomic.)
(declare-fun Poly%lib!exec.context.ContextGhost. (lib!exec.context.ContextGhost.) Poly)
(declare-fun %Poly%lib!exec.context.ContextGhost. (Poly) lib!exec.context.ContextGhost.)
(declare-fun Poly%lib!exec.context.FCClientRequestResponseGhost. (lib!exec.context.FCClientRequestResponseGhost.) Poly)
(declare-fun %Poly%lib!exec.context.FCClientRequestResponseGhost. (Poly) lib!exec.context.FCClientRequestResponseGhost.)
(declare-fun Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken.) Poly)
(declare-fun %Poly%lib!exec.replica.ReplicaToken. (Poly) lib!exec.replica.ReplicaToken.)
(declare-fun Poly%lib!exec.replica.ReplicatedDataStructure. (lib!exec.replica.ReplicatedDataStructure.) Poly)
(declare-fun %Poly%lib!exec.replica.ReplicatedDataStructure. (Poly) lib!exec.replica.ReplicatedDataStructure.)
(declare-fun Poly%lib!exec.replica.Replica. (lib!exec.replica.Replica.) Poly)
(declare-fun %Poly%lib!exec.replica.Replica. (Poly) lib!exec.replica.Replica.)
(declare-fun Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (lib!exec.replica.InvariantPredicate_auto_Replica_combiner.) Poly)
(declare-fun %Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (Poly) lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)
(declare-fun Poly%lib!exec.replica.CombinerLockStateGhost. (lib!exec.replica.CombinerLockStateGhost.) Poly)
(declare-fun %Poly%lib!exec.replica.CombinerLockStateGhost. (Poly) lib!exec.replica.CombinerLockStateGhost.)
(declare-fun Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState.) Poly)
(declare-fun %Poly%lib!spec.unbounded_log.UpdateState. (Poly) lib!spec.unbounded_log.UpdateState.)
(declare-fun Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.ClientState. (Poly) lib!spec.flat_combiner.ClientState.)
(declare-fun Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.SlotState. (Poly) lib!spec.flat_combiner.SlotState.)
(declare-fun Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.CombinerState.) Poly)
(declare-fun %Poly%lib!spec.flat_combiner.CombinerState. (Poly) lib!spec.flat_combiner.CombinerState.)
(declare-fun Poly%lib!exec.CachePadded. (lib!exec.CachePadded.) Poly)
(declare-fun %Poly%lib!exec.CachePadded. (Poly) lib!exec.CachePadded.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x alloc!alloc.Global.)) (! (= x (%Poly%alloc!alloc.Global. (Poly%alloc!alloc.Global. x))) :pattern ((Poly%alloc!alloc.Global. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%alloc!alloc.Global.) (= x (Poly%alloc!alloc.Global. (%Poly%alloc!alloc.Global. x)))) :pattern ((has_type x TYPE%alloc!alloc.Global.)) )))
(assert (forall ((x alloc!alloc.Global.)) (! (has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.) :pattern ((has_type (Poly%alloc!alloc.Global. x) TYPE%alloc!alloc.Global.)) )))
(assert (forall ((x alloc!vec.Vec<usize./alloc!alloc.Global.>.)) (! (= x (%Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x))) :pattern ((Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)) (= x (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. (%Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x alloc!vec.Vec<usize./alloc!alloc.Global.>.)) (! (has_type (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)) :pattern ((has_type (Poly%alloc!vec.Vec<usize./alloc!alloc.Global.>. x) (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. x) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. (Poly%lib!spec.flat_combiner.FlatCombiner.clients. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.clients. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients. x) TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients. x) TYPE%lib!spec.flat_combiner.FlatCombiner.clients.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. x) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. (Poly%lib!spec.flat_combiner.FlatCombiner.slots. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.slots. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots.)) (! (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots. x) TYPE%lib!spec.flat_combiner.FlatCombiner.slots.) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots. x) TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)) )))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (= x (%Poly%vstd!atomic.PAtomicU64. (Poly%vstd!atomic.PAtomicU64. x))) :pattern ((Poly%vstd!atomic.PAtomicU64. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicU64.) (= x (Poly%vstd!atomic.PAtomicU64. (%Poly%vstd!atomic.PAtomicU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicU64.)) )))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.) :pattern ((has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.)) )))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (= x (%Poly%vstd!atomic.PermissionU64. (Poly%vstd!atomic.PermissionU64. x))) :pattern ((Poly%vstd!atomic.PermissionU64. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionU64.) (= x (Poly%vstd!atomic.PermissionU64. (%Poly%vstd!atomic.PermissionU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionU64.)) )))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.) :pattern ((has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.)) )))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>. (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.)) (= x (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>. (%Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.))) )))
(assert (forall ((x vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>.)) (! (has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.)) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPredU64<lib!exec.context.InvariantPredicate_auto_Context_atomic.>. x) (TYPE%vstd!atomic_ghost.AtomicPredU64. $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.))) )))
(assert (forall ((x vstd!cell.CellId.)) (! (= x (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. x))) :pattern ((Poly%vstd!cell.CellId. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!cell.CellId.) (= x (Poly%vstd!cell.CellId. (%Poly%vstd!cell.CellId. x)))) :pattern ((has_type x TYPE%vstd!cell.CellId.)) )))
(assert (forall ((x vstd!cell.CellId.)) (! (has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.) :pattern ((has_type (Poly%vstd!cell.CellId. x) TYPE%vstd!cell.CellId.)) )))
(assert (forall ((x vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (= x (%Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x))) :pattern ((Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) (= x (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (%Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))) )))
(assert (forall ((x vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (has_type (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) :pattern ((has_type (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))) )))
(assert (forall ((x vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (= x (%Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x))) :pattern ((Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) (= x (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (%Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))) )))
(assert (forall ((x vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.)) (! (has_type (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) :pattern ((has_type (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. x) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.)))) )))
(assert (forall ((x vstd!invariant.OpenInvariantCredit.)) (! (= x (%Poly%vstd!invariant.OpenInvariantCredit. (Poly%vstd!invariant.OpenInvariantCredit. x))) :pattern ((Poly%vstd!invariant.OpenInvariantCredit. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!invariant.OpenInvariantCredit.) (= x (Poly%vstd!invariant.OpenInvariantCredit. (%Poly%vstd!invariant.OpenInvariantCredit. x)))) :pattern ((has_type x TYPE%vstd!invariant.OpenInvariantCredit.)) )))
(assert (forall ((x vstd!invariant.OpenInvariantCredit.)) (! (has_type (Poly%vstd!invariant.OpenInvariantCredit. x) TYPE%vstd!invariant.OpenInvariantCredit.) :pattern ((has_type (Poly%vstd!invariant.OpenInvariantCredit. x) TYPE%vstd!invariant.OpenInvariantCredit.)) )))
(assert (forall ((x vstd!seq.Seq<core!option.Option<nat.>.>.)) (! (= x (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. x))) :pattern ((Poly%vstd!seq.Seq<core!option.Option<nat.>.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ NAT))) (= x (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (%Poly%vstd!seq.Seq<core!option.Option<nat.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ NAT)))) )))
(assert (forall ((x vstd!seq.Seq<core!option.Option<nat.>.>.)) (! (has_type (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ NAT))) :pattern ((has_type (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%core!option.Option. $ NAT)))) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= x (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. x))) :pattern ((Poly%vstd!atomic.PermissionDataU64. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionDataU64.) (= x (Poly%vstd!atomic.PermissionDataU64. (%Poly%vstd!atomic.PermissionDataU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionDataU64.)) )))
(assert (forall ((_patomic! Int) (_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64./PermissionDataU64 _patomic! _value!)) TYPE%vstd!atomic.PermissionDataU64.)) :pattern ((has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.PermissionDataU64./PermissionDataU64 _patomic! _value!)) TYPE%vstd!atomic.PermissionDataU64.)) )))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic x) (vstd!atomic.PermissionDataU64./PermissionDataU64/?patomic x)) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/patomic x)) )))
(assert (forall ((x vstd!atomic.PermissionDataU64.)) (! (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value x) (vstd!atomic.PermissionDataU64./PermissionDataU64/?value x)) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionDataU64.) (uInv 64 (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. x)))) :pattern ((vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. x)) (has_type x TYPE%vstd!atomic.PermissionDataU64.)) )))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicU64. (Poly%vstd!atomic_ghost.AtomicU64. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicU64. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicU64. (%Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) )))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicU64.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) )))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x)) )))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)) )))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) )))
(define-fun is-vstd!atomic_ghost.AtomicU64./AtomicU64_ ((c vstd!atomic_ghost.AtomicU64.)) Bool ((_ is vstd!atomic_ghost.AtomicU64./AtomicU64) c))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (=> (is-vstd!atomic_ghost.AtomicU64./AtomicU64_ x) (height_lt (height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x))) )))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= x (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. x))) :pattern ((Poly%vstd!cell.PointsToData. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (= x (Poly%vstd!cell.PointsToData. (%Poly%vstd!cell.PointsToData. x)))) :pattern ((has_type x (TYPE%vstd!cell.PointsToData. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_pcell! vstd!cell.CellId.) (_value! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((has_type (Poly%vstd!cell.PointsToData. (vstd!cell.PointsToData./PointsToData _pcell! _value!)) (TYPE%vstd!cell.PointsToData. V&. V&))) )))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/pcell x) (vstd!cell.PointsToData./PointsToData/?pcell x)) :pattern ((vstd!cell.PointsToData./PointsToData/pcell x)) )))
(assert (forall ((x vstd!cell.PointsToData.)) (! (= (vstd!cell.PointsToData./PointsToData/value x) (vstd!cell.PointsToData./PointsToData/?value x)) :pattern ((vstd!cell.PointsToData./PointsToData/value x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PointsToData. V&. V&)) (has_type (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x))) (TYPE%core!option.Option. V&. V&))) :pattern ((vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. x)) (has_type x (TYPE%vstd!cell.PointsToData. V&. V&))) )))
(define-fun is-vstd!cell.PointsToData./PointsToData_ ((c vstd!cell.PointsToData.)) Bool ((_ is vstd!cell.PointsToData./PointsToData) c))
(assert (forall ((x vstd!cell.PointsToData.)) (! (=> (is-vstd!cell.PointsToData./PointsToData_ x) (height_lt (height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x))) (height (Poly%vstd!cell.PointsToData. x)))) :pattern ((height (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value x)))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= x (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x))) :pattern ((Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_instance! Poly) (_key! Int) (_value! lib!spec.unbounded_log.UpdateState.)) (! (=> (and (has_type _instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (<= 0 _key!) (has_type (Poly%lib!spec.unbounded_log.UpdateState. _value!) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data _instance! _key! _value!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?instance x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (has_type (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?key x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/?value x)) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x))) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)) (has_type x (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) )))
(define-fun is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ ((c lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) Bool ((_ is lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data) c))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ x) (height_lt (height (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x)) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((height (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance x))) )))
(assert (forall ((x lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)) (! (=> (is-lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data_ x) (height_lt (height (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x))) (height (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. x)))) :pattern ((height (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value x)))) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) )))
(assert (forall ((_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_key! Int) (_value! lib!spec.flat_combiner.ClientState.)) (! (=> (and (<= 0 _key!) (has_type (Poly%lib!spec.flat_combiner.ClientState. _value!) TYPE%lib!spec.flat_combiner.ClientState.)) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?instance x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance x)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?key x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value x) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/?value x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.) (has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x))) TYPE%lib!spec.flat_combiner.ClientState.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) )))
(assert (forall ((_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_key! Int) (_value! lib!spec.flat_combiner.SlotState.)) (! (=> (and (<= 0 _key!) (has_type (Poly%lib!spec.flat_combiner.SlotState. _value!) TYPE%lib!spec.flat_combiner.SlotState.)) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data _instance! _key! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance x) (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?instance x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance x)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key x) (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?key x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.) (<= 0 (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x)))) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value x) (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/?value x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.) (has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x))) TYPE%lib!spec.flat_combiner.SlotState.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) (! (= x (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x))) :pattern ((Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.) (= x (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) )))
(assert (forall ((_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_value! lib!spec.flat_combiner.CombinerState.)) (! (=> (has_type (Poly%lib!spec.flat_combiner.CombinerState. _value!) TYPE%lib!spec.flat_combiner.CombinerState.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data _instance! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data _instance! _value!)) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/instance x) (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/?instance x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/instance x)) )))
(assert (forall ((x lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) (! (= (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value x) (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/?value x)) :pattern ((lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.) (has_type (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x))) TYPE%lib!spec.flat_combiner.CombinerState.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. x)) (has_type x TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) )))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= x (%Poly%lib!exec.context.ThreadToken. (Poly%lib!exec.context.ThreadToken. x))) :pattern ((Poly%lib!exec.context.ThreadToken. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (= x (Poly%lib!exec.context.ThreadToken. (%Poly%lib!exec.context.ThreadToken. x)))) :pattern ((has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_rid! lib!exec.replica.ReplicaToken.) (_tid! Int) (_fc_client! lib!spec.flat_combiner.FlatCombiner.clients.) (_batch_perm! Poly)) (! (=> (and (has_type (Poly%lib!exec.replica.ReplicaToken. _rid!) TYPE%lib!exec.replica.ReplicaToken.) (uInv 32 _tid!) (has_type _batch_perm! (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) (has_type (Poly%lib!exec.context.ThreadToken. (lib!exec.context.ThreadToken./ThreadToken _rid! _tid! _fc_client! _batch_perm!)) (TYPE%lib!exec.context.ThreadToken. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.ThreadToken. (lib!exec.context.ThreadToken./ThreadToken _rid! _tid! _fc_client! _batch_perm!)) (TYPE%lib!exec.context.ThreadToken. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/rid x) (lib!exec.context.ThreadToken./ThreadToken/?rid x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/rid x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. x))) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. x)) (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/tid x) (lib!exec.context.ThreadToken./ThreadToken/?tid x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/tid x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (uInv 32 (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. x)))) :pattern ((lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. x)) (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/fc_client x) (lib!exec.context.ThreadToken./ThreadToken/?fc_client x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/fc_client x)) )))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (= (lib!exec.context.ThreadToken./ThreadToken/batch_perm x) (lib!exec.context.ThreadToken./ThreadToken/?batch_perm x)) :pattern ((lib!exec.context.ThreadToken./ThreadToken/batch_perm x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (has_type (lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) :pattern ((lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. x)) (has_type x (TYPE%lib!exec.context.ThreadToken. DT&. DT&))) )))
(define-fun is-lib!exec.context.ThreadToken./ThreadToken_ ((c lib!exec.context.ThreadToken.)) Bool ((_ is lib!exec.context.ThreadToken./ThreadToken) c))
(assert (forall ((x lib!exec.context.ThreadToken.)) (! (=> (is-lib!exec.context.ThreadToken./ThreadToken_ x) (height_lt (height (lib!exec.context.ThreadToken./ThreadToken/batch_perm x)) (height (Poly%lib!exec.context.ThreadToken. x)))) :pattern ((height (lib!exec.context.ThreadToken./ThreadToken/batch_perm x))) )))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (= x (%Poly%lib!exec.context.PendingOperation. (Poly%lib!exec.context.PendingOperation. x))) :pattern ((Poly%lib!exec.context.PendingOperation. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&)) (= x (Poly%lib!exec.context.PendingOperation. (%Poly%lib!exec.context.PendingOperation. x)))) :pattern ((has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_resp! core!option.Option.)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%core!option.Option. _resp!) (TYPE%core!option.Option. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&)))) (has_type (Poly%lib!exec.context.PendingOperation. (lib!exec.context.PendingOperation./PendingOperation _op! _resp!)) (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.PendingOperation. (lib!exec.context.PendingOperation./PendingOperation _op! _resp!)) (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (= (lib!exec.context.PendingOperation./PendingOperation/op x) (lib!exec.context.PendingOperation./PendingOperation/?op x)) :pattern ((lib!exec.context.PendingOperation./PendingOperation/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&)) (has_type (lib!exec.context.PendingOperation./PendingOperation/op (%Poly%lib!exec.context.PendingOperation. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!exec.context.PendingOperation./PendingOperation/op (%Poly%lib!exec.context.PendingOperation. x)) (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (= (lib!exec.context.PendingOperation./PendingOperation/resp x) (lib!exec.context.PendingOperation./PendingOperation/?resp x)) :pattern ((lib!exec.context.PendingOperation./PendingOperation/resp x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!exec.context.PendingOperation./PendingOperation/resp (%Poly%lib!exec.context.PendingOperation. x))) (TYPE%core!option.Option. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&)))) :pattern ((lib!exec.context.PendingOperation./PendingOperation/resp (%Poly%lib!exec.context.PendingOperation. x)) (has_type x (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) )))
(define-fun is-lib!exec.context.PendingOperation./PendingOperation_ ((c lib!exec.context.PendingOperation.)) Bool ((_ is lib!exec.context.PendingOperation./PendingOperation) c))
(assert (forall ((x lib!exec.context.PendingOperation.)) (! (=> (is-lib!exec.context.PendingOperation./PendingOperation_ x) (height_lt (height (Poly%core!option.Option. (lib!exec.context.PendingOperation./PendingOperation/resp x))) (height (Poly%lib!exec.context.PendingOperation. x)))) :pattern ((height (Poly%core!option.Option. (lib!exec.context.PendingOperation./PendingOperation/resp x)))) )))
(assert (forall ((x lib!exec.context.Context.)) (! (= x (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. x))) :pattern ((Poly%lib!exec.context.Context. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (= x (Poly%lib!exec.context.Context. (%Poly%lib!exec.context.Context. x)))) :pattern ((has_type x (TYPE%lib!exec.context.Context. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_batch! lib!exec.CachePadded.) (_atomic! lib!exec.CachePadded.) (_thread_id_g! Int) (_flat_combiner_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (_unbounded_log_instance! Poly)) (! (=> (and (has_type (Poly%lib!exec.CachePadded. _batch!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) (has_type (Poly%lib!exec.CachePadded. _atomic!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.))) (<= 0 _thread_id_g!) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) (has_type (Poly%lib!exec.context.Context. (lib!exec.context.Context./Context _batch! _atomic! _thread_id_g! _flat_combiner_instance! _unbounded_log_instance!)) (TYPE%lib!exec.context.Context. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.Context. (lib!exec.context.Context./Context _batch! _atomic! _thread_id_g! _flat_combiner_instance! _unbounded_log_instance!)) (TYPE%lib!exec.context.Context. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/batch x) (lib!exec.context.Context./Context/?batch x)) :pattern ((lib!exec.context.Context./Context/batch x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))) :pattern ((lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/atomic x) (lib!exec.context.Context./Context/?atomic x)) :pattern ((lib!exec.context.Context./Context/atomic x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.)))) :pattern ((lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/thread_id_g x) (lib!exec.context.Context./Context/?thread_id_g x)) :pattern ((lib!exec.context.Context./Context/thread_id_g x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (<= 0 (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. x)))) :pattern ((lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/flat_combiner_instance x) (lib!exec.context.Context./Context/?flat_combiner_instance x)) :pattern ((lib!exec.context.Context./Context/flat_combiner_instance x)) )))
(assert (forall ((x lib!exec.context.Context.)) (! (= (lib!exec.context.Context./Context/unbounded_log_instance x) (lib!exec.context.Context./Context/?unbounded_log_instance x)) :pattern ((lib!exec.context.Context./Context/unbounded_log_instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.Context. DT&. DT&)) (has_type (lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. x)) (has_type x (TYPE%lib!exec.context.Context. DT&. DT&))) )))
(define-fun is-lib!exec.context.Context./Context_ ((c lib!exec.context.Context.)) Bool ((_ is lib!exec.context.Context./Context) c))
(assert (forall ((x lib!exec.context.Context.)) (! (=> (is-lib!exec.context.Context./Context_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch x))) (height (Poly%lib!exec.context.Context. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch x)))) )))
(assert (forall ((x lib!exec.context.Context.)) (! (=> (is-lib!exec.context.Context./Context_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic x))) (height (Poly%lib!exec.context.Context. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic x)))) )))
(assert (forall ((x lib!exec.context.Context.)) (! (=> (is-lib!exec.context.Context./Context_ x) (height_lt (height (lib!exec.context.Context./Context/unbounded_log_instance x)) (height (Poly%lib!exec.context.Context. x)))) :pattern ((height (lib!exec.context.Context./Context/unbounded_log_instance x))) )))
(assert (forall ((x lib!exec.context.InvariantPredicate_auto_Context_atomic.)) (! (= x (%Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x))) :pattern ((Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.) (= x (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. (%Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x)))) :pattern ((has_type x TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.)) )))
(assert (forall ((x lib!exec.context.InvariantPredicate_auto_Context_atomic.)) (! (has_type (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x) TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.) :pattern ((has_type (Poly%lib!exec.context.InvariantPredicate_auto_Context_atomic. x) TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic.)) )))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= x (%Poly%lib!exec.context.ContextGhost. (Poly%lib!exec.context.ContextGhost. x))) :pattern ((Poly%lib!exec.context.ContextGhost. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&)) (= x (Poly%lib!exec.context.ContextGhost. (%Poly%lib!exec.context.ContextGhost. x)))) :pattern ((has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_batch_perms! core!option.Option.) (_slots! lib!spec.flat_combiner.FlatCombiner.slots.) (_update! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _batch_perms!) (TYPE%core!option.Option. $ (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) (has_type (Poly%core!option.Option. _update!) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) (has_type (Poly%lib!exec.context.ContextGhost. (lib!exec.context.ContextGhost./ContextGhost _batch_perms! _slots! _update!)) (TYPE%lib!exec.context.ContextGhost. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.ContextGhost. (lib!exec.context.ContextGhost./ContextGhost _batch_perms! _slots! _update!)) (TYPE%lib!exec.context.ContextGhost. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= (lib!exec.context.ContextGhost./ContextGhost/batch_perms x) (lib!exec.context.ContextGhost./ContextGhost/?batch_perms x)) :pattern ((lib!exec.context.ContextGhost./ContextGhost/batch_perms x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. x))) (TYPE%core!option.Option. $ (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))) :pattern ((lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. x)) (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= (lib!exec.context.ContextGhost./ContextGhost/slots x) (lib!exec.context.ContextGhost./ContextGhost/?slots x)) :pattern ((lib!exec.context.ContextGhost./ContextGhost/slots x)) )))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (= (lib!exec.context.ContextGhost./ContextGhost/update x) (lib!exec.context.ContextGhost./ContextGhost/?update x)) :pattern ((lib!exec.context.ContextGhost./ContextGhost/update x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. x))) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) :pattern ((lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. x)) (has_type x (TYPE%lib!exec.context.ContextGhost. DT&. DT&))) )))
(define-fun is-lib!exec.context.ContextGhost./ContextGhost_ ((c lib!exec.context.ContextGhost.)) Bool ((_ is lib!exec.context.ContextGhost./ContextGhost) c))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (=> (is-lib!exec.context.ContextGhost./ContextGhost_ x) (height_lt (height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms x))) (height (Poly%lib!exec.context.ContextGhost. x)))) :pattern ((height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms x)))) )))
(assert (forall ((x lib!exec.context.ContextGhost.)) (! (=> (is-lib!exec.context.ContextGhost./ContextGhost_ x) (height_lt (height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update x))) (height (Poly%lib!exec.context.ContextGhost. x)))) :pattern ((height (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update x)))) )))
(assert (forall ((x lib!exec.context.FCClientRequestResponseGhost.)) (! (= x (%Poly%lib!exec.context.FCClientRequestResponseGhost. (Poly%lib!exec.context.FCClientRequestResponseGhost. x))) :pattern ((Poly%lib!exec.context.FCClientRequestResponseGhost. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.FCClientRequestResponseGhost. DT&. DT&)) (= x (Poly%lib!exec.context.FCClientRequestResponseGhost. (%Poly%lib!exec.context.FCClientRequestResponseGhost. x)))) :pattern ((has_type x (TYPE%lib!exec.context.FCClientRequestResponseGhost. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_batch_perms! core!option.Option.) (_cell_id! vstd!cell.CellId.) (_local_updates! core!option.Option.) (_fc_clients! lib!spec.flat_combiner.FlatCombiner.clients.)) (! (=> (and (has_type (Poly%core!option.Option. _batch_perms!) (TYPE%core!option.Option. $ (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) (has_type (Poly%core!option.Option. _local_updates!) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) (has_type (Poly%lib!exec.context.FCClientRequestResponseGhost. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost _batch_perms! _cell_id! _local_updates! _fc_clients!)) (TYPE%lib!exec.context.FCClientRequestResponseGhost. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.context.FCClientRequestResponseGhost. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost _batch_perms! _cell_id! _local_updates! _fc_clients!)) (TYPE%lib!exec.context.FCClientRequestResponseGhost. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.FCClientRequestResponseGhost.)) (! (= (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms x) (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/?batch_perms x)) :pattern ((lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.FCClientRequestResponseGhost. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms (%Poly%lib!exec.context.FCClientRequestResponseGhost. x))) (TYPE%core!option.Option. $ (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))))) :pattern ((lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms (%Poly%lib!exec.context.FCClientRequestResponseGhost. x)) (has_type x (TYPE%lib!exec.context.FCClientRequestResponseGhost. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.FCClientRequestResponseGhost.)) (! (= (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id x) (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/?cell_id x)) :pattern ((lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id x)) )))
(assert (forall ((x lib!exec.context.FCClientRequestResponseGhost.)) (! (= (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates x) (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/?local_updates x)) :pattern ((lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.context.FCClientRequestResponseGhost. DT&. DT&)) (has_type (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. x))) (TYPE%core!option.Option. $ (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)))) :pattern ((lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. x)) (has_type x (TYPE%lib!exec.context.FCClientRequestResponseGhost. DT&. DT&))) )))
(assert (forall ((x lib!exec.context.FCClientRequestResponseGhost.)) (! (= (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients x) (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/?fc_clients x)) :pattern ((lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients x)) )))
(define-fun is-lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost_ ((c lib!exec.context.FCClientRequestResponseGhost.)) Bool ((_ is lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost) c))
(assert (forall ((x lib!exec.context.FCClientRequestResponseGhost.)) (! (=> (is-lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost_ x) (height_lt (height (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms x))) (height (Poly%lib!exec.context.FCClientRequestResponseGhost. x)))) :pattern ((height (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms x)))) )))
(assert (forall ((x lib!exec.context.FCClientRequestResponseGhost.)) (! (=> (is-lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost_ x) (height_lt (height (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates x))) (height (Poly%lib!exec.context.FCClientRequestResponseGhost. x)))) :pattern ((height (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates x)))) )))
(assert (forall ((x lib!exec.replica.ReplicaToken.)) (! (= x (%Poly%lib!exec.replica.ReplicaToken. (Poly%lib!exec.replica.ReplicaToken. x))) :pattern ((Poly%lib!exec.replica.ReplicaToken. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.replica.ReplicaToken.) (= x (Poly%lib!exec.replica.ReplicaToken. (%Poly%lib!exec.replica.ReplicaToken. x)))) :pattern ((has_type x TYPE%lib!exec.replica.ReplicaToken.)) )))
(assert (forall ((_rid! Int)) (! (=> (uInv SZ _rid!) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken./ReplicaToken _rid!)) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.ReplicaToken./ReplicaToken _rid!)) TYPE%lib!exec.replica.ReplicaToken.)) )))
(assert (forall ((x lib!exec.replica.ReplicaToken.)) (! (= (lib!exec.replica.ReplicaToken./ReplicaToken/rid x) (lib!exec.replica.ReplicaToken./ReplicaToken/?rid x)) :pattern ((lib!exec.replica.ReplicaToken./ReplicaToken/rid x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.replica.ReplicaToken.) (uInv SZ (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. x)))) :pattern ((lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. x)) (has_type x TYPE%lib!exec.replica.ReplicaToken.)) )))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= x (%Poly%lib!exec.replica.ReplicatedDataStructure. (Poly%lib!exec.replica.ReplicatedDataStructure. x))) :pattern ((Poly%lib!exec.replica.ReplicatedDataStructure. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (= x (Poly%lib!exec.replica.ReplicatedDataStructure. (%Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_data! Poly) (_replica! Poly) (_combiner! Poly) (_cb_combiner! Poly)) (! (=> (and (has_type _data! DT&) (has_type _replica! (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&)) (has_type _combiner! (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&)) (has_type _cb_combiner! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) (has_type (Poly%lib!exec.replica.ReplicatedDataStructure. (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure _data! _replica! _combiner! _cb_combiner!)) (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.replica.ReplicatedDataStructure. (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure _data! _replica! _combiner! _cb_combiner!)) (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?data x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) DT&)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?replica x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.replicas. DT&. DT&))) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?combiner x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.combiner. DT&. DT&))) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (= (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x) (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/?cb_combiner x)) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)) (has_type (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.combiner. DT&. DT&))) :pattern ((lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner (%Poly%lib!exec.replica.ReplicatedDataStructure. x)) (has_type x (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))) )))
(define-fun is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ ((c lib!exec.replica.ReplicatedDataStructure.)) Bool ((_ is lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure) c))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/data x))) )))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/replica x))) )))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/combiner x))) )))
(assert (forall ((x lib!exec.replica.ReplicatedDataStructure.)) (! (=> (is-lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure_ x) (height_lt (height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x)) (height (Poly%lib!exec.replica.ReplicatedDataStructure. x)))) :pattern ((height (lib!exec.replica.ReplicatedDataStructure./ReplicatedDataStructure/cb_combiner x))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= x (%Poly%lib!exec.replica.Replica. (Poly%lib!exec.replica.Replica. x))) :pattern ((Poly%lib!exec.replica.Replica. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (= x (Poly%lib!exec.replica.Replica. (%Poly%lib!exec.replica.Replica. x)))) :pattern ((has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_replica_token! lib!exec.replica.ReplicaToken.) (_combiner! lib!exec.CachePadded.) (_contexts! Poly) (_collected_operations! Poly) (_collected_operations_per_thread! vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (_responses! Poly) (_data! lib!exec.CachePadded.) (_num_threads! Int) (_thread_tokens! Poly) (_unbounded_log_instance! Poly) (_cyclic_buffer_instance! Poly) (_flat_combiner_instance! lib!spec.flat_combiner.FlatCombiner.Instance.)) (! (=> (and (has_type (Poly%lib!exec.replica.ReplicaToken. _replica_token!) TYPE%lib!exec.replica.ReplicaToken.) (has_type (Poly%lib!exec.CachePadded. _combiner!) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.))) (has_type _contexts! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (has_type _collected_operations! (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.))) (has_type _responses! (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.))) (has_type (Poly%lib!exec.CachePadded. _data!) (TYPE%lib!exec.CachePadded. $ (TYPE%lib!exec.rwlock.RwLock. $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&)))) (uInv 64 _num_threads!) (has_type _thread_tokens! (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global.)) (has_type _unbounded_log_instance! (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&)) (has_type _cyclic_buffer_instance! (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) (has_type (Poly%lib!exec.replica.Replica. (lib!exec.replica.Replica./Replica _replica_token! _combiner! _contexts! _collected_operations! _collected_operations_per_thread! _responses! _data! _num_threads! _thread_tokens! _unbounded_log_instance! _cyclic_buffer_instance! _flat_combiner_instance!)) (TYPE%lib!exec.replica.Replica. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.replica.Replica. (lib!exec.replica.Replica./Replica _replica_token! _combiner! _contexts! _collected_operations! _collected_operations_per_thread! _responses! _data! _num_threads! _thread_tokens! _unbounded_log_instance! _cyclic_buffer_instance! _flat_combiner_instance!)) (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/replica_token x) (lib!exec.replica.Replica./Replica/?replica_token x)) :pattern ((lib!exec.replica.Replica./Replica/replica_token x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. x))) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/combiner x) (lib!exec.replica.Replica./Replica/?combiner x)) :pattern ((lib!exec.replica.Replica./Replica/combiner x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)))) :pattern ((lib!exec.replica.Replica./Replica/combiner (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/contexts x) (lib!exec.replica.Replica./Replica/?contexts x)) :pattern ((lib!exec.replica.Replica./Replica/contexts x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/collected_operations x) (lib!exec.replica.Replica./Replica/?collected_operations x)) :pattern ((lib!exec.replica.Replica./Replica/collected_operations x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/collected_operations (%Poly%lib!exec.replica.Replica. x)) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.Replica./Replica/collected_operations (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/collected_operations_per_thread x) (lib!exec.replica.Replica./Replica/?collected_operations_per_thread x)) :pattern ((lib!exec.replica.Replica./Replica/collected_operations_per_thread x)) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/responses x) (lib!exec.replica.Replica./Replica/?responses x)) :pattern ((lib!exec.replica.Replica./Replica/responses x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/responses (%Poly%lib!exec.replica.Replica. x)) (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.Replica./Replica/responses (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/data x) (lib!exec.replica.Replica./Replica/?data x)) :pattern ((lib!exec.replica.Replica./Replica/data x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. x))) (TYPE%lib!exec.CachePadded. $ (TYPE%lib!exec.rwlock.RwLock. $ (TYPE%lib!exec.replica.ReplicatedDataStructure. DT&. DT&))))) :pattern ((lib!exec.replica.Replica./Replica/data (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/num_threads x) (lib!exec.replica.Replica./Replica/?num_threads x)) :pattern ((lib!exec.replica.Replica./Replica/num_threads x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (uInv 64 (lib!exec.replica.Replica./Replica/num_threads (%Poly%lib!exec.replica.Replica. x)))) :pattern ((lib!exec.replica.Replica./Replica/num_threads (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/thread_tokens x) (lib!exec.replica.Replica./Replica/?thread_tokens x)) :pattern ((lib!exec.replica.Replica./Replica/thread_tokens x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. x)) (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.ThreadToken. DT&. DT&) $ TYPE%alloc!alloc.Global.))) :pattern ((lib!exec.replica.Replica./Replica/thread_tokens (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/unbounded_log_instance x) (lib!exec.replica.Replica./Replica/?unbounded_log_instance x)) :pattern ((lib!exec.replica.Replica./Replica/unbounded_log_instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. x)) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&))) :pattern ((lib!exec.replica.Replica./Replica/unbounded_log_instance (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/cyclic_buffer_instance x) (lib!exec.replica.Replica./Replica/?cyclic_buffer_instance x)) :pattern ((lib!exec.replica.Replica./Replica/cyclic_buffer_instance x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&)) (has_type (lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. x)) (TYPE%lib!spec.cyclicbuffer.CyclicBuffer.Instance. DT&. DT&))) :pattern ((lib!exec.replica.Replica./Replica/cyclic_buffer_instance (%Poly%lib!exec.replica.Replica. x)) (has_type x (TYPE%lib!exec.replica.Replica. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (= (lib!exec.replica.Replica./Replica/flat_combiner_instance x) (lib!exec.replica.Replica./Replica/?flat_combiner_instance x)) :pattern ((lib!exec.replica.Replica./Replica/flat_combiner_instance x)) )))
(define-fun is-lib!exec.replica.Replica./Replica_ ((c lib!exec.replica.Replica.)) Bool ((_ is lib!exec.replica.Replica./Replica) c))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner x))) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/combiner x)))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/contexts x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/contexts x))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/collected_operations x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/collected_operations x))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/responses x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/responses x))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data x))) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (Poly%lib!exec.CachePadded. (lib!exec.replica.Replica./Replica/data x)))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/thread_tokens x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/thread_tokens x))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/unbounded_log_instance x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/unbounded_log_instance x))) )))
(assert (forall ((x lib!exec.replica.Replica.)) (! (=> (is-lib!exec.replica.Replica./Replica_ x) (height_lt (height (lib!exec.replica.Replica./Replica/cyclic_buffer_instance x)) (height (Poly%lib!exec.replica.Replica. x)))) :pattern ((height (lib!exec.replica.Replica./Replica/cyclic_buffer_instance x))) )))
(assert (forall ((x lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)) (! (= x (%Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x))) :pattern ((Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.) (= x (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. (%Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x)))) :pattern ((has_type x TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)) )))
(assert (forall ((x lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)) (! (has_type (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x) TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.) :pattern ((has_type (Poly%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. x) TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner.)) )))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= x (%Poly%lib!exec.replica.CombinerLockStateGhost. (Poly%lib!exec.replica.CombinerLockStateGhost. x))) :pattern ((Poly%lib!exec.replica.CombinerLockStateGhost. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) (= x (Poly%lib!exec.replica.CombinerLockStateGhost. (%Poly%lib!exec.replica.CombinerLockStateGhost. x)))) :pattern ((has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_flat_combiner! lib!spec.flat_combiner.FlatCombiner.combiner.) (_collected_operations_perm! Poly) (_collected_operations_per_thread_perm! vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>.) (_responses_token! Poly)) (! (=> (and (has_type _collected_operations_perm! (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.))) (has_type _responses_token! (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)))) (has_type (Poly%lib!exec.replica.CombinerLockStateGhost. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost _flat_combiner! _collected_operations_perm! _collected_operations_per_thread_perm! _responses_token!)) (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))) :pattern ((has_type (Poly%lib!exec.replica.CombinerLockStateGhost. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost _flat_combiner! _collected_operations_perm! _collected_operations_per_thread_perm! _responses_token!)) (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?flat_combiner x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner x)) )))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_perm x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) (has_type (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))) )))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?collected_operations_per_thread_perm x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm x)) )))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (= (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/?responses_token x)) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) (has_type (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (TYPE%vstd!cell.PointsTo. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)))) :pattern ((lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (%Poly%lib!exec.replica.CombinerLockStateGhost. x)) (has_type x (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&))) )))
(define-fun is-lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost_ ((c lib!exec.replica.CombinerLockStateGhost.)) Bool ((_ is lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost) c))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (=> (is-lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost_ x) (height_lt (height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x)) (height (Poly%lib!exec.replica.CombinerLockStateGhost. x)))) :pattern ((height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm x))) )))
(assert (forall ((x lib!exec.replica.CombinerLockStateGhost.)) (! (=> (is-lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost_ x) (height_lt (height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x)) (height (Poly%lib!exec.replica.CombinerLockStateGhost. x)))) :pattern ((height (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token x))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= x (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. x))) :pattern ((Poly%lib!spec.unbounded_log.UpdateState. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (= x (Poly%lib!spec.unbounded_log.UpdateState. (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly)) (! (=> (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Init _op!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Init/op x) (lib!spec.unbounded_log.UpdateState./Init/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_op! Poly) (_idx! Int)) (! (=> (and (has_type _op! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Placed _op! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/op x) (lib!spec.unbounded_log.UpdateState./Placed/?op x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/op (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Placed/idx x) (lib!spec.unbounded_log.UpdateState./Placed/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Placed/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Applied _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/ret x) (lib!spec.unbounded_log.UpdateState./Applied/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Applied/idx x) (lib!spec.unbounded_log.UpdateState./Applied/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Applied/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_ret! Poly) (_idx! Int)) (! (=> (and (has_type _ret! (proj%lib!Dispatch./Response DT&. DT&)) (<= 0 _idx!)) (has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UpdateState./Done _ret! _idx!)) (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/ret x) (lib!spec.unbounded_log.UpdateState./Done/?ret x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.unbounded_log.UpdateState.)) (! (= (lib!spec.unbounded_log.UpdateState./Done/idx x) (lib!spec.unbounded_log.UpdateState./Done/?idx x)) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (<= 0 (lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)))) :pattern ((lib!spec.unbounded_log.UpdateState./Done/idx (%Poly%lib!spec.unbounded_log.UpdateState. x)) (has_type x (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&))) )))
(assert (forall ((x lib!spec.flat_combiner.ClientState.)) (! (= x (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. x))) :pattern ((Poly%lib!spec.flat_combiner.ClientState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.ClientState.) (= x (Poly%lib!spec.flat_combiner.ClientState. (%Poly%lib!spec.flat_combiner.ClientState. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.ClientState.)) )))
(assert (has_type (Poly%lib!spec.flat_combiner.ClientState. lib!spec.flat_combiner.ClientState./Idle) TYPE%lib!spec.flat_combiner.ClientState.))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting _0!)) TYPE%lib!spec.flat_combiner.ClientState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.ClientState./Waiting _0!)) TYPE%lib!spec.flat_combiner.ClientState.)) )))
(assert (forall ((x lib!spec.flat_combiner.ClientState.)) (! (= (lib!spec.flat_combiner.ClientState./Waiting/0 x) (lib!spec.flat_combiner.ClientState./Waiting/?0 x)) :pattern ((lib!spec.flat_combiner.ClientState./Waiting/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.ClientState.) (<= 0 (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. x)))) :pattern ((lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. x)) (has_type x TYPE%lib!spec.flat_combiner.ClientState.)) )))
(assert (forall ((x lib!spec.flat_combiner.SlotState.)) (! (= x (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. x))) :pattern ((Poly%lib!spec.flat_combiner.SlotState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.SlotState.) (= x (Poly%lib!spec.flat_combiner.SlotState. (%Poly%lib!spec.flat_combiner.SlotState. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (has_type (Poly%lib!spec.flat_combiner.SlotState. lib!spec.flat_combiner.SlotState./Empty) TYPE%lib!spec.flat_combiner.SlotState.))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Request _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Request _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((x lib!spec.flat_combiner.SlotState.)) (! (= (lib!spec.flat_combiner.SlotState./Request/0 x) (lib!spec.flat_combiner.SlotState./Request/?0 x)) :pattern ((lib!spec.flat_combiner.SlotState./Request/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.SlotState.) (<= 0 (lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. x)))) :pattern ((lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. x)) (has_type x TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./InProgress _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./InProgress _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((x lib!spec.flat_combiner.SlotState.)) (! (= (lib!spec.flat_combiner.SlotState./InProgress/0 x) (lib!spec.flat_combiner.SlotState./InProgress/?0 x)) :pattern ((lib!spec.flat_combiner.SlotState./InProgress/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.SlotState.) (<= 0 (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. x)))) :pattern ((lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. x)) (has_type x TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Response _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.SlotState./Response _0!)) TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((x lib!spec.flat_combiner.SlotState.)) (! (= (lib!spec.flat_combiner.SlotState./Response/0 x) (lib!spec.flat_combiner.SlotState./Response/?0 x)) :pattern ((lib!spec.flat_combiner.SlotState./Response/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.SlotState.) (<= 0 (lib!spec.flat_combiner.SlotState./Response/0 (%Poly%lib!spec.flat_combiner.SlotState. x)))) :pattern ((lib!spec.flat_combiner.SlotState./Response/0 (%Poly%lib!spec.flat_combiner.SlotState. x)) (has_type x TYPE%lib!spec.flat_combiner.SlotState.)) )))
(assert (forall ((x lib!spec.flat_combiner.CombinerState.)) (! (= x (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. x))) :pattern ((Poly%lib!spec.flat_combiner.CombinerState. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.CombinerState.) (= x (Poly%lib!spec.flat_combiner.CombinerState. (%Poly%lib!spec.flat_combiner.CombinerState. x)))) :pattern ((has_type x TYPE%lib!spec.flat_combiner.CombinerState.)) )))
(assert (forall ((_0! vstd!seq.Seq<core!option.Option<nat.>.>.)) (! (has_type (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.CombinerState./Collecting _0!)) TYPE%lib!spec.flat_combiner.CombinerState.) :pattern ((has_type (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.CombinerState./Collecting _0!)) TYPE%lib!spec.flat_combiner.CombinerState.)) )))
(assert (forall ((x lib!spec.flat_combiner.CombinerState.)) (! (= (lib!spec.flat_combiner.CombinerState./Collecting/0 x) (lib!spec.flat_combiner.CombinerState./Collecting/?0 x)) :pattern ((lib!spec.flat_combiner.CombinerState./Collecting/0 x)) )))
(assert (forall ((_0! vstd!seq.Seq<core!option.Option<nat.>.>.) (_1! Int)) (! (=> (<= 0 _1!) (has_type (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.CombinerState./Responding _0! _1!)) TYPE%lib!spec.flat_combiner.CombinerState.)) :pattern ((has_type (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.CombinerState./Responding _0! _1!)) TYPE%lib!spec.flat_combiner.CombinerState.)) )))
(assert (forall ((x lib!spec.flat_combiner.CombinerState.)) (! (= (lib!spec.flat_combiner.CombinerState./Responding/0 x) (lib!spec.flat_combiner.CombinerState./Responding/?0 x)) :pattern ((lib!spec.flat_combiner.CombinerState./Responding/0 x)) )))
(assert (forall ((x lib!spec.flat_combiner.CombinerState.)) (! (= (lib!spec.flat_combiner.CombinerState./Responding/1 x) (lib!spec.flat_combiner.CombinerState./Responding/?1 x)) :pattern ((lib!spec.flat_combiner.CombinerState./Responding/1 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.flat_combiner.CombinerState.) (<= 0 (lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. x)))) :pattern ((lib!spec.flat_combiner.CombinerState./Responding/1 (%Poly%lib!spec.flat_combiner.CombinerState. x)) (has_type x TYPE%lib!spec.flat_combiner.CombinerState.)) )))
(assert (forall ((x lib!exec.CachePadded.)) (! (= x (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. x))) :pattern ((Poly%lib!exec.CachePadded. x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.CachePadded. T&. T&)) (= x (Poly%lib!exec.CachePadded. (%Poly%lib!exec.CachePadded. x)))) :pattern ((has_type x (TYPE%lib!exec.CachePadded. T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%lib!exec.CachePadded. (lib!exec.CachePadded./CachePadded _0!)) (TYPE%lib!exec.CachePadded. T&. T&))) :pattern ((has_type (Poly%lib!exec.CachePadded. (lib!exec.CachePadded./CachePadded _0!)) (TYPE%lib!exec.CachePadded. T&. T&))) )))
(assert (forall ((x lib!exec.CachePadded.)) (! (= (lib!exec.CachePadded./CachePadded/0 x) (lib!exec.CachePadded./CachePadded/?0 x)) :pattern ((lib!exec.CachePadded./CachePadded/0 x)) )))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!exec.CachePadded. T&. T&)) (has_type (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. x)) T&)) :pattern ((lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. x)) (has_type x (TYPE%lib!exec.CachePadded. T&. T&))) )))
(define-fun is-lib!exec.CachePadded./CachePadded_ ((c lib!exec.CachePadded.)) Bool ((_ is lib!exec.CachePadded./CachePadded) c))
(assert (forall ((x lib!exec.CachePadded.)) (! (=> (is-lib!exec.CachePadded./CachePadded_ x) (height_lt (height (lib!exec.CachePadded./CachePadded/0 x)) (height (Poly%lib!exec.CachePadded. x)))) :pattern ((height (lib!exec.CachePadded./CachePadded/0 x))) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) )))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))) )))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. (Dcr Type Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!invariant.InvariantPredicate. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!Dispatch. (Dcr Type) Bool)
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC A&.) A&)) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) (TYPE%tuple%4. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&) (proj%%vstd!view.View./V A3&. A3&) (proj%vstd!view.View./V A3&. A3&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_len")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_len%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%8::view")
(declare-fun vstd!atomic.impl&%8.view.? (Poly) vstd!atomic.PermissionDataU64.)
(set-info :comment ";; Function-Decl vstd::atomic::impl&%9::id")
(declare-fun vstd!atomic.impl&%9.id.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::AtomicInvariantPredicate::atomic_inv")
(declare-fun vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv%default%.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%1::well_formed")
(declare-fun vstd!atomic_ghost.impl&%1.well_formed.? (Dcr Type Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::atomic_ghost::impl&%1::constant")
(declare-fun vstd!atomic_ghost.impl&%1.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::cell::impl&%2::view")
(declare-fun vstd!cell.impl&%2.view.? (Dcr Type Poly) vstd!cell.PointsToData.)
(set-info :comment ";; Function-Decl vstd::cell::impl&%3::id")
(declare-fun vstd!cell.impl&%3.id.? (Dcr Type Poly) vstd!cell.CellId.)
(set-info :comment ";; Function-Decl vstd::invariant::InvariantPredicate::inv")
(declare-fun vstd!invariant.InvariantPredicate.inv.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!invariant.InvariantPredicate.inv%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::invariant::impl&%0::constant")
(declare-fun vstd!invariant.impl&%0.constant.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::invariant::AtomicInvariant::namespace")
(declare-fun vstd!invariant.AtomicInvariant.namespace.? (Dcr Type Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::invariant::AtomicInvariant::inv")
(declare-fun vstd!invariant.AtomicInvariant.inv.? (Dcr Type Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UnboundedLog::local_updates::view")
(declare-fun lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? (Dcr Type Poly) lib!spec.unbounded_log.UnboundedLog.local_updates_token_data.)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::FlatCombiner::clients::view")
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly) lib!spec.flat_combiner.FlatCombiner.clients_token_data.)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::FlatCombiner::slots::view")
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly) lib!spec.flat_combiner.FlatCombiner.slots_token_data.)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::FlatCombiner::combiner::view")
(declare-fun lib!spec.flat_combiner.FlatCombiner.impl&%6.view.? (Poly) lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)
(set-info :comment ";; Function-Decl lib::exec::context::ThreadToken::wf2")
(declare-fun lib!exec.context.impl&%0.wf2.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::context::ThreadToken::wf")
(declare-fun lib!exec.context.impl&%0.wf.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::context::ThreadToken::thread_id_spec")
(declare-fun lib!exec.context.impl&%0.thread_id_spec.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::context::ThreadToken::replica_token")
(declare-fun lib!exec.context.impl&%0.replica_token.? (Dcr Type Poly) lib!exec.replica.ReplicaToken.)
(set-info :comment ";; Function-Decl lib::exec::context::ThreadToken::replica_id_spec")
(declare-fun lib!exec.context.impl&%0.replica_id_spec.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::context::Context::wf")
(declare-fun lib!exec.context.impl&%3.wf.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::context::ContextGhost::inv")
(declare-fun lib!exec.context.impl&%5.inv.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::context::FCClientRequestResponseGhost::enqueue_op_pre")
(declare-fun lib!exec.context.impl&%6.enqueue_op_pre.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::context::FCClientRequestResponseGhost::enqueue_op_post")
(declare-fun lib!exec.context.impl&%6.enqueue_op_post.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::context::FCClientRequestResponseGhost::dequeue_resp_pre")
(declare-fun lib!exec.context.impl&%6.dequeue_resp_pre.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::context::FCClientRequestResponseGhost::dequeue_resp_post")
(declare-fun lib!exec.context.impl&%6.dequeue_resp_post.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::replica::ReplicaToken::wf")
(declare-fun lib!exec.replica.impl&%0.wf.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::exec::replica::ReplicaToken::id_spec")
(declare-fun lib!exec.replica.impl&%0.id_spec.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::replica::ReplicaToken::view")
(declare-fun lib!exec.replica.impl&%0.view.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::replica::Replica::spec_id")
(declare-fun lib!exec.replica.impl&%4.spec_id.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::exec::replica::CombinerLockStateGhost::inv")
(declare-fun lib!exec.replica.impl&%6.inv.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Init")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Init_op")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Init_op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::is_Done")
(declare-fun lib!spec.unbounded_log.impl&%3.is_Done.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::unbounded_log::UpdateState::get_Done_ret")
(declare-fun lib!spec.unbounded_log.impl&%3.get_Done_ret.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::ClientState::is_Idle")
(declare-fun lib!spec.flat_combiner.impl&%0.is_Idle.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::ClientState::is_Waiting")
(declare-fun lib!spec.flat_combiner.impl&%0.is_Waiting.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::ClientState::get_Waiting_0")
(declare-fun lib!spec.flat_combiner.impl&%0.get_Waiting_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::SlotState::is_Empty")
(declare-fun lib!spec.flat_combiner.impl&%2.is_Empty.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::SlotState::is_Request")
(declare-fun lib!spec.flat_combiner.impl&%2.is_Request.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::SlotState::is_InProgress")
(declare-fun lib!spec.flat_combiner.impl&%2.is_InProgress.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::SlotState::is_Response")
(declare-fun lib!spec.flat_combiner.impl&%2.is_Response.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::SlotState::get_ReqId")
(declare-fun lib!spec.flat_combiner.impl&%4.get_ReqId.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::CombinerState::is_Collecting")
(declare-fun lib!spec.flat_combiner.impl&%5.is_Collecting.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::flat_combiner::CombinerState::get_Collecting_0")
(declare-fun lib!spec.flat_combiner.impl&%5.get_Collecting_0.? (Poly) vstd!seq.Seq<core!option.Option<nat.>.>.)
(set-info :comment ";; Function-Decl lib::constants::MAX_THREADS_PER_REPLICA")
(declare-fun lib!constants.MAX_THREADS_PER_REPLICA.? () Int)
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::option::OptionAdditionalFns::tracked_unwrap")
(declare-fun req%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (= (req%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self!) (=> %%global_location_label%%0 (%B (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))) :pattern ((req%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self!)) )))
(declare-fun ens%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (t! Poly)) (! (= (ens%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self! t!) (and (has_type t! T&) (= t! (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))) :pattern ((ens%vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap. Self%&. Self%& T&. T& self! t!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_len")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!) NAT)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (%I (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? Self%&. Self%& T&. T& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!) i!)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Init")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Init.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Init_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Init) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Init.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Init.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Init.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UnboundedLog::local_updates::view")
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates. DT&. DT&)) (has_type (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& self!)) (TYPE%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. DT&. DT&))) :pattern ((lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Init_op")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Init_op.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Init_op.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::is_Done")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.is_Done.))
(define-fun is-lib!spec.unbounded_log.UpdateState./Done_ ((c lib!spec.unbounded_log.UpdateState.)) Bool ((_ is lib!spec.unbounded_log.UpdateState./Done) c))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.is_Done.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.is_Done.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::unbounded_log::UpdateState::get_Done_ret")
(assert (fuel_bool_default fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.))
(assert (=> (fuel_bool fuel%lib!spec.unbounded_log.impl&%3.get_Done_ret.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. self!))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.unbounded_log.UpdateState. DT&. DT&)) (has_type (lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.unbounded_log.impl&%3.get_Done_ret.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!)) ))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%4 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%5 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. option!))))))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)) )))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::axiom_spec_len")
(declare-fun ens%vstd!std_specs.vec.axiom_spec_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (= (ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((ens%vstd!std_specs.vec.axiom_spec_len. A&. A& v!)) )))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ TYPE%alloc!alloc.Global.) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ TYPE%alloc!alloc.Global. v!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%6 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%7 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::atomic::impl&%8::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%vstd!atomic.PermissionU64.) (has_type (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? self!)) TYPE%vstd!atomic.PermissionDataU64.)) :pattern ((vstd!atomic.impl&%8.view.? self!)) )))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%9::load")
(declare-fun req%vstd!atomic.impl&%9.load. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64.) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (perm! vstd!atomic.PermissionU64.)) (! (= (req%vstd!atomic.impl&%9.load. self! perm!) (=> %%global_location_label%%8 (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!)))))))) :pattern ((req%vstd!atomic.impl&%9.load. self! perm!)) )))
(declare-fun ens%vstd!atomic.impl&%9.load. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. Int) Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (perm! vstd!atomic.PermissionU64.) (ret! Int)) (! (= (ens%vstd!atomic.impl&%9.load. self! perm! ret!) (and (uInv 64 ret!) (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!))))) ret!))) :pattern ((ens%vstd!atomic.impl&%9.load. self! perm! ret!)) )))
(set-info :comment ";; Function-Specs vstd::atomic::impl&%9::store")
(declare-fun req%vstd!atomic.impl&%9.store. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. Int) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (pre%perm! vstd!atomic.PermissionU64.) (v! Int)) (! (= (req%vstd!atomic.impl&%9.store. self! pre%perm! v!) (=> %%global_location_label%%9 (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. pre%perm!)))))))) :pattern ((req%vstd!atomic.impl&%9.store. self! pre%perm! v!)) )))
(declare-fun ens%vstd!atomic.impl&%9.store. (vstd!atomic.PAtomicU64. vstd!atomic.PermissionU64. vstd!atomic.PermissionU64. Int) Bool)
(assert (forall ((self! vstd!atomic.PAtomicU64.) (pre%perm! vstd!atomic.PermissionU64.) (perm! vstd!atomic.PermissionU64.) (v! Int)) (! (= (ens%vstd!atomic.impl&%9.store. self! pre%perm! perm! v!) (and (= (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!))))) v!) (= (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. self!)) (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm!)))))))) :pattern ((ens%vstd!atomic.impl&%9.store. self! pre%perm! perm! v!)) )))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::AtomicInvariantPredicate::atomic_inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (G&. Dcr) (G& Type) (k! Poly) (v! Poly) (g! Poly)) (! (=> (and (has_type k! K&) (has_type v! V&) (has_type g! G&)) (has_type (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Self%&. Self%& K&. K& V&. V& G&. G& k! v! g!) BOOL)) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Self%&. Self%& K&. K& V&. V& G&. G& k! v! g!)) )))
(set-info :comment ";; Function-Axioms vstd::cell::impl&%2::view")
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!cell.PointsTo. V&. V&)) (has_type (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& self!)) (TYPE%vstd!cell.PointsToData. V&. V&))) :pattern ((vstd!cell.impl&%2.view.? V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::empty")
(declare-fun ens%vstd!cell.impl&%3.empty. (Dcr Type tuple%2.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (pt! tuple%2.)) (! (= (ens%vstd!cell.impl&%3.empty. V&. V& pt!) (and (has_type (Poly%tuple%2. pt!) (TYPE%tuple%2. $ (TYPE%vstd!cell.PCell. V&. V&) (TRACKED $) (TYPE%vstd!cell.PointsTo. V&. V&))) (= (vstd!cell.impl&%2.view.? V&. V& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. pt!)))) (vstd!cell.PointsToData./PointsToData (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? V&. V& (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. pt!)))))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((ens%vstd!cell.impl&%3.empty. V&. V& pt!)) )))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::put")
(declare-fun req%vstd!cell.impl&%3.put. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly) (v! Poly)) (! (= (req%vstd!cell.impl&%3.put. V&. V& self! pre%perm! v!) (=> %%global_location_label%%10 (= (vstd!cell.impl&%2.view.? V&. V& pre%perm!) (vstd!cell.PointsToData./PointsToData (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? V&. V& self!))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))) :pattern ((req%vstd!cell.impl&%3.put. V&. V& self! pre%perm! v!)) )))
(declare-fun ens%vstd!cell.impl&%3.put. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!cell.impl&%3.put. V&. V& self! pre%perm! perm! v!) (and (has_type perm! (TYPE%vstd!cell.PointsTo. V&. V&)) (= (vstd!cell.impl&%2.view.? V&. V& perm!) (vstd!cell.PointsToData./PointsToData (%Poly%vstd!cell.CellId. (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? V&. V& self!))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some v!))))))) :pattern ((ens%vstd!cell.impl&%3.put. V&. V& self! pre%perm! perm! v!)) )))
(set-info :comment ";; Function-Specs vstd::cell::impl&%3::take")
(declare-fun req%vstd!cell.impl&%3.take. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly)) (! (= (req%vstd!cell.impl&%3.take. V&. V& self! pre%perm!) (and (=> %%global_location_label%%11 (= (vstd!cell.impl&%3.id.? V&. V& self!) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))) (=> %%global_location_label%%12 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))))))))) :pattern ((req%vstd!cell.impl&%3.take. V&. V& self! pre%perm!)) )))
(declare-fun ens%vstd!cell.impl&%3.take. (Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (pre%perm! Poly) (perm! Poly) (v! Poly)) (! (= (ens%vstd!cell.impl&%3.take. V&. V& self! pre%perm! perm! v!) (and (has_type v! V&) (has_type perm! (TYPE%vstd!cell.PointsTo. V&. V&)) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!))))) (= (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& perm!)))) core!option.Option./None) (= v! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? V&. V& pre%perm!)))))))))) :pattern ((ens%vstd!cell.impl&%3.take. V&. V& self! pre%perm! perm! v!)) )))
(set-info :comment ";; Function-Axioms vstd::invariant::InvariantPredicate::inv")
(assert (forall ((Self%&. Dcr) (Self%& Type) (K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (k! Poly) (v! Poly)) (! (=> (and (has_type k! K&) (has_type v! V&)) (has_type (vstd!invariant.InvariantPredicate.inv.? Self%&. Self%& K&. K& V&. V& k! v!) BOOL)) :pattern ((vstd!invariant.InvariantPredicate.inv.? Self%&. Self%& K&. K& V&. V& k! v!)) )))
(set-info :comment ";; Function-Axioms vstd::invariant::impl&%0::constant")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!invariant.AtomicInvariant. K&. K& V&. V& Pred&. Pred&)) (has_type (vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!) K&)) :pattern ((vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!)) )))
(set-info :comment ";; Function-Axioms vstd::invariant::AtomicInvariant::inv")
(assert (fuel_bool_default fuel%vstd!invariant.AtomicInvariant.inv.))
(assert (=> (fuel_bool fuel%vstd!invariant.AtomicInvariant.inv.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (Pred&. Dcr) (Pred& Type) (self! Poly) (v! Poly)) (! (= (vstd!invariant.AtomicInvariant.inv.? K&. K& V&. V& Pred&. Pred& self! v!) (%B (vstd!invariant.InvariantPredicate.inv.? Pred&. Pred& K&. K& V&. V& (vstd!invariant.impl&%0.constant.? K&. K& V&. V& Pred&. Pred& self!) v!))) :pattern ((vstd!invariant.AtomicInvariant.inv.? K&. K& V&. V& Pred&. Pred& self! v!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%13 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%14 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%15 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%17 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%18 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%19 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%20 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%21 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%22 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%23 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%26 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::CombinerState::is_Collecting")
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%5.is_Collecting.))
(define-fun is-lib!spec.flat_combiner.CombinerState./Collecting_ ((c lib!spec.flat_combiner.CombinerState.)) Bool ((_ is lib!spec.flat_combiner.CombinerState./Collecting) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%5.is_Collecting.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%5.is_Collecting.? self!) (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. self!))) :pattern ((lib!spec.flat_combiner.impl&%5.is_Collecting.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::CombinerState::get_Collecting_0")
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%5.get_Collecting_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%5.get_Collecting_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%5.get_Collecting_0.? self!) (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. self!))) :pattern ((lib!spec.flat_combiner.impl&%5.get_Collecting_0.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::FlatCombiner::clients::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.clients.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.clients_token_data.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::FlatCombiner::slots::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.slots.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.slots_token_data.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::FlatCombiner::combiner::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.FlatCombiner.combiner.) (has_type (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%6.view.? self!)) TYPE%lib!spec.flat_combiner.FlatCombiner.combiner_token_data.)) :pattern ((lib!spec.flat_combiner.FlatCombiner.impl&%6.view.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::ClientState::is_Idle")
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%0.is_Idle.))
(define-fun is-lib!spec.flat_combiner.ClientState./Idle_ ((c lib!spec.flat_combiner.ClientState.)) Bool ((_ is lib!spec.flat_combiner.ClientState./Idle) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%0.is_Idle.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%0.is_Idle.? self!) (is-lib!spec.flat_combiner.ClientState./Idle_ (%Poly%lib!spec.flat_combiner.ClientState. self!))) :pattern ((lib!spec.flat_combiner.impl&%0.is_Idle.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::SlotState::is_Empty")
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%2.is_Empty.))
(define-fun is-lib!spec.flat_combiner.SlotState./Empty_ ((c lib!spec.flat_combiner.SlotState.)) Bool ((_ is lib!spec.flat_combiner.SlotState./Empty) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%2.is_Empty.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%2.is_Empty.? self!) (is-lib!spec.flat_combiner.SlotState./Empty_ (%Poly%lib!spec.flat_combiner.SlotState. self!))) :pattern ((lib!spec.flat_combiner.impl&%2.is_Empty.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::ClientState::is_Waiting")
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%0.is_Waiting.))
(define-fun is-lib!spec.flat_combiner.ClientState./Waiting_ ((c lib!spec.flat_combiner.ClientState.)) Bool ((_ is lib!spec.flat_combiner.ClientState./Waiting) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%0.is_Waiting.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%0.is_Waiting.? self!) (is-lib!spec.flat_combiner.ClientState./Waiting_ (%Poly%lib!spec.flat_combiner.ClientState. self!))) :pattern ((lib!spec.flat_combiner.impl&%0.is_Waiting.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::ClientState::get_Waiting_0")
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%0.get_Waiting_0.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%0.get_Waiting_0.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%0.get_Waiting_0.? self!) (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. self!))) :pattern ((lib!spec.flat_combiner.impl&%0.get_Waiting_0.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.ClientState.) (<= 0 (lib!spec.flat_combiner.impl&%0.get_Waiting_0.? self!))) :pattern ((lib!spec.flat_combiner.impl&%0.get_Waiting_0.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::SlotState::get_ReqId")
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%4.get_ReqId.))
(define-fun is-lib!spec.flat_combiner.SlotState./Request_ ((c lib!spec.flat_combiner.SlotState.)) Bool ((_ is lib!spec.flat_combiner.SlotState./Request) c))
(define-fun is-lib!spec.flat_combiner.SlotState./InProgress_ ((c lib!spec.flat_combiner.SlotState.)) Bool ((_ is lib!spec.flat_combiner.SlotState./InProgress) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%4.get_ReqId.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%4.get_ReqId.? self!) (ite (is-lib!spec.flat_combiner.SlotState./Empty_ (%Poly%lib!spec.flat_combiner.SlotState. self!)) (%I (vstd!pervasive.arbitrary.? $ NAT)) (ite (is-lib!spec.flat_combiner.SlotState./Request_ (%Poly%lib!spec.flat_combiner.SlotState. self!)) (let ((reqid$ (lib!spec.flat_combiner.SlotState./Request/0 (%Poly%lib!spec.flat_combiner.SlotState. self!)))) reqid$) (ite (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. self!)) (let ((reqid$ (lib!spec.flat_combiner.SlotState./InProgress/0 (%Poly%lib!spec.flat_combiner.SlotState. self!)))) reqid$) (let ((reqid$ (lib!spec.flat_combiner.SlotState./Response/0 (%Poly%lib!spec.flat_combiner.SlotState. self!)))) reqid$))))) :pattern ((lib!spec.flat_combiner.impl&%4.get_ReqId.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!spec.flat_combiner.SlotState.) (<= 0 (lib!spec.flat_combiner.impl&%4.get_ReqId.? self!))) :pattern ((lib!spec.flat_combiner.impl&%4.get_ReqId.? self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::SlotState::is_InProgress")
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%2.is_InProgress.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%2.is_InProgress.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%2.is_InProgress.? self!) (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. self!))) :pattern ((lib!spec.flat_combiner.impl&%2.is_InProgress.? self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::impl&%2::spec_len")
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%2.spec_len.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%2.spec_len.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self!) (I (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!)))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_len.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%0::inv")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%0.inv.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%0.inv.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k_loc! Poly) (perm_g! Poly)) (! (= (vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) k_loc! perm_g!) (B (let ((k$ (tuple%2./tuple%2/0 (%Poly%tuple%2. k_loc!)))) (let ((loc$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. k_loc!))))) (let ((perm$ (%Poly%vstd!atomic.PermissionU64. (tuple%2./tuple%2/0 (%Poly%tuple%2. perm_g!))))) (let ((g$ (tuple%2./tuple%2/1 (%Poly%tuple%2. perm_g!)))) (and (= (vstd!atomic.PermissionDataU64./PermissionDataU64/patomic (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm$))))) loc$) (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ (UINT 64) G&. G& k$ (I (vstd!atomic.PermissionDataU64./PermissionDataU64/value (%Poly%vstd!atomic.PermissionDataU64. (Poly%vstd!atomic.PermissionDataU64. (vstd!atomic.impl&%8.view.? (Poly%vstd!atomic.PermissionU64. perm$)))))) g$))))))))) :pattern ((vstd!invariant.InvariantPredicate.inv.? $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) k_loc! perm_g!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type)) (! (=> (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. Pred&. Pred& K&. K& $ (UINT 64) G&. G&) (tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))) :pattern ((tr_bound%vstd!invariant.InvariantPredicate. $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&))) )))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%1::well_formed")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.well_formed.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.well_formed.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!) (= (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) (vstd!atomic.impl&%9.id.? (Poly%vstd!atomic.PAtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::atomic_ghost::impl&%1::constant")
(assert (fuel_bool_default fuel%vstd!atomic_ghost.impl&%1.constant.))
(assert (=> (fuel_bool fuel%vstd!atomic_ghost.impl&%1.constant.) (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (= (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (vstd!invariant.impl&%0.constant.? $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&) (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. self!)))))) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!) K&)) :pattern ((vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& self!)) )))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (BOX A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (BOX A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (RC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (RC A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!view.View.view.? (ARC A&.) A& self!) (vstd!view.View.view.? A&. A& self!)) :pattern ((vstd!view.View.view.? (ARC A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%8::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%8.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%8.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%16::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%16.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%16.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%18::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%22::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%22.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%22.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%38::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%38.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%38.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type) (self! Poly)) (! (= (vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!) (Poly%tuple%4. (tuple%4./tuple%4 (vstd!view.View.view.? A0&. A0& (tuple%4./tuple%4/0 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A1&. A1& (tuple%4./tuple%4/1 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A2&. A2& (tuple%4./tuple%4/2 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A3&. A3& (tuple%4./tuple%4/3 (%Poly%tuple%4. self!)))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::replica::ReplicaToken::wf")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.wf.) (forall ((self! Poly) (max_replicas! Poly)) (! (= (lib!exec.replica.impl&%0.wf.? self! max_replicas!) (< (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!)) (%I max_replicas!))) :pattern ((lib!exec.replica.impl&%0.wf.? self! max_replicas!)) ))))
(set-info :comment ";; Function-Axioms lib::constants::MAX_THREADS_PER_REPLICA")
(assert (fuel_bool_default fuel%lib!constants.MAX_THREADS_PER_REPLICA.))
(assert (=> (fuel_bool fuel%lib!constants.MAX_THREADS_PER_REPLICA.) (= lib!constants.MAX_THREADS_PER_REPLICA.? 128)))
(assert (uInv SZ lib!constants.MAX_THREADS_PER_REPLICA.?))
(set-info :comment ";; Function-Axioms lib::exec::context::ThreadToken::wf2")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.wf2.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.wf2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (num_replicas! Poly)) (! (= (lib!exec.context.impl&%0.wf2.? DT&. DT& self! num_replicas!) (and (and (and (and (lib!exec.replica.impl&%0.wf.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. self!))) num_replicas!) (is-lib!spec.flat_combiner.ClientState./Idle_ (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.ThreadToken./ThreadToken/fc_client (%Poly%lib!exec.context.ThreadToken. self!))))))))))) (< (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. self!)) lib!constants.MAX_THREADS_PER_REPLICA.?)) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. self!)))))))))))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.ThreadToken./ThreadToken/fc_client (%Poly%lib!exec.context.ThreadToken. self!))))))) (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. self!))))) :pattern ((lib!exec.context.impl&%0.wf2.? DT&. DT& self! num_replicas!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::replica::ReplicaToken::id_spec")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.id_spec.) (forall ((self! Poly)) (! (= (lib!exec.replica.impl&%0.id_spec.? self!) (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!))) :pattern ((lib!exec.replica.impl&%0.id_spec.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!exec.replica.ReplicaToken.) (<= 0 (lib!exec.replica.impl&%0.id_spec.? self!))) :pattern ((lib!exec.replica.impl&%0.id_spec.? self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::replica::Replica::spec_id")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%4.spec_id.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%4.spec_id.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!) (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.replica.Replica./Replica/replica_token (%Poly%lib!exec.replica.Replica. self!))))) :pattern ((lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.replica.Replica. DT&. DT&)) (<= 0 (lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!))) :pattern ((lib!exec.replica.impl&%4.spec_id.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::replica::ReplicaToken::view")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%0.view.) (forall ((self! Poly)) (! (= (lib!exec.replica.impl&%0.view.? self!) (lib!exec.replica.ReplicaToken./ReplicaToken/rid (%Poly%lib!exec.replica.ReplicaToken. self!))) :pattern ((lib!exec.replica.impl&%0.view.? self!)) ))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!exec.replica.ReplicaToken.) (<= 0 (lib!exec.replica.impl&%0.view.? self!))) :pattern ((lib!exec.replica.impl&%0.view.? self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::context::ThreadToken::thread_id_spec")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.thread_id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.thread_id_spec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!) (lib!exec.context.ThreadToken./ThreadToken/tid (%Poly%lib!exec.context.ThreadToken. self!))) :pattern ((lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (<= 0 (lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!))) :pattern ((lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::context::ThreadToken::wf")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.wf.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (replica! Poly)) (! (= (lib!exec.context.impl&%0.wf.? DT&. DT& self! replica!) (and (and (and (lib!exec.context.impl&%0.wf2.? DT&. DT& self! (I (nClip (Add (lib!exec.replica.impl&%4.spec_id.? DT&. DT& replica!) 1)))) (= (lib!exec.replica.impl&%0.view.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. self!)))) (lib!exec.replica.impl&%4.spec_id.? DT&. DT& replica!))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.ThreadToken./ThreadToken/fc_client (%Poly%lib!exec.context.ThreadToken. self!))))))) (lib!exec.replica.Replica./Replica/flat_combiner_instance (%Poly%lib!exec.replica.Replica. replica!)))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.context.ThreadToken./ThreadToken/batch_perm (%Poly%lib!exec.context.ThreadToken. self!)))))) (vstd!cell.impl&%3.id.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. (vstd!seq.Seq.index.? $ (TYPE%lib!exec.context.Context. DT&. DT&) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (TYPE%lib!exec.context.Context. DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.Replica./Replica/contexts (%Poly%lib!exec.replica.Replica. replica!))) (I (lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& self!)))))))))))) :pattern ((lib!exec.context.impl&%0.wf.? DT&. DT& self! replica!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::context::ThreadToken::replica_token")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.replica_token.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.replica_token.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.context.impl&%0.replica_token.? DT&. DT& self!) (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. self!))) :pattern ((lib!exec.context.impl&%0.replica_token.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (has_type (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.impl&%0.replica_token.? DT&. DT& self!)) TYPE%lib!exec.replica.ReplicaToken.)) :pattern ((lib!exec.context.impl&%0.replica_token.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::exec::context::ThreadToken::replica_id_spec")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%0.replica_id_spec.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%0.replica_id_spec.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!) (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. (lib!exec.context.ThreadToken./ThreadToken/rid (%Poly%lib!exec.context.ThreadToken. self!))))) :pattern ((lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!exec.context.ThreadToken. DT&. DT&)) (<= 0 (lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!))) :pattern ((lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::SlotState::is_Response")
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%2.is_Response.))
(define-fun is-lib!spec.flat_combiner.SlotState./Response_ ((c lib!spec.flat_combiner.SlotState.)) Bool ((_ is lib!spec.flat_combiner.SlotState./Response) c))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%2.is_Response.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%2.is_Response.? self!) (is-lib!spec.flat_combiner.SlotState./Response_ (%Poly%lib!spec.flat_combiner.SlotState. self!))) :pattern ((lib!spec.flat_combiner.impl&%2.is_Response.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::flat_combiner::SlotState::is_Request")
(assert (fuel_bool_default fuel%lib!spec.flat_combiner.impl&%2.is_Request.))
(assert (=> (fuel_bool fuel%lib!spec.flat_combiner.impl&%2.is_Request.) (forall ((self! Poly)) (! (= (lib!spec.flat_combiner.impl&%2.is_Request.? self!) (is-lib!spec.flat_combiner.SlotState./Request_ (%Poly%lib!spec.flat_combiner.SlotState. self!))) :pattern ((lib!spec.flat_combiner.impl&%2.is_Request.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::context::ContextGhost::inv")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%5.inv.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%5.inv.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (v! Poly) (tid! Poly) (cell! Poly) (fc! Poly) (inst! Poly)) (! (= (lib!exec.context.impl&%5.inv.? DT&. DT& self! v! tid! cell! fc! inst!) (and (and (and (and (and (and (and (and (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!))))))) (%I tid!)) (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!))))))) (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. fc!))) (or (= (%I v!) 0) (= (%I v!) 1))) (=> (= (%I v!) 0) (or (is-lib!spec.flat_combiner.SlotState./Empty_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!)))))))))) (is-lib!spec.flat_combiner.SlotState./Response_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!))))))))))))) (=> (= (%I v!) 1) (or (is-lib!spec.flat_combiner.SlotState./Request_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!)))))))))) (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!))))))))))))) (=> (is-lib!spec.flat_combiner.SlotState./Empty_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!)))))))))) (and (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!))))))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. self!)))))))))) (=> (is-lib!spec.flat_combiner.SlotState./Request_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!)))))))))) (and (and (and (and (and (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!))))))) (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!))))))))))))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!))))))))) (lib!spec.flat_combiner.impl&%4.get_ReqId.? (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!))))))))))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!))))))))) inst!)) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. self!)))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. self!))))))))))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. self!))))))))) (vstd!cell.impl&%3.id.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) cell!))) (= (lib!exec.context.PendingOperation./PendingOperation/op (%Poly%lib!exec.context.PendingOperation. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. self!)))))))))))))) (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!)))))))))))))))) (=> (is-lib!spec.flat_combiner.SlotState./InProgress_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!)))))))))) (and (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!))))))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. self!)))))))))) (=> (is-lib!spec.flat_combiner.SlotState./Response_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!)))))))))) (and (and (and (and (and (and (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!))))))) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!))))))))))))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!))))))))) (lib!spec.flat_combiner.impl&%4.get_ReqId.? (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. (lib!exec.context.ContextGhost./ContextGhost/slots (%Poly%lib!exec.context.ContextGhost. self!))))))))))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!))))))))) inst!)) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. self!)))))))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. self!))))))))))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. self!))))))))) (vstd!cell.impl&%3.id.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) cell!))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.PendingOperation./PendingOperation/resp (%Poly%lib!exec.context.PendingOperation. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. self!)))))))))))))))))))) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.PendingOperation./PendingOperation/resp (%Poly%lib!exec.context.PendingOperation. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/batch_perms (%Poly%lib!exec.context.ContextGhost. self!))))))))))))))))) (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.ContextGhost./ContextGhost/update (%Poly%lib!exec.context.ContextGhost. self!))))))))))))))))) :pattern ((lib!exec.context.impl&%5.inv.? DT&. DT& self! v! tid! cell! fc! inst!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::context::InvariantPredicate_auto_Context_atomic::atomic_inv")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%2.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%2.atomic_inv.) (forall ((DT&. Dcr) (DT& Type) (declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (UINT 64) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((flat_combiner_instance$ (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (tuple%4./tuple%4/0 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!))))) (let ((unbounded_log_instance$ (tuple%4./tuple%4/1 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!)))) (let ((batch$ (%Poly%lib!exec.CachePadded. (tuple%4./tuple%4/2 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!))))) (let ((thread_id_g$ (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!))))) (let ((v$ (%I declare_struct_with_invariants_tmp_v!))) (let ((g$ (%Poly%lib!exec.context.ContextGhost. declare_struct_with_invariants_tmp_g!))) (lib!exec.context.impl&%5.inv.? DT&. DT& (Poly%lib!exec.context.ContextGhost. g$) (I v$) (I thread_id_g$) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. batch$))) (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. flat_combiner_instance$) unbounded_log_instance$))))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (UINT 64) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (UINT 64) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (UINT 64) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&))) )))
(set-info :comment ";; Function-Axioms lib::exec::context::Context::wf")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%3.wf.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%3.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (thread_idx! Poly)) (! (= (lib!exec.context.impl&%3.wf.? DT&. DT& self! thread_idx!) (and (and (and (and (and (= (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. self!)) (%I thread_idx!)) (vstd!atomic_ghost.impl&%1.well_formed.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))) (= (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (tuple%4./tuple%4/0 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))))) (lib!exec.context.Context./Context/flat_combiner_instance (%Poly%lib!exec.context.Context. self!)))) (= (tuple%4./tuple%4/1 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!)))))))) (lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. self!)))) (= (%Poly%lib!exec.CachePadded. (tuple%4./tuple%4/2 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))))) (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. self!)))) (= (%I (tuple%4./tuple%4/3 (%Poly%tuple%4. (vstd!atomic_ghost.impl&%1.constant.? $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. (TRACKED $) (TYPE%lib!spec.unbounded_log.UnboundedLog.Instance. DT&. DT&) $ (TYPE%lib!exec.CachePadded. $ (TYPE%vstd!cell.PCell. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) (GHOST $) NAT) $ (TYPE%lib!exec.context.ContextGhost. DT&. DT&) $ TYPE%lib!exec.context.InvariantPredicate_auto_Context_atomic. (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/atomic (%Poly%lib!exec.context.Context. self!))))))))) (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. self!))))) :pattern ((lib!exec.context.impl&%3.wf.? DT&. DT& self! thread_idx!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::context::FCClientRequestResponseGhost::enqueue_op_pre")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%6.enqueue_op_pre.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%6.enqueue_op_pre.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (tid! Poly) (op! Poly) (batch_cell! Poly) (fc_inst! Poly) (inst! Poly)) (! (= (lib!exec.context.impl&%6.enqueue_op_pre.? DT&. DT& self! tid! op! batch_cell! fc_inst! inst!) (and (and (and (and (and (and (and (and (and (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))))) inst!)) (is-lib!spec.unbounded_log.UpdateState./Init_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))))))))) (= (lib!spec.unbounded_log.UpdateState./Init/op (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))))))) op!)) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))))) (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))) (= (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)) (%Poly%vstd!cell.CellId. batch_cell!))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))))))))))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))) (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. fc_inst!))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))) (%I tid!))) (is-lib!spec.flat_combiner.ClientState./Idle_ (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))))))) :pattern ((lib!exec.context.impl&%6.enqueue_op_pre.? DT&. DT& self! tid! op! batch_cell! fc_inst! inst!)) ))))
(set-info :comment ";; Function-Specs lib::exec::context::FCClientRequestResponseGhost::enqueue_op_post")
(declare-fun req%lib!exec.context.impl&%6.enqueue_op_post. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (pre! Poly)) (! (= (req%lib!exec.context.impl&%6.enqueue_op_post. DT&. DT& self! pre!) (=> %%global_location_label%%27 (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. pre!))))))))) :pattern ((req%lib!exec.context.impl&%6.enqueue_op_post. DT&. DT& self! pre!)) )))
(set-info :comment ";; Function-Axioms lib::exec::context::FCClientRequestResponseGhost::enqueue_op_post")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%6.enqueue_op_post.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%6.enqueue_op_post.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (pre! Poly)) (! (= (lib!exec.context.impl&%6.enqueue_op_post.? DT&. DT& self! pre!) (and (and (and (and (and (and (is-lib!spec.flat_combiner.ClientState./Waiting_ (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))))) (= (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))))) (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. pre!))))))))))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. pre!))))))))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. pre!))))))))) (= (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)) (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id (%Poly%lib!exec.context.FCClientRequestResponseGhost. pre!)))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))))) :pattern ((lib!exec.context.impl&%6.enqueue_op_post.? DT&. DT& self! pre!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::context::FCClientRequestResponseGhost::dequeue_resp_pre")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%6.dequeue_resp_pre.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%6.dequeue_resp_pre.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (batch_cell! Poly) (tid! Poly) (fc_inst! Poly)) (! (= (lib!exec.context.impl&%6.dequeue_resp_pre.? DT&. DT& self! batch_cell! tid! fc_inst!) (and (and (and (and (and (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))) (%I tid!)) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))) (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. fc_inst!))) (is-lib!spec.flat_combiner.ClientState./Waiting_ (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))))))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))) (= (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)) (%Poly%vstd!cell.CellId. batch_cell!)))) :pattern ((lib!exec.context.impl&%6.dequeue_resp_pre.? DT&. DT& self! batch_cell! tid! fc_inst!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::context::FCClientRequestResponseGhost::dequeue_resp_post")
(assert (fuel_bool_default fuel%lib!exec.context.impl&%6.dequeue_resp_post.))
(assert (=> (fuel_bool fuel%lib!exec.context.impl&%6.dequeue_resp_post.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (pre! Poly) (ret! Poly) (inst! Poly)) (! (= (lib!exec.context.impl&%6.dequeue_resp_post.? DT&. DT& self! pre! ret! inst!) (and (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. ret!)))) (and (and (and (and (and (and (and (and (and (and (and (= (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)) (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id (%Poly%lib!exec.context.FCClientRequestResponseGhost. pre!))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))))))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/batch_perms (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))))) (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/instance (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))))) inst!)) (is-lib!spec.unbounded_log.UpdateState./Done_ (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))))))))) (= (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/key (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))))) (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. pre!)))))))))))) (= (lib!spec.unbounded_log.UpdateState./Done/ret (%Poly%lib!spec.unbounded_log.UpdateState. (Poly%lib!spec.unbounded_log.UpdateState. (lib!spec.unbounded_log.UnboundedLog.local_updates_token_data./local_updates_token_data/value (%Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (Poly%lib!spec.unbounded_log.UnboundedLog.local_updates_token_data. (lib!spec.unbounded_log.UnboundedLog.impl&%10.view.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/local_updates (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))))))) (core!option.Option./Some/0 (%Poly%core!option.Option. ret!)))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. pre!))))))))) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!))))))) (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. pre!))))))))) (is-lib!spec.flat_combiner.ClientState./Idle_ (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/fc_clients (%Poly%lib!exec.context.FCClientRequestResponseGhost. self!)))))))))))) (=> (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. ret!)))) (= self! pre!)))) :pattern ((lib!exec.context.impl&%6.dequeue_resp_post.? DT&. DT& self! pre! ret! inst!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::replica::CombinerLockStateGhost::inv")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%6.inv.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%6.inv.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (combiner_instance! Poly) (responses_id! Poly) (op_buffer_id! Poly) (thread_ops! Poly)) (! (= (lib!exec.replica.impl&%6.inv.? DT&. DT& self! combiner_instance! responses_id! op_buffer_id! thread_ops!) (and (and (and (and (and (and (and (and (and (and (and (is-lib!spec.flat_combiner.CombinerState./Collecting_ (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%6.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner (%Poly%lib!exec.replica.CombinerLockStateGhost. self!)))))))))) (= (vstd!seq.Seq.len.? $ (TYPE%core!option.Option. $ NAT) (Poly%vstd!seq.Seq<core!option.Option<nat.>.>. (lib!spec.flat_combiner.CombinerState./Collecting/0 (%Poly%lib!spec.flat_combiner.CombinerState. (Poly%lib!spec.flat_combiner.CombinerState. (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%6.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner (%Poly%lib!exec.replica.CombinerLockStateGhost. self!)))))))))))) 0)) (= (lib!spec.flat_combiner.FlatCombiner.combiner_token_data./combiner_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.combiner_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%6.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.combiner. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/flat_combiner (%Poly%lib!exec.replica.CombinerLockStateGhost. self!))))))) (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. combiner_instance!))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. self!)))))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. self!)))))) (%Poly%vstd!cell.CellId. op_buffer_id!))) (= (vstd!std_specs.vec.spec_vec_len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. self!)))))))))) 0)) (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (%Poly%lib!exec.replica.CombinerLockStateGhost. self!)))))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (%Poly%lib!exec.replica.CombinerLockStateGhost. self!)))))) (%Poly%vstd!cell.CellId. responses_id!))) (= (vstd!std_specs.vec.spec_vec_len.? (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.) (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/responses_token (%Poly%lib!exec.replica.CombinerLockStateGhost. self!)))))))))) 0)) (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.) (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. self!))))))))))) (= (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.) (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. self!))))))) (%Poly%vstd!cell.CellId. thread_ops!))) (= (vstd!std_specs.vec.spec_vec_len.? $ (UINT SZ) $ TYPE%alloc!alloc.Global. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.) (Poly%vstd!cell.PointsTo<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (lib!exec.replica.CombinerLockStateGhost./CombinerLockStateGhost/collected_operations_per_thread_perm (%Poly%lib!exec.replica.CombinerLockStateGhost. self!))))))))))) 0))) :pattern ((lib!exec.replica.impl&%6.inv.? DT&. DT& self! combiner_instance! responses_id! op_buffer_id! thread_ops!)) ))))
(set-info :comment ";; Function-Axioms lib::exec::replica::InvariantPredicate_auto_Replica_combiner::atomic_inv")
(assert (fuel_bool_default fuel%lib!exec.replica.impl&%2.atomic_inv.))
(assert (=> (fuel_bool fuel%lib!exec.replica.impl&%2.atomic_inv.) (forall ((DT&. Dcr) (DT& Type) (declare_struct_with_invariants_tmp_k! Poly) (declare_struct_with_invariants_tmp_v! Poly) (declare_struct_with_invariants_tmp_g! Poly)) (! (= (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (UINT 64) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!) (B (let ((flat_combiner_instance$ (%Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (tuple%4./tuple%4/0 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!))))) (let ((responses$ (tuple%4./tuple%4/1 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!)))) (let ((collected_operations$ (tuple%4./tuple%4/2 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!)))) (let ((collected_operations_per_thread$ (%Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. (tuple%4./tuple%4/3 (%Poly%tuple%4. declare_struct_with_invariants_tmp_k!))))) (let ((v$ (%I declare_struct_with_invariants_tmp_v!))) (let ((g$ (%Poly%core!option.Option. declare_struct_with_invariants_tmp_g!))) (and (= (= v$ 0) (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. g$)))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. g$))) (lib!exec.replica.impl&%6.inv.? DT&. DT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. g$))) (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. flat_combiner_instance$) (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.) responses$)) (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.) collected_operations$)) (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.) (Poly%vstd!cell.PCell<alloc!vec.Vec<usize./alloc!alloc.Global.>.>. collected_operations_per_thread$)))))))))))))) :pattern ((vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (UINT 64) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)) declare_struct_with_invariants_tmp_k! declare_struct_with_invariants_tmp_v! declare_struct_with_invariants_tmp_g!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((DT&. Dcr) (DT& Type)) (! (=> (tr_bound%lib!Dispatch. DT&. DT&) (tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (UINT 64) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)))) :pattern ((tr_bound%vstd!atomic_ghost.AtomicInvariantPredicate. $ TYPE%lib!exec.replica.InvariantPredicate_auto_Replica_combiner. $ (TYPE%tuple%4. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.Instance. $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) $ TYPE%alloc!alloc.Global.)) $ (TYPE%vstd!cell.PCell. $ (TYPE%alloc!vec.Vec. $ (UINT SZ) $ TYPE%alloc!alloc.Global.))) $ (UINT 64) $ (TYPE%core!option.Option. $ (TYPE%lib!exec.replica.CombinerLockStateGhost. DT&. DT&)))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)) )))
(set-info :comment ";; Function-Specs vstd::atomic_ghost::impl&%1::new")
(declare-fun req%vstd!atomic_ghost.impl&%1.new. (Dcr Type Dcr Type Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Int) (g! Poly)) (! (= (req%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g!) (=> %%global_location_label%%28 (%B (vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.? Pred&. Pred& K&. K& $ (UINT 64) G&. G& k! (I u!) g!)))) :pattern ((req%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g!)) )))
(declare-fun ens%vstd!atomic_ghost.impl&%1.new. (Dcr Type Dcr Type Dcr Type Poly Int Poly vstd!atomic_ghost.AtomicU64.) Bool)
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (k! Poly) (u! Int) (g! Poly) (t! vstd!atomic_ghost.AtomicU64.)) (! (= (ens%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g! t!) (and (has_type (Poly%vstd!atomic_ghost.AtomicU64. t!) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (and (vstd!atomic_ghost.impl&%1.well_formed.? K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicU64. t!)) (= (vstd!atomic_ghost.impl&%1.constant.? K&. K& G&. G& Pred&. Pred& (Poly%vstd!atomic_ghost.AtomicU64. t!)) k!)))) :pattern ((ens%vstd!atomic_ghost.impl&%1.new. K&. K& G&. G& Pred&. Pred& k! u! g! t!)) )))
(set-info :comment ";; Function-Specs lib::exec::replica::ReplicaToken::id")
(declare-fun ens%lib!exec.replica.impl&%0.id. (lib!exec.replica.ReplicaToken. Int) Bool)
(assert (forall ((self! lib!exec.replica.ReplicaToken.) (result! Int)) (! (= (ens%lib!exec.replica.impl&%0.id. self! result!) (and (uInv SZ result!) (= result! (lib!exec.replica.impl&%0.id_spec.? (Poly%lib!exec.replica.ReplicaToken. self!))))) :pattern ((ens%lib!exec.replica.impl&%0.id. self! result!)) )))
(set-info :comment ";; Function-Specs lib::exec::context::Context::new")
(declare-fun req%lib!exec.context.impl&%4.new. (Dcr Type Int lib!spec.flat_combiner.FlatCombiner.slots. lib!spec.flat_combiner.FlatCombiner.Instance. Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (thread_id! Int) (slot! lib!spec.flat_combiner.FlatCombiner.slots.) (flat_combiner_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (unbounded_log_instance! Poly)) (! (= (req%lib!exec.context.impl&%4.new. DT&. DT& thread_id! slot! flat_combiner_instance! unbounded_log_instance!) (and (=> %%global_location_label%%29 (is-lib!spec.flat_combiner.SlotState./Empty_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. slot!))))))))) (=> %%global_location_label%%30 (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. slot!))))) flat_combiner_instance!)) (=> %%global_location_label%%31 (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. slot!))))) thread_id!)))) :pattern ((req%lib!exec.context.impl&%4.new. DT&. DT& thread_id! slot! flat_combiner_instance! unbounded_log_instance!)) )))
(declare-fun ens%lib!exec.context.impl&%4.new. (Dcr Type Int lib!spec.flat_combiner.FlatCombiner.slots. lib!spec.flat_combiner.FlatCombiner.Instance. Poly tuple%2.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (thread_id! Int) (slot! lib!spec.flat_combiner.FlatCombiner.slots.) (flat_combiner_instance! lib!spec.flat_combiner.FlatCombiner.Instance.) (unbounded_log_instance! Poly) (res! tuple%2.)) (! (= (ens%lib!exec.context.impl&%4.new. DT&. DT& thread_id! slot! flat_combiner_instance! unbounded_log_instance! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. $ (TYPE%lib!exec.context.Context. DT&. DT&) (TRACKED $) (TYPE%vstd!cell.PointsTo. $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))) (lib!exec.context.impl&%3.wf.? DT&. DT& (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))) (I thread_id!)) (= (vstd!cell.impl&%3.id.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))))))))) (vstd!cell.PointsToData./PointsToData/pcell (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!)))))))) (= (lib!exec.context.Context./Context/flat_combiner_instance (%Poly%lib!exec.context.Context. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))))) flat_combiner_instance!) (= (lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))))) unbounded_log_instance!) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (vstd!cell.PointsToData./PointsToData/value (%Poly%vstd!cell.PointsToData. (Poly%vstd!cell.PointsToData. (vstd!cell.impl&%2.view.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!)))))))))))))) :pattern ((ens%lib!exec.context.impl&%4.new. DT&. DT& thread_id! slot! flat_combiner_instance! unbounded_log_instance! res!)) )))
(set-info :comment ";; Function-Def lib::exec::context::Context::new")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/context.rs:181:5: 186:70 (#0)")
(set-info :comment ";; Function-Specs lib::exec::context::ThreadToken::replica_id")
(declare-fun ens%lib!exec.context.impl&%0.replica_id. (Dcr Type lib!exec.context.ThreadToken. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.context.ThreadToken.) (result! Int)) (! (= (ens%lib!exec.context.impl&%0.replica_id. DT&. DT& self! result!) (and (uInv SZ result!) (= result! (lib!exec.context.impl&%0.replica_id_spec.? DT&. DT& (Poly%lib!exec.context.ThreadToken. self!))))) :pattern ((ens%lib!exec.context.impl&%0.replica_id. DT&. DT& self! result!)) )))
(set-info :comment ";; Function-Def lib::exec::context::ThreadToken::replica_id")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/context.rs:85:5: 85:57 (#0)")
(set-info :comment ";; Function-Specs lib::exec::context::PendingOperation::new")
(declare-fun ens%lib!exec.context.impl&%1.new. (Dcr Type Poly lib!exec.context.PendingOperation.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (op! Poly) (res! lib!exec.context.PendingOperation.)) (! (= (ens%lib!exec.context.impl&%1.new. DT&. DT& op! res!) (and (has_type (Poly%lib!exec.context.PendingOperation. res!) (TYPE%lib!exec.context.PendingOperation. DT&. DT&)) (= (lib!exec.context.PendingOperation./PendingOperation/op (%Poly%lib!exec.context.PendingOperation. (Poly%lib!exec.context.PendingOperation. res!))) op!))) :pattern ((ens%lib!exec.context.impl&%1.new. DT&. DT& op! res!)) )))
(set-info :comment ";; Function-Def lib::exec::context::PendingOperation::new")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/context.rs:120:5: 120:53 (#0)")
(set-info :comment ";; Function-Specs lib::spec::flat_combiner::FlatCombiner::Instance::pre_send_request")
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_send_request. (lib!spec.flat_combiner.FlatCombiner.Instance. Int lib!spec.flat_combiner.FlatCombiner.clients. lib!spec.flat_combiner.FlatCombiner.slots.) Bool)
(declare-const %%global_location_label%%32 Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((self! lib!spec.flat_combiner.FlatCombiner.Instance.) (tid! Int) (param_token_0_clients! lib!spec.flat_combiner.FlatCombiner.clients.) (param_token_1_slots! lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_send_request. self! tid! param_token_0_clients! param_token_1_slots!) (and (=> %%global_location_label%%32 (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))) self!)) (=> %%global_location_label%%33 (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_1_slots!))))) self!)) (=> %%global_location_label%%34 (and (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))) tid!) (let ((tmp%%$ (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))))) (is-lib!spec.flat_combiner.ClientState./Idle_ tmp%%$)))) (=> %%global_location_label%%35 (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_1_slots!))))) tid!)))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_send_request. self! tid! param_token_0_clients! param_token_1_slots!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_send_request. (lib!spec.flat_combiner.FlatCombiner.Instance. Int lib!spec.flat_combiner.FlatCombiner.clients. lib!spec.flat_combiner.FlatCombiner.slots.) Bool)
(assert (forall ((self! lib!spec.flat_combiner.FlatCombiner.Instance.) (tid! Int) (param_token_0_clients! lib!spec.flat_combiner.FlatCombiner.clients.) (param_token_1_slots! lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_send_request. self! tid! param_token_0_clients! param_token_1_slots!) (let ((slot_state$ (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_1_slots!))))))) (is-lib!spec.flat_combiner.SlotState./Empty_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. slot_state$))))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_send_request. self! tid! param_token_0_clients! param_token_1_slots!)) )))
(set-info :comment ";; Function-Specs lib::spec::flat_combiner::FlatCombiner::Instance::send_request")
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%7.send_request. (lib!spec.flat_combiner.FlatCombiner.Instance. Int Int lib!spec.flat_combiner.FlatCombiner.clients. lib!spec.flat_combiner.FlatCombiner.slots.) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((self! lib!spec.flat_combiner.FlatCombiner.Instance.) (tid! Int) (rid! Int) (param_token_0_clients! lib!spec.flat_combiner.FlatCombiner.clients.) (param_token_2_slots! lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%7.send_request. self! tid! rid! param_token_0_clients! param_token_2_slots!) (and (=> %%global_location_label%%36 (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))) self!)) (=> %%global_location_label%%37 (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_2_slots!))))) self!)) (=> %%global_location_label%%38 (and (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))) tid!) (let ((tmp%%$ (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))))) (is-lib!spec.flat_combiner.ClientState./Idle_ tmp%%$)))) (=> %%global_location_label%%39 (and (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_2_slots!))))) tid!) (let ((tmp%%$ (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_2_slots!))))))) (is-lib!spec.flat_combiner.SlotState./Empty_ tmp%%$)))))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%7.send_request. self! tid! rid! param_token_0_clients! param_token_2_slots!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.send_request. (lib!spec.flat_combiner.FlatCombiner.Instance. Int Int lib!spec.flat_combiner.FlatCombiner.clients. lib!spec.flat_combiner.FlatCombiner.slots. tuple%2.) Bool)
(assert (forall ((self! lib!spec.flat_combiner.FlatCombiner.Instance.) (tid! Int) (rid! Int) (param_token_0_clients! lib!spec.flat_combiner.FlatCombiner.clients.) (param_token_2_slots! lib!spec.flat_combiner.FlatCombiner.slots.) (tmp_tuple! tuple%2.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.send_request. self! tid! rid! param_token_0_clients! param_token_2_slots! tmp_tuple!) (and (has_type (Poly%tuple%2. tmp_tuple!) (TYPE%tuple%2. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.clients. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)) (let ((param_token_1_clients$ (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!)))))) (let ((param_token_3_slots$ (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!)))))) (let ((param_token_1_clients$1 param_token_1_clients$)) (let ((param_token_3_slots$1 param_token_3_slots$)) (and (and (and (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_1_clients$1))))) self!) (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_3_slots$1))))) self!)) (and (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_1_clients$1))))) tid!) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_1_clients$1))))) (lib!spec.flat_combiner.ClientState./Waiting (%I (I rid!)))))) (and (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_3_slots$1))))) tid!) (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_3_slots$1))))) (lib!spec.flat_combiner.SlotState./Request (%I (I rid!)))))))))))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.send_request. self! tid! rid! param_token_0_clients! param_token_2_slots! tmp_tuple!)) )))
(set-info :comment ";; Function-Specs lib::exec::context::Context::enqueue_op")
(declare-fun req%lib!exec.context.impl&%4.enqueue_op. (Dcr Type lib!exec.context.Context. Poly lib!exec.context.FCClientRequestResponseGhost.) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.context.Context.) (op! Poly) (context_ghost! lib!exec.context.FCClientRequestResponseGhost.)) (! (= (req%lib!exec.context.impl&%4.enqueue_op. DT&. DT& self! op! context_ghost!) (and (=> %%global_location_label%%40 (lib!exec.context.impl&%6.enqueue_op_pre.? DT&. DT& (Poly%lib!exec.context.FCClientRequestResponseGhost. context_ghost!) (I (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!)))) op! (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!)))))))) (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!exec.context.Context./Context/flat_combiner_instance (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!)))) (lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!))))) (=> %%global_location_label%%41 (lib!exec.context.impl&%3.wf.? DT&. DT& (Poly%lib!exec.context.Context. self!) (I (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!)))))))) :pattern ((req%lib!exec.context.impl&%4.enqueue_op. DT&. DT& self! op! context_ghost!)) )))
(declare-fun ens%lib!exec.context.impl&%4.enqueue_op. (Dcr Type lib!exec.context.Context. Poly lib!exec.context.FCClientRequestResponseGhost. tuple%2.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.context.Context.) (op! Poly) (context_ghost! lib!exec.context.FCClientRequestResponseGhost.) (res! tuple%2.)) (! (= (ens%lib!exec.context.impl&%4.enqueue_op. DT&. DT& self! op! context_ghost! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. $ BOOL (TRACKED $) (TYPE%lib!exec.context.FCClientRequestResponseGhost. DT&. DT&))) (lib!exec.context.impl&%6.enqueue_op_post.? DT&. DT& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!))) (Poly%lib!exec.context.FCClientRequestResponseGhost. context_ghost!)) (= (lib!exec.context.FCClientRequestResponseGhost./FCClientRequestResponseGhost/cell_id (%Poly%lib!exec.context.FCClientRequestResponseGhost. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!))))) (vstd!cell.impl&%3.id.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!)))))))) (lib!exec.context.impl&%3.wf.? DT&. DT& (Poly%lib!exec.context.Context. self!) (I (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!))))))) :pattern ((ens%lib!exec.context.impl&%4.enqueue_op. DT&. DT& self! op! context_ghost! res!)) )))
(set-info :comment ";; Function-Def lib::exec::context::Context::enqueue_op")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/context.rs:236:5: 240:65 (#0)")
(set-info :comment ";; Function-Specs lib::spec::flat_combiner::FlatCombiner::Instance::pre_recv_response")
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_recv_response. (lib!spec.flat_combiner.FlatCombiner.Instance. Int lib!spec.flat_combiner.FlatCombiner.clients. lib!spec.flat_combiner.FlatCombiner.slots.) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((self! lib!spec.flat_combiner.FlatCombiner.Instance.) (tid! Int) (param_token_0_clients! lib!spec.flat_combiner.FlatCombiner.clients.) (param_token_1_slots! lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_recv_response. self! tid! param_token_0_clients! param_token_1_slots!) (and (=> %%global_location_label%%42 (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))) self!)) (=> %%global_location_label%%43 (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_1_slots!))))) self!)) (=> %%global_location_label%%44 (and (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))) tid!) (let ((tmp%%$ (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))))) (and (is-lib!spec.flat_combiner.ClientState./Waiting_ tmp%%$) (let ((rid$ (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. tmp%%$))))) true))))) (=> %%global_location_label%%45 (let ((rid$ (let ((tmp%%$ (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))))) (ite (is-lib!spec.flat_combiner.ClientState./Waiting_ tmp%%$) (let ((rid$1 (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. tmp%%$))))) rid$1) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_1_slots!))))) tid!))))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_recv_response. self! tid! param_token_0_clients! param_token_1_slots!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_recv_response. (lib!spec.flat_combiner.FlatCombiner.Instance. Int lib!spec.flat_combiner.FlatCombiner.clients. lib!spec.flat_combiner.FlatCombiner.slots.) Bool)
(assert (forall ((self! lib!spec.flat_combiner.FlatCombiner.Instance.) (tid! Int) (param_token_0_clients! lib!spec.flat_combiner.FlatCombiner.clients.) (param_token_1_slots! lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_recv_response. self! tid! param_token_0_clients! param_token_1_slots!) (and (let ((rid$ (let ((tmp%%$ (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))))) (ite (is-lib!spec.flat_combiner.ClientState./Waiting_ tmp%%$) (let ((rid$1 (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. tmp%%$))))) rid$1) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((slot_state$ (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_1_slots!))))))) (not (is-lib!spec.flat_combiner.SlotState./Empty_ (%Poly%lib!spec.flat_combiner.SlotState. (Poly%lib!spec.flat_combiner.SlotState. slot_state$)))))) (let ((rid$ (let ((tmp%%$ (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))))) (ite (is-lib!spec.flat_combiner.ClientState./Waiting_ tmp%%$) (let ((rid$1 (lib!spec.flat_combiner.ClientState./Waiting/0 (%Poly%lib!spec.flat_combiner.ClientState. (Poly%lib!spec.flat_combiner.ClientState. tmp%%$))))) rid$1) (%I (vstd!pervasive.arbitrary.? $ NAT)))))) (let ((slot_state$ (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_1_slots!))))))) (= (lib!spec.flat_combiner.impl&%4.get_ReqId.? (Poly%lib!spec.flat_combiner.SlotState. slot_state$)) rid$))))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.pre_recv_response. self! tid! param_token_0_clients! param_token_1_slots!)) )))
(set-info :comment ";; Function-Specs lib::spec::flat_combiner::FlatCombiner::Instance::recv_response")
(declare-fun req%lib!spec.flat_combiner.FlatCombiner.impl&%7.recv_response. (lib!spec.flat_combiner.FlatCombiner.Instance. Int Int lib!spec.flat_combiner.FlatCombiner.clients. lib!spec.flat_combiner.FlatCombiner.slots.) Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((self! lib!spec.flat_combiner.FlatCombiner.Instance.) (tid! Int) (rid! Int) (param_token_0_clients! lib!spec.flat_combiner.FlatCombiner.clients.) (param_token_2_slots! lib!spec.flat_combiner.FlatCombiner.slots.)) (! (= (req%lib!spec.flat_combiner.FlatCombiner.impl&%7.recv_response. self! tid! rid! param_token_0_clients! param_token_2_slots!) (and (=> %%global_location_label%%46 (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))) self!)) (=> %%global_location_label%%47 (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_2_slots!))))) self!)) (=> %%global_location_label%%48 (and (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))) tid!) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_0_clients!))))) (lib!spec.flat_combiner.ClientState./Waiting (%I (I rid!)))))) (=> %%global_location_label%%49 (and (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_2_slots!))))) tid!) (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_2_slots!))))) (lib!spec.flat_combiner.SlotState./Response (%I (I rid!)))))))) :pattern ((req%lib!spec.flat_combiner.FlatCombiner.impl&%7.recv_response. self! tid! rid! param_token_0_clients! param_token_2_slots!)) )))
(declare-fun ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.recv_response. (lib!spec.flat_combiner.FlatCombiner.Instance. Int Int lib!spec.flat_combiner.FlatCombiner.clients. lib!spec.flat_combiner.FlatCombiner.slots. tuple%2.) Bool)
(assert (forall ((self! lib!spec.flat_combiner.FlatCombiner.Instance.) (tid! Int) (rid! Int) (param_token_0_clients! lib!spec.flat_combiner.FlatCombiner.clients.) (param_token_2_slots! lib!spec.flat_combiner.FlatCombiner.slots.) (tmp_tuple! tuple%2.)) (! (= (ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.recv_response. self! tid! rid! param_token_0_clients! param_token_2_slots! tmp_tuple!) (and (has_type (Poly%tuple%2. tmp_tuple!) (TYPE%tuple%2. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.clients. (TRACKED $) TYPE%lib!spec.flat_combiner.FlatCombiner.slots.)) (let ((param_token_1_clients$ (%Poly%lib!spec.flat_combiner.FlatCombiner.clients. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!)))))) (let ((param_token_3_slots$ (%Poly%lib!spec.flat_combiner.FlatCombiner.slots. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp_tuple!)))))) (let ((param_token_1_clients$1 param_token_1_clients$)) (let ((param_token_3_slots$1 param_token_3_slots$)) (and (and (and (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_1_clients$1))))) self!) (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/instance (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_3_slots$1))))) self!)) (and (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_1_clients$1))))) tid!) (= (lib!spec.flat_combiner.FlatCombiner.clients_token_data./clients_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.clients_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%4.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.clients. param_token_1_clients$1))))) lib!spec.flat_combiner.ClientState./Idle))) (and (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/key (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_3_slots$1))))) tid!) (= (lib!spec.flat_combiner.FlatCombiner.slots_token_data./slots_token_data/value (%Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (Poly%lib!spec.flat_combiner.FlatCombiner.slots_token_data. (lib!spec.flat_combiner.FlatCombiner.impl&%5.view.? (Poly%lib!spec.flat_combiner.FlatCombiner.slots. param_token_3_slots$1))))) lib!spec.flat_combiner.SlotState./Empty))))))))) :pattern ((ens%lib!spec.flat_combiner.FlatCombiner.impl&%7.recv_response. self! tid! rid! param_token_0_clients! param_token_2_slots! tmp_tuple!)) )))
(set-info :comment ";; Function-Specs lib::exec::context::Context::dequeue_response")
(declare-fun req%lib!exec.context.impl&%4.dequeue_response. (Dcr Type lib!exec.context.Context. lib!exec.context.FCClientRequestResponseGhost.) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.context.Context.) (context_ghost! lib!exec.context.FCClientRequestResponseGhost.)) (! (= (req%lib!exec.context.impl&%4.dequeue_response. DT&. DT& self! context_ghost!) (and (=> %%global_location_label%%50 (lib!exec.context.impl&%6.dequeue_resp_pre.? DT&. DT& (Poly%lib!exec.context.FCClientRequestResponseGhost. context_ghost!) (Poly%vstd!cell.CellId. (vstd!cell.impl&%3.id.? $ (TYPE%lib!exec.context.PendingOperation. DT&. DT&) (lib!exec.CachePadded./CachePadded/0 (%Poly%lib!exec.CachePadded. (Poly%lib!exec.CachePadded. (lib!exec.context.Context./Context/batch (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!)))))))) (I (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!)))) (Poly%lib!spec.flat_combiner.FlatCombiner.Instance. (lib!exec.context.Context./Context/flat_combiner_instance (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!)))))) (=> %%global_location_label%%51 (lib!exec.context.impl&%3.wf.? DT&. DT& (Poly%lib!exec.context.Context. self!) (I (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!)))))))) :pattern ((req%lib!exec.context.impl&%4.dequeue_response. DT&. DT& self! context_ghost!)) )))
(declare-fun ens%lib!exec.context.impl&%4.dequeue_response. (Dcr Type lib!exec.context.Context. lib!exec.context.FCClientRequestResponseGhost. tuple%2.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.context.Context.) (context_ghost! lib!exec.context.FCClientRequestResponseGhost.) (res! tuple%2.)) (! (= (ens%lib!exec.context.impl&%4.dequeue_response. DT&. DT& self! context_ghost! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. $ (TYPE%core!option.Option. (proj%%lib!Dispatch./Response DT&. DT&) (proj%lib!Dispatch./Response DT&. DT&)) (TRACKED $) (TYPE%lib!exec.context.FCClientRequestResponseGhost. DT&. DT&))) (lib!exec.context.impl&%6.dequeue_resp_post.? DT&. DT& (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!))) (Poly%lib!exec.context.FCClientRequestResponseGhost. context_ghost!) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))) (lib!exec.context.Context./Context/unbounded_log_instance (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!)))) (lib!exec.context.impl&%3.wf.? DT&. DT& (Poly%lib!exec.context.Context. self!) (I (lib!exec.context.Context./Context/thread_id_g (%Poly%lib!exec.context.Context. (Poly%lib!exec.context.Context. self!))))))) :pattern ((ens%lib!exec.context.impl&%4.dequeue_response. DT&. DT& self! context_ghost! res!)) )))
(set-info :comment ";; Function-Def lib::exec::context::Context::dequeue_response")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/context.rs:297:5: 300:81 (#0)")
(set-info :comment ";; Function-Specs lib::exec::context::ThreadToken::thread_id")
(declare-fun ens%lib!exec.context.impl&%0.thread_id. (Dcr Type lib!exec.context.ThreadToken. Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! lib!exec.context.ThreadToken.) (result! Int)) (! (= (ens%lib!exec.context.impl&%0.thread_id. DT&. DT& self! result!) (and (uInv 32 result!) (= result! (lib!exec.context.impl&%0.thread_id_spec.? DT&. DT& (Poly%lib!exec.context.ThreadToken. self!))))) :pattern ((ens%lib!exec.context.impl&%0.thread_id. DT&. DT& self! result!)) )))
(set-info :comment ";; Function-Def lib::exec::context::ThreadToken::thread_id")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/context.rs:74:5: 74:49 (#0)")
(set-info :comment ";; Function-Specs lib::exec::context::PendingOperation::set_result")
(declare-fun ens%lib!exec.context.impl&%1.set_result. (Dcr Type lib!exec.context.PendingOperation. lib!exec.context.PendingOperation. Poly) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (pre%self! lib!exec.context.PendingOperation.) (self! lib!exec.context.PendingOperation.) (resp! Poly)) (! (= (ens%lib!exec.context.impl&%1.set_result. DT&. DT& pre%self! self! resp!) (has_type (Poly%lib!exec.context.PendingOperation. self!) (TYPE%lib!exec.context.PendingOperation. DT&. DT&))) :pattern ((ens%lib!exec.context.impl&%1.set_result. DT&. DT& pre%self! self! resp!)) )))
(set-info :comment ";; Function-Def lib::exec::context::PendingOperation::set_result")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/exec/context.rs:127:5: 127:53 (#0)")
(declare-const DT&. Dcr)
(declare-const DT& Type)
(declare-const self!@0 lib!exec.context.PendingOperation.)
(declare-const resp! Poly)
(declare-const tmp%1 core!option.Option.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!exec.context.PendingOperation. self!@0) (TYPE%lib!exec.context.PendingOperation. DT&. DT&)))
(assert (has_type resp! (proj%lib!Dispatch./Response DT&. DT&)))
(assert (tr_bound%lib!Dispatch. DT&. DT&))
(declare-const self!@1 lib!exec.context.PendingOperation.)
(assert (not true))
(check-sat)
(exit)
