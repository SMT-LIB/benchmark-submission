(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)) )))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)) )))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)) )))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)) )))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)) )))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)) )))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)) )))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module spec::linearization'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!set.impl&%0.filter. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!set.impl&%0.disjoint. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_empty. FuelId)
(declare-const fuel%vstd!state_machine_internal.impl&%1.update_at_index. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_by. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.next. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.init_by. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.init. FuelId)
(declare-const fuel%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version. FuelId)
(declare-const fuel%lib!spec.linearization.future_rid_ok. FuelId)
(declare-const fuel%lib!spec.linearization.future_points_ok. FuelId)
(declare-const fuel%lib!spec.linearization.readonly_requests_valid. FuelId)
(declare-const fuel%lib!spec.linearization.readonly_request_is_valid. FuelId)
(declare-const fuel%lib!spec.linearization.readonly_response_is_valid. FuelId)
(declare-const fuel%lib!spec.linearization.update_response_is_valid. FuelId)
(declare-const fuel%lib!spec.linearization.update_response_with_version. FuelId)
(declare-const fuel%lib!spec.linearization.state_refinement_relation_basic. FuelId)
(declare-const fuel%lib!spec.linearization.state_refinement_relation. FuelId)
(declare-const fuel%lib!spec.linearization.simple_log_state_equiv_inc_version. FuelId)
(declare-const fuel%lib!spec.linearization.recursion_invariant. FuelId)
(declare-const fuel%lib!spec.linearization.all_reads_for. FuelId)
(declare-const fuel%lib!spec.simple_log.impl&%0.arrow_version. FuelId)
(declare-const fuel%lib!spec.simple_log.impl&%1.op. FuelId)
(declare-const fuel%lib!spec.simple_log.compute_nrstate_at_version. FuelId)
(declare-const fuel%lib!AsynchronousSingleton.impl&%4.initialize. FuelId)
(declare-const fuel%lib!AsynchronousSingleton.impl&%4.internal_next. FuelId)
(declare-const fuel%lib!AsynchronousSingleton.impl&%4.no_op. FuelId)
(declare-const fuel%lib!AsynchronousSingleton.impl&%4.start. FuelId)
(declare-const fuel%lib!AsynchronousSingleton.impl&%4.end. FuelId)
(declare-const fuel%lib!AsynchronousSingleton.impl&%4.next_by. FuelId)
(declare-const fuel%lib!AsynchronousSingleton.impl&%4.next. FuelId)
(declare-const fuel%lib!AsynchronousSingleton.impl&%4.init_by. FuelId)
(declare-const fuel%lib!AsynchronousSingleton.impl&%4.init. FuelId)
(declare-const fuel%lib!impl&%1.is_Read. FuelId)
(declare-const fuel%lib!impl&%1.is_Write. FuelId)
(declare-const fuel%lib!impl&%5.is_Internal. FuelId)
(declare-const fuel%lib!impl&%7.is_Stepped. FuelId)
(declare-const fuel%lib!impl&%7.get_Stepped_0. FuelId)
(declare-const fuel%lib!impl&%7.get_Stepped_1. FuelId)
(declare-const fuel%lib!impl&%7.get_Stepped_2. FuelId)
(declare-const fuel%lib!impl&%7.is_Inited. FuelId)
(declare-const fuel%lib!impl&%9.get_last. FuelId)
(declare-const fuel%lib!impl&%9.wf. FuelId)
(declare-const fuel%lib!impl&%10.is_Stepped. FuelId)
(declare-const fuel%lib!impl&%10.get_Stepped_1. FuelId)
(declare-const fuel%lib!impl&%10.get_Stepped_2. FuelId)
(declare-const fuel%lib!impl&%10.is_Inited. FuelId)
(declare-const fuel%lib!impl&%12.get_last. FuelId)
(declare-const fuel%lib!impl&%12.wf. FuelId)
(declare-const fuel%lib!behavior_equiv. FuelId)
(assert (distinct fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!set.impl&%0.filter. fuel%vstd!set.impl&%0.choose. fuel%vstd!set.impl&%0.disjoint. fuel%vstd!set_lib.impl&%0.is_empty. fuel%vstd!state_machine_internal.impl&%1.update_at_index. fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version. fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version. fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish. fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op. fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_by. fuel%lib!spec.simple_log.SimpleLog.impl&%4.next. fuel%lib!spec.simple_log.SimpleLog.impl&%4.init_by. fuel%lib!spec.simple_log.SimpleLog.impl&%4.init. fuel%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version. fuel%lib!spec.linearization.future_rid_ok. fuel%lib!spec.linearization.future_points_ok. fuel%lib!spec.linearization.readonly_requests_valid. fuel%lib!spec.linearization.readonly_request_is_valid. fuel%lib!spec.linearization.readonly_response_is_valid. fuel%lib!spec.linearization.update_response_is_valid. fuel%lib!spec.linearization.update_response_with_version. fuel%lib!spec.linearization.state_refinement_relation_basic. fuel%lib!spec.linearization.state_refinement_relation. fuel%lib!spec.linearization.simple_log_state_equiv_inc_version. fuel%lib!spec.linearization.recursion_invariant. fuel%lib!spec.linearization.all_reads_for. fuel%lib!spec.simple_log.impl&%0.arrow_version. fuel%lib!spec.simple_log.impl&%1.op. fuel%lib!spec.simple_log.compute_nrstate_at_version. fuel%lib!AsynchronousSingleton.impl&%4.initialize. fuel%lib!AsynchronousSingleton.impl&%4.internal_next. fuel%lib!AsynchronousSingleton.impl&%4.no_op. fuel%lib!AsynchronousSingleton.impl&%4.start. fuel%lib!AsynchronousSingleton.impl&%4.end. fuel%lib!AsynchronousSingleton.impl&%4.next_by. fuel%lib!AsynchronousSingleton.impl&%4.next. fuel%lib!AsynchronousSingleton.impl&%4.init_by. fuel%lib!AsynchronousSingleton.impl&%4.init. fuel%lib!impl&%1.is_Read. fuel%lib!impl&%1.is_Write. fuel%lib!impl&%5.is_Internal. fuel%lib!impl&%7.is_Stepped. fuel%lib!impl&%7.get_Stepped_0. fuel%lib!impl&%7.get_Stepped_1. fuel%lib!impl&%7.get_Stepped_2. fuel%lib!impl&%7.is_Inited. fuel%lib!impl&%9.get_last. fuel%lib!impl&%9.wf. fuel%lib!impl&%10.is_Stepped. fuel%lib!impl&%10.get_Stepped_1. fuel%lib!impl&%10.get_Stepped_2. fuel%lib!impl&%10.is_Inited. fuel%lib!impl&%12.get_last. fuel%lib!impl&%12.wf. fuel%lib!behavior_equiv.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%lib!Dispatch./ReadOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./ReadOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./WriteOperation (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./WriteOperation (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./Response (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./Response (Dcr Type) Type)
(declare-fun proj%%lib!Dispatch./View (Dcr Type) Dcr)
(declare-fun proj%lib!Dispatch./View (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./nat.>. 0)
(declare-sort vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-datatypes ((lib!spec.simple_log.SimpleLog.State. 0) (lib!spec.simple_log.SimpleLog.Step. 0) (lib!spec.simple_log.SimpleLog.Config. 0) (lib!spec.linearization.RefinementProof. 0) (lib!spec.simple_log.ReadReq. 0) (lib!spec.simple_log.UpdateResp. 0) (lib!AsynchronousSingleton.State. 0) (lib!AsynchronousSingleton.Step. 0) (lib!AsynchronousSingleton.Config. 0) (lib!InputOperation. 0) (lib!OutputOperation. 0) (lib!AsyncLabel. 0) (lib!SimpleLogBehavior. 0) (lib!AsynchronousSingletonBehavior. 0) (tuple%0. 0) (tuple%2. 0)) (((lib!spec.simple_log.SimpleLog.State./State (lib!spec.simple_log.SimpleLog.State./State/?log Poly) (lib!spec.simple_log.SimpleLog.State./State/?version Int) (lib!spec.simple_log.SimpleLog.State./State/?readonly_reqs Poly) (lib!spec.simple_log.SimpleLog.State./State/?update_reqs Poly) (lib!spec.simple_log.SimpleLog.State./State/?update_resps vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.))) ((lib!spec.simple_log.SimpleLog.Step./readonly_start (lib!spec.simple_log.SimpleLog.Step./readonly_start/?0 Int) (lib!spec.simple_log.SimpleLog.Step./readonly_start/?1 Poly)) (lib!spec.simple_log.SimpleLog.Step./readonly_read_version (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/?0 Int)) (lib!spec.simple_log.SimpleLog.Step./readonly_finish (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?0 Int) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?1 Int) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?2 Poly)) (lib!spec.simple_log.SimpleLog.Step./update_start (lib!spec.simple_log.SimpleLog.Step./update_start/?0 Int) (lib!spec.simple_log.SimpleLog.Step./update_start/?1 Poly)) (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/?0 Int)) (lib!spec.simple_log.SimpleLog.Step./update_incr_version (lib!spec.simple_log.SimpleLog.Step./update_incr_version/?0 Int)) (lib!spec.simple_log.SimpleLog.Step./update_finish (lib!spec.simple_log.SimpleLog.Step./update_finish/?0 Int) (lib!spec.simple_log.SimpleLog.Step./update_finish/?1 Poly)) (lib!spec.simple_log.SimpleLog.Step./no_op ) (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/?0 lib!spec.simple_log.SimpleLog.State.))) ((lib!spec.simple_log.SimpleLog.Config./initialize ) (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/?0 lib!spec.simple_log.SimpleLog.State.))) ((lib!spec.linearization.RefinementProof./RefinementProof )) ((lib!spec.simple_log.ReadReq./Init (lib!spec.simple_log.ReadReq./Init/?op Poly)) (lib!spec.simple_log.ReadReq./Req (lib!spec.simple_log.ReadReq./Req/?version Int) (lib!spec.simple_log.ReadReq./Req/?op Poly))) ((lib!spec.simple_log.UpdateResp./UpdateResp (lib!spec.simple_log.UpdateResp./UpdateResp/?0 Int))) ((lib!AsynchronousSingleton.State./State (lib!AsynchronousSingleton.State./State/?state Poly) (lib!AsynchronousSingleton.State./State/?reqs Poly) (lib!AsynchronousSingleton.State./State/?resps Poly))) ((lib!AsynchronousSingleton.Step./internal_next (lib!AsynchronousSingleton.Step./internal_next/?0 Int) (lib!AsynchronousSingleton.Step./internal_next/?1 lib!InputOperation.) (lib!AsynchronousSingleton.Step./internal_next/?2 lib!OutputOperation.)) (lib!AsynchronousSingleton.Step./no_op ) (lib!AsynchronousSingleton.Step./start (lib!AsynchronousSingleton.Step./start/?0 Int) (lib!AsynchronousSingleton.Step./start/?1 lib!InputOperation.)) (lib!AsynchronousSingleton.Step./end (lib!AsynchronousSingleton.Step./end/?0 Int) (lib!AsynchronousSingleton.Step./end/?1 lib!OutputOperation.)) (lib!AsynchronousSingleton.Step./dummy_to_use_type_params (lib!AsynchronousSingleton.Step./dummy_to_use_type_params/?0 lib!AsynchronousSingleton.State.))) ((lib!AsynchronousSingleton.Config./initialize ) (lib!AsynchronousSingleton.Config./dummy_to_use_type_params (lib!AsynchronousSingleton.Config./dummy_to_use_type_params/?0 lib!AsynchronousSingleton.State.))) ((lib!InputOperation./Read (lib!InputOperation./Read/?0 Poly)) (lib!InputOperation./Write (lib!InputOperation./Write/?0 Poly))) ((lib!OutputOperation./Read (lib!OutputOperation./Read/?0 Poly)) (lib!OutputOperation./Write (lib!OutputOperation./Write/?0 Poly))) ((lib!AsyncLabel./Internal ) (lib!AsyncLabel./Start (lib!AsyncLabel./Start/?0 Int) (lib!AsyncLabel./Start/?1 lib!InputOperation.)) (lib!AsyncLabel./End (lib!AsyncLabel./End/?0 Int) (lib!AsyncLabel./End/?1 lib!OutputOperation.))) ((lib!SimpleLogBehavior./Stepped (lib!SimpleLogBehavior./Stepped/?0 lib!spec.simple_log.SimpleLog.State.) (lib!SimpleLogBehavior./Stepped/?1 lib!AsyncLabel.) (lib!SimpleLogBehavior./Stepped/?2 lib!SimpleLogBehavior.)) (lib!SimpleLogBehavior./Inited (lib!SimpleLogBehavior./Inited/?0 lib!spec.simple_log.SimpleLog.State.))) ((lib!AsynchronousSingletonBehavior./Stepped (lib!AsynchronousSingletonBehavior./Stepped/?0 lib!AsynchronousSingleton.State.) (lib!AsynchronousSingletonBehavior./Stepped/?1 lib!AsyncLabel.) (lib!AsynchronousSingletonBehavior./Stepped/?2 lib!AsynchronousSingletonBehavior.)) (lib!AsynchronousSingletonBehavior./Inited (lib!AsynchronousSingletonBehavior./Inited/?0 lib!AsynchronousSingleton.State.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun lib!spec.simple_log.SimpleLog.State./State/log (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/version (lib!spec.simple_log.SimpleLog.State.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/update_reqs (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.State./State/update_resps (lib!spec.simple_log.SimpleLog.State.) vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (lib!spec.simple_log.SimpleLog.Step.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (lib!spec.simple_log.SimpleLog.Step.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_start/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_start/1 (lib!spec.simple_log.SimpleLog.Step.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_finish/0 (lib!spec.simple_log.SimpleLog.Step.) Int)
(declare-fun lib!spec.simple_log.SimpleLog.Step./update_finish/1 (lib!spec.simple_log.SimpleLog.Step.) Poly)
(declare-fun lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 (lib!spec.simple_log.SimpleLog.Step.) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 (lib!spec.simple_log.SimpleLog.Config.) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!spec.simple_log.ReadReq./Init/op (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun lib!spec.simple_log.ReadReq./Req/version (lib!spec.simple_log.ReadReq.) Int)
(declare-fun lib!spec.simple_log.ReadReq./Req/op (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun lib!spec.simple_log.UpdateResp./UpdateResp/0 (lib!spec.simple_log.UpdateResp.) Int)
(declare-fun lib!AsynchronousSingleton.State./State/state (lib!AsynchronousSingleton.State.) Poly)
(declare-fun lib!AsynchronousSingleton.State./State/reqs (lib!AsynchronousSingleton.State.) Poly)
(declare-fun lib!AsynchronousSingleton.State./State/resps (lib!AsynchronousSingleton.State.) Poly)
(declare-fun lib!AsynchronousSingleton.Step./internal_next/0 (lib!AsynchronousSingleton.Step.) Int)
(declare-fun lib!AsynchronousSingleton.Step./internal_next/1 (lib!AsynchronousSingleton.Step.) lib!InputOperation.)
(declare-fun lib!AsynchronousSingleton.Step./internal_next/2 (lib!AsynchronousSingleton.Step.) lib!OutputOperation.)
(declare-fun lib!AsynchronousSingleton.Step./start/0 (lib!AsynchronousSingleton.Step.) Int)
(declare-fun lib!AsynchronousSingleton.Step./start/1 (lib!AsynchronousSingleton.Step.) lib!InputOperation.)
(declare-fun lib!AsynchronousSingleton.Step./end/0 (lib!AsynchronousSingleton.Step.) Int)
(declare-fun lib!AsynchronousSingleton.Step./end/1 (lib!AsynchronousSingleton.Step.) lib!OutputOperation.)
(declare-fun lib!AsynchronousSingleton.Step./dummy_to_use_type_params/0 (lib!AsynchronousSingleton.Step.) lib!AsynchronousSingleton.State.)
(declare-fun lib!AsynchronousSingleton.Config./dummy_to_use_type_params/0 (lib!AsynchronousSingleton.Config.) lib!AsynchronousSingleton.State.)
(declare-fun lib!InputOperation./Read/0 (lib!InputOperation.) Poly)
(declare-fun lib!InputOperation./Write/0 (lib!InputOperation.) Poly)
(declare-fun lib!OutputOperation./Read/0 (lib!OutputOperation.) Poly)
(declare-fun lib!OutputOperation./Write/0 (lib!OutputOperation.) Poly)
(declare-fun lib!AsyncLabel./Start/0 (lib!AsyncLabel.) Int)
(declare-fun lib!AsyncLabel./Start/1 (lib!AsyncLabel.) lib!InputOperation.)
(declare-fun lib!AsyncLabel./End/0 (lib!AsyncLabel.) Int)
(declare-fun lib!AsyncLabel./End/1 (lib!AsyncLabel.) lib!OutputOperation.)
(declare-fun lib!SimpleLogBehavior./Stepped/0 (lib!SimpleLogBehavior.) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!SimpleLogBehavior./Stepped/1 (lib!SimpleLogBehavior.) lib!AsyncLabel.)
(declare-fun lib!SimpleLogBehavior./Stepped/2 (lib!SimpleLogBehavior.) lib!SimpleLogBehavior.)
(declare-fun lib!SimpleLogBehavior./Inited/0 (lib!SimpleLogBehavior.) lib!spec.simple_log.SimpleLog.State.)
(declare-fun lib!AsynchronousSingletonBehavior./Stepped/0 (lib!AsynchronousSingletonBehavior.) lib!AsynchronousSingleton.State.)
(declare-fun lib!AsynchronousSingletonBehavior./Stepped/1 (lib!AsynchronousSingletonBehavior.) lib!AsyncLabel.)
(declare-fun lib!AsynchronousSingletonBehavior./Stepped/2 (lib!AsynchronousSingletonBehavior.) lib!AsynchronousSingletonBehavior.)
(declare-fun lib!AsynchronousSingletonBehavior./Inited/0 (lib!AsynchronousSingletonBehavior.) lib!AsynchronousSingleton.State.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.simple_log.SimpleLog.State. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.simple_log.SimpleLog.Step. (Dcr Type) Type)
(declare-fun TYPE%lib!spec.simple_log.SimpleLog.Config. (Dcr Type) Type)
(declare-const TYPE%lib!spec.linearization.RefinementProof. Type)
(declare-fun TYPE%lib!spec.simple_log.ReadReq. (Dcr Type) Type)
(declare-const TYPE%lib!spec.simple_log.UpdateResp. Type)
(declare-fun TYPE%lib!AsynchronousSingleton.State. (Dcr Type) Type)
(declare-fun TYPE%lib!AsynchronousSingleton.Step. (Dcr Type) Type)
(declare-fun TYPE%lib!AsynchronousSingleton.Config. (Dcr Type) Type)
(declare-fun TYPE%lib!InputOperation. (Dcr Type) Type)
(declare-fun TYPE%lib!OutputOperation. (Dcr Type) Type)
(declare-fun TYPE%lib!AsyncLabel. (Dcr Type) Type)
(declare-fun TYPE%lib!SimpleLogBehavior. (Dcr Type) Type)
(declare-fun TYPE%lib!AsynchronousSingletonBehavior. (Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./nat.>. (vstd!map.Map<nat./nat.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./nat.>. (Poly) vstd!map.Map<nat./nat.>.)
(declare-fun Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (Poly) vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.State.) Poly)
(declare-fun %Poly%lib!spec.simple_log.SimpleLog.State. (Poly) lib!spec.simple_log.SimpleLog.State.)
(declare-fun Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step.) Poly)
(declare-fun %Poly%lib!spec.simple_log.SimpleLog.Step. (Poly) lib!spec.simple_log.SimpleLog.Step.)
(declare-fun Poly%lib!spec.simple_log.SimpleLog.Config. (lib!spec.simple_log.SimpleLog.Config.) Poly)
(declare-fun %Poly%lib!spec.simple_log.SimpleLog.Config. (Poly) lib!spec.simple_log.SimpleLog.Config.)
(declare-fun Poly%lib!spec.linearization.RefinementProof. (lib!spec.linearization.RefinementProof.) Poly)
(declare-fun %Poly%lib!spec.linearization.RefinementProof. (Poly) lib!spec.linearization.RefinementProof.)
(declare-fun Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq.) Poly)
(declare-fun %Poly%lib!spec.simple_log.ReadReq. (Poly) lib!spec.simple_log.ReadReq.)
(declare-fun Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp.) Poly)
(declare-fun %Poly%lib!spec.simple_log.UpdateResp. (Poly) lib!spec.simple_log.UpdateResp.)
(declare-fun Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.State.) Poly)
(declare-fun %Poly%lib!AsynchronousSingleton.State. (Poly) lib!AsynchronousSingleton.State.)
(declare-fun Poly%lib!AsynchronousSingleton.Step. (lib!AsynchronousSingleton.Step.) Poly)
(declare-fun %Poly%lib!AsynchronousSingleton.Step. (Poly) lib!AsynchronousSingleton.Step.)
(declare-fun Poly%lib!AsynchronousSingleton.Config. (lib!AsynchronousSingleton.Config.) Poly)
(declare-fun %Poly%lib!AsynchronousSingleton.Config. (Poly) lib!AsynchronousSingleton.Config.)
(declare-fun Poly%lib!InputOperation. (lib!InputOperation.) Poly)
(declare-fun %Poly%lib!InputOperation. (Poly) lib!InputOperation.)
(declare-fun Poly%lib!OutputOperation. (lib!OutputOperation.) Poly)
(declare-fun %Poly%lib!OutputOperation. (Poly) lib!OutputOperation.)
(declare-fun Poly%lib!AsyncLabel. (lib!AsyncLabel.) Poly)
(declare-fun %Poly%lib!AsyncLabel. (Poly) lib!AsyncLabel.)
(declare-fun Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior.) Poly)
(declare-fun %Poly%lib!SimpleLogBehavior. (Poly) lib!SimpleLogBehavior.)
(declare-fun Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior.) Poly)
(declare-fun %Poly%lib!AsynchronousSingletonBehavior. (Poly) lib!AsynchronousSingletonBehavior.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (= x (%Poly%vstd!map.Map<nat./nat.>. (Poly%vstd!map.Map<nat./nat.>. x))) :pattern ((Poly%vstd!map.Map<nat./nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ NAT)) (= x (Poly%vstd!map.Map<nat./nat.>. (%Poly%vstd!map.Map<nat./nat.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ NAT))) )))
(assert (forall ((x vstd!map.Map<nat./nat.>.)) (! (has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT)) :pattern ((has_type (Poly%vstd!map.Map<nat./nat.>. x) (TYPE%vstd!map.Map. $ NAT $ NAT))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)) (! (= x (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x))) :pattern ((Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.)) (= x (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.))) )))
(assert (forall ((x vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)) (! (has_type (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.)) :pattern ((has_type (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= x (%Poly%lib!spec.simple_log.SimpleLog.State. (Poly%lib!spec.simple_log.SimpleLog.State. x))) :pattern ((Poly%lib!spec.simple_log.SimpleLog.State. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (= x (Poly%lib!spec.simple_log.SimpleLog.State. (%Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_log! Poly) (_version! Int) (_readonly_reqs! Poly) (_update_reqs! Poly) (_update_resps! vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>.)) (! (=> (and (has_type _log! (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&))) (<= 0 _version!) (has_type _readonly_reqs! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)))) (has_type _update_reqs! (TYPE%vstd!map.Map. $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.State./State _log! _version! _readonly_reqs! _update_reqs! _update_resps!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.State./State _log! _version! _readonly_reqs! _update_reqs! _update_resps!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/log x) (lib!spec.simple_log.SimpleLog.State./State/?log x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/log x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/version x) (lib!spec.simple_log.SimpleLog.State./State/?version x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/version x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x) (lib!spec.simple_log.SimpleLog.State./State/?readonly_reqs x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&))))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs x) (lib!spec.simple_log.SimpleLog.State./State/?update_reqs x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/update_reqs x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (TYPE%vstd!map.Map. $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) :pattern ((lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (= (lib!spec.simple_log.SimpleLog.State./State/update_resps x) (lib!spec.simple_log.SimpleLog.State./State/?update_resps x)) :pattern ((lib!spec.simple_log.SimpleLog.State./State/update_resps x)) )))
(define-fun is-lib!spec.simple_log.SimpleLog.State./State_ ((c lib!spec.simple_log.SimpleLog.State.)) Bool ((_ is lib!spec.simple_log.SimpleLog.State./State) c))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (=> (is-lib!spec.simple_log.SimpleLog.State./State_ x) (height_lt (height (lib!spec.simple_log.SimpleLog.State./State/log x)) (height (Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((height (lib!spec.simple_log.SimpleLog.State./State/log x))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (=> (is-lib!spec.simple_log.SimpleLog.State./State_ x) (height_lt (height (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x)) (height (Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((height (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs x))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.State.)) (! (=> (is-lib!spec.simple_log.SimpleLog.State./State_ x) (height_lt (height (lib!spec.simple_log.SimpleLog.State./State/update_reqs x)) (height (Poly%lib!spec.simple_log.SimpleLog.State. x)))) :pattern ((height (lib!spec.simple_log.SimpleLog.State./State/update_reqs x))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= x (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. x))) :pattern ((Poly%lib!spec.simple_log.SimpleLog.Step. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (= x (Poly%lib!spec.simple_log.SimpleLog.Step. (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Poly)) (! (=> (and (<= 0 _0!) (has_type _1! (proj%lib!Dispatch./ReadOperation DT&. DT&))) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_start _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_start _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_start/0 x) (lib!spec.simple_log.SimpleLog.Step./readonly_start/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_start/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_start/1 x) (lib!spec.simple_log.SimpleLog.Step./readonly_start/?1 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_start/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_read_version _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_read_version _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 x) (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Int) (_2! Poly)) (! (=> (and (<= 0 _0!) (<= 0 _1!) (has_type _2! (proj%lib!Dispatch./Response DT&. DT&))) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_finish _0! _1! _2!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./readonly_finish _0! _1! _2!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 x) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 x) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?1 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 x) (lib!spec.simple_log.SimpleLog.Step./readonly_finish/?2 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Poly)) (! (=> (and (<= 0 _0!) (has_type _1! (proj%lib!Dispatch./WriteOperation DT&. DT&))) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_start _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_start _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_start/0 x) (lib!spec.simple_log.SimpleLog.Step./update_start/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_start/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./update_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_start/1 x) (lib!spec.simple_log.SimpleLog.Step./update_start/?1 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_start/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.Step./update_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 x) (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_incr_version _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_incr_version _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 x) (lib!spec.simple_log.SimpleLog.Step./update_incr_version/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! Poly)) (! (=> (and (<= 0 _0!) (has_type _1! (proj%lib!Dispatch./Response DT&. DT&))) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_finish _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./update_finish _0! _1!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_finish/0 x) (lib!spec.simple_log.SimpleLog.Step./update_finish/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_finish/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (<= 0 (lib!spec.simple_log.SimpleLog.Step./update_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./update_finish/1 x) (lib!spec.simple_log.SimpleLog.Step./update_finish/?1 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_finish/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (lib!spec.simple_log.SimpleLog.Step./update_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Step./update_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. lib!spec.simple_log.SimpleLog.Step./no_op) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. lib!spec.simple_log.SimpleLog.Step./no_op) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.simple_log.SimpleLog.State.)) (! (=> (has_type (Poly%lib!spec.simple_log.SimpleLog.State. _0!) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Step. (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (= (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 x) (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x))) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&))) )))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params) c))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Step.)) (! (=> (is-lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 x))) (height (Poly%lib!spec.simple_log.SimpleLog.Step. x)))) :pattern ((height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 x)))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Config.)) (! (= x (%Poly%lib!spec.simple_log.SimpleLog.Config. (Poly%lib!spec.simple_log.SimpleLog.Config. x))) :pattern ((Poly%lib!spec.simple_log.SimpleLog.Config. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&)) (= x (Poly%lib!spec.simple_log.SimpleLog.Config. (%Poly%lib!spec.simple_log.SimpleLog.Config. x)))) :pattern ((has_type x (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!spec.simple_log.SimpleLog.Config. lib!spec.simple_log.SimpleLog.Config./initialize) (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&)) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Config. lib!spec.simple_log.SimpleLog.Config./initialize) (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.simple_log.SimpleLog.State.)) (! (=> (has_type (Poly%lib!spec.simple_log.SimpleLog.State. _0!) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.Config. (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&))) :pattern ((has_type (Poly%lib!spec.simple_log.SimpleLog.Config. (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params _0!)) (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&))) )))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Config.)) (! (= (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 x) (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Config. x))) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Config. x)) (has_type x (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&))) )))
(define-fun is-lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params_ ((c lib!spec.simple_log.SimpleLog.Config.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params) c))
(assert (forall ((x lib!spec.simple_log.SimpleLog.Config.)) (! (=> (is-lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 x))) (height (Poly%lib!spec.simple_log.SimpleLog.Config. x)))) :pattern ((height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!spec.simple_log.SimpleLog.Config./dummy_to_use_type_params/0 x)))) )))
(assert (forall ((x lib!spec.linearization.RefinementProof.)) (! (= x (%Poly%lib!spec.linearization.RefinementProof. (Poly%lib!spec.linearization.RefinementProof. x))) :pattern ((Poly%lib!spec.linearization.RefinementProof. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.linearization.RefinementProof.) (= x (Poly%lib!spec.linearization.RefinementProof. (%Poly%lib!spec.linearization.RefinementProof. x)))) :pattern ((has_type x TYPE%lib!spec.linearization.RefinementProof.)) )))
(assert (forall ((x lib!spec.linearization.RefinementProof.)) (! (has_type (Poly%lib!spec.linearization.RefinementProof. x) TYPE%lib!spec.linearization.RefinementProof.) :pattern ((has_type (Poly%lib!spec.linearization.RefinementProof. x) TYPE%lib!spec.linearization.RefinementProof.)) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= x (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. x))) :pattern ((Poly%lib!spec.simple_log.ReadReq. x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (= x (Poly%lib!spec.simple_log.ReadReq. (%Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((R&. Dcr) (R& Type) (_op! Poly)) (! (=> (has_type _op! R&) (has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Init _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) :pattern ((has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Init _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Init/op x) (lib!spec.simple_log.ReadReq./Init/?op x)) :pattern ((lib!spec.simple_log.ReadReq./Init/op x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (has_type (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. x)) R&)) :pattern ((lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((R&. Dcr) (R& Type) (_version! Int) (_op! Poly)) (! (=> (and (<= 0 _version!) (has_type _op! R&)) (has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Req _version! _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) :pattern ((has_type (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Req _version! _op!)) (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Req/version x) (lib!spec.simple_log.ReadReq./Req/?version x)) :pattern ((lib!spec.simple_log.ReadReq./Req/version x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (<= 0 (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (= (lib!spec.simple_log.ReadReq./Req/op x) (lib!spec.simple_log.ReadReq./Req/?op x)) :pattern ((lib!spec.simple_log.ReadReq./Req/op x)) )))
(assert (forall ((R&. Dcr) (R& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (has_type (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. x)) R&)) :pattern ((lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. x)) (has_type x (TYPE%lib!spec.simple_log.ReadReq. R&. R&))) )))
(define-fun is-lib!spec.simple_log.ReadReq./Init_ ((c lib!spec.simple_log.ReadReq.)) Bool ((_ is lib!spec.simple_log.ReadReq./Init) c))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (=> (is-lib!spec.simple_log.ReadReq./Init_ x) (height_lt (height (lib!spec.simple_log.ReadReq./Init/op x)) (height (Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((height (lib!spec.simple_log.ReadReq./Init/op x))) )))
(define-fun is-lib!spec.simple_log.ReadReq./Req_ ((c lib!spec.simple_log.ReadReq.)) Bool ((_ is lib!spec.simple_log.ReadReq./Req) c))
(assert (forall ((x lib!spec.simple_log.ReadReq.)) (! (=> (is-lib!spec.simple_log.ReadReq./Req_ x) (height_lt (height (lib!spec.simple_log.ReadReq./Req/op x)) (height (Poly%lib!spec.simple_log.ReadReq. x)))) :pattern ((height (lib!spec.simple_log.ReadReq./Req/op x))) )))
(assert (forall ((x lib!spec.simple_log.UpdateResp.)) (! (= x (%Poly%lib!spec.simple_log.UpdateResp. (Poly%lib!spec.simple_log.UpdateResp. x))) :pattern ((Poly%lib!spec.simple_log.UpdateResp. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.simple_log.UpdateResp.) (= x (Poly%lib!spec.simple_log.UpdateResp. (%Poly%lib!spec.simple_log.UpdateResp. x)))) :pattern ((has_type x TYPE%lib!spec.simple_log.UpdateResp.)) )))
(assert (forall ((_0! Int)) (! (=> (<= 0 _0!) (has_type (Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp./UpdateResp _0!)) TYPE%lib!spec.simple_log.UpdateResp.)) :pattern ((has_type (Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp./UpdateResp _0!)) TYPE%lib!spec.simple_log.UpdateResp.)) )))
(assert (forall ((x lib!spec.simple_log.UpdateResp.)) (! (= (lib!spec.simple_log.UpdateResp./UpdateResp/0 x) (lib!spec.simple_log.UpdateResp./UpdateResp/?0 x)) :pattern ((lib!spec.simple_log.UpdateResp./UpdateResp/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!spec.simple_log.UpdateResp.) (<= 0 (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. x)))) :pattern ((lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. x)) (has_type x TYPE%lib!spec.simple_log.UpdateResp.)) )))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (= x (%Poly%lib!AsynchronousSingleton.State. (Poly%lib!AsynchronousSingleton.State. x))) :pattern ((Poly%lib!AsynchronousSingleton.State. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (= x (Poly%lib!AsynchronousSingleton.State. (%Poly%lib!AsynchronousSingleton.State. x)))) :pattern ((has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_state! Poly) (_reqs! Poly) (_resps! Poly)) (! (=> (and (has_type _state! (proj%lib!Dispatch./View DT&. DT&)) (has_type _reqs! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!InputOperation. DT&. DT&))) (has_type _resps! (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&)))) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.State./State _state! _reqs! _resps!)) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((has_type (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.State./State _state! _reqs! _resps!)) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (= (lib!AsynchronousSingleton.State./State/state x) (lib!AsynchronousSingleton.State./State/?state x)) :pattern ((lib!AsynchronousSingleton.State./State/state x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. x)) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. x)) (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (= (lib!AsynchronousSingleton.State./State/reqs x) (lib!AsynchronousSingleton.State./State/?reqs x)) :pattern ((lib!AsynchronousSingleton.State./State/reqs x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!InputOperation. DT&. DT&)))) :pattern ((lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. x)) (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (= (lib!AsynchronousSingleton.State./State/resps x) (lib!AsynchronousSingleton.State./State/?resps x)) :pattern ((lib!AsynchronousSingleton.State./State/resps x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&)))) :pattern ((lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. x)) (has_type x (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) )))
(define-fun is-lib!AsynchronousSingleton.State./State_ ((c lib!AsynchronousSingleton.State.)) Bool ((_ is lib!AsynchronousSingleton.State./State) c))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (=> (is-lib!AsynchronousSingleton.State./State_ x) (height_lt (height (lib!AsynchronousSingleton.State./State/reqs x)) (height (Poly%lib!AsynchronousSingleton.State. x)))) :pattern ((height (lib!AsynchronousSingleton.State./State/reqs x))) )))
(assert (forall ((x lib!AsynchronousSingleton.State.)) (! (=> (is-lib!AsynchronousSingleton.State./State_ x) (height_lt (height (lib!AsynchronousSingleton.State./State/resps x)) (height (Poly%lib!AsynchronousSingleton.State. x)))) :pattern ((height (lib!AsynchronousSingleton.State./State/resps x))) )))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (= x (%Poly%lib!AsynchronousSingleton.Step. (Poly%lib!AsynchronousSingleton.Step. x))) :pattern ((Poly%lib!AsynchronousSingleton.Step. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&)) (= x (Poly%lib!AsynchronousSingleton.Step. (%Poly%lib!AsynchronousSingleton.Step. x)))) :pattern ((has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! lib!InputOperation.) (_2! lib!OutputOperation.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!InputOperation. _1!) (TYPE%lib!InputOperation. DT&. DT&)) (has_type (Poly%lib!OutputOperation. _2!) (TYPE%lib!OutputOperation. DT&. DT&))) (has_type (Poly%lib!AsynchronousSingleton.Step. (lib!AsynchronousSingleton.Step./internal_next _0! _1! _2!)) (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!AsynchronousSingleton.Step. (lib!AsynchronousSingleton.Step./internal_next _0! _1! _2!)) (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (= (lib!AsynchronousSingleton.Step./internal_next/0 x) (lib!AsynchronousSingleton.Step./internal_next/?0 x)) :pattern ((lib!AsynchronousSingleton.Step./internal_next/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&)) (<= 0 (lib!AsynchronousSingleton.Step./internal_next/0 (%Poly%lib!AsynchronousSingleton.Step. x)))) :pattern ((lib!AsynchronousSingleton.Step./internal_next/0 (%Poly%lib!AsynchronousSingleton.Step. x)) (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (= (lib!AsynchronousSingleton.Step./internal_next/1 x) (lib!AsynchronousSingleton.Step./internal_next/?1 x)) :pattern ((lib!AsynchronousSingleton.Step./internal_next/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!AsynchronousSingleton.Step./internal_next/1 (%Poly%lib!AsynchronousSingleton.Step. x))) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((lib!AsynchronousSingleton.Step./internal_next/1 (%Poly%lib!AsynchronousSingleton.Step. x)) (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (= (lib!AsynchronousSingleton.Step./internal_next/2 x) (lib!AsynchronousSingleton.Step./internal_next/?2 x)) :pattern ((lib!AsynchronousSingleton.Step./internal_next/2 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!AsynchronousSingleton.Step./internal_next/2 (%Poly%lib!AsynchronousSingleton.Step. x))) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((lib!AsynchronousSingleton.Step./internal_next/2 (%Poly%lib!AsynchronousSingleton.Step. x)) (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!AsynchronousSingleton.Step. lib!AsynchronousSingleton.Step./no_op) (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&)) :pattern ((has_type (Poly%lib!AsynchronousSingleton.Step. lib!AsynchronousSingleton.Step./no_op) (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! lib!InputOperation.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!InputOperation. _1!) (TYPE%lib!InputOperation. DT&. DT&))) (has_type (Poly%lib!AsynchronousSingleton.Step. (lib!AsynchronousSingleton.Step./start _0! _1!)) (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!AsynchronousSingleton.Step. (lib!AsynchronousSingleton.Step./start _0! _1!)) (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (= (lib!AsynchronousSingleton.Step./start/0 x) (lib!AsynchronousSingleton.Step./start/?0 x)) :pattern ((lib!AsynchronousSingleton.Step./start/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&)) (<= 0 (lib!AsynchronousSingleton.Step./start/0 (%Poly%lib!AsynchronousSingleton.Step. x)))) :pattern ((lib!AsynchronousSingleton.Step./start/0 (%Poly%lib!AsynchronousSingleton.Step. x)) (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (= (lib!AsynchronousSingleton.Step./start/1 x) (lib!AsynchronousSingleton.Step./start/?1 x)) :pattern ((lib!AsynchronousSingleton.Step./start/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!AsynchronousSingleton.Step./start/1 (%Poly%lib!AsynchronousSingleton.Step. x))) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((lib!AsynchronousSingleton.Step./start/1 (%Poly%lib!AsynchronousSingleton.Step. x)) (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! lib!OutputOperation.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!OutputOperation. _1!) (TYPE%lib!OutputOperation. DT&. DT&))) (has_type (Poly%lib!AsynchronousSingleton.Step. (lib!AsynchronousSingleton.Step./end _0! _1!)) (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!AsynchronousSingleton.Step. (lib!AsynchronousSingleton.Step./end _0! _1!)) (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (= (lib!AsynchronousSingleton.Step./end/0 x) (lib!AsynchronousSingleton.Step./end/?0 x)) :pattern ((lib!AsynchronousSingleton.Step./end/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&)) (<= 0 (lib!AsynchronousSingleton.Step./end/0 (%Poly%lib!AsynchronousSingleton.Step. x)))) :pattern ((lib!AsynchronousSingleton.Step./end/0 (%Poly%lib!AsynchronousSingleton.Step. x)) (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (= (lib!AsynchronousSingleton.Step./end/1 x) (lib!AsynchronousSingleton.Step./end/?1 x)) :pattern ((lib!AsynchronousSingleton.Step./end/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!AsynchronousSingleton.Step./end/1 (%Poly%lib!AsynchronousSingleton.Step. x))) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((lib!AsynchronousSingleton.Step./end/1 (%Poly%lib!AsynchronousSingleton.Step. x)) (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!AsynchronousSingleton.State.)) (! (=> (has_type (Poly%lib!AsynchronousSingleton.State. _0!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.Step. (lib!AsynchronousSingleton.Step./dummy_to_use_type_params _0!)) (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) :pattern ((has_type (Poly%lib!AsynchronousSingleton.Step. (lib!AsynchronousSingleton.Step./dummy_to_use_type_params _0!)) (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (= (lib!AsynchronousSingleton.Step./dummy_to_use_type_params/0 x) (lib!AsynchronousSingleton.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!AsynchronousSingleton.Step./dummy_to_use_type_params/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.Step./dummy_to_use_type_params/0 (%Poly%lib!AsynchronousSingleton.Step. x))) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!AsynchronousSingleton.Step./dummy_to_use_type_params/0 (%Poly%lib!AsynchronousSingleton.Step. x)) (has_type x (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&))) )))
(define-fun is-lib!AsynchronousSingleton.Step./internal_next_ ((c lib!AsynchronousSingleton.Step.)) Bool ((_ is lib!AsynchronousSingleton.Step./internal_next) c))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (=> (is-lib!AsynchronousSingleton.Step./internal_next_ x) (height_lt (height (Poly%lib!InputOperation. (lib!AsynchronousSingleton.Step./internal_next/1 x))) (height (Poly%lib!AsynchronousSingleton.Step. x)))) :pattern ((height (Poly%lib!InputOperation. (lib!AsynchronousSingleton.Step./internal_next/1 x)))) )))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (=> (is-lib!AsynchronousSingleton.Step./internal_next_ x) (height_lt (height (Poly%lib!OutputOperation. (lib!AsynchronousSingleton.Step./internal_next/2 x))) (height (Poly%lib!AsynchronousSingleton.Step. x)))) :pattern ((height (Poly%lib!OutputOperation. (lib!AsynchronousSingleton.Step./internal_next/2 x)))) )))
(define-fun is-lib!AsynchronousSingleton.Step./start_ ((c lib!AsynchronousSingleton.Step.)) Bool ((_ is lib!AsynchronousSingleton.Step./start) c))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (=> (is-lib!AsynchronousSingleton.Step./start_ x) (height_lt (height (Poly%lib!InputOperation. (lib!AsynchronousSingleton.Step./start/1 x))) (height (Poly%lib!AsynchronousSingleton.Step. x)))) :pattern ((height (Poly%lib!InputOperation. (lib!AsynchronousSingleton.Step./start/1 x)))) )))
(define-fun is-lib!AsynchronousSingleton.Step./end_ ((c lib!AsynchronousSingleton.Step.)) Bool ((_ is lib!AsynchronousSingleton.Step./end) c))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (=> (is-lib!AsynchronousSingleton.Step./end_ x) (height_lt (height (Poly%lib!OutputOperation. (lib!AsynchronousSingleton.Step./end/1 x))) (height (Poly%lib!AsynchronousSingleton.Step. x)))) :pattern ((height (Poly%lib!OutputOperation. (lib!AsynchronousSingleton.Step./end/1 x)))) )))
(define-fun is-lib!AsynchronousSingleton.Step./dummy_to_use_type_params_ ((c lib!AsynchronousSingleton.Step.)) Bool ((_ is lib!AsynchronousSingleton.Step./dummy_to_use_type_params) c))
(assert (forall ((x lib!AsynchronousSingleton.Step.)) (! (=> (is-lib!AsynchronousSingleton.Step./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.Step./dummy_to_use_type_params/0 x))) (height (Poly%lib!AsynchronousSingleton.Step. x)))) :pattern ((height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.Step./dummy_to_use_type_params/0 x)))) )))
(assert (forall ((x lib!AsynchronousSingleton.Config.)) (! (= x (%Poly%lib!AsynchronousSingleton.Config. (Poly%lib!AsynchronousSingleton.Config. x))) :pattern ((Poly%lib!AsynchronousSingleton.Config. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.Config. DT&. DT&)) (= x (Poly%lib!AsynchronousSingleton.Config. (%Poly%lib!AsynchronousSingleton.Config. x)))) :pattern ((has_type x (TYPE%lib!AsynchronousSingleton.Config. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!AsynchronousSingleton.Config. lib!AsynchronousSingleton.Config./initialize) (TYPE%lib!AsynchronousSingleton.Config. DT&. DT&)) :pattern ((has_type (Poly%lib!AsynchronousSingleton.Config. lib!AsynchronousSingleton.Config./initialize) (TYPE%lib!AsynchronousSingleton.Config. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!AsynchronousSingleton.State.)) (! (=> (has_type (Poly%lib!AsynchronousSingleton.State. _0!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.Config. (lib!AsynchronousSingleton.Config./dummy_to_use_type_params _0!)) (TYPE%lib!AsynchronousSingleton.Config. DT&. DT&))) :pattern ((has_type (Poly%lib!AsynchronousSingleton.Config. (lib!AsynchronousSingleton.Config./dummy_to_use_type_params _0!)) (TYPE%lib!AsynchronousSingleton.Config. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingleton.Config.)) (! (= (lib!AsynchronousSingleton.Config./dummy_to_use_type_params/0 x) (lib!AsynchronousSingleton.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!AsynchronousSingleton.Config./dummy_to_use_type_params/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingleton.Config. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.Config./dummy_to_use_type_params/0 (%Poly%lib!AsynchronousSingleton.Config. x))) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!AsynchronousSingleton.Config./dummy_to_use_type_params/0 (%Poly%lib!AsynchronousSingleton.Config. x)) (has_type x (TYPE%lib!AsynchronousSingleton.Config. DT&. DT&))) )))
(define-fun is-lib!AsynchronousSingleton.Config./dummy_to_use_type_params_ ((c lib!AsynchronousSingleton.Config.)) Bool ((_ is lib!AsynchronousSingleton.Config./dummy_to_use_type_params) c))
(assert (forall ((x lib!AsynchronousSingleton.Config.)) (! (=> (is-lib!AsynchronousSingleton.Config./dummy_to_use_type_params_ x) (height_lt (height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.Config./dummy_to_use_type_params/0 x))) (height (Poly%lib!AsynchronousSingleton.Config. x)))) :pattern ((height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingleton.Config./dummy_to_use_type_params/0 x)))) )))
(assert (forall ((x lib!InputOperation.)) (! (= x (%Poly%lib!InputOperation. (Poly%lib!InputOperation. x))) :pattern ((Poly%lib!InputOperation. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (= x (Poly%lib!InputOperation. (%Poly%lib!InputOperation. x)))) :pattern ((has_type x (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./ReadOperation DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!InputOperation./Read _0!)) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!InputOperation. (lib!InputOperation./Read _0!)) (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((x lib!InputOperation.)) (! (= (lib!InputOperation./Read/0 x) (lib!InputOperation./Read/?0 x)) :pattern ((lib!InputOperation./Read/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!InputOperation./Read/0 (%Poly%lib!InputOperation. x)) (proj%lib!Dispatch./ReadOperation DT&. DT&))) :pattern ((lib!InputOperation./Read/0 (%Poly%lib!InputOperation. x)) (has_type x (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./WriteOperation DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!InputOperation./Write _0!)) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!InputOperation. (lib!InputOperation./Write _0!)) (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((x lib!InputOperation.)) (! (= (lib!InputOperation./Write/0 x) (lib!InputOperation./Write/?0 x)) :pattern ((lib!InputOperation./Write/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!InputOperation. DT&. DT&)) (has_type (lib!InputOperation./Write/0 (%Poly%lib!InputOperation. x)) (proj%lib!Dispatch./WriteOperation DT&. DT&))) :pattern ((lib!InputOperation./Write/0 (%Poly%lib!InputOperation. x)) (has_type x (TYPE%lib!InputOperation. DT&. DT&))) )))
(assert (forall ((x lib!OutputOperation.)) (! (= x (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. x))) :pattern ((Poly%lib!OutputOperation. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (= x (Poly%lib!OutputOperation. (%Poly%lib!OutputOperation. x)))) :pattern ((has_type x (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./Response DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Read _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Read _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((x lib!OutputOperation.)) (! (= (lib!OutputOperation./Read/0 x) (lib!OutputOperation./Read/?0 x)) :pattern ((lib!OutputOperation./Read/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!OutputOperation./Read/0 (%Poly%lib!OutputOperation. x)) (has_type x (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Poly)) (! (=> (has_type _0! (proj%lib!Dispatch./Response DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Write _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((has_type (Poly%lib!OutputOperation. (lib!OutputOperation./Write _0!)) (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((x lib!OutputOperation.)) (! (= (lib!OutputOperation./Write/0 x) (lib!OutputOperation./Write/?0 x)) :pattern ((lib!OutputOperation./Write/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!OutputOperation. DT&. DT&)) (has_type (lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. x)) (proj%lib!Dispatch./Response DT&. DT&))) :pattern ((lib!OutputOperation./Write/0 (%Poly%lib!OutputOperation. x)) (has_type x (TYPE%lib!OutputOperation. DT&. DT&))) )))
(assert (forall ((x lib!AsyncLabel.)) (! (= x (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. x))) :pattern ((Poly%lib!AsyncLabel. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (= x (Poly%lib!AsyncLabel. (%Poly%lib!AsyncLabel. x)))) :pattern ((has_type x (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type)) (! (has_type (Poly%lib!AsyncLabel. lib!AsyncLabel./Internal) (TYPE%lib!AsyncLabel. DT&. DT&)) :pattern ((has_type (Poly%lib!AsyncLabel. lib!AsyncLabel./Internal) (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! lib!InputOperation.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!InputOperation. _1!) (TYPE%lib!InputOperation. DT&. DT&))) (has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./Start _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./Start _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./Start/0 x) (lib!AsyncLabel./Start/?0 x)) :pattern ((lib!AsyncLabel./Start/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (<= 0 (lib!AsyncLabel./Start/0 (%Poly%lib!AsyncLabel. x)))) :pattern ((lib!AsyncLabel./Start/0 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./Start/1 x) (lib!AsyncLabel./Start/?1 x)) :pattern ((lib!AsyncLabel./Start/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!InputOperation. (lib!AsyncLabel./Start/1 (%Poly%lib!AsyncLabel. x))) (TYPE%lib!InputOperation. DT&. DT&))) :pattern ((lib!AsyncLabel./Start/1 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! Int) (_1! lib!OutputOperation.)) (! (=> (and (<= 0 _0!) (has_type (Poly%lib!OutputOperation. _1!) (TYPE%lib!OutputOperation. DT&. DT&))) (has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./End _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((has_type (Poly%lib!AsyncLabel. (lib!AsyncLabel./End _0! _1!)) (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./End/0 x) (lib!AsyncLabel./End/?0 x)) :pattern ((lib!AsyncLabel./End/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (<= 0 (lib!AsyncLabel./End/0 (%Poly%lib!AsyncLabel. x)))) :pattern ((lib!AsyncLabel./End/0 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(assert (forall ((x lib!AsyncLabel.)) (! (= (lib!AsyncLabel./End/1 x) (lib!AsyncLabel./End/?1 x)) :pattern ((lib!AsyncLabel./End/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!OutputOperation. (lib!AsyncLabel./End/1 (%Poly%lib!AsyncLabel. x))) (TYPE%lib!OutputOperation. DT&. DT&))) :pattern ((lib!AsyncLabel./End/1 (%Poly%lib!AsyncLabel. x)) (has_type x (TYPE%lib!AsyncLabel. DT&. DT&))) )))
(define-fun is-lib!AsyncLabel./Start_ ((c lib!AsyncLabel.)) Bool ((_ is lib!AsyncLabel./Start) c))
(assert (forall ((x lib!AsyncLabel.)) (! (=> (is-lib!AsyncLabel./Start_ x) (height_lt (height (Poly%lib!InputOperation. (lib!AsyncLabel./Start/1 x))) (height (Poly%lib!AsyncLabel. x)))) :pattern ((height (Poly%lib!InputOperation. (lib!AsyncLabel./Start/1 x)))) )))
(define-fun is-lib!AsyncLabel./End_ ((c lib!AsyncLabel.)) Bool ((_ is lib!AsyncLabel./End) c))
(assert (forall ((x lib!AsyncLabel.)) (! (=> (is-lib!AsyncLabel./End_ x) (height_lt (height (Poly%lib!OutputOperation. (lib!AsyncLabel./End/1 x))) (height (Poly%lib!AsyncLabel. x)))) :pattern ((height (Poly%lib!OutputOperation. (lib!AsyncLabel./End/1 x)))) )))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (= x (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. x))) :pattern ((Poly%lib!SimpleLogBehavior. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (= x (Poly%lib!SimpleLogBehavior. (%Poly%lib!SimpleLogBehavior. x)))) :pattern ((has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.simple_log.SimpleLog.State.) (_1! lib!AsyncLabel.) (_2! lib!SimpleLogBehavior.)) (! (=> (and (has_type (Poly%lib!spec.simple_log.SimpleLog.State. _0!) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. _1!) (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!SimpleLogBehavior. _2!) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) (has_type (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped _0! _1! _2!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) :pattern ((has_type (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped _0! _1! _2!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) )))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (= (lib!SimpleLogBehavior./Stepped/0 x) (lib!SimpleLogBehavior./Stepped/?0 x)) :pattern ((lib!SimpleLogBehavior./Stepped/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. x))) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. x)) (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&))) )))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (= (lib!SimpleLogBehavior./Stepped/1 x) (lib!SimpleLogBehavior./Stepped/?1 x)) :pattern ((lib!SimpleLogBehavior./Stepped/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. x))) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. x)) (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&))) )))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (= (lib!SimpleLogBehavior./Stepped/2 x) (lib!SimpleLogBehavior./Stepped/?2 x)) :pattern ((lib!SimpleLogBehavior./Stepped/2 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. x))) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) :pattern ((lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. x)) (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!spec.simple_log.SimpleLog.State.)) (! (=> (has_type (Poly%lib!spec.simple_log.SimpleLog.State. _0!) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Inited _0!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) :pattern ((has_type (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Inited _0!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) )))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (= (lib!SimpleLogBehavior./Inited/0 x) (lib!SimpleLogBehavior./Inited/?0 x)) :pattern ((lib!SimpleLogBehavior./Inited/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Inited/0 (%Poly%lib!SimpleLogBehavior. x))) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!SimpleLogBehavior./Inited/0 (%Poly%lib!SimpleLogBehavior. x)) (has_type x (TYPE%lib!SimpleLogBehavior. DT&. DT&))) )))
(define-fun is-lib!SimpleLogBehavior./Stepped_ ((c lib!SimpleLogBehavior.)) Bool ((_ is lib!SimpleLogBehavior./Stepped) c))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (=> (is-lib!SimpleLogBehavior./Stepped_ x) (height_lt (height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Stepped/0 x))) (height (Poly%lib!SimpleLogBehavior. x)))) :pattern ((height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Stepped/0 x)))) )))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (=> (is-lib!SimpleLogBehavior./Stepped_ x) (height_lt (height (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 x))) (height (Poly%lib!SimpleLogBehavior. x)))) :pattern ((height (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 x)))) )))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (=> (is-lib!SimpleLogBehavior./Stepped_ x) (height_lt (height (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped/2 x))) (height (Poly%lib!SimpleLogBehavior. x)))) :pattern ((height (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped/2 x)))) )))
(define-fun is-lib!SimpleLogBehavior./Inited_ ((c lib!SimpleLogBehavior.)) Bool ((_ is lib!SimpleLogBehavior./Inited) c))
(assert (forall ((x lib!SimpleLogBehavior.)) (! (=> (is-lib!SimpleLogBehavior./Inited_ x) (height_lt (height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Inited/0 x))) (height (Poly%lib!SimpleLogBehavior. x)))) :pattern ((height (Poly%lib!spec.simple_log.SimpleLog.State. (lib!SimpleLogBehavior./Inited/0 x)))) )))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (= x (%Poly%lib!AsynchronousSingletonBehavior. (Poly%lib!AsynchronousSingletonBehavior. x))) :pattern ((Poly%lib!AsynchronousSingletonBehavior. x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (= x (Poly%lib!AsynchronousSingletonBehavior. (%Poly%lib!AsynchronousSingletonBehavior. x)))) :pattern ((has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!AsynchronousSingleton.State.) (_1! lib!AsyncLabel.) (_2! lib!AsynchronousSingletonBehavior.)) (! (=> (and (has_type (Poly%lib!AsynchronousSingleton.State. _0!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. _1!) (TYPE%lib!AsyncLabel. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingletonBehavior. _2!) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) (has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped _0! _1! _2!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) :pattern ((has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped _0! _1! _2!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (= (lib!AsynchronousSingletonBehavior./Stepped/0 x) (lib!AsynchronousSingletonBehavior./Stepped/?0 x)) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Stepped/0 (%Poly%lib!AsynchronousSingletonBehavior. x))) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/0 (%Poly%lib!AsynchronousSingletonBehavior. x)) (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (= (lib!AsynchronousSingletonBehavior./Stepped/1 x) (lib!AsynchronousSingletonBehavior./Stepped/?1 x)) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/1 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. x))) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. x)) (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (= (lib!AsynchronousSingletonBehavior./Stepped/2 x) (lib!AsynchronousSingletonBehavior./Stepped/?2 x)) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/2 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. x))) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) :pattern ((lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. x)) (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) )))
(assert (forall ((DT&. Dcr) (DT& Type) (_0! lib!AsynchronousSingleton.State.)) (! (=> (has_type (Poly%lib!AsynchronousSingleton.State. _0!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Inited _0!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) :pattern ((has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Inited _0!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) )))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (= (lib!AsynchronousSingletonBehavior./Inited/0 x) (lib!AsynchronousSingletonBehavior./Inited/?0 x)) :pattern ((lib!AsynchronousSingletonBehavior./Inited/0 x)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Inited/0 (%Poly%lib!AsynchronousSingletonBehavior. x))) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!AsynchronousSingletonBehavior./Inited/0 (%Poly%lib!AsynchronousSingletonBehavior. x)) (has_type x (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) )))
(define-fun is-lib!AsynchronousSingletonBehavior./Stepped_ ((c lib!AsynchronousSingletonBehavior.)) Bool ((_ is lib!AsynchronousSingletonBehavior./Stepped) c))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (=> (is-lib!AsynchronousSingletonBehavior./Stepped_ x) (height_lt (height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Stepped/0 x))) (height (Poly%lib!AsynchronousSingletonBehavior. x)))) :pattern ((height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Stepped/0 x)))) )))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (=> (is-lib!AsynchronousSingletonBehavior./Stepped_ x) (height_lt (height (Poly%lib!AsyncLabel. (lib!AsynchronousSingletonBehavior./Stepped/1 x))) (height (Poly%lib!AsynchronousSingletonBehavior. x)))) :pattern ((height (Poly%lib!AsyncLabel. (lib!AsynchronousSingletonBehavior./Stepped/1 x)))) )))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (=> (is-lib!AsynchronousSingletonBehavior./Stepped_ x) (height_lt (height (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped/2 x))) (height (Poly%lib!AsynchronousSingletonBehavior. x)))) :pattern ((height (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped/2 x)))) )))
(define-fun is-lib!AsynchronousSingletonBehavior./Inited_ ((c lib!AsynchronousSingletonBehavior.)) Bool ((_ is lib!AsynchronousSingletonBehavior./Inited) c))
(assert (forall ((x lib!AsynchronousSingletonBehavior.)) (! (=> (is-lib!AsynchronousSingletonBehavior./Inited_ x) (height_lt (height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Inited/0 x))) (height (Poly%lib!AsynchronousSingletonBehavior. x)))) :pattern ((height (Poly%lib!AsynchronousSingleton.State. (lib!AsynchronousSingletonBehavior./Inited/0 x)))) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%lib!Dispatch. (Dcr Type) Bool)
(set-info :comment ";; Function-Decl vstd::layout::size_of")
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::filter")
(declare-fun vstd!set.impl&%0.filter.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::disjoint")
(declare-fun vstd!set.impl&%0.disjoint.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::is_empty")
(declare-fun vstd!set_lib.impl&%0.is_empty.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::state_machine_internal::impl&%1::update_at_index")
(declare-fun vstd!state_machine_internal.impl&%1.update_at_index.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::initialize")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.initialize.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::readonly_start")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::readonly_read_version")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::readonly_finish")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::update_start")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_start.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::update_add_op_to_log")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::update_incr_version")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::update_finish")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.update_finish.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::no_op")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.no_op.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::next_by")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.next_by.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::next")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.next.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::init_by")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.init_by.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::init")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::simple_log::SimpleLog::State::nrstate_at_version")
(declare-fun lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::linearization::future_rid_ok")
(declare-fun lib!spec.linearization.future_rid_ok.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::linearization::future_points_ok")
(declare-fun lib!spec.linearization.future_points_ok.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::linearization::readonly_requests_valid")
(declare-fun lib!spec.linearization.readonly_requests_valid.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::linearization::readonly_request_is_valid")
(declare-fun lib!spec.linearization.readonly_request_is_valid.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::linearization::readonly_response_is_valid")
(declare-fun lib!spec.linearization.readonly_response_is_valid.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::linearization::update_response_is_valid")
(declare-fun lib!spec.linearization.update_response_is_valid.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::linearization::update_response_with_version")
(declare-fun lib!spec.linearization.update_response_with_version.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::linearization::state_refinement_relation_basic")
(declare-fun lib!spec.linearization.state_refinement_relation_basic.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::linearization::state_refinement_relation")
(declare-fun lib!spec.linearization.state_refinement_relation.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::linearization::simple_log_state_equiv_inc_version")
(declare-fun lib!spec.linearization.simple_log_state_equiv_inc_version.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::linearization::recursion_invariant")
(declare-fun lib!spec.linearization.recursion_invariant.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::spec::linearization::all_reads_for")
(declare-fun lib!spec.linearization.all_reads_for.? (Dcr Type Poly Poly Poly) vstd!set.Set<nat.>.)
(set-info :comment ";; Function-Decl lib::spec::simple_log::ReadReq::arrow_version")
(declare-fun lib!spec.simple_log.impl&%0.arrow_version.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl lib::spec::simple_log::ReadReq::op")
(declare-fun lib!spec.simple_log.impl&%1.op.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::spec::simple_log::compute_nrstate_at_version")
(declare-fun lib!spec.simple_log.compute_nrstate_at_version.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!spec.simple_log.rec%compute_nrstate_at_version.? (Dcr Type Poly Poly Fuel) Poly)
(set-info :comment ";; Function-Decl lib::AsynchronousSingleton::State::initialize")
(declare-fun lib!AsynchronousSingleton.impl&%4.initialize.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingleton::State::internal_next")
(declare-fun lib!AsynchronousSingleton.impl&%4.internal_next.? (Dcr Type Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingleton::State::no_op")
(declare-fun lib!AsynchronousSingleton.impl&%4.no_op.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingleton::State::start")
(declare-fun lib!AsynchronousSingleton.impl&%4.start.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingleton::State::end")
(declare-fun lib!AsynchronousSingleton.impl&%4.end.? (Dcr Type Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingleton::State::next_by")
(declare-fun lib!AsynchronousSingleton.impl&%4.next_by.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingleton::State::next")
(declare-fun lib!AsynchronousSingleton.impl&%4.next.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingleton::State::init_by")
(declare-fun lib!AsynchronousSingleton.impl&%4.init_by.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingleton::State::init")
(declare-fun lib!AsynchronousSingleton.impl&%4.init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::Dispatch::init_spec")
(declare-fun lib!Dispatch.init_spec.? (Dcr Type) Poly)
(declare-fun lib!Dispatch.init_spec%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::dispatch_spec")
(declare-fun lib!Dispatch.dispatch_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::Dispatch::dispatch_mut_spec")
(declare-fun lib!Dispatch.dispatch_mut_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!Dispatch.dispatch_mut_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::InputOperation::is_Read")
(declare-fun lib!impl&%1.is_Read.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::InputOperation::is_Write")
(declare-fun lib!impl&%1.is_Write.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsyncLabel::is_Internal")
(declare-fun lib!impl&%5.is_Internal.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::is_Stepped")
(declare-fun lib!impl&%7.is_Stepped.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::get_Stepped_0")
(declare-fun lib!impl&%7.get_Stepped_0.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::get_Stepped_1")
(declare-fun lib!impl&%7.get_Stepped_1.? (Dcr Type Poly) lib!AsyncLabel.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::get_Stepped_2")
(declare-fun lib!impl&%7.get_Stepped_2.? (Dcr Type Poly) lib!SimpleLogBehavior.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::is_Inited")
(declare-fun lib!impl&%7.is_Inited.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::get_last")
(declare-fun lib!impl&%9.get_last.? (Dcr Type Poly) lib!spec.simple_log.SimpleLog.State.)
(set-info :comment ";; Function-Decl lib::SimpleLogBehavior::wf")
(declare-fun lib!impl&%9.wf.? (Dcr Type Poly) Bool)
(declare-fun lib!impl&%9.rec%wf.? (Dcr Type Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::is_Stepped")
(declare-fun lib!impl&%10.is_Stepped.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::get_Stepped_1")
(declare-fun lib!impl&%10.get_Stepped_1.? (Dcr Type Poly) lib!AsyncLabel.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::get_Stepped_2")
(declare-fun lib!impl&%10.get_Stepped_2.? (Dcr Type Poly) lib!AsynchronousSingletonBehavior.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::is_Inited")
(declare-fun lib!impl&%10.is_Inited.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::get_last")
(declare-fun lib!impl&%12.get_last.? (Dcr Type Poly) lib!AsynchronousSingleton.State.)
(set-info :comment ";; Function-Decl lib::AsynchronousSingletonBehavior::wf")
(declare-fun lib!impl&%12.wf.? (Dcr Type Poly) Bool)
(declare-fun lib!impl&%12.rec%wf.? (Dcr Type Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::behavior_equiv")
(declare-fun lib!behavior_equiv.? (Dcr Type Poly Poly) Bool)
(declare-fun lib!rec%behavior_equiv.? (Dcr Type Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Axioms lib::Dispatch::init_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!Dispatch.init_spec.? Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&)) :pattern ((lib!Dispatch.init_spec.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms lib::Dispatch::dispatch_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (ds! Poly) (op! Poly)) (! (=> (and (has_type ds! (proj%lib!Dispatch./View Self%&. Self%&)) (has_type op! (proj%lib!Dispatch./ReadOperation Self%&. Self%&))) (has_type (lib!Dispatch.dispatch_spec.? Self%&. Self%& ds! op!) (proj%lib!Dispatch./Response Self%&. Self%&))) :pattern ((lib!Dispatch.dispatch_spec.? Self%&. Self%& ds! op!)) )))
(set-info :comment ";; Function-Axioms lib::Dispatch::dispatch_mut_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (ds! Poly) (op! Poly)) (! (=> (and (has_type ds! (proj%lib!Dispatch./View Self%&. Self%&)) (has_type op! (proj%lib!Dispatch./WriteOperation Self%&. Self%&))) (has_type (lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!) (TYPE%tuple%2. (proj%%lib!Dispatch./View Self%&. Self%&) (proj%lib!Dispatch./View Self%&. Self%&) (proj%%lib!Dispatch./Response Self%&. Self%&) (proj%lib!Dispatch./Response Self%&. Self%&)))) :pattern ((lib!Dispatch.dispatch_mut_spec.? Self%&. Self%& ds! op!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%1 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%2 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::ReadReq::arrow_version")
(assert (fuel_bool_default fuel%lib!spec.simple_log.impl&%0.arrow_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.impl&%0.arrow_version.) (forall ((R&. Dcr) (R& Type) (self! Poly)) (! (= (lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!) (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. self!))) :pattern ((lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!)) ))))
(assert (forall ((R&. Dcr) (R& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (<= 0 (lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!))) :pattern ((lib!spec.simple_log.impl&%0.arrow_version.? R&. R& self!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::initialize")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.initialize.) (forall ((DT&. Dcr) (DT& Type) (post! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.initialize.? DT&. DT& post!) (let ((update_tmp_log$ (vstd!seq.Seq.empty.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) (let ((update_tmp_version$ 0)) (let ((update_tmp_readonly_reqs$ (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&))))) (let ((update_tmp_update_reqs$ (vstd!map.impl&%0.empty.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&)))) (let ((update_tmp_update_resps$ (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (vstd!map.impl&%0.empty.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp.)))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.initialize.? DT&. DT& post!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::init_by")
(define-fun is-lib!spec.simple_log.SimpleLog.Config./initialize_ ((c lib!spec.simple_log.SimpleLog.Config.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.init_by.) (forall ((DT&. Dcr) (DT& Type) (post! Poly) (step! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.init_by.? DT&. DT& post! step!) (and (is-lib!spec.simple_log.SimpleLog.Config./initialize_ (%Poly%lib!spec.simple_log.SimpleLog.Config. step!)) (lib!spec.simple_log.SimpleLog.impl&%4.initialize.? DT&. DT& post!))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.init_by.? DT&. DT& post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::init")
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.init.) (forall ((DT&. Dcr) (DT& Type) (post! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.init.? DT&. DT& post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.simple_log.SimpleLog.Config. DT&. DT&)) (lib!spec.simple_log.SimpleLog.impl&%4.init_by.? DT&. DT& post! step$)) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.init_by.? DT&. DT& post! step$)) ))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.init.? DT&. DT& post!)) ))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Axioms vstd::state_machine_internal::impl&%1::update_at_index")
(assert (fuel_bool_default fuel%vstd!state_machine_internal.impl&%1.update_at_index.))
(assert (=> (fuel_bool fuel%vstd!state_machine_internal.impl&%1.update_at_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!state_machine_internal.impl&%1.update_at_index.? K&. K& V&. V& self! k! v!) (vstd!map.impl&%0.insert.? K&. K& V&. V& self! k! v!)) :pattern ((vstd!state_machine_internal.impl&%1.update_at_index.? K&. K& V&. V& self! k! v!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type k! K&) (has_type v! V&)) (has_type (vstd!state_machine_internal.impl&%1.update_at_index.? K&. K& V&. V& self! k! v!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!state_machine_internal.impl&%1.update_at_index.? K&. K& V&. V& self! k! v!)) )))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::readonly_start")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (op! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.? DT&. DT& pre! post! label! rid! op!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./Start (%I rid!) (%Poly%lib!InputOperation. (Poly%lib!InputOperation. (lib!InputOperation./Read op!))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!)) (let ((update_tmp_readonly_reqs$1 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) update_tmp_readonly_reqs$ rid! (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Init op!))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$1) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.? DT&. DT& pre! post! label! rid! op!)) ))))
(set-info :comment ";; Function-Axioms lib::AsyncLabel::is_Internal")
(assert (fuel_bool_default fuel%lib!impl&%5.is_Internal.))
(define-fun is-lib!AsyncLabel./Internal_ ((c lib!AsyncLabel.)) Bool ((_ is lib!AsyncLabel./Internal) c))
(assert (=> (fuel_bool fuel%lib!impl&%5.is_Internal.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%5.is_Internal.? DT&. DT& self!) (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. self!))) :pattern ((lib!impl&%5.is_Internal.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::readonly_read_version")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.? DT&. DT& pre! post! label! rid!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!)))) (and (and (is-lib!spec.simple_log.ReadReq./Init_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) true)) (let ((op$ (ite (is-lib!spec.simple_log.ReadReq./Init_ tmp_for_match_0$) (let ((op$2 (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) op$2) (vstd!pervasive.arbitrary.? (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&))))) (let ((update_tmp_readonly_reqs$1 (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) update_tmp_readonly_reqs$ rid! (Poly%lib!spec.simple_log.ReadReq. (lib!spec.simple_log.ReadReq./Req (%I (I (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) op$))))) (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$1))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.? DT&. DT& pre! post! label! rid!)) ))))
(set-info :comment ";; Function-Specs lib::spec::simple_log::compute_nrstate_at_version")
(declare-fun req%lib!spec.simple_log.compute_nrstate_at_version. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (= (req%lib!spec.simple_log.compute_nrstate_at_version. DT&. DT& log! version!) (=> %%global_location_label%%4 (and (<= 0 (%I version!)) (<= (%I version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) log!))))) :pattern ((req%lib!spec.simple_log.compute_nrstate_at_version. DT&. DT& log! version!)) )))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::compute_nrstate_at_version")
(assert (fuel_bool_default fuel%lib!spec.simple_log.compute_nrstate_at_version.))
(declare-const fuel_nat%lib!spec.simple_log.compute_nrstate_at_version. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly) (fuel% Fuel)) (! (= (lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! fuel%) (lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! zero)) :pattern ((lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! fuel%)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&))) (has_type version! NAT)) (= (lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel%)) (ite (= (%I version!) 0) (lib!Dispatch.init_spec.? DT&. DT&) (tuple%2./tuple%2/0 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! (I (nClip (Sub (%I version!) 1))) fuel%) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) log! (I (Sub (%I version!) 1))))))))) :pattern ((lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.compute_nrstate_at_version.) (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type log! (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&))) (has_type version! NAT)) (= (lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& log! version!) (lib!spec.simple_log.rec%compute_nrstate_at_version.? DT&. DT& log! version! (succ fuel_nat%lib!spec.simple_log.compute_nrstate_at_version.)))) :pattern ((lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& log! version!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (log! Poly) (version! Poly)) (! (=> (and (has_type log! (TYPE%vstd!seq.Seq. (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&))) (has_type version! NAT)) (has_type (lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& log! version!) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& log! version!)) )))
(set-info :comment ";; Function-Specs lib::spec::simple_log::SimpleLog::State::nrstate_at_version")
(declare-fun req%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (version! Poly)) (! (= (req%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version. DT&. DT& self! version!) (=> %%global_location_label%%5 (and (<= 0 (%I version!)) (<= (%I version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. self!))))))) :pattern ((req%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version. DT&. DT& self! version!)) )))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::nrstate_at_version")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.) (forall ((DT&. Dcr) (DT& Type) (self! Poly) (version! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& self! version!) (lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. self!)) version!)) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& self! version!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (version! Poly)) (! (=> (and (has_type self! (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&)) (has_type version! NAT)) (has_type (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& self! version!) (proj%lib!Dispatch./View DT&. DT&))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& self! version!)) )))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::readonly_finish")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (version! Poly) (ret! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.? DT&. DT& pre! post! label! rid! version! ret!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./End (%I rid!) (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. (lib!OutputOperation./Read ret!))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!) (and (let ((tmp_for_match_0$ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!)))) (and (and (is-lib!spec.simple_log.ReadReq./Req_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (let ((current$ (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!spec.simple_log.ReadReq./Req_ tmp_for_match_0$) (let ((op$ (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (let ((current$ (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (Poly%lib!spec.simple_log.ReadReq. tmp_for_match_0$))))) (tuple%2./tuple%2 op$ (I current$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) $ NAT)))))) (let ((op$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((current$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (and (<= current$ (%I version!)) (<= (%I version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))))) (and (<= (%I version!) (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) (and (= ret! (lib!Dispatch.dispatch_spec.? DT&. DT& (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& pre! version!) op$)) (let ((update_tmp_readonly_reqs$ (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!))) (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$)))))))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.? DT&. DT& pre! post! label! rid! version! ret!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::update_start")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_start.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (op! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_start.? DT&. DT& pre! post! label! rid! op!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./Start (%I rid!) (%Poly%lib!InputOperation. (Poly%lib!InputOperation. (lib!InputOperation./Write op!))))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!)) (let ((update_tmp_update_reqs$1 (vstd!map.impl&%0.insert.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) update_tmp_update_reqs$ rid! op!))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$1) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_start.? DT&. DT& pre! post! label! rid! op!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::update_add_op_to_log")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.? DT&. DT& pre! post! label! rid!) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!) (let ((update_tmp_log$ (vstd!seq.Seq.push.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!)))) (let ((update_tmp_update_reqs$ (vstd!map.impl&%0.remove.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) rid!))) (let ((update_tmp_update_resps$ (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (vstd!map.impl&%0.insert.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid! (Poly%lib!spec.simple_log.UpdateResp. (lib!spec.simple_log.UpdateResp./UpdateResp (%I (I (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))))))))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.? DT&. DT& pre! post! label! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::update_incr_version")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (new_version! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.? DT&. DT& pre! post! label! new_version!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (and (<= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (%I new_version!)) (<= (%I new_version!) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))))) (let ((update_tmp_version$ (%I new_version!))) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$))))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.? DT&. DT& pre! post! label! new_version!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::update_finish")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.update_finish.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (ret! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.update_finish.? DT&. DT& pre! post! label! rid! ret!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./End (%I rid!) (%Poly%lib!OutputOperation. (Poly%lib!OutputOperation. (lib!OutputOperation./Write ret!))))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) rid!) (and (let ((uidx$ (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!))))) (and (let ((tmp%%$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (< uidx$ tmp%%$) (<= tmp%%$ (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))))) (and (= ret! (tuple%2./tuple%2/1 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& pre! (I uidx$)) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)) (I uidx$)))))) (let ((update_tmp_update_resps$ (%Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (vstd!map.impl&%0.remove.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!))) rid!)))) (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$))))) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.update_finish.? DT&. DT& pre! post! label! rid! ret!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::no_op")
(assert (fuel_bool_default fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.no_op.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.no_op.? DT&. DT& pre! post! label!) (let ((update_tmp_log$ (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_version$ (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_readonly_reqs$ (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_reqs$ (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (let ((update_tmp_update_resps$ (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_resps$) (and (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_update_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_readonly_reqs$) (and (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_version$) (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. post!)) update_tmp_log$)))))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.no_op.? DT&. DT& pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::next_by")
(define-fun is-lib!spec.simple_log.SimpleLog.Step./readonly_start_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./readonly_start) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./readonly_read_version_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./readonly_read_version) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./readonly_finish_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./readonly_finish) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./update_start_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./update_start) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./update_incr_version_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./update_incr_version) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./update_finish_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./update_finish) c))
(define-fun is-lib!spec.simple_log.SimpleLog.Step./no_op_ ((c lib!spec.simple_log.SimpleLog.Step.)) Bool ((_ is lib!spec.simple_log.SimpleLog.Step./no_op) c))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_by.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.next_by.? DT&. DT& pre! post! label! step!) (ite (is-lib!spec.simple_log.SimpleLog.Step./readonly_start_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((op$ (lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.? DT&. DT& pre! post! label! (I rid$) op$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./readonly_read_version_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.? DT&. DT& pre! post! label! (I rid$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./readonly_finish_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((version$ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((ret$ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.? DT&. DT& pre! post! label! (I rid$) (I version$) ret$)))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_start_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./update_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((op$ (lib!spec.simple_log.SimpleLog.Step./update_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_start.? DT&. DT& pre! post! label! (I rid$) op$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.? DT&. DT& pre! post! label! (I rid$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_incr_version_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((new_version$ (lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.? DT&. DT& pre! post! label! (I new_version$))) (ite (is-lib!spec.simple_log.SimpleLog.Step./update_finish_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (let ((rid$ (lib!spec.simple_log.SimpleLog.Step./update_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (let ((ret$ (lib!spec.simple_log.SimpleLog.Step./update_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)))) (lib!spec.simple_log.SimpleLog.impl&%4.update_finish.? DT&. DT& pre! post! label! (I rid$) ret$))) (and (is-lib!spec.simple_log.SimpleLog.Step./no_op_ (%Poly%lib!spec.simple_log.SimpleLog.Step. step!)) (lib!spec.simple_log.SimpleLog.impl&%4.no_op.? DT&. DT& pre! post! label!)))))))))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.next_by.? DT&. DT& pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::SimpleLog::State::next")
(assert (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.next.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!spec.simple_log.SimpleLog.impl&%4.next.? DT&. DT& pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)) (lib!spec.simple_log.SimpleLog.impl&%4.next_by.? DT&. DT& pre! post! label! step$)) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.next_by.? DT&. DT& pre! post! label! step$)) ))) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.next.? DT&. DT& pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::get_last")
(assert (fuel_bool_default fuel%lib!impl&%9.get_last.))
(assert (=> (fuel_bool fuel%lib!impl&%9.get_last.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%9.get_last.? DT&. DT& self!) (ite (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. self!)) (let ((post$ (lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. self!)))) (let ((op$ (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. self!)))) (let ((tail$ (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. self!)))) post$))) (let ((post$ (lib!SimpleLogBehavior./Inited/0 (%Poly%lib!SimpleLogBehavior. self!)))) post$))) :pattern ((lib!impl&%9.get_last.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!impl&%9.get_last.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::wf")
(assert (fuel_bool_default fuel%lib!impl&%9.wf.))
(declare-const fuel_nat%lib!impl&%9.wf. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (fuel% Fuel)) (! (= (lib!impl&%9.rec%wf.? DT&. DT& self! fuel%) (lib!impl&%9.rec%wf.? DT&. DT& self! zero)) :pattern ((lib!impl&%9.rec%wf.? DT&. DT& self! fuel%)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&))) (= (lib!impl&%9.rec%wf.? DT&. DT& self! (succ fuel%)) (ite (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. self!)) (let ((post$ (lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. self!)))) (let ((op$ (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. self!)))) (let ((tail$ (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. self!)))) (and (lib!impl&%9.rec%wf.? DT&. DT& (Poly%lib!SimpleLogBehavior. tail$) fuel%) (lib!spec.simple_log.SimpleLog.impl&%4.next.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. tail$))) (Poly%lib!spec.simple_log.SimpleLog.State. post$) (Poly%lib!AsyncLabel. op$)))))) (let ((post$ (lib!SimpleLogBehavior./Inited/0 (%Poly%lib!SimpleLogBehavior. self!)))) (lib!spec.simple_log.SimpleLog.impl&%4.init.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. post$)))))) :pattern ((lib!impl&%9.rec%wf.? DT&. DT& self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!impl&%9.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&))) (= (lib!impl&%9.wf.? DT&. DT& self!) (lib!impl&%9.rec%wf.? DT&. DT& self! (succ fuel_nat%lib!impl&%9.wf.)))) :pattern ((lib!impl&%9.wf.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingleton::State::internal_next")
(assert (fuel_bool_default fuel%lib!AsynchronousSingleton.impl&%4.internal_next.))
(define-fun is-lib!InputOperation./Read_ ((c lib!InputOperation.)) Bool ((_ is lib!InputOperation./Read) c))
(assert (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.internal_next.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (input! Poly) (output! Poly)) (! (= (lib!AsynchronousSingleton.impl&%4.internal_next.? DT&. DT& pre! post! label! rid! input! output!) (let ((update_tmp_state$ (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. pre!))) rid!) (and (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. pre!)) rid!) input!) (let ((update_tmp_reqs$ (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. pre!)) rid!))) (let ((update_tmp_resps$ (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. pre!)) rid! output!))) (and (ite (is-lib!InputOperation./Read_ (%Poly%lib!InputOperation. input!)) (let ((read_op$ (lib!InputOperation./Read/0 (%Poly%lib!InputOperation. input!)))) (and (= (%Poly%lib!OutputOperation. output!) (lib!OutputOperation./Read (lib!Dispatch.dispatch_spec.? DT&. DT& (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. pre!)) read_op$))) (= (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_state$))) (let ((write_op$ (lib!InputOperation./Write/0 (%Poly%lib!InputOperation. input!)))) (let ((tmp%%$ (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. pre!)) write_op$)))) (let ((next_state$ (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (let ((out$ (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))) (and (= (%Poly%lib!OutputOperation. output!) (lib!OutputOperation./Write out$)) (let ((update_tmp_state$1 next_state$)) (= (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_state$1)))))))) (and (= (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_resps$) (= (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_reqs$)))))))))) :pattern ((lib!AsynchronousSingleton.impl&%4.internal_next.? DT&. DT& pre! post! label! rid! input! output!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingleton::State::no_op")
(assert (fuel_bool_default fuel%lib!AsynchronousSingleton.impl&%4.no_op.))
(assert (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.no_op.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!AsynchronousSingleton.impl&%4.no_op.? DT&. DT& pre! post! label!) (let ((update_tmp_state$ (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. pre!)))) (let ((update_tmp_reqs$ (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. pre!)))) (let ((update_tmp_resps$ (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. pre!)))) (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. label!)) (and (= (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_resps$) (and (= (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_reqs$) (= (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_state$)))))))) :pattern ((lib!AsynchronousSingleton.impl&%4.no_op.? DT&. DT& pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingleton::State::start")
(assert (fuel_bool_default fuel%lib!AsynchronousSingleton.impl&%4.start.))
(assert (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.start.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (input! Poly)) (! (= (lib!AsynchronousSingleton.impl&%4.start.? DT&. DT& pre! post! label! rid! input!) (let ((update_tmp_state$ (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. pre!)))) (let ((update_tmp_resps$ (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./Start (%I rid!) (%Poly%lib!InputOperation. input!))) (and (not (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. pre!))) rid!)) (let ((update_tmp_reqs$ (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. pre!)) rid! input!))) (and (= (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_reqs$) (and (= (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_resps$) (= (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_state$))))))))) :pattern ((lib!AsynchronousSingleton.impl&%4.start.? DT&. DT& pre! post! label! rid! input!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingleton::State::end")
(assert (fuel_bool_default fuel%lib!AsynchronousSingleton.impl&%4.end.))
(assert (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.end.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (rid! Poly) (output! Poly)) (! (= (lib!AsynchronousSingleton.impl&%4.end.? DT&. DT& pre! post! label! rid! output!) (let ((update_tmp_state$ (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. pre!)))) (let ((update_tmp_reqs$ (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. pre!)))) (and (= (%Poly%lib!AsyncLabel. label!) (lib!AsyncLabel./End (%I rid!) (%Poly%lib!OutputOperation. output!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. pre!))) rid!) (and (= (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. pre!)) rid!) output!) (let ((update_tmp_resps$ (vstd!map.impl&%0.remove.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. pre!)) rid!))) (and (= (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_resps$) (and (= (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_reqs$) (= (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_state$)))))))))) :pattern ((lib!AsynchronousSingleton.impl&%4.end.? DT&. DT& pre! post! label! rid! output!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingleton::State::next_by")
(define-fun is-lib!AsynchronousSingleton.Step./no_op_ ((c lib!AsynchronousSingleton.Step.)) Bool ((_ is lib!AsynchronousSingleton.Step./no_op) c))
(assert (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.next_by.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly) (step! Poly)) (! (= (lib!AsynchronousSingleton.impl&%4.next_by.? DT&. DT& pre! post! label! step!) (ite (is-lib!AsynchronousSingleton.Step./internal_next_ (%Poly%lib!AsynchronousSingleton.Step. step!)) (let ((rid$ (lib!AsynchronousSingleton.Step./internal_next/0 (%Poly%lib!AsynchronousSingleton.Step. step!)))) (let ((input$ (lib!AsynchronousSingleton.Step./internal_next/1 (%Poly%lib!AsynchronousSingleton.Step. step!)))) (let ((output$ (lib!AsynchronousSingleton.Step./internal_next/2 (%Poly%lib!AsynchronousSingleton.Step. step!)))) (lib!AsynchronousSingleton.impl&%4.internal_next.? DT&. DT& pre! post! label! (I rid$) (Poly%lib!InputOperation. input$) (Poly%lib!OutputOperation. output$))))) (ite (is-lib!AsynchronousSingleton.Step./no_op_ (%Poly%lib!AsynchronousSingleton.Step. step!)) (lib!AsynchronousSingleton.impl&%4.no_op.? DT&. DT& pre! post! label!) (ite (is-lib!AsynchronousSingleton.Step./start_ (%Poly%lib!AsynchronousSingleton.Step. step!)) (let ((rid$ (lib!AsynchronousSingleton.Step./start/0 (%Poly%lib!AsynchronousSingleton.Step. step!)))) (let ((input$ (lib!AsynchronousSingleton.Step./start/1 (%Poly%lib!AsynchronousSingleton.Step. step!)))) (lib!AsynchronousSingleton.impl&%4.start.? DT&. DT& pre! post! label! (I rid$) (Poly%lib!InputOperation. input$)))) (and (is-lib!AsynchronousSingleton.Step./end_ (%Poly%lib!AsynchronousSingleton.Step. step!)) (let ((rid$ (lib!AsynchronousSingleton.Step./end/0 (%Poly%lib!AsynchronousSingleton.Step. step!)))) (let ((output$ (lib!AsynchronousSingleton.Step./end/1 (%Poly%lib!AsynchronousSingleton.Step. step!)))) (lib!AsynchronousSingleton.impl&%4.end.? DT&. DT& pre! post! label! (I rid$) (Poly%lib!OutputOperation. output$))))))))) :pattern ((lib!AsynchronousSingleton.impl&%4.next_by.? DT&. DT& pre! post! label! step!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingleton::State::next")
(assert (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.next.) (forall ((DT&. Dcr) (DT& Type) (pre! Poly) (post! Poly) (label! Poly)) (! (= (lib!AsynchronousSingleton.impl&%4.next.? DT&. DT& pre! post! label!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!AsynchronousSingleton.Step. DT&. DT&)) (lib!AsynchronousSingleton.impl&%4.next_by.? DT&. DT& pre! post! label! step$)) :pattern ((lib!AsynchronousSingleton.impl&%4.next_by.? DT&. DT& pre! post! label! step$)) ))) :pattern ((lib!AsynchronousSingleton.impl&%4.next.? DT&. DT& pre! post! label!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::get_last")
(assert (fuel_bool_default fuel%lib!impl&%12.get_last.))
(assert (=> (fuel_bool fuel%lib!impl&%12.get_last.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%12.get_last.? DT&. DT& self!) (ite (is-lib!AsynchronousSingletonBehavior./Stepped_ (%Poly%lib!AsynchronousSingletonBehavior. self!)) (let ((post$ (lib!AsynchronousSingletonBehavior./Stepped/0 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (let ((op$ (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (let ((tail$ (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) post$))) (let ((post$ (lib!AsynchronousSingletonBehavior./Inited/0 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) post$))) :pattern ((lib!impl&%12.get_last.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingleton.State. (lib!impl&%12.get_last.? DT&. DT& self!)) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&))) :pattern ((lib!impl&%12.get_last.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingleton::State::initialize")
(assert (fuel_bool_default fuel%lib!AsynchronousSingleton.impl&%4.initialize.))
(assert (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.initialize.) (forall ((DT&. Dcr) (DT& Type) (post! Poly)) (! (= (lib!AsynchronousSingleton.impl&%4.initialize.? DT&. DT& post!) (let ((update_tmp_state$ (lib!Dispatch.init_spec.? DT&. DT&))) (let ((update_tmp_reqs$ (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&)))) (let ((update_tmp_resps$ (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&)))) (and (= (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_resps$) (and (= (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_reqs$) (= (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. post!)) update_tmp_state$))))))) :pattern ((lib!AsynchronousSingleton.impl&%4.initialize.? DT&. DT& post!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingleton::State::init_by")
(define-fun is-lib!AsynchronousSingleton.Config./initialize_ ((c lib!AsynchronousSingleton.Config.)) Bool ((_ is lib!AsynchronousSingleton.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.init_by.) (forall ((DT&. Dcr) (DT& Type) (post! Poly) (step! Poly)) (! (= (lib!AsynchronousSingleton.impl&%4.init_by.? DT&. DT& post! step!) (and (is-lib!AsynchronousSingleton.Config./initialize_ (%Poly%lib!AsynchronousSingleton.Config. step!)) (lib!AsynchronousSingleton.impl&%4.initialize.? DT&. DT& post!))) :pattern ((lib!AsynchronousSingleton.impl&%4.init_by.? DT&. DT& post! step!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingleton::State::init")
(assert (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.init.) (forall ((DT&. Dcr) (DT& Type) (post! Poly)) (! (= (lib!AsynchronousSingleton.impl&%4.init.? DT&. DT& post!) (exists ((step$ Poly)) (! (and (has_type step$ (TYPE%lib!AsynchronousSingleton.Config. DT&. DT&)) (lib!AsynchronousSingleton.impl&%4.init_by.? DT&. DT& post! step$)) :pattern ((lib!AsynchronousSingleton.impl&%4.init_by.? DT&. DT& post! step$)) ))) :pattern ((lib!AsynchronousSingleton.impl&%4.init.? DT&. DT& post!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::wf")
(assert (fuel_bool_default fuel%lib!impl&%12.wf.))
(declare-const fuel_nat%lib!impl&%12.wf. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (fuel% Fuel)) (! (= (lib!impl&%12.rec%wf.? DT&. DT& self! fuel%) (lib!impl&%12.rec%wf.? DT&. DT& self! zero)) :pattern ((lib!impl&%12.rec%wf.? DT&. DT& self! fuel%)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) (= (lib!impl&%12.rec%wf.? DT&. DT& self! (succ fuel%)) (ite (is-lib!AsynchronousSingletonBehavior./Stepped_ (%Poly%lib!AsynchronousSingletonBehavior. self!)) (let ((post$ (lib!AsynchronousSingletonBehavior./Stepped/0 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (let ((op$ (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (let ((tail$ (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (and (lib!impl&%12.rec%wf.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. tail$) fuel%) (lib!AsynchronousSingleton.impl&%4.next.? DT&. DT& (Poly%lib!AsynchronousSingleton.State. (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. tail$))) (Poly%lib!AsynchronousSingleton.State. post$) (Poly%lib!AsyncLabel. op$)))))) (let ((post$ (lib!AsynchronousSingletonBehavior./Inited/0 (%Poly%lib!AsynchronousSingletonBehavior. self!)))) (lib!AsynchronousSingleton.impl&%4.init.? DT&. DT& (Poly%lib!AsynchronousSingleton.State. post$)))))) :pattern ((lib!impl&%12.rec%wf.? DT&. DT& self! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!impl&%12.wf.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) (= (lib!impl&%12.wf.? DT&. DT& self!) (lib!impl&%12.rec%wf.? DT&. DT& self! (succ fuel_nat%lib!impl&%12.wf.)))) :pattern ((lib!impl&%12.wf.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::is_Inited")
(assert (fuel_bool_default fuel%lib!impl&%7.is_Inited.))
(assert (=> (fuel_bool fuel%lib!impl&%7.is_Inited.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%7.is_Inited.? DT&. DT& self!) (is-lib!SimpleLogBehavior./Inited_ (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%7.is_Inited.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::is_Inited")
(assert (fuel_bool_default fuel%lib!impl&%10.is_Inited.))
(assert (=> (fuel_bool fuel%lib!impl&%10.is_Inited.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%10.is_Inited.? DT&. DT& self!) (is-lib!AsynchronousSingletonBehavior./Inited_ (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%10.is_Inited.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::is_Stepped")
(assert (fuel_bool_default fuel%lib!impl&%7.is_Stepped.))
(assert (=> (fuel_bool fuel%lib!impl&%7.is_Stepped.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%7.is_Stepped.? DT&. DT& self!) (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%7.is_Stepped.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::get_Stepped_1")
(assert (fuel_bool_default fuel%lib!impl&%7.get_Stepped_1.))
(assert (=> (fuel_bool fuel%lib!impl&%7.get_Stepped_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%7.get_Stepped_1.? DT&. DT& self!) (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%7.get_Stepped_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!impl&%7.get_Stepped_1.? DT&. DT& self!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!impl&%7.get_Stepped_1.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::get_Stepped_2")
(assert (fuel_bool_default fuel%lib!impl&%7.get_Stepped_2.))
(assert (=> (fuel_bool fuel%lib!impl&%7.get_Stepped_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%7.get_Stepped_2.? DT&. DT& self!) (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%7.get_Stepped_2.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!SimpleLogBehavior. (lib!impl&%7.get_Stepped_2.? DT&. DT& self!)) (TYPE%lib!SimpleLogBehavior. DT&. DT&))) :pattern ((lib!impl&%7.get_Stepped_2.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::is_Stepped")
(assert (fuel_bool_default fuel%lib!impl&%10.is_Stepped.))
(assert (=> (fuel_bool fuel%lib!impl&%10.is_Stepped.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%10.is_Stepped.? DT&. DT& self!) (is-lib!AsynchronousSingletonBehavior./Stepped_ (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%10.is_Stepped.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::get_Stepped_1")
(assert (fuel_bool_default fuel%lib!impl&%10.get_Stepped_1.))
(assert (=> (fuel_bool fuel%lib!impl&%10.get_Stepped_1.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%10.get_Stepped_1.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%10.get_Stepped_1.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsyncLabel. (lib!impl&%10.get_Stepped_1.? DT&. DT& self!)) (TYPE%lib!AsyncLabel. DT&. DT&))) :pattern ((lib!impl&%10.get_Stepped_1.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::AsynchronousSingletonBehavior::get_Stepped_2")
(assert (fuel_bool_default fuel%lib!impl&%10.get_Stepped_2.))
(assert (=> (fuel_bool fuel%lib!impl&%10.get_Stepped_2.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%10.get_Stepped_2.? DT&. DT& self!) (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. self!))) :pattern ((lib!impl&%10.get_Stepped_2.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (has_type (Poly%lib!AsynchronousSingletonBehavior. (lib!impl&%10.get_Stepped_2.? DT&. DT& self!)) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) :pattern ((lib!impl&%10.get_Stepped_2.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Axioms lib::behavior_equiv")
(assert (fuel_bool_default fuel%lib!behavior_equiv.))
(declare-const fuel_nat%lib!behavior_equiv. Fuel)
(assert (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly) (fuel% Fuel)) (! (= (lib!rec%behavior_equiv.? DT&. DT& a! b! fuel%) (lib!rec%behavior_equiv.? DT&. DT& a! b! zero)) :pattern ((lib!rec%behavior_equiv.? DT&. DT& a! b! fuel%)) )))
(assert (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type a! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type b! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) (= (lib!rec%behavior_equiv.? DT&. DT& a! b! (succ fuel%)) (or (or (or (and (is-lib!SimpleLogBehavior./Inited_ (%Poly%lib!SimpleLogBehavior. a!)) (is-lib!AsynchronousSingletonBehavior./Inited_ (%Poly%lib!AsynchronousSingletonBehavior. b!))) (and (and (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. a!)) (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. a!)))))) (lib!rec%behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. a!))) b! fuel%))) (and (and (is-lib!AsynchronousSingletonBehavior./Stepped_ (%Poly%lib!AsynchronousSingletonBehavior. b!)) (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. b!)))))) (lib!rec%behavior_equiv.? DT&. DT& a! (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. b!))) fuel%))) (and (and (and (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. a!)) (is-lib!AsynchronousSingletonBehavior./Stepped_ (%Poly%lib!AsynchronousSingletonBehavior. b!))) (= (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. a!)) (lib!AsynchronousSingletonBehavior./Stepped/1 (%Poly%lib!AsynchronousSingletonBehavior. b!)))) (lib!rec%behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. a!))) (Poly%lib!AsynchronousSingletonBehavior. (lib!AsynchronousSingletonBehavior./Stepped/2 (%Poly%lib!AsynchronousSingletonBehavior. b!))) fuel%))))) :pattern ((lib!rec%behavior_equiv.? DT&. DT& a! b! (succ fuel%))) )))
(assert (=> (fuel_bool fuel%lib!behavior_equiv.) (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly)) (! (=> (and (tr_bound%lib!Dispatch. DT&. DT&) (has_type a! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type b! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&))) (= (lib!behavior_equiv.? DT&. DT& a! b!) (lib!rec%behavior_equiv.? DT&. DT& a! b! (succ fuel_nat%lib!behavior_equiv.)))) :pattern ((lib!behavior_equiv.? DT&. DT& a! b!)) ))))
(set-info :comment ";; Function-Specs lib::SimpleLogRefinesAsynchronousSingleton::exists_equiv_behavior")
(declare-fun req%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (a! Poly)) (! (= (req%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. Self%&. Self%& DT&. DT& a!) (=> %%global_location_label%%6 (lib!impl&%9.wf.? DT&. DT& a!))) :pattern ((req%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. Self%&. Self%& DT&. DT& a!)) )))
(declare-fun ens%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (DT&. Dcr) (DT& Type) (a! Poly) (b! Poly)) (! (= (ens%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. Self%&. Self%& DT&. DT& a! b!) (and (has_type b! (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (and (lib!impl&%12.wf.? DT&. DT& b!) (lib!behavior_equiv.? DT&. DT& a! b!)))) :pattern ((ens%lib!SimpleLogRefinesAsynchronousSingleton.exists_equiv_behavior. Self%&. Self%& DT&. DT& a! b!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%7 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%8 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::layout::size_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%9 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%12 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%13 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%14 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%15 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::disjoint")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.disjoint.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.disjoint.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.disjoint.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (not (vstd!set.impl&%0.contains.? A&. A& s2! a$)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) ))) :pattern ((vstd!set.impl&%0.disjoint.? A&. A& self! s2!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%17 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%18 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%19 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%20 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%21 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%22 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%23 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%24 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%25 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%26 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%27 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%28 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%29 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%30 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%31 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%32 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%33 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%35 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%36 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%37 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%38 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)) )) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%40 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%43 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%44 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%45 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%46 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) )))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::is_empty")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_empty.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_empty.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_empty.? A&. A& self!) (= (vstd!set.impl&%0.len.? A&. A& self!) 0)) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& self!)) ))))
(set-info :comment ";; Function-Specs vstd::set_lib::axiom_is_empty")
(declare-fun req%vstd!set_lib.axiom_is_empty. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set_lib.axiom_is_empty. A&. A& s!) (and (=> %%global_location_label%%47 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%48 (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))))) :pattern ((req%vstd!set_lib.axiom_is_empty. A&. A& s!)) )))
(declare-fun ens%vstd!set_lib.axiom_is_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set_lib.axiom_is_empty. A&. A& s!) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$)) ))) :pattern ((ens%vstd!set_lib.axiom_is_empty. A&. A& s!)) )))
(set-info :comment ";; Broadcast vstd::set_lib::axiom_is_empty")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (vstd!set_lib.impl&%0.is_empty.? A&. A& s!))) (exists ((a$ Poly)) (! (and (has_type a$ A&) (vstd!set.impl&%0.contains.? A&. A& s! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a$)) )))) :pattern ((vstd!set_lib.impl&%0.is_empty.? A&. A& s!)) )))
(set-info :comment ";; Function-Specs lib::VERUS_layout_of_usize")
(declare-fun ens%lib!VERUS_layout_of_usize. () Bool)
(assert (= ens%lib!VERUS_layout_of_usize. (= (vstd!layout.size_of.? $ (UINT SZ)) 8)))
(set-info :comment ";; Broadcast lib::VERUS_layout_of_usize")
(assert (= (vstd!layout.size_of.? $ (UINT SZ)) 8))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::filter")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.filter.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.filter.) (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (= (vstd!set.impl&%0.filter.? A&. A& F&. F& self! f!) (vstd!set.impl&%0.intersect.? A&. A& self! (vstd!set.impl&%0.new.? A&. A& F&. F& f!))) :pattern ((vstd!set.impl&%0.filter.? A&. A& F&. F& self! f!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.filter.? A&. A& F&. F& self! f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.filter.? A&. A& F&. F& self! f!)) )))
(set-info :comment ";; Function-Axioms lib::spec::linearization::future_rid_ok")
(assert (fuel_bool_default fuel%lib!spec.linearization.future_rid_ok.))
(assert (=> (fuel_bool fuel%lib!spec.linearization.future_rid_ok.) (forall ((DT&. Dcr) (DT& Type) (s! Poly) (rid! Poly) (version! Poly)) (! (= (lib!spec.linearization.future_rid_ok.? DT&. DT& s! rid! version!) (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid!) (=> (is-lib!spec.simple_log.ReadReq./Init_ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid!))) (<= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) (%I version!)))) (=> (is-lib!spec.simple_log.ReadReq./Req_ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid!))) (<= (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid!))) (%I version!))))) :pattern ((lib!spec.linearization.future_rid_ok.? DT&. DT& s! rid! version!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::linearization::future_points_ok")
(assert (fuel_bool_default fuel%lib!spec.linearization.future_points_ok.))
(assert (=> (fuel_bool fuel%lib!spec.linearization.future_points_ok.) (forall ((DT&. Dcr) (DT& Type) (s! Poly) (r_points! Poly)) (! (= (lib!spec.linearization.future_points_ok.? DT&. DT& s! r_points!) (and (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT r_points!)) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT r_points!) rid$) (lib!spec.linearization.future_rid_ok.? DT&. DT& s! rid$ (vstd!map.impl&%0.index.? $ NAT $ NAT r_points! rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT r_points!) rid$)) )))) :pattern ((lib!spec.linearization.future_points_ok.? DT&. DT& s! r_points!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::simple_log::ReadReq::op")
(assert (fuel_bool_default fuel%lib!spec.simple_log.impl&%1.op.))
(assert (=> (fuel_bool fuel%lib!spec.simple_log.impl&%1.op.) (forall ((R&. Dcr) (R& Type) (self! Poly)) (! (= (lib!spec.simple_log.impl&%1.op.? R&. R& self!) (ite (is-lib!spec.simple_log.ReadReq./Init_ (%Poly%lib!spec.simple_log.ReadReq. self!)) (let ((op$ (lib!spec.simple_log.ReadReq./Init/op (%Poly%lib!spec.simple_log.ReadReq. self!)))) op$) (let ((op$ (lib!spec.simple_log.ReadReq./Req/op (%Poly%lib!spec.simple_log.ReadReq. self!)))) op$))) :pattern ((lib!spec.simple_log.impl&%1.op.? R&. R& self!)) ))))
(assert (forall ((R&. Dcr) (R& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!spec.simple_log.ReadReq. R&. R&)) (has_type (lib!spec.simple_log.impl&%1.op.? R&. R& self!) R&)) :pattern ((lib!spec.simple_log.impl&%1.op.? R&. R& self!)) )))
(set-info :comment ";; Function-Axioms lib::spec::linearization::readonly_request_is_valid")
(assert (fuel_bool_default fuel%lib!spec.linearization.readonly_request_is_valid.))
(assert (=> (fuel_bool fuel%lib!spec.linearization.readonly_request_is_valid.) (forall ((DT&. Dcr) (DT& Type) (s! Poly) (t! Poly) (r_points! Poly) (rid! Poly)) (! (= (lib!spec.linearization.readonly_request_is_valid.? DT&. DT& s! t! r_points! rid!) (and (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid!) (=> (is-lib!spec.simple_log.ReadReq./Req_ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid!))) (<= (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid!))) (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!))))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) rid!)) (= (%Poly%lib!InputOperation. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!)) rid!)) (lib!InputOperation./Read (lib!spec.simple_log.impl&%1.op.? (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid!))))) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT r_points!) rid!) (and (<= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT r_points! rid!))) (=> (is-lib!spec.simple_log.ReadReq./Req_ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid!))) (< (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT r_points! rid!)))))))) :pattern ((lib!spec.linearization.readonly_request_is_valid.? DT&. DT& s! t! r_points! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::linearization::readonly_response_is_valid")
(assert (fuel_bool_default fuel%lib!spec.linearization.readonly_response_is_valid.))
(assert (=> (fuel_bool fuel%lib!spec.linearization.readonly_response_is_valid.) (forall ((DT&. Dcr) (DT& Type) (s! Poly) (t! Poly) (r_points! Poly) (rid! Poly)) (! (= (lib!spec.linearization.readonly_response_is_valid.? DT&. DT& s! t! r_points! rid!) (and (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid!) (is-lib!spec.simple_log.ReadReq./Req_ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid!)))) (<= (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid!))) (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t!))) rid!)) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT r_points!) rid!) (and (and (and (<= (lib!spec.simple_log.ReadReq./Req/version (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid!))) (%I (vstd!map.impl&%0.index.? $ NAT $ NAT r_points! rid!))) (<= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT r_points! rid!)) (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) (and (<= 0 (%I (vstd!map.impl&%0.index.? $ NAT $ NAT r_points! rid!))) (<= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT r_points! rid!)) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))))) (= (%Poly%lib!OutputOperation. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t!)) rid!)) (lib!OutputOperation./Read (lib!Dispatch.dispatch_spec.? DT&. DT& (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& s! (vstd!map.impl&%0.index.? $ NAT $ NAT r_points! rid!)) (lib!spec.simple_log.impl&%1.op.? (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid!))))))))) :pattern ((lib!spec.linearization.readonly_response_is_valid.? DT&. DT& s! t! r_points! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::linearization::readonly_requests_valid")
(assert (fuel_bool_default fuel%lib!spec.linearization.readonly_requests_valid.))
(assert (=> (fuel_bool fuel%lib!spec.linearization.readonly_requests_valid.) (forall ((DT&. Dcr) (DT& Type) (s! Poly) (t! Poly) (r_points! Poly)) (! (= (lib!spec.linearization.readonly_requests_valid.? DT&. DT& s! t! r_points!) (and (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) rid$)) (lib!spec.linearization.readonly_request_is_valid.? DT&. DT& s! t! r_points! rid$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) rid$)) )) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t!))) rid$)) (lib!spec.linearization.readonly_response_is_valid.? DT&. DT& s! t! r_points! rid$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t!))) rid$)) )))) :pattern ((lib!spec.linearization.readonly_requests_valid.? DT&. DT& s! t! r_points!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::linearization::update_response_is_valid")
(assert (fuel_bool_default fuel%lib!spec.linearization.update_response_is_valid.))
(assert (=> (fuel_bool fuel%lib!spec.linearization.update_response_is_valid.) (forall ((DT&. Dcr) (DT& Type) (s! Poly) (t! Poly) (r_points! Poly) (rid! Poly)) (! (= (lib!spec.linearization.update_response_is_valid.? DT&. DT& s! t! r_points! rid!) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid!) (< (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid!))) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. s!))))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t!))) rid!)) (= (%Poly%lib!OutputOperation. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t!)) rid!)) (lib!OutputOperation./Write (tuple%2./tuple%2/1 (%Poly%tuple%2. (lib!Dispatch.dispatch_mut_spec.? DT&. DT& (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& s! (I (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid!))))) (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) (I (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid!)))))))))))) :pattern ((lib!spec.linearization.update_response_is_valid.? DT&. DT& s! t! r_points! rid!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::linearization::update_response_with_version")
(assert (fuel_bool_default fuel%lib!spec.linearization.update_response_with_version.))
(assert (=> (fuel_bool fuel%lib!spec.linearization.update_response_with_version.) (forall ((update_resps! Poly) (version! Poly)) (! (= (lib!spec.linearization.update_response_with_version.? update_resps! version!) (exists ((rid$ Poly)) (! (and (has_type rid$ NAT) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. update_resps!) rid$) (= (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. update_resps! rid$))) (%I version!)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. update_resps!) rid$)) ))) :pattern ((lib!spec.linearization.update_response_with_version.? update_resps! version!)) ))))
(set-info :comment ";; Function-Axioms lib::InputOperation::is_Read")
(assert (fuel_bool_default fuel%lib!impl&%1.is_Read.))
(assert (=> (fuel_bool fuel%lib!impl&%1.is_Read.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%1.is_Read.? DT&. DT& self!) (is-lib!InputOperation./Read_ (%Poly%lib!InputOperation. self!))) :pattern ((lib!impl&%1.is_Read.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::InputOperation::is_Write")
(assert (fuel_bool_default fuel%lib!impl&%1.is_Write.))
(define-fun is-lib!InputOperation./Write_ ((c lib!InputOperation.)) Bool ((_ is lib!InputOperation./Write) c))
(assert (=> (fuel_bool fuel%lib!impl&%1.is_Write.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%1.is_Write.? DT&. DT& self!) (is-lib!InputOperation./Write_ (%Poly%lib!InputOperation. self!))) :pattern ((lib!impl&%1.is_Write.? DT&. DT& self!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::linearization::state_refinement_relation_basic")
(assert (fuel_bool_default fuel%lib!spec.linearization.state_refinement_relation_basic.))
(assert (=> (fuel_bool fuel%lib!spec.linearization.state_refinement_relation_basic.) (forall ((DT&. Dcr) (DT& Type) (s! Poly) (t! Poly) (r_points! Poly)) (! (= (lib!spec.linearization.state_refinement_relation_basic.? DT&. DT& s! t! r_points!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (<= 0 (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) (<= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. s!))))) (= (lib!AsynchronousSingleton.State./State/state (%Poly%lib!AsynchronousSingleton.State. t!)) (lib!spec.simple_log.SimpleLog.impl&%4.nrstate_at_version.? DT&. DT& s! (I (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))))) (vstd!set.impl&%0.disjoint.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))))) (vstd!set.impl&%0.disjoint.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))))) (vstd!set.impl&%0.disjoint.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))))) (vstd!set.impl&%0.disjoint.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t!))))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (= (or (or (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid$)) (or (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t!))) rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t!))) rid$)) ))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) rid$) (is-lib!InputOperation./Read_ (%Poly%lib!InputOperation. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!)) rid$)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) rid$) (is-lib!InputOperation./Read_ (%Poly%lib!InputOperation. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!)) rid$)))) ))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) rid$) (is-lib!InputOperation./Write_ (%Poly%lib!InputOperation. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!)) rid$)))) (or (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) rid$) (is-lib!InputOperation./Write_ (%Poly%lib!InputOperation. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!)) rid$)))) ))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t!))) rid$) (or (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t!))) rid$)) ))) (forall ((v$ Poly)) (! (=> (has_type v$ NAT) (=> (and (<= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) (%I v$)) (< (%I v$) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. s!))))) (lib!spec.linearization.update_response_with_version.? (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) v$))) :pattern ((lib!spec.linearization.update_response_with_version.? (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) v$)) ))) (forall ((rid1$ Poly) (rid2$ Poly)) (! (=> (and (has_type rid1$ NAT) (has_type rid2$ NAT)) (=> (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid1$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid2$)) (not (= rid1$ rid2$))) (not (= (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid1$) (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid2$))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid1$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid2$)) ))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid$) (< (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$))) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid$)) ))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) rid$) (= (%Poly%lib!InputOperation. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!)) rid$)) (lib!InputOperation./Write (vstd!map.impl&%0.index.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$)) ))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid$) (>= (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$))) (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!))) rid$) (= (%Poly%lib!InputOperation. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t!)) rid$)) (lib!InputOperation./Write (vstd!seq.Seq.index.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) (I (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid$)) ))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid$) (< (lib!spec.simple_log.UpdateResp./UpdateResp/0 (%Poly%lib!spec.simple_log.UpdateResp. (vstd!map.impl&%0.index.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$))) (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) (lib!spec.linearization.update_response_is_valid.? DT&. DT& s! t! r_points! rid$))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%lib!spec.simple_log.UpdateResp. (Poly%vstd!map.Map<nat./lib!spec.simple_log.UpdateResp.>. (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. s!)))) rid$)) )))) :pattern ((lib!spec.linearization.state_refinement_relation_basic.? DT&. DT& s! t! r_points!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::linearization::state_refinement_relation")
(assert (fuel_bool_default fuel%lib!spec.linearization.state_refinement_relation.))
(assert (=> (fuel_bool fuel%lib!spec.linearization.state_refinement_relation.) (forall ((DT&. Dcr) (DT& Type) (s! Poly) (t! Poly) (r_points! Poly)) (! (= (lib!spec.linearization.state_refinement_relation.? DT&. DT& s! t! r_points!) (and (lib!spec.linearization.state_refinement_relation_basic.? DT&. DT& s! t! r_points!) (lib!spec.linearization.readonly_requests_valid.? DT&. DT& s! t! r_points!))) :pattern ((lib!spec.linearization.state_refinement_relation.? DT&. DT& s! t! r_points!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::linearization::simple_log_state_equiv_inc_version")
(assert (fuel_bool_default fuel%lib!spec.linearization.simple_log_state_equiv_inc_version.))
(assert (=> (fuel_bool fuel%lib!spec.linearization.simple_log_state_equiv_inc_version.) (forall ((DT&. Dcr) (DT& Type) (a! Poly) (a2! Poly)) (! (= (lib!spec.linearization.simple_log_state_equiv_inc_version.? DT&. DT& a! a2!) (and (and (and (and (= (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. a2!)) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. a!))) (= (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. a2!)) (nClip (Add (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. a!)) 1)))) (= (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. a2!)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. a!)))) (= (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. a2!)) (lib!spec.simple_log.SimpleLog.State./State/update_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. a!)))) (= (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. a2!)) (lib!spec.simple_log.SimpleLog.State./State/update_resps (%Poly%lib!spec.simple_log.SimpleLog.State. a!))))) :pattern ((lib!spec.linearization.simple_log_state_equiv_inc_version.? DT&. DT& a! a2!)) ))))
(set-info :comment ";; Function-Axioms lib::spec::linearization::recursion_invariant")
(assert (fuel_bool_default fuel%lib!spec.linearization.recursion_invariant.))
(assert (=> (fuel_bool fuel%lib!spec.linearization.recursion_invariant.) (forall ((DT&. Dcr) (DT& Type) (s! Poly) (s2! Poly) (t2! Poly) (r_points! Poly) (the_reads! Poly)) (! (= (lib!spec.linearization.recursion_invariant.? DT&. DT& s! s2! t2! r_points! the_reads!) (and (and (and (and (and (and (and (vstd!set.impl&%0.finite.? $ NAT the_reads!) (<= (nClip (Add (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) 1)) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. s!))))) (lib!spec.linearization.state_refinement_relation_basic.? DT&. DT& s2! t2! r_points!)) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (vstd!set.impl&%0.contains.? $ NAT the_reads! rid$) (and (and (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT r_points!) rid$) (= (%I (vstd!map.impl&%0.index.? $ NAT $ NAT r_points! rid$)) (nClip (Add (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) 1)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$)) (is-lib!spec.simple_log.ReadReq./Req_ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!)) rid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ NAT the_reads! rid$)) ))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t2!))) rid$)) (=> (not (vstd!set.impl&%0.contains.? $ NAT the_reads! rid$)) (lib!spec.linearization.readonly_request_is_valid.? DT&. DT& s2! t2! r_points! rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$)) ))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t2!))) rid$)) (=> (not (vstd!set.impl&%0.contains.? $ NAT the_reads! rid$)) (lib!spec.linearization.readonly_response_is_valid.? DT&. DT& s2! t2! r_points! rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$)) ))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/reqs (%Poly%lib!AsynchronousSingleton.State. t2!))) rid$)) (=> (vstd!set.impl&%0.contains.? $ NAT the_reads! rid$) (lib!spec.linearization.readonly_request_is_valid.? DT&. DT& s! t2! r_points! rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$)) ))) (forall ((rid$ Poly)) (! (=> (has_type rid$ NAT) (=> (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&) (lib!AsynchronousSingleton.State./State/resps (%Poly%lib!AsynchronousSingleton.State. t2!))) rid$)) (=> (vstd!set.impl&%0.contains.? $ NAT the_reads! rid$) (lib!spec.linearization.readonly_response_is_valid.? DT&. DT& s! t2! r_points! rid$)))) :pattern ((vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) (lib!spec.simple_log.SimpleLog.State./State/readonly_reqs (%Poly%lib!spec.simple_log.SimpleLog.State. s!))) rid$)) )))) :pattern ((lib!spec.linearization.recursion_invariant.? DT&. DT& s! s2! t2! r_points! the_reads!)) ))))
(set-info :comment ";; Function-Specs lib::spec::linearization::all_reads_for")
(declare-fun req%lib!spec.linearization.all_reads_for. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (readonly_reqs! Poly) (r_points! Poly) (version! Poly)) (! (= (req%lib!spec.linearization.all_reads_for. DT&. DT& readonly_reqs! r_points! version!) (=> %%global_location_label%%49 (vstd!set.impl&%0.finite.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ NAT r_points!)))) :pattern ((req%lib!spec.linearization.all_reads_for. DT&. DT& readonly_reqs! r_points! version!)) )))
(set-info :comment ";; Function-Axioms lib::spec::linearization::all_reads_for")
(assert (fuel_bool_default fuel%lib!spec.linearization.all_reads_for.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type Poly Poly Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Poly) (%%hole%%9 Dcr) (%%hole%%10 Type) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Poly) (rid$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13) rid$) (B (and (and (= (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 rid$) %%hole%%5) (vstd!set.impl&%0.contains.? %%hole%%6 %%hole%%7 %%hole%%8 rid$)) (is-lib!spec.simple_log.ReadReq./Req_ (%Poly%lib!spec.simple_log.ReadReq. (vstd!map.impl&%0.index.? %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 rid$)))))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13) rid$)))))
(assert (=> (fuel_bool fuel%lib!spec.linearization.all_reads_for.) (forall ((DT&. Dcr) (DT& Type) (readonly_reqs! Poly) (r_points! Poly) (version! Poly)) (! (= (lib!spec.linearization.all_reads_for.? DT&. DT& readonly_reqs! r_points! version!) (%Poly%vstd!set.Set<nat.>. (vstd!set.impl&%0.filter.? $ NAT $ (TYPE%fun%1. $ NAT $ BOOL) (vstd!map.impl&%0.dom.? $ NAT $ NAT r_points!) (Poly%fun%1. (mk_fun (%%lambda%%0 $ NAT $ NAT r_points! version! $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) readonly_reqs!) $ NAT $ (TYPE%lib!spec.simple_log.ReadReq. (proj%%lib!Dispatch./ReadOperation DT&. DT&) (proj%lib!Dispatch./ReadOperation DT&. DT&)) readonly_reqs!)))))) :pattern ((lib!spec.linearization.all_reads_for.? DT&. DT& readonly_reqs! r_points! version!)) ))))
(set-info :comment ";; Function-Axioms lib::SimpleLogBehavior::get_Stepped_0")
(assert (fuel_bool_default fuel%lib!impl&%7.get_Stepped_0.))
(assert (=> (fuel_bool fuel%lib!impl&%7.get_Stepped_0.) (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (= (lib!impl&%7.get_Stepped_0.? DT&. DT& self!) (lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. self!))) :pattern ((lib!impl&%7.get_Stepped_0.? DT&. DT& self!)) ))))
(assert (forall ((DT&. Dcr) (DT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!SimpleLogBehavior. DT&. DT&)) (has_type (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%7.get_Stepped_0.? DT&. DT& self!)) (TYPE%lib!spec.simple_log.SimpleLog.State. DT&. DT&))) :pattern ((lib!impl&%7.get_Stepped_0.? DT&. DT& self!)) )))
(set-info :comment ";; Function-Specs lib::spec::linearization::readonly_start_refines")
(declare-fun req%lib!spec.linearization.readonly_start_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int) (rop! Poly)) (! (= (req%lib!spec.linearization.readonly_start_refines. DT&. DT& s! s2! aop! t! r_points! rid! rop!) (and (=> %%global_location_label%%50 (lib!spec.simple_log.SimpleLog.impl&%4.readonly_start.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsyncLabel. aop!) (I rid!) rop!)) (=> %%global_location_label%%51 (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!AsynchronousSingleton.State. t!) (vstd!map.impl&%0.remove.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. r_points!) (I rid!)))) (=> %%global_location_label%%52 (lib!spec.linearization.future_points_ok.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%vstd!map.Map<nat./nat.>. r_points!))))) :pattern ((req%lib!spec.linearization.readonly_start_refines. DT&. DT& s! s2! aop! t! r_points! rid! rop!)) )))
(declare-fun ens%lib!spec.linearization.readonly_start_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int Poly lib!AsynchronousSingleton.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int) (rop! Poly) (t2! lib!AsynchronousSingleton.State.)) (! (= (ens%lib!spec.linearization.readonly_start_refines. DT&. DT& s! s2! aop! t! r_points! rid! rop! t2!) (and (has_type (Poly%lib!AsynchronousSingleton.State. t2!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%vstd!map.Map<nat./nat.>. r_points!)) (lib!AsynchronousSingleton.impl&%4.next.? DT&. DT& (Poly%lib!AsynchronousSingleton.State. t!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%lib!AsyncLabel. aop!)))) :pattern ((ens%lib!spec.linearization.readonly_start_refines. DT&. DT& s! s2! aop! t! r_points! rid! rop! t2!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::readonly_start_refines")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:383:7: 391:21 (#0)")
(set-info :comment ";; Function-Specs lib::spec::linearization::readonly_read_version_refines")
(declare-fun req%lib!spec.linearization.readonly_read_version_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int) Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int)) (! (= (req%lib!spec.linearization.readonly_read_version_refines. DT&. DT& s! s2! aop! t! r_points! rid!) (and (=> %%global_location_label%%53 (lib!spec.simple_log.SimpleLog.impl&%4.readonly_read_version.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsyncLabel. aop!) (I rid!))) (=> %%global_location_label%%54 (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!AsynchronousSingleton.State. t!) (Poly%vstd!map.Map<nat./nat.>. r_points!))) (=> %%global_location_label%%55 (lib!spec.linearization.future_points_ok.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%vstd!map.Map<nat./nat.>. r_points!))))) :pattern ((req%lib!spec.linearization.readonly_read_version_refines. DT&. DT& s! s2! aop! t! r_points! rid!)) )))
(declare-fun ens%lib!spec.linearization.readonly_read_version_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int lib!AsynchronousSingleton.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int) (t2! lib!AsynchronousSingleton.State.)) (! (= (ens%lib!spec.linearization.readonly_read_version_refines. DT&. DT& s! s2! aop! t! r_points! rid! t2!) (and (has_type (Poly%lib!AsynchronousSingleton.State. t2!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%vstd!map.Map<nat./nat.>. r_points!)) (lib!AsynchronousSingleton.impl&%4.next.? DT&. DT& (Poly%lib!AsynchronousSingleton.State. t!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%lib!AsyncLabel. aop!)))) :pattern ((ens%lib!spec.linearization.readonly_read_version_refines. DT&. DT& s! s2! aop! t! r_points! rid! t2!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::readonly_read_version_refines")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:424:7: 431:21 (#0)")
(set-info :comment ";; Function-Specs lib::spec::linearization::readonly_finish_refines")
(declare-fun req%lib!spec.linearization.readonly_finish_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int Int Poly) Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int) (version! Int) (ret! Poly)) (! (= (req%lib!spec.linearization.readonly_finish_refines. DT&. DT& s! s2! aop! t! r_points! rid! version! ret!) (and (=> %%global_location_label%%56 (lib!spec.simple_log.SimpleLog.impl&%4.readonly_finish.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsyncLabel. aop!) (I rid!) (I version!) ret!)) (=> %%global_location_label%%57 (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!AsynchronousSingleton.State. t!) (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. r_points!) (I rid!) (I version!)))))) :pattern ((req%lib!spec.linearization.readonly_finish_refines. DT&. DT& s! s2! aop! t! r_points! rid! version! ret!)) )))
(declare-fun ens%lib!spec.linearization.readonly_finish_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int Int Poly lib!AsynchronousSingleton.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int) (version! Int) (ret! Poly) (t2! lib!AsynchronousSingleton.State.)) (! (= (ens%lib!spec.linearization.readonly_finish_refines. DT&. DT& s! s2! aop! t! r_points! rid! version! ret! t2!) (and (has_type (Poly%lib!AsynchronousSingleton.State. t2!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%vstd!map.Map<nat./nat.>. r_points!)) (lib!AsynchronousSingleton.impl&%4.next.? DT&. DT& (Poly%lib!AsynchronousSingleton.State. t!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%lib!AsyncLabel. aop!)))) :pattern ((ens%lib!spec.linearization.readonly_finish_refines. DT&. DT& s! s2! aop! t! r_points! rid! version! ret! t2!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::readonly_finish_refines")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:484:7: 493:21 (#0)")
(set-info :comment ";; Function-Specs lib::spec::linearization::update_start_refines")
(declare-fun req%lib!spec.linearization.update_start_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int Poly) Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int) (uop! Poly)) (! (= (req%lib!spec.linearization.update_start_refines. DT&. DT& s! s2! aop! t! r_points! rid! uop!) (and (=> %%global_location_label%%58 (lib!spec.simple_log.SimpleLog.impl&%4.update_start.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsyncLabel. aop!) (I rid!) uop!)) (=> %%global_location_label%%59 (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!AsynchronousSingleton.State. t!) (Poly%vstd!map.Map<nat./nat.>. r_points!))))) :pattern ((req%lib!spec.linearization.update_start_refines. DT&. DT& s! s2! aop! t! r_points! rid! uop!)) )))
(declare-fun ens%lib!spec.linearization.update_start_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int Poly lib!AsynchronousSingleton.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int) (uop! Poly) (t2! lib!AsynchronousSingleton.State.)) (! (= (ens%lib!spec.linearization.update_start_refines. DT&. DT& s! s2! aop! t! r_points! rid! uop! t2!) (and (has_type (Poly%lib!AsynchronousSingleton.State. t2!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%vstd!map.Map<nat./nat.>. r_points!)) (lib!AsynchronousSingleton.impl&%4.next.? DT&. DT& (Poly%lib!AsynchronousSingleton.State. t!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%lib!AsyncLabel. aop!)))) :pattern ((ens%lib!spec.linearization.update_start_refines. DT&. DT& s! s2! aop! t! r_points! rid! uop! t2!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::update_start_refines")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:533:7: 541:21 (#0)")
(set-info :comment ";; Function-Specs lib::spec::linearization::state_at_version_preserves")
(declare-fun req%lib!spec.linearization.state_at_version_preserves. (Dcr Type Poly Poly Poly Int) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly) (x! Poly) (i! Int)) (! (= (req%lib!spec.linearization.state_at_version_preserves. DT&. DT& a! b! x! i!) (and (=> %%global_location_label%%60 (= b! (vstd!seq.Seq.push.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) a! x!))) (=> %%global_location_label%%61 (<= i! (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) a!))) (=> %%global_location_label%%62 (<= i! (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) b!))))) :pattern ((req%lib!spec.linearization.state_at_version_preserves. DT&. DT& a! b! x! i!)) )))
(declare-fun ens%lib!spec.linearization.state_at_version_preserves. (Dcr Type Poly Poly Poly Int) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! Poly) (b! Poly) (x! Poly) (i! Int)) (! (= (ens%lib!spec.linearization.state_at_version_preserves. DT&. DT& a! b! x! i!) (= (lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& a! (I i!)) (lib!spec.simple_log.compute_nrstate_at_version.? DT&. DT& b! (I i!)))) :pattern ((ens%lib!spec.linearization.state_at_version_preserves. DT&. DT& a! b! x! i!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::state_at_version_preserves")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:901:7: 906:2 (#0)")
(set-info :comment ";; Function-Specs lib::spec::linearization::update_add_update_to_log_refines")
(declare-fun req%lib!spec.linearization.update_add_update_to_log_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int) Bool)
(declare-const %%global_location_label%%63 Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int)) (! (= (req%lib!spec.linearization.update_add_update_to_log_refines. DT&. DT& s! s2! aop! t! r_points! rid!) (and (=> %%global_location_label%%63 (lib!spec.simple_log.SimpleLog.impl&%4.update_add_op_to_log.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsyncLabel. aop!) (I rid!))) (=> %%global_location_label%%64 (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!AsynchronousSingleton.State. t!) (Poly%vstd!map.Map<nat./nat.>. r_points!))))) :pattern ((req%lib!spec.linearization.update_add_update_to_log_refines. DT&. DT& s! s2! aop! t! r_points! rid!)) )))
(declare-fun ens%lib!spec.linearization.update_add_update_to_log_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int lib!AsynchronousSingleton.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int) (t2! lib!AsynchronousSingleton.State.)) (! (= (ens%lib!spec.linearization.update_add_update_to_log_refines. DT&. DT& s! s2! aop! t! r_points! rid! t2!) (and (has_type (Poly%lib!AsynchronousSingleton.State. t2!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%vstd!map.Map<nat./nat.>. r_points!)) (lib!AsynchronousSingleton.impl&%4.next.? DT&. DT& (Poly%lib!AsynchronousSingleton.State. t!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%lib!AsyncLabel. aop!)))) :pattern ((ens%lib!spec.linearization.update_add_update_to_log_refines. DT&. DT& s! s2! aop! t! r_points! rid! t2!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::update_add_update_to_log_refines")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:573:7: 580:21 (#0)")
(set-info :comment ";; Function-Specs lib::spec::linearization::trick_equiv")
(declare-fun req%lib!spec.linearization.trick_equiv. (Dcr Type lib!SimpleLogBehavior. lib!SimpleLogBehavior. lib!AsynchronousSingletonBehavior.) Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! lib!SimpleLogBehavior.) (a2! lib!SimpleLogBehavior.) (b! lib!AsynchronousSingletonBehavior.)) (! (= (req%lib!spec.linearization.trick_equiv. DT&. DT& a! a2! b!) (and (=> %%global_location_label%%65 (lib!behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!) (Poly%lib!AsynchronousSingletonBehavior. b!))) (=> %%global_location_label%%66 (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!)))) (=> %%global_location_label%%67 (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a2!)))) (=> %%global_location_label%%68 (= (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!))) (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a2!))))) (=> %%global_location_label%%69 (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!))))))) (=> %%global_location_label%%70 (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a2!))))))))) :pattern ((req%lib!spec.linearization.trick_equiv. DT&. DT& a! a2! b!)) )))
(declare-fun ens%lib!spec.linearization.trick_equiv. (Dcr Type lib!SimpleLogBehavior. lib!SimpleLogBehavior. lib!AsynchronousSingletonBehavior.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! lib!SimpleLogBehavior.) (a2! lib!SimpleLogBehavior.) (b! lib!AsynchronousSingletonBehavior.)) (! (= (ens%lib!spec.linearization.trick_equiv. DT&. DT& a! a2! b!) (lib!behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. a2!) (Poly%lib!AsynchronousSingletonBehavior. b!))) :pattern ((ens%lib!spec.linearization.trick_equiv. DT&. DT& a! a2! b!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::trick_equiv")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:937:7: 941:2 (#0)")
(set-info :comment ";; Function-Specs lib::spec::linearization::pop_rid")
(declare-fun req%lib!spec.linearization.pop_rid. (vstd!set.Set<nat.>.) Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(assert (forall ((t! vstd!set.Set<nat.>.)) (! (= (req%lib!spec.linearization.pop_rid. t!) (and (=> %%global_location_label%%71 (not (vstd!set_lib.impl&%0.is_empty.? $ NAT (Poly%vstd!set.Set<nat.>. t!)))) (=> %%global_location_label%%72 (vstd!set.impl&%0.finite.? $ NAT (Poly%vstd!set.Set<nat.>. t!))))) :pattern ((req%lib!spec.linearization.pop_rid. t!)) )))
(declare-fun ens%lib!spec.linearization.pop_rid. (vstd!set.Set<nat.>. tuple%2.) Bool)
(assert (forall ((t! vstd!set.Set<nat.>.) (res! tuple%2.)) (! (= (ens%lib!spec.linearization.pop_rid. t! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. $ (TYPE%vstd!set.Set. $ NAT) $ NAT)) (< (vstd!set.impl&%0.len.? $ NAT (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))) (vstd!set.impl&%0.len.? $ NAT (Poly%vstd!set.Set<nat.>. t!))) (vstd!set.impl&%0.contains.? $ NAT (Poly%vstd!set.Set<nat.>. t!) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!)))) (ext_eq false (TYPE%vstd!set.Set. $ NAT) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))) (vstd!set.impl&%0.remove.? $ NAT (Poly%vstd!set.Set<nat.>. t!) (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!))))) (vstd!set.impl&%0.finite.? $ NAT (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))))) :pattern ((ens%lib!spec.linearization.pop_rid. t! res!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::pop_rid")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:922:7: 922:61 (#0)")
(set-info :comment ";; Function-Specs lib::spec::linearization::update_incr_version_1_read_reqs")
(declare-fun req%lib!spec.linearization.update_incr_version_1_read_reqs. (Dcr Type lib!AsynchronousSingletonBehavior. lib!SimpleLogBehavior. lib!SimpleLogBehavior. vstd!map.Map<nat./nat.>. vstd!set.Set<nat.>.) Bool)
(declare-const %%global_location_label%%73 Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (b2! lib!AsynchronousSingletonBehavior.) (a! lib!SimpleLogBehavior.) (a2! lib!SimpleLogBehavior.) (r_points! vstd!map.Map<nat./nat.>.) (the_reads! vstd!set.Set<nat.>.)) (! (= (req%lib!spec.linearization.update_incr_version_1_read_reqs. DT&. DT& b2! a! a2! r_points! the_reads!) (and (=> %%global_location_label%%73 (lib!impl&%12.wf.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b2!))) (=> %%global_location_label%%74 (lib!behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. a2!) (Poly%lib!AsynchronousSingletonBehavior. b2!))) (=> %%global_location_label%%75 (lib!spec.linearization.recursion_invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a2!))) (Poly%lib!AsynchronousSingleton.State. (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b2!))) (Poly%vstd!map.Map<nat./nat.>. r_points!) (Poly%vstd!set.Set<nat.>. the_reads!))) (=> %%global_location_label%%76 (lib!spec.linearization.simple_log_state_equiv_inc_version.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a2!))))))) :pattern ((req%lib!spec.linearization.update_incr_version_1_read_reqs. DT&. DT& b2! a! a2! r_points! the_reads!)) )))
(declare-fun ens%lib!spec.linearization.update_incr_version_1_read_reqs. (Dcr Type lib!AsynchronousSingletonBehavior. lib!SimpleLogBehavior. lib!SimpleLogBehavior. vstd!map.Map<nat./nat.>. vstd!set.Set<nat.>. lib!AsynchronousSingletonBehavior.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (b2! lib!AsynchronousSingletonBehavior.) (a! lib!SimpleLogBehavior.) (a2! lib!SimpleLogBehavior.) (r_points! vstd!map.Map<nat./nat.>.) (the_reads! vstd!set.Set<nat.>.) (res! lib!AsynchronousSingletonBehavior.)) (! (= (ens%lib!spec.linearization.update_incr_version_1_read_reqs. DT&. DT& b2! a! a2! r_points! the_reads! res!) (and (has_type (Poly%lib!AsynchronousSingletonBehavior. res!) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (lib!impl&%12.wf.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. res!)) (lib!behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. a2!) (Poly%lib!AsynchronousSingletonBehavior. res!)) (lib!spec.linearization.recursion_invariant.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a2!))) (Poly%lib!AsynchronousSingleton.State. (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. res!))) (Poly%vstd!map.Map<nat./nat.>. r_points!) (vstd!set.impl&%0.empty.? $ NAT)))) :pattern ((ens%lib!spec.linearization.update_incr_version_1_read_reqs. DT&. DT& b2! a! a2! r_points! the_reads! res!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::update_incr_version_1_read_reqs")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:835:7: 841:45 (#0)")
(set-info :comment ";; Function-Specs lib::spec::linearization::update_incr_version_1_refines")
(declare-fun req%lib!spec.linearization.update_incr_version_1_refines. (Dcr Type lib!AsynchronousSingletonBehavior. lib!SimpleLogBehavior. lib!SimpleLogBehavior. vstd!map.Map<nat./nat.>.) Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (b! lib!AsynchronousSingletonBehavior.) (a! lib!SimpleLogBehavior.) (a2! lib!SimpleLogBehavior.) (r_points! vstd!map.Map<nat./nat.>.)) (! (= (req%lib!spec.linearization.update_incr_version_1_refines. DT&. DT& b! a! a2! r_points!) (and (=> %%global_location_label%%77 (lib!impl&%9.wf.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (=> %%global_location_label%%78 (lib!spec.linearization.future_points_ok.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a2!))) (Poly%vstd!map.Map<nat./nat.>. r_points!))) (=> %%global_location_label%%79 (and (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!))) (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a2!))))) (=> %%global_location_label%%80 (= (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!))) (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a2!))))) (=> %%global_location_label%%81 (and (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!)))))) (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a2!)))))))) (=> %%global_location_label%%82 (lib!spec.linearization.simple_log_state_equiv_inc_version.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a2!))))) (=> %%global_location_label%%83 (<= (nClip (Add (lib!spec.simple_log.SimpleLog.State./State/version (%Poly%lib!spec.simple_log.SimpleLog.State. (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))))) 1)) (vstd!seq.Seq.len.? (proj%%lib!Dispatch./WriteOperation DT&. DT&) (proj%lib!Dispatch./WriteOperation DT&. DT&) (lib!spec.simple_log.SimpleLog.State./State/log (%Poly%lib!spec.simple_log.SimpleLog.State. (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!)))))))) (=> %%global_location_label%%84 (lib!impl&%12.wf.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b!))) (=> %%global_location_label%%85 (lib!behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!) (Poly%lib!AsynchronousSingletonBehavior. b!))) (=> %%global_location_label%%86 (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%lib!AsynchronousSingleton.State. (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b!))) (Poly%vstd!map.Map<nat./nat.>. r_points!))))) :pattern ((req%lib!spec.linearization.update_incr_version_1_refines. DT&. DT& b! a! a2! r_points!)) )))
(declare-fun ens%lib!spec.linearization.update_incr_version_1_refines. (Dcr Type lib!AsynchronousSingletonBehavior. lib!SimpleLogBehavior. lib!SimpleLogBehavior. vstd!map.Map<nat./nat.>. lib!AsynchronousSingletonBehavior.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (b! lib!AsynchronousSingletonBehavior.) (a! lib!SimpleLogBehavior.) (a2! lib!SimpleLogBehavior.) (r_points! vstd!map.Map<nat./nat.>.) (b2! lib!AsynchronousSingletonBehavior.)) (! (= (ens%lib!spec.linearization.update_incr_version_1_refines. DT&. DT& b! a! a2! r_points! b2!) (and (has_type (Poly%lib!AsynchronousSingletonBehavior. b2!) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (lib!impl&%12.wf.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b2!)) (lib!behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. a2!) (Poly%lib!AsynchronousSingletonBehavior. b2!)) (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a2!))) (Poly%lib!AsynchronousSingleton.State. (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b2!))) (Poly%vstd!map.Map<nat./nat.>. r_points!)))) :pattern ((ens%lib!spec.linearization.update_incr_version_1_refines. DT&. DT& b! a! a2! r_points! b2!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::update_incr_version_1_refines")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:733:7: 738:44 (#0)")
(set-info :comment ";; Function-Specs lib::spec::linearization::update_finish_refines")
(declare-fun req%lib!spec.linearization.update_finish_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int Poly) Bool)
(declare-const %%global_location_label%%87 Bool)
(declare-const %%global_location_label%%88 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int) (resp! Poly)) (! (= (req%lib!spec.linearization.update_finish_refines. DT&. DT& s! s2! aop! t! r_points! rid! resp!) (and (=> %%global_location_label%%87 (lib!spec.simple_log.SimpleLog.impl&%4.update_finish.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsyncLabel. aop!) (I rid!) resp!)) (=> %%global_location_label%%88 (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s!) (Poly%lib!AsynchronousSingleton.State. t!) (Poly%vstd!map.Map<nat./nat.>. r_points!))))) :pattern ((req%lib!spec.linearization.update_finish_refines. DT&. DT& s! s2! aop! t! r_points! rid! resp!)) )))
(declare-fun ens%lib!spec.linearization.update_finish_refines. (Dcr Type lib!spec.simple_log.SimpleLog.State. lib!spec.simple_log.SimpleLog.State. lib!AsyncLabel. lib!AsynchronousSingleton.State. vstd!map.Map<nat./nat.>. Int Poly lib!AsynchronousSingleton.State.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (s! lib!spec.simple_log.SimpleLog.State.) (s2! lib!spec.simple_log.SimpleLog.State.) (aop! lib!AsyncLabel.) (t! lib!AsynchronousSingleton.State.) (r_points! vstd!map.Map<nat./nat.>.) (rid! Int) (resp! Poly) (t2! lib!AsynchronousSingleton.State.)) (! (= (ens%lib!spec.linearization.update_finish_refines. DT&. DT& s! s2! aop! t! r_points! rid! resp! t2!) (and (has_type (Poly%lib!AsynchronousSingleton.State. t2!) (TYPE%lib!AsynchronousSingleton.State. DT&. DT&)) (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. s2!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%vstd!map.Map<nat./nat.>. r_points!)) (lib!AsynchronousSingleton.impl&%4.next.? DT&. DT& (Poly%lib!AsynchronousSingleton.State. t!) (Poly%lib!AsynchronousSingleton.State. t2!) (Poly%lib!AsyncLabel. aop!)))) :pattern ((ens%lib!spec.linearization.update_finish_refines. DT&. DT& s! s2! aop! t! r_points! rid! resp! t2!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::update_finish_refines")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:639:7: 647:21 (#0)")
(set-info :comment ";; Function-Specs lib::spec::linearization::update_incr_version_refines")
(declare-fun req%lib!spec.linearization.update_incr_version_refines. (Dcr Type lib!SimpleLogBehavior. vstd!map.Map<nat./nat.>. Int) Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(declare-const %%global_location_label%%91 Bool)
(declare-const %%global_location_label%%92 Bool)
(declare-const %%global_location_label%%93 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! lib!SimpleLogBehavior.) (r_points! vstd!map.Map<nat./nat.>.) (new_version! Int)) (! (= (req%lib!spec.linearization.update_incr_version_refines. DT&. DT& a! r_points! new_version!) (and (=> %%global_location_label%%89 (lib!impl&%9.wf.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (=> %%global_location_label%%90 (lib!spec.linearization.future_points_ok.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%vstd!map.Map<nat./nat.>. r_points!))) (=> %%global_location_label%%91 (is-lib!SimpleLogBehavior./Stepped_ (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!)))) (=> %%global_location_label%%92 (is-lib!AsyncLabel./Internal_ (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!))))))) (=> %%global_location_label%%93 (lib!spec.simple_log.SimpleLog.impl&%4.update_incr_version.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!)))))) (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%lib!AsyncLabel. lib!AsyncLabel./Internal) (I new_version!))))) :pattern ((req%lib!spec.linearization.update_incr_version_refines. DT&. DT& a! r_points! new_version!)) )))
(declare-fun ens%lib!spec.linearization.update_incr_version_refines. (Dcr Type lib!SimpleLogBehavior. vstd!map.Map<nat./nat.>. Int lib!AsynchronousSingletonBehavior.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! lib!SimpleLogBehavior.) (r_points! vstd!map.Map<nat./nat.>.) (new_version! Int) (b! lib!AsynchronousSingletonBehavior.)) (! (= (ens%lib!spec.linearization.update_incr_version_refines. DT&. DT& a! r_points! new_version! b!) (and (has_type (Poly%lib!AsynchronousSingletonBehavior. b!) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (lib!impl&%12.wf.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b!)) (lib!behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!) (Poly%lib!AsynchronousSingletonBehavior. b!)) (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%lib!AsynchronousSingleton.State. (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b!))) (Poly%vstd!map.Map<nat./nat.>. r_points!)))) :pattern ((ens%lib!spec.linearization.update_incr_version_refines. DT&. DT& a! r_points! new_version! b!)) )))
(set-info :comment ";; Function-Specs lib::spec::linearization::exists_equiv_behavior_rec")
(declare-fun req%lib!spec.linearization.exists_equiv_behavior_rec. (Dcr Type lib!SimpleLogBehavior. vstd!map.Map<nat./nat.>.) Bool)
(declare-const %%global_location_label%%94 Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! lib!SimpleLogBehavior.) (r_points! vstd!map.Map<nat./nat.>.)) (! (= (req%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& a! r_points!) (=> %%global_location_label%%94 (and (lib!impl&%9.wf.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!)) (lib!spec.linearization.future_points_ok.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%vstd!map.Map<nat./nat.>. r_points!))))) :pattern ((req%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& a! r_points!)) )))
(declare-fun ens%lib!spec.linearization.exists_equiv_behavior_rec. (Dcr Type lib!SimpleLogBehavior. vstd!map.Map<nat./nat.>. lib!AsynchronousSingletonBehavior.) Bool)
(assert (forall ((DT&. Dcr) (DT& Type) (a! lib!SimpleLogBehavior.) (r_points! vstd!map.Map<nat./nat.>.) (b! lib!AsynchronousSingletonBehavior.)) (! (= (ens%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& a! r_points! b!) (and (has_type (Poly%lib!AsynchronousSingletonBehavior. b!) (TYPE%lib!AsynchronousSingletonBehavior. DT&. DT&)) (and (and (lib!impl&%12.wf.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b!)) (lib!behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!) (Poly%lib!AsynchronousSingletonBehavior. b!))) (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%lib!AsynchronousSingleton.State. (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b!))) (Poly%vstd!map.Map<nat./nat.>. r_points!))))) :pattern ((ens%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& a! r_points! b!)) )))
(set-info :comment ";; Function-Def lib::spec::linearization::update_incr_version_refines")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:691:7: 695:43 (#0)")
(set-info :comment ";; Function-Def lib::spec::linearization::exists_equiv_behavior_rec")
(set-info :comment ";; /home/amarshah/projects/verified-node-replication/verified-node-replication/src/spec/linearization.rs:50:7: 53:43 (#0)")
(declare-const DT&. Dcr)
(declare-const DT& Type)
(declare-const b! lib!AsynchronousSingletonBehavior.)
(declare-const a! lib!SimpleLogBehavior.)
(declare-const r_points! vstd!map.Map<nat./nat.>.)
(declare-const tmp%1 vstd!map.Map<nat./nat.>.)
(declare-const tmp%2 lib!AsynchronousSingleton.State.)
(declare-const b0@ lib!AsynchronousSingletonBehavior.)
(declare-const a0@ lib!AsynchronousSingleton.State.)
(declare-const rid@ Int)
(declare-const rop@ Poly)
(declare-const tmp%3 lib!AsynchronousSingleton.State.)
(declare-const b0$1@ lib!AsynchronousSingletonBehavior.)
(declare-const a0$1@ lib!AsynchronousSingleton.State.)
(declare-const rid$1@ Int)
(declare-const tmp%4 vstd!map.Map<nat./nat.>.)
(declare-const tmp%5 lib!AsynchronousSingleton.State.)
(declare-const b0$2@ lib!AsynchronousSingletonBehavior.)
(declare-const a0$2@ lib!AsynchronousSingleton.State.)
(declare-const rid$2@ Int)
(declare-const logidx@ Int)
(declare-const rop$1@ Poly)
(declare-const tmp%6 lib!AsynchronousSingleton.State.)
(declare-const b0$3@ lib!AsynchronousSingletonBehavior.)
(declare-const a0$3@ lib!AsynchronousSingleton.State.)
(declare-const rid$3@ Int)
(declare-const uop@ Poly)
(declare-const tmp%7 lib!AsynchronousSingleton.State.)
(declare-const b0$4@ lib!AsynchronousSingletonBehavior.)
(declare-const a0$4@ lib!AsynchronousSingleton.State.)
(declare-const rid$4@ Int)
(declare-const tmp%8 lib!AsynchronousSingletonBehavior.)
(declare-const logidx$1@ Int)
(declare-const tmp%9 lib!AsynchronousSingleton.State.)
(declare-const b0$5@ lib!AsynchronousSingletonBehavior.)
(declare-const a0$5@ lib!AsynchronousSingleton.State.)
(declare-const rid$5@ Int)
(declare-const resp@ Poly)
(declare-const tmp%10 lib!AsynchronousSingletonBehavior.)
(declare-const state@ lib!spec.simple_log.SimpleLog.State.)
(declare-const tmp%11 lib!AsynchronousSingletonBehavior.)
(declare-const tmp%12 lib!AsynchronousSingletonBehavior.)
(declare-const tmp%13 lib!AsynchronousSingletonBehavior.)
(declare-const tmp%14 lib!AsynchronousSingletonBehavior.)
(declare-const tmp%15 lib!AsynchronousSingletonBehavior.)
(declare-const tmp%16 lib!AsynchronousSingletonBehavior.)
(declare-const tmp%17 lib!AsynchronousSingletonBehavior.)
(declare-const tmp%18 lib!AsynchronousSingletonBehavior.)
(declare-const prev@ lib!spec.simple_log.SimpleLog.State.)
(declare-const step@ lib!spec.simple_log.SimpleLog.Step.)
(declare-const post@ lib!spec.simple_log.SimpleLog.State.)
(declare-const aop@ lib!AsyncLabel.)
(declare-const tail@ lib!SimpleLogBehavior.)
(declare-const tmp%19 Bool)
(declare-const st@ lib!AsynchronousSingleton.State.)
(declare-const res@ lib!AsynchronousSingletonBehavior.)
(declare-const sl_state@ lib!spec.simple_log.SimpleLog.State.)
(declare-const tmp%20 lib!AsynchronousSingletonBehavior.)
(declare-const decrease%init0 Poly)
(declare-const decrease%init1 Int)
(declare-const decrease%init2 Int)
(assert fuel_defaults)
(assert (has_type (Poly%lib!SimpleLogBehavior. a!) (TYPE%lib!SimpleLogBehavior. DT&. DT&)))
(assert (tr_bound%lib!Dispatch. DT&. DT&))
(assert (and (lib!impl&%9.wf.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!)) (lib!spec.linearization.future_points_ok.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%vstd!map.Map<nat./nat.>. r_points!))))
(declare-fun %%choose%%4 (Type Dcr Type Poly Poly Poly Dcr Type Poly Poly Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Poly) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Poly) (%%hole%%9 Poly) (%%hole%%10 Poly)) (! (=> (exists ((step$1 Poly)) (! (and (has_type step$1 %%hole%%0) (lib!spec.simple_log.SimpleLog.impl&%4.next_by.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 step$1)) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.next_by.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 step$1)) )) (exists ((step$1 Poly)) (! (and (and (has_type step$1 %%hole%%0) (lib!spec.simple_log.SimpleLog.impl&%4.next_by.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 step$1)) (= (%%choose%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10) step$1)) :pattern ((lib!spec.simple_log.SimpleLog.impl&%4.next_by.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 step$1))))) :pattern ((%%choose%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10)))))
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(declare-const %%switch_label%%4 Bool)
(declare-const %%switch_label%%5 Bool)
(declare-const %%switch_label%%6 Bool)
(declare-const %%switch_label%%7 Bool)
(declare-const %%switch_label%%8 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; could not prove termination")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%24 Bool)
(assert (not (=> (= decrease%init0 (Poly%lib!SimpleLogBehavior. a!)) (=> (= decrease%init1 0) (=> (= decrease%init2 0) (or (and (=> (is-lib!SimpleLogBehavior./Stepped_ a!) (=> (= post@ (lib!SimpleLogBehavior./Stepped/0 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!)))) (=> (= aop@ (lib!SimpleLogBehavior./Stepped/1 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!)))) (=> (= tail@ (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!)))) (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.next.) (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.next_by.) (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.next.) (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.next_by.) (=> (= prev@ (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. tail@))) (=> (= step@ (%Poly%lib!spec.simple_log.SimpleLog.Step. (as_type (%%choose%%4 (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&) DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. prev@) (Poly%lib!spec.simple_log.SimpleLog.State. post@) (Poly%lib!AsyncLabel. aop@) DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. prev@) (Poly%lib!spec.simple_log.SimpleLog.State. post@) (Poly%lib!AsyncLabel. aop@)) (TYPE%lib!spec.simple_log.SimpleLog.Step. DT&. DT&)))) (or (and (=> (is-lib!spec.simple_log.SimpleLog.Step./readonly_start_ step@) (=> (= rid@ (lib!spec.simple_log.SimpleLog.Step./readonly_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (=> (= rop@ (lib!spec.simple_log.SimpleLog.Step./readonly_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (=> (= tmp%1 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.remove.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. r_points!) (I rid@)))) (and (=> %%location_label%%0 (check_decrease_height (Poly%lib!SimpleLogBehavior. (let ((a!$0 tail@) (r_points!$1 tmp%1)) a!$0)) decrease%init0 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 tmp%1)) 0) decrease%init1 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 tmp%1)) 0) decrease%init2 false)))) (and (=> %%location_label%%1 (req%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ tmp%1)) (=> (ens%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ tmp%1 b0@) (=> (= tmp%2 (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b0@))) (and (=> %%location_label%%2 (req%lib!spec.linearization.readonly_start_refines. DT&. DT& prev@ post@ aop@ tmp%2 r_points! rid@ rop@)) (=> (ens%lib!spec.linearization.readonly_start_refines. DT&. DT& prev@ post@ aop@ tmp%2 r_points! rid@ rop@ a0@) (=> (= tmp%18 (lib!AsynchronousSingletonBehavior./Stepped (%Poly%lib!AsynchronousSingleton.State. (Poly%lib!AsynchronousSingleton.State. a0@)) (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. aop@)) (%Poly%lib!AsynchronousSingletonBehavior. (Poly%lib!AsynchronousSingletonBehavior. b0@)))) %%switch_label%%1))))))))))) (=> (not (is-lib!spec.simple_log.SimpleLog.Step./readonly_start_ step@)) (or (and (=> (is-lib!spec.simple_log.SimpleLog.Step./readonly_read_version_ step@) (=> (= rid$1@ (lib!spec.simple_log.SimpleLog.Step./readonly_read_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (and (=> %%location_label%%3 (check_decrease_height (Poly%lib!SimpleLogBehavior. (let ((a!$0 tail@) (r_points!$1 r_points!)) a!$0)) decrease%init0 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 r_points!)) 0) decrease%init1 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 r_points!)) 0) decrease%init2 false)))) (and (=> %%location_label%%4 (req%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ r_points!)) (=> (ens%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ r_points! b0$1@) (=> (= tmp%3 (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b0$1@))) (and (=> %%location_label%%5 (req%lib!spec.linearization.readonly_read_version_refines. DT&. DT& prev@ post@ aop@ tmp%3 r_points! rid$1@)) (=> (ens%lib!spec.linearization.readonly_read_version_refines. DT&. DT& prev@ post@ aop@ tmp%3 r_points! rid$1@ a0$1@) (=> (= tmp%17 (lib!AsynchronousSingletonBehavior./Stepped (%Poly%lib!AsynchronousSingleton.State. (Poly%lib!AsynchronousSingleton.State. a0$1@)) (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. aop@)) (%Poly%lib!AsynchronousSingletonBehavior. (Poly%lib!AsynchronousSingletonBehavior. b0$1@)))) %%switch_label%%2))))))))) (=> (not (is-lib!spec.simple_log.SimpleLog.Step./readonly_read_version_ step@)) (or (and (=> (is-lib!spec.simple_log.SimpleLog.Step./readonly_finish_ step@) (=> (= rid$2@ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (=> (= logidx@ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (=> (= rop$1@ (lib!spec.simple_log.SimpleLog.Step./readonly_finish/2 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (=> (= tmp%4 (%Poly%vstd!map.Map<nat./nat.>. (vstd!map.impl&%0.insert.? $ NAT $ NAT (Poly%vstd!map.Map<nat./nat.>. r_points!) (I rid$2@) (I logidx@)))) (and (=> %%location_label%%6 (check_decrease_height (Poly%lib!SimpleLogBehavior. (let ((a!$0 tail@) (r_points!$1 tmp%4)) a!$0)) decrease%init0 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 tmp%4)) 0) decrease%init1 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 tmp%4)) 0) decrease%init2 false)))) (and (=> %%location_label%%7 (req%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ tmp%4)) (=> (ens%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ tmp%4 b0$2@) (=> (= tmp%5 (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b0$2@))) (and (=> %%location_label%%8 (req%lib!spec.linearization.readonly_finish_refines. DT&. DT& prev@ post@ aop@ tmp%5 r_points! rid$2@ logidx@ rop$1@)) (=> (ens%lib!spec.linearization.readonly_finish_refines. DT&. DT& prev@ post@ aop@ tmp%5 r_points! rid$2@ logidx@ rop$1@ a0$2@) (=> (= tmp%16 (lib!AsynchronousSingletonBehavior./Stepped (%Poly%lib!AsynchronousSingleton.State. (Poly%lib!AsynchronousSingleton.State. a0$2@)) (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. aop@)) (%Poly%lib!AsynchronousSingletonBehavior. (Poly%lib!AsynchronousSingletonBehavior. b0$2@)))) %%switch_label%%3)))))))))))) (=> (not (is-lib!spec.simple_log.SimpleLog.Step./readonly_finish_ step@)) (or (and (=> (is-lib!spec.simple_log.SimpleLog.Step./update_start_ step@) (=> (= rid$3@ (lib!spec.simple_log.SimpleLog.Step./update_start/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (=> (= uop@ (lib!spec.simple_log.SimpleLog.Step./update_start/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (and (=> %%location_label%%9 (check_decrease_height (Poly%lib!SimpleLogBehavior. (let ((a!$0 tail@) (r_points!$1 r_points!)) a!$0)) decrease%init0 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 r_points!)) 0) decrease%init1 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 r_points!)) 0) decrease%init2 false)))) (and (=> %%location_label%%10 (req%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ r_points!)) (=> (ens%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ r_points! b0$3@) (=> (= tmp%6 (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b0$3@))) (and (=> %%location_label%%11 (req%lib!spec.linearization.update_start_refines. DT&. DT& prev@ post@ aop@ tmp%6 r_points! rid$3@ uop@)) (=> (ens%lib!spec.linearization.update_start_refines. DT&. DT& prev@ post@ aop@ tmp%6 r_points! rid$3@ uop@ a0$3@) (=> (= tmp%15 (lib!AsynchronousSingletonBehavior./Stepped (%Poly%lib!AsynchronousSingleton.State. (Poly%lib!AsynchronousSingleton.State. a0$3@)) (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. aop@)) (%Poly%lib!AsynchronousSingletonBehavior. (Poly%lib!AsynchronousSingletonBehavior. b0$3@)))) %%switch_label%%4)))))))))) (=> (not (is-lib!spec.simple_log.SimpleLog.Step./update_start_ step@)) (or (and (=> (is-lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log_ step@) (=> (= rid$4@ (lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (and (=> %%location_label%%12 (check_decrease_height (Poly%lib!SimpleLogBehavior. (let ((a!$0 tail@) (r_points!$1 r_points!)) a!$0)) decrease%init0 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 r_points!)) 0) decrease%init1 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 r_points!)) 0) decrease%init2 false)))) (and (=> %%location_label%%13 (req%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ r_points!)) (=> (ens%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ r_points! b0$4@) (=> (= tmp%7 (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b0$4@))) (and (=> %%location_label%%14 (req%lib!spec.linearization.update_add_update_to_log_refines. DT&. DT& prev@ post@ aop@ tmp%7 r_points! rid$4@)) (=> (ens%lib!spec.linearization.update_add_update_to_log_refines. DT&. DT& prev@ post@ aop@ tmp%7 r_points! rid$4@ a0$4@) (=> (= tmp%14 (lib!AsynchronousSingletonBehavior./Stepped (%Poly%lib!AsynchronousSingleton.State. (Poly%lib!AsynchronousSingleton.State. a0$4@)) (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. aop@)) (%Poly%lib!AsynchronousSingletonBehavior. (Poly%lib!AsynchronousSingletonBehavior. b0$4@)))) %%switch_label%%5))))))))) (=> (not (is-lib!spec.simple_log.SimpleLog.Step./update_add_op_to_log_ step@)) (or (and (=> (is-lib!spec.simple_log.SimpleLog.Step./update_incr_version_ step@) (=> (= logidx$1@ (lib!spec.simple_log.SimpleLog.Step./update_incr_version/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (and (=> %%location_label%%15 (check_decrease_height (Poly%lib!SimpleLogBehavior. (let ((a!$0 a!) (r_points!$1 r_points!) (new_version!$2 logidx$1@)) (lib!SimpleLogBehavior./Stepped/2 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!$0))))) decrease%init0 (check_decrease_int (let ((a!$0 a!) (r_points!$1 r_points!) (new_version!$2 logidx$1@)) 1) decrease%init1 (check_decrease_int (let ((a!$0 a!) (r_points!$1 r_points!) (new_version!$2 logidx$1@)) new_version!$2) decrease%init2 false)))) (and (=> %%location_label%%16 (req%lib!spec.linearization.update_incr_version_refines. DT&. DT& a! r_points! logidx$1@)) (=> (ens%lib!spec.linearization.update_incr_version_refines. DT&. DT& a! r_points! logidx$1@ tmp%8) (=> (= tmp%13 tmp%8) %%switch_label%%6)))))) (=> (not (is-lib!spec.simple_log.SimpleLog.Step./update_incr_version_ step@)) (or (and (=> (is-lib!spec.simple_log.SimpleLog.Step./update_finish_ step@) (=> (= rid$5@ (lib!spec.simple_log.SimpleLog.Step./update_finish/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (=> (= resp@ (lib!spec.simple_log.SimpleLog.Step./update_finish/1 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (and (=> %%location_label%%17 (check_decrease_height (Poly%lib!SimpleLogBehavior. (let ((a!$0 tail@) (r_points!$1 r_points!)) a!$0)) decrease%init0 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 r_points!)) 0) decrease%init1 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 r_points!)) 0) decrease%init2 false)))) (and (=> %%location_label%%18 (req%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ r_points!)) (=> (ens%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ r_points! b0$5@) (=> (= tmp%9 (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b0$5@))) (and (=> %%location_label%%19 (req%lib!spec.linearization.update_finish_refines. DT&. DT& prev@ post@ aop@ tmp%9 r_points! rid$5@ resp@)) (=> (ens%lib!spec.linearization.update_finish_refines. DT&. DT& prev@ post@ aop@ tmp%9 r_points! rid$5@ resp@ a0$5@) (=> (= tmp%12 (lib!AsynchronousSingletonBehavior./Stepped (%Poly%lib!AsynchronousSingleton.State. (Poly%lib!AsynchronousSingleton.State. a0$5@)) (%Poly%lib!AsyncLabel. (Poly%lib!AsyncLabel. aop@)) (%Poly%lib!AsynchronousSingletonBehavior. (Poly%lib!AsynchronousSingletonBehavior. b0$5@)))) %%switch_label%%7)))))))))) (=> (not (is-lib!spec.simple_log.SimpleLog.Step./update_finish_ step@)) (or (and (=> (is-lib!spec.simple_log.SimpleLog.Step./no_op_ step@) (and (=> %%location_label%%20 (check_decrease_height (Poly%lib!SimpleLogBehavior. (let ((a!$0 tail@) (r_points!$1 r_points!)) a!$0)) decrease%init0 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 r_points!)) 0) decrease%init1 (check_decrease_int (let ((a!$0 tail@) (r_points!$1 r_points!)) 0) decrease%init2 false)))) (and (=> %%location_label%%21 (req%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ r_points!)) (=> (ens%lib!spec.linearization.exists_equiv_behavior_rec. DT&. DT& tail@ r_points! tmp%10) (=> (= tmp%11 tmp%10) %%switch_label%%8))))) (=> (not (is-lib!spec.simple_log.SimpleLog.Step./no_op_ step@)) (=> (= state@ (lib!spec.simple_log.SimpleLog.Step./dummy_to_use_type_params/0 (%Poly%lib!spec.simple_log.SimpleLog.Step. (Poly%lib!spec.simple_log.SimpleLog.Step. step@)))) (=> %%location_label%%22 false)))) (and (not %%switch_label%%8) (=> (= tmp%12 tmp%11) %%switch_label%%7))))) (and (not %%switch_label%%7) (=> (= tmp%13 tmp%12) %%switch_label%%6))))) (and (not %%switch_label%%6) (=> (= tmp%14 tmp%13) %%switch_label%%5))))) (and (not %%switch_label%%5) (=> (= tmp%15 tmp%14) %%switch_label%%4))))) (and (not %%switch_label%%4) (=> (= tmp%16 tmp%15) %%switch_label%%3))))) (and (not %%switch_label%%3) (=> (= tmp%17 tmp%16) %%switch_label%%2))))) (and (not %%switch_label%%2) (=> (= tmp%18 tmp%17) %%switch_label%%1))))) (and (not %%switch_label%%1) (=> (= tmp%20 tmp%18) %%switch_label%%0))))))))))))) (=> (not (is-lib!SimpleLogBehavior./Stepped_ a!)) (=> (= sl_state@ (lib!SimpleLogBehavior./Inited/0 (%Poly%lib!SimpleLogBehavior. (Poly%lib!SimpleLogBehavior. a!)))) (=> (= st@ (lib!AsynchronousSingleton.State./State (lib!Dispatch.init_spec.? DT&. DT&) (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!InputOperation. DT&. DT&)) (vstd!map.impl&%0.empty.? $ NAT $ (TYPE%lib!OutputOperation. DT&. DT&)))) (=> (= res@ (lib!AsynchronousSingletonBehavior./Inited (%Poly%lib!AsynchronousSingleton.State. (Poly%lib!AsynchronousSingleton.State. st@)))) (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.init.) (=> (fuel_bool fuel%lib!spec.simple_log.SimpleLog.impl&%4.init_by.) (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.init.) (=> (fuel_bool fuel%lib!AsynchronousSingleton.impl&%4.init_by.) (=> (= tmp%19 (lib!AsynchronousSingleton.impl&%4.init_by.? DT&. DT& (Poly%lib!AsynchronousSingleton.State. st@) (Poly%lib!AsynchronousSingleton.Config. lib!AsynchronousSingleton.Config./initialize))) (and (=> %%location_label%%23 tmp%19) (=> tmp%19 (=> (= tmp%20 res@) %%switch_label%%0))))))))))))) (and (not %%switch_label%%0) (=> (= b! tmp%20) (=> %%location_label%%24 (and (and (lib!impl&%12.wf.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b!)) (lib!behavior_equiv.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!) (Poly%lib!AsynchronousSingletonBehavior. b!))) (lib!spec.linearization.state_refinement_relation.? DT&. DT& (Poly%lib!spec.simple_log.SimpleLog.State. (lib!impl&%9.get_last.? DT&. DT& (Poly%lib!SimpleLogBehavior. a!))) (Poly%lib!AsynchronousSingleton.State. (lib!impl&%12.get_last.? DT&. DT& (Poly%lib!AsynchronousSingletonBehavior. b!))) (Poly%vstd!map.Map<nat./nat.>. r_points!))))))))))))
(check-sat)
(exit)
