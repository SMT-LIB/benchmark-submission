(set-info :smt-lib-version 2.6)
(set-logic UFDTLIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) 
and processed using Mariposa (https://github.com/secure-foundations/mariposa).
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id)) ))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)) )))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)) )))
(assert (forall ((x Poly) (t Type)) (! (and (has_type (as_type x t) t) (=> (has_type x t) (= x (as_type x t)))) :pattern ((as_type x t)) )))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)) )))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)) )))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)) )))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))) )))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)) )))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (t Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep t x y)) :pattern ((ext_eq deep t x y)) )))
(declare-const SZ Int)
(assert (or (= SZ 32) (= SZ 64)))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)) )))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)) )))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)) )))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)) )))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)) )))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)) )))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)) )))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))) )))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))) )))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)) )))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))) )))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))) )))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))) )))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))) )))
(declare-fun singular_mod (Int Int) Int)
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)) )))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)) )))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module delegation_map_v'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!std_specs.vec.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_spec_len. FuelId)
(declare-const fuel%vstd!std_specs.vec.axiom_vec_index_decreases. FuelId)
(declare-const fuel%vstd!map.impl&%0.total. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.contains. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.no_duplicates. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.to_set. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.insert. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.remove. FuelId)
(declare-const fuel%vstd!seq_lib.seq_to_set_is_finite. FuelId)
(declare-const fuel%vstd!seq_lib.check_argument_is_seq. FuelId)
(declare-const fuel%vstd!set.impl&%0.full. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_complement. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!set_lib.impl&%0.is_full. FuelId)
(declare-const fuel%vstd!set_lib.check_argument_is_set. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.eq. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.ne. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.lt. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.gt. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.le. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%0.ge. FuelId)
(declare-const fuel%lib!delegation_map_v.sorted. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%1.view. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%1.valid. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%2.end_spec. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%2.is_end_spec. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%2.get_spec. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%2.leq_spec. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%2.geq_K. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%2.above_spec. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%2.between. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%3.view. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%3.map_valid. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%3.valid. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%3.gap. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%3.greatest_lower_bound_spec. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%4.view. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%4.valid. FuelId)
(declare-const fuel%lib!delegation_map_v.impl&%4.range_consistent. FuelId)
(declare-const fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address. FuelId)
(declare-const fuel%lib!delegation_map_t.impl&%0.view. FuelId)
(declare-const fuel%lib!delegation_map_t.impl&%0.spec_index. FuelId)
(declare-const fuel%lib!delegation_map_t.impl&%0.is_complete. FuelId)
(declare-const fuel%lib!delegation_map_t.impl&%0.update. FuelId)
(declare-const fuel%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host. FuelId)
(declare-const fuel%lib!io_t.impl&%4.view. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.new_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.cmp_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.lt_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%3.geq_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%4.contains. FuelId)
(declare-const fuel%lib!keys_t.impl&%13.zero_spec. FuelId)
(declare-const fuel%lib!keys_t.impl&%13.cmp_spec. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!std_specs.vec.impl&%0.spec_index. fuel%vstd!std_specs.vec.axiom_spec_len. fuel%vstd!std_specs.vec.axiom_vec_index_decreases. fuel%vstd!map.impl&%0.total. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.contains. fuel%vstd!seq_lib.impl&%0.no_duplicates. fuel%vstd!seq_lib.impl&%0.to_set. fuel%vstd!seq_lib.impl&%0.insert. fuel%vstd!seq_lib.impl&%0.remove. fuel%vstd!seq_lib.seq_to_set_is_finite. fuel%vstd!seq_lib.check_argument_is_seq. fuel%vstd!set.impl&%0.full. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_complement. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!set_lib.impl&%0.is_full. fuel%vstd!set_lib.check_argument_is_set. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%42.view. fuel%lib!delegation_map_v.impl&%0.eq. fuel%lib!delegation_map_v.impl&%0.ne. fuel%lib!delegation_map_v.impl&%0.lt. fuel%lib!delegation_map_v.impl&%0.gt. fuel%lib!delegation_map_v.impl&%0.le. fuel%lib!delegation_map_v.impl&%0.ge. fuel%lib!delegation_map_v.sorted. fuel%lib!delegation_map_v.impl&%1.view. fuel%lib!delegation_map_v.impl&%1.valid. fuel%lib!delegation_map_v.impl&%2.end_spec. fuel%lib!delegation_map_v.impl&%2.is_end_spec. fuel%lib!delegation_map_v.impl&%2.get_spec. fuel%lib!delegation_map_v.impl&%2.leq_spec. fuel%lib!delegation_map_v.impl&%2.geq_K. fuel%lib!delegation_map_v.impl&%2.above_spec. fuel%lib!delegation_map_v.impl&%2.between. fuel%lib!delegation_map_v.impl&%3.view. fuel%lib!delegation_map_v.impl&%3.map_valid. fuel%lib!delegation_map_v.impl&%3.valid. fuel%lib!delegation_map_v.impl&%3.gap. fuel%lib!delegation_map_v.impl&%3.greatest_lower_bound_spec. fuel%lib!delegation_map_v.impl&%4.view. fuel%lib!delegation_map_v.impl&%4.valid. fuel%lib!delegation_map_v.impl&%4.range_consistent. fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address. fuel%lib!delegation_map_t.impl&%0.view. fuel%lib!delegation_map_t.impl&%0.spec_index. fuel%lib!delegation_map_t.impl&%0.is_complete. fuel%lib!delegation_map_t.impl&%0.update. fuel%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host. fuel%lib!io_t.impl&%4.view. fuel%lib!keys_t.impl&%3.new_spec. fuel%lib!keys_t.impl&%3.cmp_spec. fuel%lib!keys_t.impl&%3.lt_spec. fuel%lib!keys_t.impl&%3.geq_spec. fuel%lib!keys_t.impl&%4.contains. fuel%lib!keys_t.impl&%13.zero_spec. fuel%lib!keys_t.impl&%13.cmp_spec. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (fuel_bool_default fuel%vstd!seq_lib.seq_to_set_is_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_complement.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (and (fuel_bool_default fuel%vstd!std_specs.vec.axiom_spec_len.) (fuel_bool_default fuel%vstd!std_specs.vec.axiom_vec_index_decreases.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort alloc!vec.Vec<u8./allocator_global%.>. 0)
(declare-sort alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. 0)
(declare-sort vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<lib!io_t.EndPoint.>. 0)
(declare-sort vstd!set.Set<lib!keys_t.SHTKey.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (lib!delegation_map_v.StrictlyOrderedVec. 0) (lib!delegation_map_v.StrictlyOrderedMap. 0) (lib!delegation_map_v.DelegationMap. 0) (lib!abstract_end_point_t.AbstractEndPoint. 0) (lib!delegation_map_t.AbstractDelegationMap. 0) (lib!io_t.EndPoint. 0) (lib!keys_t.Ordering. 0) (lib!keys_t.KeyIterator. 0) (lib!keys_t.KeyRange. 0) (lib!keys_t.SHTKey. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec (lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec/?v Poly))) ((lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/?keys lib!delegation_map_v.StrictlyOrderedVec.) (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/?vals alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.) (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/?m Poly))) ((lib!delegation_map_v.DelegationMap./DelegationMap (lib!delegation_map_v.DelegationMap./DelegationMap/?lows lib!delegation_map_v.StrictlyOrderedMap.) (lib!delegation_map_v.DelegationMap./DelegationMap/?m Poly))) ((lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/?id vstd!seq.Seq<u8.>.))) ((lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/?0 vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.))) ((lib!io_t.EndPoint./EndPoint (lib!io_t.EndPoint./EndPoint/?id alloc!vec.Vec<u8./allocator_global%.>.))) ((lib!keys_t.Ordering./Less ) (lib!keys_t.Ordering./Equal ) (lib!keys_t.Ordering./Greater )) ((lib!keys_t.KeyIterator./KeyIterator (lib!keys_t.KeyIterator./KeyIterator/?k core!option.Option.))) ((lib!keys_t.KeyRange./KeyRange (lib!keys_t.KeyRange./KeyRange/?lo lib!keys_t.KeyIterator.) (lib!keys_t.KeyRange./KeyRange/?hi lib!keys_t.KeyIterator.))) ((lib!keys_t.SHTKey./SHTKey (lib!keys_t.SHTKey./SHTKey/?ukey Int))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec/v (lib!delegation_map_v.StrictlyOrderedVec.) Poly)
(declare-fun lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys (lib!delegation_map_v.StrictlyOrderedMap.) lib!delegation_map_v.StrictlyOrderedVec.)
(declare-fun lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/vals (lib!delegation_map_v.StrictlyOrderedMap.) alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)
(declare-fun lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m (lib!delegation_map_v.StrictlyOrderedMap.) Poly)
(declare-fun lib!delegation_map_v.DelegationMap./DelegationMap/lows (lib!delegation_map_v.DelegationMap.) lib!delegation_map_v.StrictlyOrderedMap.)
(declare-fun lib!delegation_map_v.DelegationMap./DelegationMap/m (lib!delegation_map_v.DelegationMap.) Poly)
(declare-fun lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id (lib!abstract_end_point_t.AbstractEndPoint.) vstd!seq.Seq<u8.>.)
(declare-fun lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (lib!delegation_map_t.AbstractDelegationMap.) vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-fun lib!io_t.EndPoint./EndPoint/id (lib!io_t.EndPoint.) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun lib!keys_t.KeyIterator./KeyIterator/k (lib!keys_t.KeyIterator.) core!option.Option.)
(declare-fun lib!keys_t.KeyRange./KeyRange/lo (lib!keys_t.KeyRange.) lib!keys_t.KeyIterator.)
(declare-fun lib!keys_t.KeyRange./KeyRange/hi (lib!keys_t.KeyRange.) lib!keys_t.KeyIterator.)
(declare-fun lib!keys_t.SHTKey./SHTKey/ukey (lib!keys_t.SHTKey.) Int)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%alloc!vec.Vec. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%lib!delegation_map_v.StrictlyOrderedVec. (Dcr Type) Type)
(declare-fun TYPE%lib!delegation_map_v.StrictlyOrderedMap. (Dcr Type) Type)
(declare-fun TYPE%lib!delegation_map_v.DelegationMap. (Dcr Type) Type)
(declare-const TYPE%lib!abstract_end_point_t.AbstractEndPoint. Type)
(declare-const TYPE%lib!delegation_map_t.AbstractDelegationMap. Type)
(declare-const TYPE%lib!io_t.EndPoint. Type)
(declare-const TYPE%lib!keys_t.Ordering. Type)
(declare-fun TYPE%lib!keys_t.KeyIterator. (Dcr Type) Type)
(declare-fun TYPE%lib!keys_t.KeyRange. (Dcr Type) Type)
(declare-const TYPE%lib!keys_t.SHTKey. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%alloc!vec.Vec<u8./allocator_global%.>. (alloc!vec.Vec<u8./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly) alloc!vec.Vec<u8./allocator_global%.>.)
(declare-fun Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.) Poly)
(declare-fun %Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (Poly) alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)
(declare-fun Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (Poly) vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (vstd!seq.Seq<lib!io_t.EndPoint.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (Poly) vstd!seq.Seq<lib!io_t.EndPoint.>.)
(declare-fun Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (vstd!set.Set<lib!keys_t.SHTKey.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (Poly) vstd!set.Set<lib!keys_t.SHTKey.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedVec.) Poly)
(declare-fun %Poly%lib!delegation_map_v.StrictlyOrderedVec. (Poly) lib!delegation_map_v.StrictlyOrderedVec.)
(declare-fun Poly%lib!delegation_map_v.StrictlyOrderedMap. (lib!delegation_map_v.StrictlyOrderedMap.) Poly)
(declare-fun %Poly%lib!delegation_map_v.StrictlyOrderedMap. (Poly) lib!delegation_map_v.StrictlyOrderedMap.)
(declare-fun Poly%lib!delegation_map_v.DelegationMap. (lib!delegation_map_v.DelegationMap.) Poly)
(declare-fun %Poly%lib!delegation_map_v.DelegationMap. (Poly) lib!delegation_map_v.DelegationMap.)
(declare-fun Poly%lib!abstract_end_point_t.AbstractEndPoint. (lib!abstract_end_point_t.AbstractEndPoint.) Poly)
(declare-fun %Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(declare-fun Poly%lib!delegation_map_t.AbstractDelegationMap. (lib!delegation_map_t.AbstractDelegationMap.) Poly)
(declare-fun %Poly%lib!delegation_map_t.AbstractDelegationMap. (Poly) lib!delegation_map_t.AbstractDelegationMap.)
(declare-fun Poly%lib!io_t.EndPoint. (lib!io_t.EndPoint.) Poly)
(declare-fun %Poly%lib!io_t.EndPoint. (Poly) lib!io_t.EndPoint.)
(declare-fun Poly%lib!keys_t.Ordering. (lib!keys_t.Ordering.) Poly)
(declare-fun %Poly%lib!keys_t.Ordering. (Poly) lib!keys_t.Ordering.)
(declare-fun Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator.) Poly)
(declare-fun %Poly%lib!keys_t.KeyIterator. (Poly) lib!keys_t.KeyIterator.)
(declare-fun Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange.) Poly)
(declare-fun %Poly%lib!keys_t.KeyRange. (Poly) lib!keys_t.KeyRange.)
(declare-fun Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey.) Poly)
(declare-fun %Poly%lib!keys_t.SHTKey. (Poly) lib!keys_t.SHTKey.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)) )) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) ))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<u8./allocator_global%.>. (Poly%alloc!vec.Vec<u8./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<u8./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<u8./allocator_global%.>. (%Poly%alloc!vec.Vec<u8./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<u8./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<u8./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)) (! (= x (%Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x))) :pattern ((Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL)) (= x (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (%Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x)))) :pattern ((has_type x (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.)) (! (has_type (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL)) :pattern ((has_type (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. x) (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL))) )))
(assert (forall ((x vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (= x (%Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. x))) :pattern ((Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) (= x (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (%Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.)) (! (has_type (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) :pattern ((has_type (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))) )))
(assert (forall ((x vstd!seq.Seq<lib!io_t.EndPoint.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.)) (= x (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. (%Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.))) )))
(assert (forall ((x vstd!seq.Seq<lib!io_t.EndPoint.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!io_t.EndPoint.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!io_t.EndPoint.))) )))
(assert (forall ((x vstd!set.Set<lib!keys_t.SHTKey.>.)) (! (= x (%Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x))) :pattern ((Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.)) (= x (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. (%Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.))) )))
(assert (forall ((x vstd!set.Set<lib!keys_t.SHTKey.>.)) (! (has_type (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.)) :pattern ((has_type (Poly%vstd!set.Set<lib!keys_t.SHTKey.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!keys_t.SHTKey.))) )))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)) )))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)) )))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) )))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)) )))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))) )))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))) )))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)) )))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)) )))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)) )))
(assert (forall ((x lib!delegation_map_v.StrictlyOrderedVec.)) (! (= x (%Poly%lib!delegation_map_v.StrictlyOrderedVec. (Poly%lib!delegation_map_v.StrictlyOrderedVec. x))) :pattern ((Poly%lib!delegation_map_v.StrictlyOrderedVec. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&)) (= x (Poly%lib!delegation_map_v.StrictlyOrderedVec. (%Poly%lib!delegation_map_v.StrictlyOrderedVec. x)))) :pattern ((has_type x (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_v! Poly)) (! (=> (has_type _v! (TYPE%alloc!vec.Vec. K&. K& $ ALLOCATOR_GLOBAL)) (has_type (Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec _v!)) (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&))) :pattern ((has_type (Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec _v!)) (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&))) )))
(assert (forall ((x lib!delegation_map_v.StrictlyOrderedVec.)) (! (= (lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec/v x) (lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec/?v x)) :pattern ((lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec/v x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&)) (has_type (lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec/v (%Poly%lib!delegation_map_v.StrictlyOrderedVec. x)) (TYPE%alloc!vec.Vec. K&. K& $ ALLOCATOR_GLOBAL))) :pattern ((lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec/v (%Poly%lib!delegation_map_v.StrictlyOrderedVec. x)) (has_type x (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&))) )))
(define-fun is-lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec_ ((c lib!delegation_map_v.StrictlyOrderedVec.)) Bool ((_ is lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec) c))
(assert (forall ((x lib!delegation_map_v.StrictlyOrderedVec.)) (! (=> (is-lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec_ x) (height_lt (height (lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec/v x)) (height (Poly%lib!delegation_map_v.StrictlyOrderedVec. x)))) :pattern ((height (lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec/v x))) )))
(assert (forall ((x lib!delegation_map_v.StrictlyOrderedMap.)) (! (= x (%Poly%lib!delegation_map_v.StrictlyOrderedMap. (Poly%lib!delegation_map_v.StrictlyOrderedMap. x))) :pattern ((Poly%lib!delegation_map_v.StrictlyOrderedMap. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&)) (= x (Poly%lib!delegation_map_v.StrictlyOrderedMap. (%Poly%lib!delegation_map_v.StrictlyOrderedMap. x)))) :pattern ((has_type x (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_keys! lib!delegation_map_v.StrictlyOrderedVec.) (_vals! alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>.) (_m! Poly)) (! (=> (and (has_type (Poly%lib!delegation_map_v.StrictlyOrderedVec. _keys!) (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&)) (has_type _m! (TYPE%vstd!map.Map. K&. K& $ TYPE%lib!io_t.EndPoint.))) (has_type (Poly%lib!delegation_map_v.StrictlyOrderedMap. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap _keys! _vals! _m!)) (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&))) :pattern ((has_type (Poly%lib!delegation_map_v.StrictlyOrderedMap. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap _keys! _vals! _m!)) (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&))) )))
(assert (forall ((x lib!delegation_map_v.StrictlyOrderedMap.)) (! (= (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys x) (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/?keys x)) :pattern ((lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&)) (has_type (Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys (%Poly%lib!delegation_map_v.StrictlyOrderedMap. x))) (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&))) :pattern ((lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys (%Poly%lib!delegation_map_v.StrictlyOrderedMap. x)) (has_type x (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&))) )))
(assert (forall ((x lib!delegation_map_v.StrictlyOrderedMap.)) (! (= (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/vals x) (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/?vals x)) :pattern ((lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/vals x)) )))
(assert (forall ((x lib!delegation_map_v.StrictlyOrderedMap.)) (! (= (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m x) (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/?m x)) :pattern ((lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&)) (has_type (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m (%Poly%lib!delegation_map_v.StrictlyOrderedMap. x)) (TYPE%vstd!map.Map. K&. K& $ TYPE%lib!io_t.EndPoint.))) :pattern ((lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m (%Poly%lib!delegation_map_v.StrictlyOrderedMap. x)) (has_type x (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&))) )))
(define-fun is-lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap_ ((c lib!delegation_map_v.StrictlyOrderedMap.)) Bool ((_ is lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap) c))
(assert (forall ((x lib!delegation_map_v.StrictlyOrderedMap.)) (! (=> (is-lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap_ x) (height_lt (height (Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys x))) (height (Poly%lib!delegation_map_v.StrictlyOrderedMap. x)))) :pattern ((height (Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys x)))) )))
(assert (forall ((x lib!delegation_map_v.StrictlyOrderedMap.)) (! (=> (is-lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap_ x) (height_lt (height (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m x)) (height (Poly%lib!delegation_map_v.StrictlyOrderedMap. x)))) :pattern ((height (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m x))) )))
(assert (forall ((x lib!delegation_map_v.StrictlyOrderedMap.)) (! (=> (is-lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap_ x) (height_lt (height (fun_from_recursive_field (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m x))) (height (Poly%lib!delegation_map_v.StrictlyOrderedMap. x)))) :pattern ((height (fun_from_recursive_field (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m x)))) )))
(assert (forall ((x lib!delegation_map_v.DelegationMap.)) (! (= x (%Poly%lib!delegation_map_v.DelegationMap. (Poly%lib!delegation_map_v.DelegationMap. x))) :pattern ((Poly%lib!delegation_map_v.DelegationMap. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!delegation_map_v.DelegationMap. K&. K&)) (= x (Poly%lib!delegation_map_v.DelegationMap. (%Poly%lib!delegation_map_v.DelegationMap. x)))) :pattern ((has_type x (TYPE%lib!delegation_map_v.DelegationMap. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_lows! lib!delegation_map_v.StrictlyOrderedMap.) (_m! Poly)) (! (=> (and (has_type (Poly%lib!delegation_map_v.StrictlyOrderedMap. _lows!) (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&)) (has_type _m! (TYPE%vstd!map.Map. K&. K& $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) (has_type (Poly%lib!delegation_map_v.DelegationMap. (lib!delegation_map_v.DelegationMap./DelegationMap _lows! _m!)) (TYPE%lib!delegation_map_v.DelegationMap. K&. K&))) :pattern ((has_type (Poly%lib!delegation_map_v.DelegationMap. (lib!delegation_map_v.DelegationMap./DelegationMap _lows! _m!)) (TYPE%lib!delegation_map_v.DelegationMap. K&. K&))) )))
(assert (forall ((x lib!delegation_map_v.DelegationMap.)) (! (= (lib!delegation_map_v.DelegationMap./DelegationMap/lows x) (lib!delegation_map_v.DelegationMap./DelegationMap/?lows x)) :pattern ((lib!delegation_map_v.DelegationMap./DelegationMap/lows x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!delegation_map_v.DelegationMap. K&. K&)) (has_type (Poly%lib!delegation_map_v.StrictlyOrderedMap. (lib!delegation_map_v.DelegationMap./DelegationMap/lows (%Poly%lib!delegation_map_v.DelegationMap. x))) (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&))) :pattern ((lib!delegation_map_v.DelegationMap./DelegationMap/lows (%Poly%lib!delegation_map_v.DelegationMap. x)) (has_type x (TYPE%lib!delegation_map_v.DelegationMap. K&. K&))) )))
(assert (forall ((x lib!delegation_map_v.DelegationMap.)) (! (= (lib!delegation_map_v.DelegationMap./DelegationMap/m x) (lib!delegation_map_v.DelegationMap./DelegationMap/?m x)) :pattern ((lib!delegation_map_v.DelegationMap./DelegationMap/m x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!delegation_map_v.DelegationMap. K&. K&)) (has_type (lib!delegation_map_v.DelegationMap./DelegationMap/m (%Poly%lib!delegation_map_v.DelegationMap. x)) (TYPE%vstd!map.Map. K&. K& $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) :pattern ((lib!delegation_map_v.DelegationMap./DelegationMap/m (%Poly%lib!delegation_map_v.DelegationMap. x)) (has_type x (TYPE%lib!delegation_map_v.DelegationMap. K&. K&))) )))
(define-fun is-lib!delegation_map_v.DelegationMap./DelegationMap_ ((c lib!delegation_map_v.DelegationMap.)) Bool ((_ is lib!delegation_map_v.DelegationMap./DelegationMap) c))
(assert (forall ((x lib!delegation_map_v.DelegationMap.)) (! (=> (is-lib!delegation_map_v.DelegationMap./DelegationMap_ x) (height_lt (height (Poly%lib!delegation_map_v.StrictlyOrderedMap. (lib!delegation_map_v.DelegationMap./DelegationMap/lows x))) (height (Poly%lib!delegation_map_v.DelegationMap. x)))) :pattern ((height (Poly%lib!delegation_map_v.StrictlyOrderedMap. (lib!delegation_map_v.DelegationMap./DelegationMap/lows x)))) )))
(assert (forall ((x lib!delegation_map_v.DelegationMap.)) (! (=> (is-lib!delegation_map_v.DelegationMap./DelegationMap_ x) (height_lt (height (lib!delegation_map_v.DelegationMap./DelegationMap/m x)) (height (Poly%lib!delegation_map_v.DelegationMap. x)))) :pattern ((height (lib!delegation_map_v.DelegationMap./DelegationMap/m x))) )))
(assert (forall ((x lib!delegation_map_v.DelegationMap.)) (! (=> (is-lib!delegation_map_v.DelegationMap./DelegationMap_ x) (height_lt (height (fun_from_recursive_field (lib!delegation_map_v.DelegationMap./DelegationMap/m x))) (height (Poly%lib!delegation_map_v.DelegationMap. x)))) :pattern ((height (fun_from_recursive_field (lib!delegation_map_v.DelegationMap./DelegationMap/m x)))) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (= x (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (Poly%lib!abstract_end_point_t.AbstractEndPoint. x))) :pattern ((Poly%lib!abstract_end_point_t.AbstractEndPoint. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (= x (Poly%lib!abstract_end_point_t.AbstractEndPoint. (%Poly%lib!abstract_end_point_t.AbstractEndPoint. x)))) :pattern ((has_type x TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (= (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id x) (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/?id x)) :pattern ((lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id x)) )))
(assert (forall ((x lib!abstract_end_point_t.AbstractEndPoint.)) (! (has_type (Poly%lib!abstract_end_point_t.AbstractEndPoint. x) TYPE%lib!abstract_end_point_t.AbstractEndPoint.) :pattern ((has_type (Poly%lib!abstract_end_point_t.AbstractEndPoint. x) TYPE%lib!abstract_end_point_t.AbstractEndPoint.)) )))
(assert (forall ((x lib!delegation_map_t.AbstractDelegationMap.)) (! (= x (%Poly%lib!delegation_map_t.AbstractDelegationMap. (Poly%lib!delegation_map_t.AbstractDelegationMap. x))) :pattern ((Poly%lib!delegation_map_t.AbstractDelegationMap. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!delegation_map_t.AbstractDelegationMap.) (= x (Poly%lib!delegation_map_t.AbstractDelegationMap. (%Poly%lib!delegation_map_t.AbstractDelegationMap. x)))) :pattern ((has_type x TYPE%lib!delegation_map_t.AbstractDelegationMap.)) )))
(assert (forall ((x lib!delegation_map_t.AbstractDelegationMap.)) (! (= (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 x) (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/?0 x)) :pattern ((lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 x)) )))
(assert (forall ((x lib!delegation_map_t.AbstractDelegationMap.)) (! (has_type (Poly%lib!delegation_map_t.AbstractDelegationMap. x) TYPE%lib!delegation_map_t.AbstractDelegationMap.) :pattern ((has_type (Poly%lib!delegation_map_t.AbstractDelegationMap. x) TYPE%lib!delegation_map_t.AbstractDelegationMap.)) )))
(assert (forall ((deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x TYPE%lib!delegation_map_t.AbstractDelegationMap.) (has_type y TYPE%lib!delegation_map_t.AbstractDelegationMap.) (ext_eq deep (TYPE%vstd!map.Map. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. x))) (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. y))))) (ext_eq deep TYPE%lib!delegation_map_t.AbstractDelegationMap. x y)) :pattern ((ext_eq deep TYPE%lib!delegation_map_t.AbstractDelegationMap. x y)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (= x (%Poly%lib!io_t.EndPoint. (Poly%lib!io_t.EndPoint. x))) :pattern ((Poly%lib!io_t.EndPoint. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!io_t.EndPoint.) (= x (Poly%lib!io_t.EndPoint. (%Poly%lib!io_t.EndPoint. x)))) :pattern ((has_type x TYPE%lib!io_t.EndPoint.)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (= (lib!io_t.EndPoint./EndPoint/id x) (lib!io_t.EndPoint./EndPoint/?id x)) :pattern ((lib!io_t.EndPoint./EndPoint/id x)) )))
(assert (forall ((x lib!io_t.EndPoint.)) (! (has_type (Poly%lib!io_t.EndPoint. x) TYPE%lib!io_t.EndPoint.) :pattern ((has_type (Poly%lib!io_t.EndPoint. x) TYPE%lib!io_t.EndPoint.)) )))
(assert (forall ((x lib!keys_t.Ordering.)) (! (= x (%Poly%lib!keys_t.Ordering. (Poly%lib!keys_t.Ordering. x))) :pattern ((Poly%lib!keys_t.Ordering. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.Ordering.) (= x (Poly%lib!keys_t.Ordering. (%Poly%lib!keys_t.Ordering. x)))) :pattern ((has_type x TYPE%lib!keys_t.Ordering.)) )))
(assert (forall ((x lib!keys_t.Ordering.)) (! (has_type (Poly%lib!keys_t.Ordering. x) TYPE%lib!keys_t.Ordering.) :pattern ((has_type (Poly%lib!keys_t.Ordering. x) TYPE%lib!keys_t.Ordering.)) )))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (= x (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. x))) :pattern ((Poly%lib!keys_t.KeyIterator. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&)) (= x (Poly%lib!keys_t.KeyIterator. (%Poly%lib!keys_t.KeyIterator. x)))) :pattern ((has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_k! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _k!) (TYPE%core!option.Option. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator./KeyIterator _k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyIterator./KeyIterator _k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (= (lib!keys_t.KeyIterator./KeyIterator/k x) (lib!keys_t.KeyIterator./KeyIterator/?k x)) :pattern ((lib!keys_t.KeyIterator./KeyIterator/k x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. x))) (TYPE%core!option.Option. K&. K&))) :pattern ((lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. x)) (has_type x (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(define-fun is-lib!keys_t.KeyIterator./KeyIterator_ ((c lib!keys_t.KeyIterator.)) Bool ((_ is lib!keys_t.KeyIterator./KeyIterator) c))
(assert (forall ((x lib!keys_t.KeyIterator.)) (! (=> (is-lib!keys_t.KeyIterator./KeyIterator_ x) (height_lt (height (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k x))) (height (Poly%lib!keys_t.KeyIterator. x)))) :pattern ((height (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k x)))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= x (%Poly%lib!keys_t.KeyRange. (Poly%lib!keys_t.KeyRange. x))) :pattern ((Poly%lib!keys_t.KeyRange. x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (= x (Poly%lib!keys_t.KeyRange. (%Poly%lib!keys_t.KeyRange. x)))) :pattern ((has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((K&. Dcr) (K& Type) (_lo! lib!keys_t.KeyIterator.) (_hi! lib!keys_t.KeyIterator.)) (! (=> (and (has_type (Poly%lib!keys_t.KeyIterator. _lo!) (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. _hi!) (TYPE%lib!keys_t.KeyIterator. K&. K&))) (has_type (Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange./KeyRange _lo! _hi!)) (TYPE%lib!keys_t.KeyRange. K&. K&))) :pattern ((has_type (Poly%lib!keys_t.KeyRange. (lib!keys_t.KeyRange./KeyRange _lo! _hi!)) (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= (lib!keys_t.KeyRange./KeyRange/lo x) (lib!keys_t.KeyRange./KeyRange/?lo x)) :pattern ((lib!keys_t.KeyRange./KeyRange/lo x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. x))) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. x)) (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (= (lib!keys_t.KeyRange./KeyRange/hi x) (lib!keys_t.KeyRange./KeyRange/?hi x)) :pattern ((lib!keys_t.KeyRange./KeyRange/hi x)) )))
(assert (forall ((K&. Dcr) (K& Type) (x Poly)) (! (=> (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&)) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. x))) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. x)) (has_type x (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(define-fun is-lib!keys_t.KeyRange./KeyRange_ ((c lib!keys_t.KeyRange.)) Bool ((_ is lib!keys_t.KeyRange./KeyRange) c))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (=> (is-lib!keys_t.KeyRange./KeyRange_ x) (height_lt (height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo x))) (height (Poly%lib!keys_t.KeyRange. x)))) :pattern ((height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo x)))) )))
(assert (forall ((x lib!keys_t.KeyRange.)) (! (=> (is-lib!keys_t.KeyRange./KeyRange_ x) (height_lt (height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi x))) (height (Poly%lib!keys_t.KeyRange. x)))) :pattern ((height (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi x)))) )))
(assert (forall ((x lib!keys_t.SHTKey.)) (! (= x (%Poly%lib!keys_t.SHTKey. (Poly%lib!keys_t.SHTKey. x))) :pattern ((Poly%lib!keys_t.SHTKey. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.SHTKey.) (= x (Poly%lib!keys_t.SHTKey. (%Poly%lib!keys_t.SHTKey. x)))) :pattern ((has_type x TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((_ukey! Int)) (! (=> (uInv 64 _ukey!) (has_type (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey _ukey!)) TYPE%lib!keys_t.SHTKey.)) :pattern ((has_type (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey _ukey!)) TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((x lib!keys_t.SHTKey.)) (! (= (lib!keys_t.SHTKey./SHTKey/ukey x) (lib!keys_t.SHTKey./SHTKey/?ukey x)) :pattern ((lib!keys_t.SHTKey./SHTKey/ukey x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!keys_t.SHTKey.) (uInv 64 (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. x)))) :pattern ((lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. x)) (has_type x TYPE%lib!keys_t.SHTKey.)) )))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)) )))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)) )))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)) )))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) )))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))) )))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))) )))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) )))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%lib!verus_extra.clone_v.VerusClone. (Dcr Type) Bool)
(declare-fun tr_bound%lib!keys_t.KeyTrait. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. Self%&. Self%& T&. T&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!verus_extra.clone_v.VerusClone. Self%&. Self%&)) )))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%lib!keys_t.KeyTrait. Self%&. Self%&)) )))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!std_specs.vec.VecAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::vec::spec_vec_len")
(declare-fun vstd!std_specs.vec.spec_vec_len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::insert")
(declare-fun vstd!seq_lib.impl&%0.insert.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::remove")
(declare-fun vstd!seq_lib.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::contains")
(declare-fun vstd!seq_lib.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::no_duplicates")
(declare-fun vstd!seq_lib.impl&%0.no_duplicates.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::to_set")
(declare-fun vstd!seq_lib.impl&%0.to_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::io_t::EndPoint::view")
(declare-fun lib!io_t.impl&%4.view.? (Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::KeyTrait::zero_spec")
(declare-fun lib!keys_t.KeyTrait.zero_spec.? (Dcr Type) Poly)
(declare-fun lib!keys_t.KeyTrait.zero_spec%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::lt")
(declare-fun lib!delegation_map_v.impl&%0.lt.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyTrait::cmp_spec")
(declare-fun lib!keys_t.KeyTrait.cmp_spec.? (Dcr Type Poly Poly) Poly)
(declare-fun lib!keys_t.KeyTrait.cmp_spec%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::eq")
(declare-fun lib!delegation_map_v.impl&%0.eq.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::gt")
(declare-fun lib!delegation_map_v.impl&%0.gt.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::ne")
(declare-fun lib!delegation_map_v.impl&%0.ne.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::le")
(declare-fun lib!delegation_map_v.impl&%0.le.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::lt_spec")
(declare-fun lib!keys_t.impl&%3.lt_spec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::between")
(declare-fun lib!delegation_map_v.impl&%2.between.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::new_spec")
(declare-fun lib!keys_t.impl&%3.new_spec.? (Dcr Type Poly) lib!keys_t.KeyIterator.)
(set-info :comment ";; Function-Decl lib::keys_t::KeyRange::contains")
(declare-fun lib!keys_t.impl&%4.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::abstract_end_point_t::AbstractEndPoint::valid_physical_address")
(declare-fun lib!abstract_end_point_t.impl&%0.valid_physical_address.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::full")
(declare-fun vstd!set.impl&%0.full.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::total")
(declare-fun vstd!map.impl&%0.total.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::check_argument_is_seq")
(declare-fun vstd!seq_lib.check_argument_is_seq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set_lib::impl&%0::is_full")
(declare-fun vstd!set_lib.impl&%0.is_full.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set_lib::check_argument_is_set")
(declare-fun vstd!set_lib.check_argument_is_set.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::geq_spec")
(declare-fun lib!keys_t.impl&%3.geq_spec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::Ordering::ge")
(declare-fun lib!delegation_map_v.impl&%0.ge.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_v::sorted")
(declare-fun lib!delegation_map_v.sorted.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_v::StrictlyOrderedVec::view")
(declare-fun lib!delegation_map_v.impl&%1.view.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::delegation_map_v::StrictlyOrderedVec::valid")
(declare-fun lib!delegation_map_v.impl&%1.valid.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::end_spec")
(declare-fun lib!delegation_map_v.impl&%2.end_spec.? (Dcr Type) lib!keys_t.KeyIterator.)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::is_end_spec")
(declare-fun lib!delegation_map_v.impl&%2.is_end_spec.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::get_spec")
(declare-fun lib!delegation_map_v.impl&%2.get_spec.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::leq_spec")
(declare-fun lib!delegation_map_v.impl&%2.leq_spec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::geq_K")
(declare-fun lib!delegation_map_v.impl&%2.geq_K.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::above_spec")
(declare-fun lib!delegation_map_v.impl&%2.above_spec.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_v::StrictlyOrderedMap::view")
(declare-fun lib!delegation_map_v.impl&%3.view.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::delegation_map_v::StrictlyOrderedMap::map_valid")
(declare-fun lib!delegation_map_v.impl&%3.map_valid.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_v::StrictlyOrderedMap::valid")
(declare-fun lib!delegation_map_v.impl&%3.valid.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_v::StrictlyOrderedMap::gap")
(declare-fun lib!delegation_map_v.impl&%3.gap.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_v::StrictlyOrderedMap::greatest_lower_bound_spec")
(declare-fun lib!delegation_map_v.impl&%3.greatest_lower_bound_spec.? (Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_v::DelegationMap::view")
(declare-fun lib!delegation_map_v.impl&%4.view.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::delegation_map_v::DelegationMap::valid")
(declare-fun lib!delegation_map_v.impl&%4.valid.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_v::DelegationMap::range_consistent")
(declare-fun lib!delegation_map_v.impl&%4.range_consistent.? (Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_t::AbstractDelegationMap::view")
(declare-fun lib!delegation_map_t.impl&%0.view.? (Poly) vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>.)
(set-info :comment ";; Function-Decl lib::delegation_map_t::AbstractDelegationMap::is_complete")
(declare-fun lib!delegation_map_t.impl&%0.is_complete.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::delegation_map_t::AbstractDelegationMap::spec_index")
(declare-fun lib!delegation_map_t.impl&%0.spec_index.? (Poly Poly) lib!abstract_end_point_t.AbstractEndPoint.)
(set-info :comment ";; Function-Decl lib::delegation_map_t::AbstractDelegationMap::update")
(declare-fun lib!delegation_map_t.impl&%0.update.? (Poly Poly Poly) lib!delegation_map_t.AbstractDelegationMap.)
(set-info :comment ";; Function-Decl lib::delegation_map_t::AbstractDelegationMap::delegate_for_key_range_is_host")
(declare-fun lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::keys_t::KeyIterator::cmp_spec")
(declare-fun lib!keys_t.impl&%3.cmp_spec.? (Dcr Type Poly Poly) lib!keys_t.Ordering.)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(declare-fun req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!std_specs.vec.VecAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::VecAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Specs core::option::impl&%0::as_ref")
(declare-fun ens%core!option.impl&%0.as_ref. (Dcr Type core!option.Option. core!option.Option.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (a! core!option.Option.)) (! (= (ens%core!option.impl&%0.as_ref. T&. T& option! a!) (and (has_type (Poly%core!option.Option. a!) (TYPE%core!option.Option. (REF T&.) T&)) (= (is-core!option.Option./Some_ a!) (is-core!option.Option./Some_ option!)) (=> (is-core!option.Option./Some_ a!) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. a!))))))) :pattern ((ens%core!option.impl&%0.as_ref. T&. T& option! a!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) ))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)) )))
(set-info :comment ";; Function-Specs core::option::impl&%0::unwrap")
(declare-fun req%core!option.impl&%0.unwrap. (Dcr Type core!option.Option.) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.)) (! (= (req%core!option.impl&%0.unwrap. T&. T& option!) (=> %%global_location_label%%2 (is-core!option.Option./Some_ option!))) :pattern ((req%core!option.impl&%0.unwrap. T&. T& option!)) )))
(declare-fun ens%core!option.impl&%0.unwrap. (Dcr Type core!option.Option. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! core!option.Option.) (t! Poly)) (! (= (ens%core!option.impl&%0.unwrap. T&. T& option! t!) (and (has_type t! T&) (= t! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. option!)))))) :pattern ((ens%core!option.impl&%0.unwrap. T&. T& option! t!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs vstd::std_specs::vec::vec_index")
(declare-fun req%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int)) (! (= (req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!) (=> %%global_location_label%%4 (< i! (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!))))) :pattern ((req%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i!)) )))
(declare-fun ens%vstd!std_specs.vec.vec_index. (Dcr Type Dcr Type Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!) (and (has_type element! T&) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (I i!))))) :pattern ((ens%vstd!std_specs.vec.vec_index. T&. T& A&. A& vec! i! element!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::spec_vec_len")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (uInv SZ (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!))) :pattern ((vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& v!)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_spec_len")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_spec_len.) (forall ((A&. Dcr) (A& Type) (v! Poly)) (! (=> (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (= (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!) (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!)))) :pattern ((vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!)) ))))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::len")
(declare-fun ens%alloc!vec.impl&%1.len. (Dcr Type Dcr Type Poly Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (vec! Poly) (len! Int)) (! (= (ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!) (and (uInv SZ len!) (= len! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& vec!)))) :pattern ((ens%alloc!vec.impl&%1.len. T&. T& A&. A& vec! len!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%0::new")
(declare-fun ens%alloc!vec.impl&%0.new. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%alloc!vec.impl&%0.new. T&. T& v!) (and (has_type v! (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) v!) (vstd!seq.Seq.empty.? T&. T&)))) :pattern ((ens%alloc!vec.impl&%0.new. T&. T& v!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)) )))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%5 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::insert")
(declare-fun req%vstd!seq_lib.impl&%0.insert. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!) (=> %%global_location_label%%6 (and (<= 0 (%I i!)) (<= (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::insert")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.insert.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) a!) (vstd!seq.Seq.subrange.? A&. A& self! i! (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::insert")
(declare-fun req%alloc!vec.impl&%1.insert. (Dcr Type Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (i! Int) (element! Poly)) (! (= (req%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! i! element!) (=> %%global_location_label%%7 (<= i! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& pre%vec!)))) :pattern ((req%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! i! element!)) )))
(declare-fun ens%alloc!vec.impl&%1.insert. (Dcr Type Dcr Type Poly Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! vec! i! element!) (and (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq_lib.impl&%0.insert.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (I i!) element!)))) :pattern ((ens%alloc!vec.impl&%1.insert. T&. T& A&. A& pre%vec! vec! i! element!)) )))
(set-info :comment ";; Function-Axioms vstd::std_specs::vec::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!std_specs.vec.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.impl&%0.spec_index.) (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (= (vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) self!) i!))) :pattern ((vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T& self! i!)) ))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::remove")
(declare-fun req%vstd!seq_lib.impl&%0.remove. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!) (=> %%global_location_label%%8 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::remove")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.remove.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.remove.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) (vstd!seq.Seq.subrange.? A&. A& self! (I (Add (%I i!) 1)) (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!)) )))
(set-info :comment ";; Function-Specs alloc::vec::impl&%1::remove")
(declare-fun req%alloc!vec.impl&%1.remove. (Dcr Type Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (i! Int)) (! (= (req%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! i!) (=> %%global_location_label%%9 (< i! (vstd!std_specs.vec.spec_vec_len.? T&. T& A&. A& pre%vec!)))) :pattern ((req%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! i!)) )))
(declare-fun ens%alloc!vec.impl&%1.remove. (Dcr Type Dcr Type Poly Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (pre%vec! Poly) (vec! Poly) (i! Int) (element! Poly)) (! (= (ens%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! vec! i! element!) (and (has_type element! T&) (has_type vec! (TYPE%alloc!vec.Vec. T&. T& A&. A&)) (= element! (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (I i!))) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) vec!) (vstd!seq_lib.impl&%0.remove.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) pre%vec!) (I i!))))) :pattern ((ens%alloc!vec.impl&%1.remove. T&. T& A&. A& pre%vec! vec! i! element!)) )))
(set-info :comment ";; Broadcast vstd::std_specs::vec::axiom_vec_index_decreases")
(assert (=> (fuel_bool fuel%vstd!std_specs.vec.axiom_vec_index_decreases.) (forall ((A&. Dcr) (A& Type) (v! Poly) (i! Poly)) (! (=> (and (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL v!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!)) (height v!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) i!))) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)) )))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)) )))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)) ))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%12 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)) )))
(set-info :comment ";; Function-Specs vstd::pervasive::impl&%1::set")
(declare-fun req%vstd!pervasive.impl&%1.set. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre%self! Poly) (i! Int) (value! Poly)) (! (= (req%vstd!pervasive.impl&%1.set. T&. T& pre%self! i! value!) (=> %%global_location_label%%13 (< i! (vstd!std_specs.vec.spec_vec_len.? T&. T& $ ALLOCATOR_GLOBAL pre%self!)))) :pattern ((req%vstd!pervasive.impl&%1.set. T&. T& pre%self! i! value!)) )))
(declare-fun ens%vstd!pervasive.impl&%1.set. (Dcr Type Poly Poly Int Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (pre%self! Poly) (self! Poly) (i! Int) (value! Poly)) (! (= (ens%vstd!pervasive.impl&%1.set. T&. T& pre%self! self! i! value!) (and (has_type self! (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) self!) (vstd!seq.Seq.update.? T&. T& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. T&. T& $ ALLOCATOR_GLOBAL) pre%self!) (I i!) value!)))) :pattern ((ens%vstd!pervasive.impl&%1.set. T&. T& pre%self! self! i! value!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)) )))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!)) ))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%14 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)) )))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)) )))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$)) ))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::contains")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.contains.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.contains.) (forall ((A&. Dcr) (A& Type) (self! Poly) (needle! Poly)) (! (= (vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!) (exists ((i$ Poly)) (! (and (has_type i$ INT) (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (= (vstd!seq.Seq.index.? A&. A& self! i$) needle!))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$)) ))) :pattern ((vstd!seq_lib.impl&%0.contains.? A&. A& self! needle!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!)) ))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::push_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::no_duplicates")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.no_duplicates.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.no_duplicates.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& self!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? A&. A& self!)))) (not (= i$ j$))) (not (= (vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$))))) :pattern ((vstd!seq.Seq.index.? A&. A& self! i$) (vstd!seq.Seq.index.? A&. A& self! j$)) ))) :pattern ((vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)) )))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::to_set")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.to_set.))
(declare-fun %%lambda%%0 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (a$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$) (B (vstd!seq_lib.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 a$))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) a$)))))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.to_set.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%0 A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.impl&%0.to_set.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.to_set.? A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::unique_seq_to_set")
(declare-fun req%vstd!seq_lib.impl&%0.unique_seq_to_set. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq_lib.impl&%0.unique_seq_to_set. A&. A& self!) (=> %%global_location_label%%15 (vstd!seq_lib.impl&%0.no_duplicates.? A&. A& self!))) :pattern ((req%vstd!seq_lib.impl&%0.unique_seq_to_set. A&. A& self!)) )))
(declare-fun ens%vstd!seq_lib.impl&%0.unique_seq_to_set. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (ens%vstd!seq_lib.impl&%0.unique_seq_to_set. A&. A& self!) (= (vstd!seq.Seq.len.? A&. A& self!) (vstd!set.impl&%0.len.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& self!)))) :pattern ((ens%vstd!seq_lib.impl&%0.unique_seq_to_set. A&. A& self!)) )))
(set-info :comment ";; Function-Specs vstd::seq_lib::seq_to_set_is_finite")
(declare-fun ens%vstd!seq_lib.seq_to_set_is_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (= (ens%vstd!seq_lib.seq_to_set_is_finite. A&. A& seq!) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((ens%vstd!seq_lib.seq_to_set_is_finite. A&. A& seq!)) )))
(set-info :comment ";; Broadcast vstd::seq_lib::seq_to_set_is_finite")
(assert (=> (fuel_bool fuel%vstd!seq_lib.seq_to_set_is_finite.) (forall ((A&. Dcr) (A& Type) (seq! Poly)) (! (=> (has_type seq! (TYPE%vstd!seq.Seq. A&. A&)) (vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!seq_lib.impl&%0.to_set.? A&. A& seq!))) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)) )))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_complement.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)) )))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) ))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)) ))))
(set-info :comment ";; Function-Specs lib::verus_extra::clone_v::VerusClone::clone")
(declare-fun ens%lib!verus_extra.clone_v.VerusClone.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (o! Poly)) (! (= (ens%lib!verus_extra.clone_v.VerusClone.clone. Self%&. Self%& self! o!) (and (has_type o! Self%&) (= o! self!))) :pattern ((ens%lib!verus_extra.clone_v.VerusClone.clone. Self%&. Self%& self! o!)) )))
(set-info :comment ";; Function-Axioms lib::io_t::EndPoint::view")
(assert (fuel_bool_default fuel%lib!io_t.impl&%4.view.))
(assert (=> (fuel_bool fuel%lib!io_t.impl&%4.view.) (forall ((self! Poly)) (! (= (lib!io_t.impl&%4.view.? self!) (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint (%Poly%vstd!seq.Seq<u8.>. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ (UINT 8) $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<u8./allocator_global%.>. (lib!io_t.EndPoint./EndPoint/id (%Poly%lib!io_t.EndPoint. self!))))))) :pattern ((lib!io_t.impl&%4.view.? self!)) ))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyTrait::zero_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (lib!keys_t.KeyTrait.zero_spec.? Self%&. Self%&) Self%&) :pattern ((lib!keys_t.KeyTrait.zero_spec.? Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::lt")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.lt.))
(define-fun is-lib!keys_t.Ordering./Less_ ((c lib!keys_t.Ordering.)) Bool ((_ is lib!keys_t.Ordering./Less) c))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.lt.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.lt.? self!) (is-lib!keys_t.Ordering./Less_ (%Poly%lib!keys_t.Ordering. self!))) :pattern ((lib!delegation_map_v.impl&%0.lt.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyTrait::cmp_spec")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! Self%&) (has_type other! Self%&)) (has_type (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& self! other!) TYPE%lib!keys_t.Ordering.)) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& self! other!)) )))
(set-info :comment ";; Function-Specs lib::keys_t::KeyTrait::zero_properties")
(declare-fun ens%lib!keys_t.KeyTrait.zero_properties. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%lib!keys_t.KeyTrait.zero_properties. Self%&. Self%&) (forall ((k$ Poly)) (! (=> (has_type k$ Self%&) (=> (not (= k$ (lib!keys_t.KeyTrait.zero_spec.? Self%&. Self%&))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& (lib!keys_t.KeyTrait.zero_spec.? Self%&. Self%&) k$)))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& (lib!keys_t.KeyTrait.zero_spec.? Self%&. Self%&) k$)) ))) :pattern ((ens%lib!keys_t.KeyTrait.zero_properties. Self%&. Self%&)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::eq")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.eq.))
(define-fun is-lib!keys_t.Ordering./Equal_ ((c lib!keys_t.Ordering.)) Bool ((_ is lib!keys_t.Ordering./Equal) c))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.eq.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.eq.? self!) (is-lib!keys_t.Ordering./Equal_ (%Poly%lib!keys_t.Ordering. self!))) :pattern ((lib!delegation_map_v.impl&%0.eq.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::gt")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.gt.))
(define-fun is-lib!keys_t.Ordering./Greater_ ((c lib!keys_t.Ordering.)) Bool ((_ is lib!keys_t.Ordering./Greater) c))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.gt.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.gt.? self!) (is-lib!keys_t.Ordering./Greater_ (%Poly%lib!keys_t.Ordering. self!))) :pattern ((lib!delegation_map_v.impl&%0.gt.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::ne")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.ne.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.ne.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.ne.? self!) (not (is-lib!keys_t.Ordering./Equal_ (%Poly%lib!keys_t.Ordering. self!)))) :pattern ((lib!delegation_map_v.impl&%0.ne.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::le")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.le.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.le.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.le.? self!) (not (is-lib!keys_t.Ordering./Greater_ (%Poly%lib!keys_t.Ordering. self!)))) :pattern ((lib!delegation_map_v.impl&%0.le.? self!)) ))))
(set-info :comment ";; Function-Specs lib::keys_t::KeyTrait::cmp_properties")
(declare-fun ens%lib!keys_t.KeyTrait.cmp_properties. (Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (= (ens%lib!keys_t.KeyTrait.cmp_properties. Self%&. Self%&) (and (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&)) (= (= a$ b$) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) )) (forall ((a$ Poly)) (! (=> (has_type a$ Self%&) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ a$))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ a$)) )) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&)) (= (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ a$)))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) )) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&) (has_type c$ Self%&)) (=> (and (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ c$)))) :pattern ((lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.eq.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) )) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&)) (= (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.gt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ a$)))) :pattern ((lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$))) )) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&)) (=> (lib!delegation_map_v.impl&%0.ne.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (or (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ a$))))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ a$)) )) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&) (has_type c$ Self%&)) (=> (and (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ c$)))) :pattern ((lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) )) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&) (has_type c$ Self%&)) (=> (and (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.le.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ c$)))) :pattern ((lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.le.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) )) (forall ((a$ Poly) (b$ Poly) (c$ Poly)) (! (=> (and (has_type a$ Self%&) (has_type b$ Self%&) (has_type c$ Self%&)) (=> (and (lib!delegation_map_v.impl&%0.le.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ c$)))) :pattern ((lib!delegation_map_v.impl&%0.le.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& a$ b$)) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& b$ c$))) )))) :pattern ((ens%lib!keys_t.KeyTrait.cmp_properties. Self%&. Self%&)) )))
(set-info :comment ";; Function-Specs lib::keys_t::KeyTrait::cmp")
(declare-fun req%lib!keys_t.KeyTrait.cmp. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly)) (! (= (req%lib!keys_t.KeyTrait.cmp. Self%&. Self%& self! other!) (=> %%global_location_label%%16 true)) :pattern ((req%lib!keys_t.KeyTrait.cmp. Self%&. Self%& self! other!)) )))
(declare-fun ens%lib!keys_t.KeyTrait.cmp. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (other! Poly) (o! Poly)) (! (= (ens%lib!keys_t.KeyTrait.cmp. Self%&. Self%& self! other! o!) (and (has_type o! TYPE%lib!keys_t.Ordering.) (= o! (lib!keys_t.KeyTrait.cmp_spec.? Self%&. Self%& self! other!)))) :pattern ((ens%lib!keys_t.KeyTrait.cmp. Self%&. Self%& self! other! o!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::SHTKey::zero_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%13.zero_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%13.zero_spec.) (= (lib!keys_t.KeyTrait.zero_spec.? $ TYPE%lib!keys_t.SHTKey.) (Poly%lib!keys_t.SHTKey. (lib!keys_t.SHTKey./SHTKey (%I (I 0)))))))
(set-info :comment ";; Function-Axioms lib::keys_t::SHTKey::cmp_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%13.cmp_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%13.cmp_spec.) (forall ((self! Poly) (other! Poly)) (! (= (lib!keys_t.KeyTrait.cmp_spec.? $ TYPE%lib!keys_t.SHTKey. self! other!) (Poly%lib!keys_t.Ordering. (ite (< (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!)) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. other!))) lib!keys_t.Ordering./Less (ite (= (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. self!)) (lib!keys_t.SHTKey./SHTKey/ukey (%Poly%lib!keys_t.SHTKey. other!))) lib!keys_t.Ordering./Equal lib!keys_t.Ordering./Greater)))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? $ TYPE%lib!keys_t.SHTKey. self! other!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!keys_t.KeyTrait. $ TYPE%lib!keys_t.SHTKey.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%lib!verus_extra.clone_v.VerusClone. $ TYPE%lib!keys_t.SHTKey.))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::lt_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.lt_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.lt_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!) (or (and (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!)))) (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!)))) (and (and (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!)))) (not (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!))))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? K&. K& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!)))))))))) :pattern ((lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::between")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%2.between.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%2.between.) (forall ((K&. Dcr) (K& Type) (lhs! Poly) (ki! Poly) (rhs! Poly)) (! (= (lib!delegation_map_v.impl&%2.between.? K&. K& lhs! ki! rhs!) (and (not (lib!keys_t.impl&%3.lt_spec.? K&. K& ki! lhs!)) (lib!keys_t.impl&%3.lt_spec.? K&. K& ki! rhs!))) :pattern ((lib!delegation_map_v.impl&%2.between.? K&. K& lhs! ki! rhs!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::new_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.new_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.new_spec.) (forall ((K&. Dcr) (K& Type) (k! Poly)) (! (= (lib!keys_t.impl&%3.new_spec.? K&. K& k!) (lib!keys_t.KeyIterator./KeyIterator (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some k!))))) :pattern ((lib!keys_t.impl&%3.new_spec.? K&. K& k!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (k! Poly)) (! (=> (has_type k! K&) (has_type (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& k!)) (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((lib!keys_t.impl&%3.new_spec.? K&. K& k!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyRange::contains")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%4.contains.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%4.contains.) (forall ((K&. Dcr) (K& Type) (self! Poly) (k! Poly)) (! (= (lib!keys_t.impl&%4.contains.? K&. K& self! k!) (lib!delegation_map_v.impl&%2.between.? K&. K& (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/lo (%Poly%lib!keys_t.KeyRange. self!))) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& k!)) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.KeyRange./KeyRange/hi (%Poly%lib!keys_t.KeyRange. self!))))) :pattern ((lib!keys_t.impl&%4.contains.? K&. K& self! k!)) ))))
(set-info :comment ";; Function-Axioms lib::abstract_end_point_t::AbstractEndPoint::valid_physical_address")
(assert (fuel_bool_default fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address.))
(assert (=> (fuel_bool fuel%lib!abstract_end_point_t.impl&%0.valid_physical_address.) (forall ((self! Poly)) (! (= (lib!abstract_end_point_t.impl&%0.valid_physical_address.? self!) (< (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (lib!abstract_end_point_t.AbstractEndPoint./AbstractEndPoint/id (%Poly%lib!abstract_end_point_t.AbstractEndPoint. self!)))) 1048576)) :pattern ((lib!abstract_end_point_t.impl&%0.valid_physical_address.? self!)) ))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::full")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.full.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.full.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.full.? A&. A&) (vstd!set.impl&%0.complement.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((vstd!set.impl&%0.full.? A&. A&)) ))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.full.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.full.? A&. A&)) )))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::total")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.total.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.total.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (fv! Poly)) (! (= (vstd!map.impl&%0.total.? K&. K& V&. V& impl%2&. impl%2& fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%2&. impl%2& (vstd!set.impl&%0.full.? K&. K&) fv!)) :pattern ((vstd!map.impl&%0.total.? K&. K& V&. V& impl%2&. impl%2& fv!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (fv! Poly)) (! (=> (has_type fv! impl%2&) (has_type (vstd!map.impl&%0.total.? K&. K& V&. V& impl%2&. impl%2& fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.total.? K&. K& V&. V& impl%2&. impl%2& fv!)) )))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!)) ))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)) )))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::check_argument_is_seq")
(assert (fuel_bool_default fuel%vstd!seq_lib.check_argument_is_seq.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.check_argument_is_seq.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (vstd!seq_lib.check_argument_is_seq.? A&. A& s!) s!) :pattern ((vstd!seq_lib.check_argument_is_seq.? A&. A& s!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq_lib.check_argument_is_seq.? A&. A& s!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.check_argument_is_seq.? A&. A& s!)) )))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)) )))
(set-info :comment ";; Function-Axioms vstd::set_lib::impl&%0::is_full")
(assert (fuel_bool_default fuel%vstd!set_lib.impl&%0.is_full.))
(assert (=> (fuel_bool fuel%vstd!set_lib.impl&%0.is_full.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set_lib.impl&%0.is_full.? A&. A& self!) (= self! (vstd!set.impl&%0.full.? A&. A&))) :pattern ((vstd!set_lib.impl&%0.is_full.? A&. A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::set_lib::check_argument_is_set")
(assert (fuel_bool_default fuel%vstd!set_lib.check_argument_is_set.))
(assert (=> (fuel_bool fuel%vstd!set_lib.check_argument_is_set.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (vstd!set_lib.check_argument_is_set.? A&. A& s!) s!) :pattern ((vstd!set_lib.check_argument_is_set.? A&. A& s!)) ))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set_lib.check_argument_is_set.? A&. A& s!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set_lib.check_argument_is_set.? A&. A& s!)) )))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!)) ))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::geq_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.geq_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.geq_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!keys_t.impl&%3.geq_spec.? K&. K& self! other!) (not (lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!))) :pattern ((lib!keys_t.impl&%3.geq_spec.? K&. K& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::Ordering::ge")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%0.ge.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%0.ge.) (forall ((self! Poly)) (! (= (lib!delegation_map_v.impl&%0.ge.? self!) (not (is-lib!keys_t.Ordering./Less_ (%Poly%lib!keys_t.Ordering. self!)))) :pattern ((lib!delegation_map_v.impl&%0.ge.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_v::sorted")
(assert (fuel_bool_default fuel%lib!delegation_map_v.sorted.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.sorted.) (forall ((K&. Dcr) (K& Type) (s! Poly)) (! (= (lib!delegation_map_v.sorted.? K&. K& s!) (forall ((i$ Poly) (j$ Poly)) (! (=> (and (has_type i$ INT) (has_type j$ INT)) (=> (and (and (<= 0 (%I i$)) (< (%I i$) (%I j$))) (< (%I j$) (vstd!seq.Seq.len.? K&. K& s!))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? K&. K& (vstd!seq.Seq.index.? K&. K& s! i$) (vstd!seq.Seq.index.? K&. K& s! j$))))) :pattern ((lib!keys_t.KeyTrait.cmp_spec.? K&. K& (vstd!seq.Seq.index.? K&. K& s! i$) (vstd!seq.Seq.index.? K&. K& s! j$))) ))) :pattern ((lib!delegation_map_v.sorted.? K&. K& s!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_v::StrictlyOrderedVec::view")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%1.view.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%1.view.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!delegation_map_v.impl&%1.view.? K&. K& self!) (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. K&. K& $ ALLOCATOR_GLOBAL) (lib!delegation_map_v.StrictlyOrderedVec./StrictlyOrderedVec/v (%Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)))) :pattern ((lib!delegation_map_v.impl&%1.view.? K&. K& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&)) (has_type (lib!delegation_map_v.impl&%1.view.? K&. K& self!) (TYPE%vstd!seq.Seq. K&. K&))) :pattern ((lib!delegation_map_v.impl&%1.view.? K&. K& self!)) )))
(set-info :comment ";; Function-Axioms lib::delegation_map_v::StrictlyOrderedVec::valid")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%1.valid.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%1.valid.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!delegation_map_v.impl&%1.valid.? K&. K& self!) (and (lib!delegation_map_v.sorted.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& self!)) (vstd!seq_lib.impl&%0.no_duplicates.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& self!)))) :pattern ((lib!delegation_map_v.impl&%1.valid.? K&. K& self!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::end_spec")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%2.end_spec.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%2.end_spec.) (forall ((K&. Dcr) (K& Type)) (! (= (lib!delegation_map_v.impl&%2.end_spec.? K&. K&) (lib!keys_t.KeyIterator./KeyIterator (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))) :pattern ((lib!delegation_map_v.impl&%2.end_spec.? K&. K&)) ))))
(assert (forall ((K&. Dcr) (K& Type)) (! (has_type (Poly%lib!keys_t.KeyIterator. (lib!delegation_map_v.impl&%2.end_spec.? K&. K&)) (TYPE%lib!keys_t.KeyIterator. K&. K&)) :pattern ((lib!delegation_map_v.impl&%2.end_spec.? K&. K&)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::is_end_spec")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%2.is_end_spec.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%2.is_end_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!delegation_map_v.impl&%2.is_end_spec.? K&. K& self!) (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!)))) :pattern ((lib!delegation_map_v.impl&%2.is_end_spec.? K&. K& self!)) ))))
(set-info :comment ";; Function-Specs lib::keys_t::KeyIterator::get_spec")
(declare-fun req%lib!delegation_map_v.impl&%2.get_spec. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (req%lib!delegation_map_v.impl&%2.get_spec. K&. K& self!) (=> %%global_location_label%%17 (is-core!option.Option./Some_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!))))) :pattern ((req%lib!delegation_map_v.impl&%2.get_spec. K&. K& self!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::get_spec")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%2.get_spec.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%2.get_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!delegation_map_v.impl&%2.get_spec.? K&. K& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!)))))) :pattern ((lib!delegation_map_v.impl&%2.get_spec.? K&. K& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type (lib!delegation_map_v.impl&%2.get_spec.? K&. K& self!) K&)) :pattern ((lib!delegation_map_v.impl&%2.get_spec.? K&. K& self!)) )))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::leq_spec")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%2.leq_spec.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%2.leq_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!delegation_map_v.impl&%2.leq_spec.? K&. K& self! other!) (or (lib!keys_t.impl&%3.lt_spec.? K&. K& self! other!) (= self! other!))) :pattern ((lib!delegation_map_v.impl&%2.leq_spec.? K&. K& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::geq_K")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%2.geq_K.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%2.geq_K.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!delegation_map_v.impl&%2.geq_K.? K&. K& self! other!) (not (lib!keys_t.impl&%3.lt_spec.? K&. K& self! (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& other!))))) :pattern ((lib!delegation_map_v.impl&%2.geq_K.? K&. K& self! other!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::above_spec")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%2.above_spec.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%2.above_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (k! Poly)) (! (= (lib!delegation_map_v.impl&%2.above_spec.? K&. K& self! k!) (or (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!))) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? K&. K& k! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!))))))))) :pattern ((lib!delegation_map_v.impl&%2.above_spec.? K&. K& self! k!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_v::StrictlyOrderedMap::view")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%3.view.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%3.view.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!delegation_map_v.impl&%3.view.? K&. K& self!) (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!))) :pattern ((lib!delegation_map_v.impl&%3.view.? K&. K& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&)) (has_type (lib!delegation_map_v.impl&%3.view.? K&. K& self!) (TYPE%vstd!map.Map. K&. K& $ TYPE%lib!io_t.EndPoint.))) :pattern ((lib!delegation_map_v.impl&%3.view.? K&. K& self!)) )))
(set-info :comment ";; Function-Axioms lib::delegation_map_v::StrictlyOrderedMap::map_valid")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%3.map_valid.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%3.map_valid.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!delegation_map_v.impl&%3.map_valid.? K&. K& self!) (and (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!)))) (= (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!))) (vstd!seq_lib.impl&%0.to_set.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!))))))) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!))))))) (= (vstd!map.impl&%0.index.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!)) (vstd!seq.Seq.index.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!)))) i$)) (vstd!seq.Seq.index.? $ TYPE%lib!io_t.EndPoint. (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL) (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/vals (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!)))) i$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/m (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!)) (vstd!seq.Seq.index.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!)))) i$))) )))) :pattern ((lib!delegation_map_v.impl&%3.map_valid.? K&. K& self!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_v::StrictlyOrderedMap::valid")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%3.valid.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%3.valid.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!delegation_map_v.impl&%3.valid.? K&. K& self!) (and (and (lib!delegation_map_v.impl&%1.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!)))) (= (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/keys (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!))))) (vstd!std_specs.vec.spec_vec_len.? $ TYPE%lib!io_t.EndPoint. $ ALLOCATOR_GLOBAL (Poly%alloc!vec.Vec<lib!io_t.EndPoint./allocator_global%.>. (lib!delegation_map_v.StrictlyOrderedMap./StrictlyOrderedMap/vals (%Poly%lib!delegation_map_v.StrictlyOrderedMap. self!)))))) (lib!delegation_map_v.impl&%3.map_valid.? K&. K& self!))) :pattern ((lib!delegation_map_v.impl&%3.valid.? K&. K& self!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_v::StrictlyOrderedMap::gap")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%3.gap.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%3.gap.) (forall ((K&. Dcr) (K& Type) (self! Poly) (lo! Poly) (hi! Poly)) (! (= (lib!delegation_map_v.impl&%3.gap.? K&. K& self! lo! hi!) (forall ((ki$ Poly)) (! (=> (has_type ki$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (=> (and (lib!keys_t.impl&%3.lt_spec.? K&. K& lo! ki$) (lib!keys_t.impl&%3.lt_spec.? K&. K& ki$ hi!)) (not (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& self!)) (lib!delegation_map_v.impl&%2.get_spec.? K&. K& ki$))))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& self!)) (lib!delegation_map_v.impl&%2.get_spec.? K&. K& ki$))) ))) :pattern ((lib!delegation_map_v.impl&%3.gap.? K&. K& self! lo! hi!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_v::StrictlyOrderedMap::greatest_lower_bound_spec")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%3.greatest_lower_bound_spec.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%3.greatest_lower_bound_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (iter! Poly) (glb! Poly)) (! (= (lib!delegation_map_v.impl&%3.greatest_lower_bound_spec.? K&. K& self! iter! glb!) (and (and (or (= glb! iter!) (lib!keys_t.impl&%3.lt_spec.? K&. K& glb! iter!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (and (and (not (= (lib!keys_t.impl&%3.new_spec.? K&. K& k$) (%Poly%lib!keys_t.KeyIterator. glb!))) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& self!)) k$)) (lib!delegation_map_v.impl&%2.above_spec.? K&. K& iter! k$)) (lib!delegation_map_v.impl&%2.above_spec.? K&. K& glb! k$))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& self!)) k$)) ))) (=> (not (lib!delegation_map_v.impl&%2.is_end_spec.? K&. K& iter!)) (and (and (is-core!option.Option./Some_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. glb!))) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& self!)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. glb!))))))) (exists ((hi$ Poly)) (! (and (has_type hi$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (and (lib!delegation_map_v.impl&%3.gap.? K&. K& self! glb! hi$) (lib!delegation_map_v.impl&%2.between.? K&. K& glb! iter! hi$))) :pattern ((lib!delegation_map_v.impl&%3.gap.? K&. K& self! glb! hi$) (lib!delegation_map_v.impl&%2.between.? K&. K& glb! iter! hi$)) )))))) :pattern ((lib!delegation_map_v.impl&%3.greatest_lower_bound_spec.? K&. K& self! iter! glb!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_v::DelegationMap::view")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%4.view.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%4.view.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!delegation_map_v.impl&%4.view.? K&. K& self!) (lib!delegation_map_v.DelegationMap./DelegationMap/m (%Poly%lib!delegation_map_v.DelegationMap. self!))) :pattern ((lib!delegation_map_v.impl&%4.view.? K&. K& self!)) ))))
(assert (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (=> (has_type self! (TYPE%lib!delegation_map_v.DelegationMap. K&. K&)) (has_type (lib!delegation_map_v.impl&%4.view.? K&. K& self!) (TYPE%vstd!map.Map. K&. K& $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.))) :pattern ((lib!delegation_map_v.impl&%4.view.? K&. K& self!)) )))
(set-info :comment ";; Function-Axioms lib::delegation_map_v::DelegationMap::valid")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%4.valid.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%4.valid.) (forall ((K&. Dcr) (K& Type) (self! Poly)) (! (= (lib!delegation_map_v.impl&%4.valid.? K&. K& self!) (and (and (and (and (lib!delegation_map_v.impl&%3.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. (lib!delegation_map_v.DelegationMap./DelegationMap/lows (%Poly%lib!delegation_map_v.DelegationMap. self!)))) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. (lib!delegation_map_v.DelegationMap./DelegationMap/lows (%Poly%lib!delegation_map_v.DelegationMap. self!))))) (lib!keys_t.KeyTrait.zero_spec.? K&. K&))) (vstd!set_lib.impl&%0.is_full.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (lib!delegation_map_v.impl&%4.view.? K&. K& self!)))) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (lib!abstract_end_point_t.impl&%0.valid_physical_address.? (vstd!map.impl&%0.index.? K&. K& $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (lib!delegation_map_v.impl&%4.view.? K&. K& self!) k$))) :pattern ((lib!abstract_end_point_t.impl&%0.valid_physical_address.? (vstd!map.impl&%0.index.? K&. K& $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (lib!delegation_map_v.impl&%4.view.? K&. K& self!) k$))) ))) (forall ((k$ Poly) (i$ Poly) (j$ Poly)) (! (=> (and (has_type k$ K&) (has_type i$ K&) (has_type j$ (TYPE%lib!keys_t.KeyIterator. K&. K&))) (=> (and (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. (lib!delegation_map_v.DelegationMap./DelegationMap/lows (%Poly%lib!delegation_map_v.DelegationMap. self!))))) i$) (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. (lib!delegation_map_v.DelegationMap./DelegationMap/lows (%Poly%lib!delegation_map_v.DelegationMap. self!))) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& i$)) j$)) (lib!delegation_map_v.impl&%2.between.? K&. K& (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& i$)) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& k$)) j$)) (= (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.index.? K&. K& $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (lib!delegation_map_v.impl&%4.view.? K&. K& self!) k$)) (lib!io_t.impl&%4.view.? (vstd!map.impl&%0.index.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. (lib!delegation_map_v.DelegationMap./DelegationMap/lows (%Poly%lib!delegation_map_v.DelegationMap. self!)))) i$))))) :pattern ((lib!delegation_map_v.impl&%2.between.? K&. K& (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& i$)) (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& k$)) j$)) )))) :pattern ((lib!delegation_map_v.impl&%4.valid.? K&. K& self!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_v::DelegationMap::range_consistent")
(assert (fuel_bool_default fuel%lib!delegation_map_v.impl&%4.range_consistent.))
(assert (=> (fuel_bool fuel%lib!delegation_map_v.impl&%4.range_consistent.) (forall ((K&. Dcr) (K& Type) (self! Poly) (lo! Poly) (hi! Poly) (dst! Poly)) (! (= (lib!delegation_map_v.impl&%4.range_consistent.? K&. K& self! lo! hi! dst!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (lib!delegation_map_v.impl&%2.between.? K&. K& lo! (Poly%lib!keys_t.KeyIterator. (lib!keys_t.impl&%3.new_spec.? K&. K& k$)) hi!) (= (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.index.? K&. K& $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (lib!delegation_map_v.impl&%4.view.? K&. K& self!) k$)) (lib!io_t.impl&%4.view.? dst!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (lib!delegation_map_v.impl&%4.view.? K&. K& self!) k$)) ))) :pattern ((lib!delegation_map_v.impl&%4.range_consistent.? K&. K& self! lo! hi! dst!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_t::AbstractDelegationMap::view")
(assert (fuel_bool_default fuel%lib!delegation_map_t.impl&%0.view.))
(assert (=> (fuel_bool fuel%lib!delegation_map_t.impl&%0.view.) (forall ((self! Poly)) (! (= (lib!delegation_map_t.impl&%0.view.? self!) (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!))) :pattern ((lib!delegation_map_t.impl&%0.view.? self!)) ))))
(set-info :comment ";; Function-Axioms lib::delegation_map_t::AbstractDelegationMap::is_complete")
(assert (fuel_bool_default fuel%lib!delegation_map_t.impl&%0.is_complete.))
(assert (=> (fuel_bool fuel%lib!delegation_map_t.impl&%0.is_complete.) (forall ((self! Poly)) (! (= (lib!delegation_map_t.impl&%0.is_complete.? self!) (vstd!set_lib.impl&%0.is_full.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!)))))) :pattern ((lib!delegation_map_t.impl&%0.is_complete.? self!)) ))))
(set-info :comment ";; Function-Specs lib::delegation_map_t::AbstractDelegationMap::spec_index")
(declare-fun req%lib!delegation_map_t.impl&%0.spec_index. (Poly Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((self! Poly) (key! Poly)) (! (= (req%lib!delegation_map_t.impl&%0.spec_index. self! key!) (=> %%global_location_label%%18 (vstd!set.impl&%0.contains.? $ TYPE%lib!keys_t.SHTKey. (vstd!map.impl&%0.dom.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!)))) key!))) :pattern ((req%lib!delegation_map_t.impl&%0.spec_index. self! key!)) )))
(set-info :comment ";; Function-Axioms lib::delegation_map_t::AbstractDelegationMap::spec_index")
(assert (fuel_bool_default fuel%lib!delegation_map_t.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%lib!delegation_map_t.impl&%0.spec_index.) (forall ((self! Poly) (key! Poly)) (! (= (lib!delegation_map_t.impl&%0.spec_index.? self! key!) (%Poly%lib!abstract_end_point_t.AbstractEndPoint. (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!))) key!))) :pattern ((lib!delegation_map_t.impl&%0.spec_index.? self! key!)) ))))
(set-info :comment ";; Function-Specs lib::delegation_map_t::AbstractDelegationMap::update")
(declare-fun req%lib!delegation_map_t.impl&%0.update. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((self! Poly) (newkr! Poly) (host! Poly)) (! (= (req%lib!delegation_map_t.impl&%0.update. self! newkr! host!) (=> %%global_location_label%%19 (lib!delegation_map_t.impl&%0.is_complete.? self!))) :pattern ((req%lib!delegation_map_t.impl&%0.update. self! newkr! host!)) )))
(set-info :comment ";; Function-Axioms lib::delegation_map_t::AbstractDelegationMap::update")
(assert (fuel_bool_default fuel%lib!delegation_map_t.impl&%0.update.))
(declare-fun %%lambda%%3 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) k$) (B (lib!keys_t.impl&%4.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2) k$)))))
(declare-fun %%lambda%%4 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0) k$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0) k$)))))
(assert (=> (fuel_bool fuel%lib!delegation_map_t.impl&%0.update.) (forall ((self! Poly) (newkr! Poly) (host! Poly)) (! (= (lib!delegation_map_t.impl&%0.update.? self! newkr! host!) (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap (%Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!))) (vstd!map.impl&%0.new.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint.) (Poly%fun%1. (mk_fun (%%lambda%%3 $ TYPE%lib!keys_t.SHTKey. newkr!))) (Poly%fun%1. (mk_fun (%%lambda%%4 host!)))))))) :pattern ((lib!delegation_map_t.impl&%0.update.? self! newkr! host!)) ))))
(set-info :comment ";; Function-Specs lib::delegation_map_t::AbstractDelegationMap::delegate_for_key_range_is_host")
(declare-fun req%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host. (Poly Poly Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((self! Poly) (kr! Poly) (id! Poly)) (! (= (req%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host. self! kr! id!) (=> %%global_location_label%%20 (lib!delegation_map_t.impl&%0.is_complete.? self!))) :pattern ((req%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host. self! kr! id!)) )))
(set-info :comment ";; Function-Axioms lib::delegation_map_t::AbstractDelegationMap::delegate_for_key_range_is_host")
(assert (fuel_bool_default fuel%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.))
(assert (=> (fuel_bool fuel%lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.) (forall ((self! Poly) (kr! Poly) (id! Poly)) (! (= (lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.? self! kr! id!) (forall ((k$ Poly)) (! (=> (has_type k$ TYPE%lib!keys_t.SHTKey.) (=> (lib!keys_t.impl&%4.contains.? $ TYPE%lib!keys_t.SHTKey. kr! k$) (= (vstd!map.impl&%0.index.? $ TYPE%lib!keys_t.SHTKey. $ TYPE%lib!abstract_end_point_t.AbstractEndPoint. (Poly%vstd!map.Map<lib!keys_t.SHTKey./lib!abstract_end_point_t.AbstractEndPoint.>. (lib!delegation_map_t.AbstractDelegationMap./AbstractDelegationMap/0 (%Poly%lib!delegation_map_t.AbstractDelegationMap. self!))) k$) id!))) :pattern ((lib!keys_t.impl&%4.contains.? $ TYPE%lib!keys_t.SHTKey. kr! k$)) ))) :pattern ((lib!delegation_map_t.impl&%0.delegate_for_key_range_is_host.? self! kr! id!)) ))))
(set-info :comment ";; Function-Axioms lib::keys_t::KeyIterator::cmp_spec")
(assert (fuel_bool_default fuel%lib!keys_t.impl&%3.cmp_spec.))
(assert (=> (fuel_bool fuel%lib!keys_t.impl&%3.cmp_spec.) (forall ((K&. Dcr) (K& Type) (self! Poly) (other! Poly)) (! (= (lib!keys_t.impl&%3.cmp_spec.? K&. K& self! other!) (let ((tmp%%$ (tuple%2./tuple%2 (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. self!))) (Poly%core!option.Option. (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. other!)))))) (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) lib!keys_t.Ordering./Equal (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) lib!keys_t.Ordering./Less (ite (and (and (is-tuple%2./tuple%2_ tmp%%$) (is-core!option.Option./Some_ (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (is-core!option.Option./None_ (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) lib!keys_t.Ordering./Greater (%Poly%lib!keys_t.Ordering. (let ((i$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (let ((j$ (core!option.Option./Some/0 (%Poly%core!option.Option. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$))))))) (lib!keys_t.KeyTrait.cmp_spec.? K&. K& i$ j$))))))))) :pattern ((lib!keys_t.impl&%3.cmp_spec.? K&. K& self! other!)) ))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)) :pattern ((tr_bound%vstd!std_specs.vec.VecAdditionalSpecFns. $ (TYPE%alloc!vec.Vec. T&. T& A&. A&) T&. T&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type)) (! (=> (and (tr_bound%lib!verus_extra.clone_v.VerusClone. K&. K&) (tr_bound%lib!keys_t.KeyTrait. K&. K&)) (tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyIterator. K&. K&))) :pattern ((tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyIterator. K&. K&))) )))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type)) (! (=> (and (tr_bound%lib!verus_extra.clone_v.VerusClone. K&. K&) (tr_bound%lib!keys_t.KeyTrait. K&. K&)) (tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyRange. K&. K&))) :pattern ((tr_bound%lib!verus_extra.clone_v.VerusClone. $ (TYPE%lib!keys_t.KeyRange. K&. K&))) )))
(set-info :comment ";; Function-Specs lib::io_t::EndPoint::clone_up_to_view")
(declare-fun ens%lib!io_t.impl&%4.clone_up_to_view. (lib!io_t.EndPoint. lib!io_t.EndPoint.) Bool)
(assert (forall ((self! lib!io_t.EndPoint.) (res! lib!io_t.EndPoint.)) (! (= (ens%lib!io_t.impl&%4.clone_up_to_view. self! res!) (= (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. res!)) (lib!io_t.impl&%4.view.? (Poly%lib!io_t.EndPoint. self!)))) :pattern ((ens%lib!io_t.impl&%4.clone_up_to_view. self! res!)) )))
(set-info :comment ";; Function-Specs lib::keys_t::KeyIterator::is_end")
(declare-fun ens%lib!delegation_map_v.impl&%2.is_end. (Dcr Type lib!keys_t.KeyIterator. Bool) Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! lib!keys_t.KeyIterator.) (b! Bool)) (! (= (ens%lib!delegation_map_v.impl&%2.is_end. K&. K& self! b!) (= b! (lib!delegation_map_v.impl&%2.is_end_spec.? K&. K& (Poly%lib!keys_t.KeyIterator. self!)))) :pattern ((ens%lib!delegation_map_v.impl&%2.is_end. K&. K& self! b!)) )))
(set-info :comment ";; Function-Def lib::keys_t::KeyIterator::is_end")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:354:5: 354:37 (#0)")
(set-info :comment ";; Function-Specs lib::keys_t::Ordering::is_lt")
(declare-fun ens%lib!delegation_map_v.impl&%0.is_lt. (lib!keys_t.Ordering. Bool) Bool)
(assert (forall ((self! lib!keys_t.Ordering.) (b! Bool)) (! (= (ens%lib!delegation_map_v.impl&%0.is_lt. self! b!) (= b! (lib!delegation_map_v.impl&%0.lt.? (Poly%lib!keys_t.Ordering. self!)))) :pattern ((ens%lib!delegation_map_v.impl&%0.is_lt. self! b!)) )))
(set-info :comment ";; Function-Def lib::keys_t::Ordering::is_lt")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:59:5: 59:40 (#0)")
(set-info :comment ";; Function-Specs lib::keys_t::KeyIterator::lt")
(declare-fun ens%lib!delegation_map_v.impl&%2.lt. (Dcr Type lib!keys_t.KeyIterator. lib!keys_t.KeyIterator. Bool) Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! lib!keys_t.KeyIterator.) (other! lib!keys_t.KeyIterator.) (b! Bool)) (! (= (ens%lib!delegation_map_v.impl&%2.lt. K&. K& self! other! b!) (= b! (lib!keys_t.impl&%3.lt_spec.? K&. K& (Poly%lib!keys_t.KeyIterator. self!) (Poly%lib!keys_t.KeyIterator. other!)))) :pattern ((ens%lib!delegation_map_v.impl&%2.lt. K&. K& self! other! b!)) )))
(set-info :comment ";; Function-Def lib::keys_t::KeyIterator::lt")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:386:5: 386:47 (#0)")
(set-info :comment ";; Function-Specs lib::keys_t::Ordering::is_eq")
(declare-fun ens%lib!delegation_map_v.impl&%0.is_eq. (lib!keys_t.Ordering. Bool) Bool)
(assert (forall ((self! lib!keys_t.Ordering.) (b! Bool)) (! (= (ens%lib!delegation_map_v.impl&%0.is_eq. self! b!) (= b! (lib!delegation_map_v.impl&%0.eq.? (Poly%lib!keys_t.Ordering. self!)))) :pattern ((ens%lib!delegation_map_v.impl&%0.is_eq. self! b!)) )))
(set-info :comment ";; Function-Def lib::keys_t::Ordering::is_eq")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:47:5: 47:34 (#0)")
(set-info :comment ";; Function-Specs lib::keys_t::Ordering::is_ne")
(declare-fun ens%lib!delegation_map_v.impl&%0.is_ne. (lib!keys_t.Ordering. Bool) Bool)
(assert (forall ((self! lib!keys_t.Ordering.) (b! Bool)) (! (= (ens%lib!delegation_map_v.impl&%0.is_ne. self! b!) (= b! (lib!delegation_map_v.impl&%0.ne.? (Poly%lib!keys_t.Ordering. self!)))) :pattern ((ens%lib!delegation_map_v.impl&%0.is_ne. self! b!)) )))
(set-info :comment ";; Function-Def lib::keys_t::Ordering::is_ne")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:53:5: 53:34 (#0)")
(set-info :comment ";; Function-Specs lib::keys_t::Ordering::is_gt")
(declare-fun ens%lib!delegation_map_v.impl&%0.is_gt. (lib!keys_t.Ordering. Bool) Bool)
(assert (forall ((self! lib!keys_t.Ordering.) (b! Bool)) (! (= (ens%lib!delegation_map_v.impl&%0.is_gt. self! b!) (= b! (lib!delegation_map_v.impl&%0.gt.? (Poly%lib!keys_t.Ordering. self!)))) :pattern ((ens%lib!delegation_map_v.impl&%0.is_gt. self! b!)) )))
(set-info :comment ";; Function-Def lib::keys_t::Ordering::is_gt")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:65:5: 65:40 (#0)")
(set-info :comment ";; Function-Specs lib::keys_t::Ordering::is_le")
(declare-fun ens%lib!delegation_map_v.impl&%0.is_le. (lib!keys_t.Ordering. Bool) Bool)
(assert (forall ((self! lib!keys_t.Ordering.) (b! Bool)) (! (= (ens%lib!delegation_map_v.impl&%0.is_le. self! b!) (= b! (lib!delegation_map_v.impl&%0.le.? (Poly%lib!keys_t.Ordering. self!)))) :pattern ((ens%lib!delegation_map_v.impl&%0.is_le. self! b!)) )))
(set-info :comment ";; Function-Def lib::keys_t::Ordering::is_le")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:71:5: 71:40 (#0)")
(set-info :comment ";; Function-Specs lib::keys_t::Ordering::is_ge")
(declare-fun ens%lib!delegation_map_v.impl&%0.is_ge. (lib!keys_t.Ordering. Bool) Bool)
(assert (forall ((self! lib!keys_t.Ordering.) (b! Bool)) (! (= (ens%lib!delegation_map_v.impl&%0.is_ge. self! b!) (= b! (lib!delegation_map_v.impl&%0.ge.? (Poly%lib!keys_t.Ordering. self!)))) :pattern ((ens%lib!delegation_map_v.impl&%0.is_ge. self! b!)) )))
(set-info :comment ";; Function-Def lib::keys_t::Ordering::is_ge")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:77:5: 77:40 (#0)")
(set-info :comment ";; Function-Specs lib::delegation_map_v::StrictlyOrderedVec::to_set")
(declare-fun req%lib!delegation_map_v.impl&%1.to_set. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec.) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! lib!delegation_map_v.StrictlyOrderedVec.)) (! (= (req%lib!delegation_map_v.impl&%1.to_set. K&. K& self!) (=> %%global_location_label%%21 (lib!delegation_map_v.impl&%1.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)))) :pattern ((req%lib!delegation_map_v.impl&%1.to_set. K&. K& self!)) )))
(declare-fun ens%lib!delegation_map_v.impl&%1.to_set. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! lib!delegation_map_v.StrictlyOrderedVec.) (s! Poly)) (! (= (ens%lib!delegation_map_v.impl&%1.to_set. K&. K& self! s!) (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (= s! (vstd!seq_lib.impl&%0.to_set.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)))) (vstd!set.impl&%0.finite.? K&. K& s!) (= (vstd!set.impl&%0.len.? K&. K& s!) (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)))))) :pattern ((ens%lib!delegation_map_v.impl&%1.to_set. K&. K& self! s!)) )))
(set-info :comment ";; Function-Def lib::delegation_map_v::StrictlyOrderedVec::to_set")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:119:11: 119:40 (#0)")
(set-info :comment ";; Function-Specs lib::delegation_map_v::StrictlyOrderedVec::new")
(declare-fun ens%lib!delegation_map_v.impl&%1.new. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec.) Bool)
(assert (forall ((K&. Dcr) (K& Type) (v! lib!delegation_map_v.StrictlyOrderedVec.)) (! (= (ens%lib!delegation_map_v.impl&%1.new. K&. K& v!) (and (has_type (Poly%lib!delegation_map_v.StrictlyOrderedVec. v!) (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&)) (= (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. v!)) (vstd!seq.Seq.empty.? K&. K&)) (lib!delegation_map_v.impl&%1.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. v!)))) :pattern ((ens%lib!delegation_map_v.impl&%1.new. K&. K& v!)) )))
(set-info :comment ";; Function-Def lib::delegation_map_v::StrictlyOrderedVec::new")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:130:5: 130:25 (#0)")
(set-info :comment ";; Function-Specs lib::delegation_map_v::StrictlyOrderedVec::len")
(declare-fun ens%lib!delegation_map_v.impl&%1.len. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. Int) Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! lib!delegation_map_v.StrictlyOrderedVec.) (len! Int)) (! (= (ens%lib!delegation_map_v.impl&%1.len. K&. K& self! len!) (and (uInv SZ len!) (= len! (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)))))) :pattern ((ens%lib!delegation_map_v.impl&%1.len. K&. K& self! len!)) )))
(set-info :comment ";; Function-Def lib::delegation_map_v::StrictlyOrderedVec::len")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:137:5: 137:33 (#0)")
(set-info :comment ";; Function-Specs lib::delegation_map_v::StrictlyOrderedVec::index")
(declare-fun req%lib!delegation_map_v.impl&%1.index. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! lib!delegation_map_v.StrictlyOrderedVec.) (i! Int)) (! (= (req%lib!delegation_map_v.impl&%1.index. K&. K& self! i!) (=> %%global_location_label%%22 (< i! (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)))))) :pattern ((req%lib!delegation_map_v.impl&%1.index. K&. K& self! i!)) )))
(declare-fun ens%lib!delegation_map_v.impl&%1.index. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. Int Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! lib!delegation_map_v.StrictlyOrderedVec.) (i! Int) (k! Poly)) (! (= (ens%lib!delegation_map_v.impl&%1.index. K&. K& self! i! k!) (and (has_type k! K&) (= k! (vstd!seq.Seq.index.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)) (I i!))))) :pattern ((ens%lib!delegation_map_v.impl&%1.index. K&. K& self! i! k!)) )))
(set-info :comment ";; Function-Def lib::delegation_map_v::StrictlyOrderedVec::index")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:144:5: 144:39 (#0)")
(set-info :comment ";; Function-Specs lib::delegation_map_v::StrictlyOrderedVec::set")
(declare-fun req%lib!delegation_map_v.impl&%1.set. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. Int Poly) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((K&. Dcr) (K& Type) (pre%self! lib!delegation_map_v.StrictlyOrderedVec.) (i! Int) (k! Poly)) (! (= (req%lib!delegation_map_v.impl&%1.set. K&. K& pre%self! i! k!) (and (=> %%global_location_label%%23 (lib!delegation_map_v.impl&%1.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))) (=> %%global_location_label%%24 (< i! (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))))) (=> %%global_location_label%%25 (=> (> i! 0) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? K&. K& (vstd!seq.Seq.index.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!)) (I (Sub i! 1))) k!)))) (=> %%global_location_label%%26 (=> (< i! (Sub (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))) 1)) (lib!delegation_map_v.impl&%0.lt.? (lib!keys_t.KeyTrait.cmp_spec.? K&. K& k! (vstd!seq.Seq.index.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!)) (I (Add i! 1))))))))) :pattern ((req%lib!delegation_map_v.impl&%1.set. K&. K& pre%self! i! k!)) )))
(declare-fun ens%lib!delegation_map_v.impl&%1.set. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. lib!delegation_map_v.StrictlyOrderedVec. Int Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (pre%self! lib!delegation_map_v.StrictlyOrderedVec.) (self! lib!delegation_map_v.StrictlyOrderedVec.) (i! Int) (k! Poly)) (! (= (ens%lib!delegation_map_v.impl&%1.set. K&. K& pre%self! self! i! k!) (and (has_type (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!) (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&)) (lib!delegation_map_v.impl&%1.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)) (= (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)) (vstd!seq.Seq.update.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!)) (I i!) k!)))) :pattern ((ens%lib!delegation_map_v.impl&%1.set. K&. K& pre%self! self! i! k!)) )))
(set-info :comment ";; Function-Def lib::delegation_map_v::StrictlyOrderedVec::set")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:151:5: 151:38 (#0)")
(set-info :comment ";; Function-Specs lib::delegation_map_v::StrictlyOrderedVec::remove")
(declare-fun req%lib!delegation_map_v.impl&%1.remove. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. Int) Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((K&. Dcr) (K& Type) (pre%self! lib!delegation_map_v.StrictlyOrderedVec.) (i! Int)) (! (= (req%lib!delegation_map_v.impl&%1.remove. K&. K& pre%self! i!) (and (=> %%global_location_label%%27 (lib!delegation_map_v.impl&%1.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))) (=> %%global_location_label%%28 (< i! (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))))))) :pattern ((req%lib!delegation_map_v.impl&%1.remove. K&. K& pre%self! i!)) )))
(declare-fun ens%lib!delegation_map_v.impl&%1.remove. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. lib!delegation_map_v.StrictlyOrderedVec. Int Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (pre%self! lib!delegation_map_v.StrictlyOrderedVec.) (self! lib!delegation_map_v.StrictlyOrderedVec.) (i! Int) (k! Poly)) (! (= (ens%lib!delegation_map_v.impl&%1.remove. K&. K& pre%self! self! i! k!) (and (has_type k! K&) (has_type (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!) (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&)) (lib!delegation_map_v.impl&%1.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)) (= k! (vstd!seq.Seq.index.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!)) (I i!))) (= (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)) (vstd!seq_lib.impl&%0.remove.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!)) (I i!))) (= (vstd!seq_lib.impl&%0.to_set.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!))) (vstd!set.impl&%0.remove.? K&. K& (vstd!seq_lib.impl&%0.to_set.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))) k!)))) :pattern ((ens%lib!delegation_map_v.impl&%1.remove. K&. K& pre%self! self! i! k!)) )))
(set-info :comment ";; Function-Def lib::delegation_map_v::StrictlyOrderedVec::remove")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:171:5: 171:44 (#0)")
(set-info :comment ";; Function-Specs lib::delegation_map_v::StrictlyOrderedVec::erase")
(declare-fun req%lib!delegation_map_v.impl&%1.erase. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. Int Int) Bool)
(declare-const %%global_location_label%%29 Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((K&. Dcr) (K& Type) (pre%self! lib!delegation_map_v.StrictlyOrderedVec.) (start! Int) (end! Int)) (! (= (req%lib!delegation_map_v.impl&%1.erase. K&. K& pre%self! start! end!) (and (=> %%global_location_label%%29 (lib!delegation_map_v.impl&%1.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))) (=> %%global_location_label%%30 (and (<= start! end!) (<= end! (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!)))))))) :pattern ((req%lib!delegation_map_v.impl&%1.erase. K&. K& pre%self! start! end!)) )))
(declare-fun ens%lib!delegation_map_v.impl&%1.erase. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. lib!delegation_map_v.StrictlyOrderedVec. Int Int) Bool)
(assert (forall ((K&. Dcr) (K& Type) (pre%self! lib!delegation_map_v.StrictlyOrderedVec.) (self! lib!delegation_map_v.StrictlyOrderedVec.) (start! Int) (end! Int)) (! (= (ens%lib!delegation_map_v.impl&%1.erase. K&. K& pre%self! self! start! end!) (and (has_type (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!) (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&)) (lib!delegation_map_v.impl&%1.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)) (= (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)) (vstd!seq.Seq.add.? K&. K& (vstd!seq.Seq.subrange.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!)) (I 0) (I start!)) (vstd!seq.Seq.subrange.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!)) (I end!) (I (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))))))) (= (vstd!seq_lib.impl&%0.to_set.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))) (vstd!set.impl&%0.union.? K&. K& (vstd!seq_lib.impl&%0.to_set.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!))) (vstd!seq_lib.impl&%0.to_set.? K&. K& (vstd!seq.Seq.subrange.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!)) (I start!) (I end!))))))) :pattern ((ens%lib!delegation_map_v.impl&%1.erase. K&. K& pre%self! self! start! end!)) )))
(set-info :comment ";; Function-Def lib::delegation_map_v::StrictlyOrderedVec::erase")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:225:9: 282:10 (#0)")
(set-info :comment ";; Function-Def lib::delegation_map_v::StrictlyOrderedVec::erase")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:200:5: 200:50 (#0)")
(set-info :comment ";; Function-Specs lib::delegation_map_v::StrictlyOrderedVec::insert")
(declare-fun req%lib!delegation_map_v.impl&%1.insert. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((K&. Dcr) (K& Type) (pre%self! lib!delegation_map_v.StrictlyOrderedVec.) (k! Poly)) (! (= (req%lib!delegation_map_v.impl&%1.insert. K&. K& pre%self! k!) (and (=> %%global_location_label%%31 (lib!delegation_map_v.impl&%1.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))) (=> %%global_location_label%%32 (not (vstd!seq_lib.impl&%0.contains.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!)) k!))))) :pattern ((req%lib!delegation_map_v.impl&%1.insert. K&. K& pre%self! k!)) )))
(declare-fun ens%lib!delegation_map_v.impl&%1.insert. (Dcr Type lib!delegation_map_v.StrictlyOrderedVec. lib!delegation_map_v.StrictlyOrderedVec. Poly Int) Bool)
(assert (forall ((K&. Dcr) (K& Type) (pre%self! lib!delegation_map_v.StrictlyOrderedVec.) (self! lib!delegation_map_v.StrictlyOrderedVec.) (k! Poly) (i! Int)) (! (= (ens%lib!delegation_map_v.impl&%1.insert. K&. K& pre%self! self! k! i!) (and (uInv SZ i!) (has_type (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!) (TYPE%lib!delegation_map_v.StrictlyOrderedVec. K&. K&)) (lib!delegation_map_v.impl&%1.valid.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)) (= (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!))) (nClip (Add (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))) 1))) (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!))))) (= (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!)) (vstd!seq_lib.impl&%0.insert.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!)) (I i!) k!)) (= (vstd!seq_lib.impl&%0.to_set.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. self!))) (vstd!set.impl&%0.insert.? K&. K& (vstd!seq_lib.impl&%0.to_set.? K&. K& (lib!delegation_map_v.impl&%1.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedVec. pre%self!))) k!)))) :pattern ((ens%lib!delegation_map_v.impl&%1.insert. K&. K& pre%self! self! k! i!)) )))
(set-info :comment ";; Function-Def lib::delegation_map_v::StrictlyOrderedVec::insert")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:298:9: 304:10 (#0)")
(set-info :comment ";; Function-Def lib::delegation_map_v::StrictlyOrderedVec::insert")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:286:5: 286:44 (#0)")
(set-info :comment ";; Function-Specs lib::keys_t::KeyIterator::new")
(declare-fun ens%lib!delegation_map_v.impl&%2.new. (Dcr Type Poly lib!keys_t.KeyIterator.) Bool)
(assert (forall ((K&. Dcr) (K& Type) (k! Poly) (s! lib!keys_t.KeyIterator.)) (! (= (ens%lib!delegation_map_v.impl&%2.new. K&. K& k! s!) (and (has_type (Poly%lib!keys_t.KeyIterator. s!) (TYPE%lib!keys_t.KeyIterator. K&. K&)) (= (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. s!))) (core!option.Option./Some k!)))) :pattern ((ens%lib!delegation_map_v.impl&%2.new. K&. K& k! s!)) )))
(set-info :comment ";; Function-Def lib::keys_t::KeyIterator::new")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:332:5: 332:33 (#0)")
(set-info :comment ";; Function-Specs lib::keys_t::KeyIterator::end")
(declare-fun ens%lib!delegation_map_v.impl&%2.end. (Dcr Type lib!keys_t.KeyIterator.) Bool)
(assert (forall ((K&. Dcr) (K& Type) (s! lib!keys_t.KeyIterator.)) (! (= (ens%lib!delegation_map_v.impl&%2.end. K&. K& s!) (and (has_type (Poly%lib!keys_t.KeyIterator. s!) (TYPE%lib!keys_t.KeyIterator. K&. K&)) (is-core!option.Option./None_ (lib!keys_t.KeyIterator./KeyIterator/k (%Poly%lib!keys_t.KeyIterator. (Poly%lib!keys_t.KeyIterator. s!)))))) :pattern ((ens%lib!delegation_map_v.impl&%2.end. K&. K& s!)) )))
(set-info :comment ";; Function-Def lib::keys_t::KeyIterator::end")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:343:5: 343:29 (#0)")
(set-info :comment ";; Function-Specs lib::keys_t::KeyIterator::get")
(declare-fun req%lib!delegation_map_v.impl&%2.get. (Dcr Type lib!keys_t.KeyIterator.) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! lib!keys_t.KeyIterator.)) (! (= (req%lib!delegation_map_v.impl&%2.get. K&. K& self!) (=> %%global_location_label%%33 (not (lib!delegation_map_v.impl&%2.is_end_spec.? K&. K& (Poly%lib!keys_t.KeyIterator. self!))))) :pattern ((req%lib!delegation_map_v.impl&%2.get. K&. K& self!)) )))
(declare-fun ens%lib!delegation_map_v.impl&%2.get. (Dcr Type lib!keys_t.KeyIterator. Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! lib!keys_t.KeyIterator.) (k! Poly)) (! (= (ens%lib!delegation_map_v.impl&%2.get. K&. K& self! k!) (and (has_type k! K&) (= k! (lib!delegation_map_v.impl&%2.get_spec.? K&. K& (Poly%lib!keys_t.KeyIterator. self!))))) :pattern ((ens%lib!delegation_map_v.impl&%2.get. K&. K& self! k!)) )))
(set-info :comment ";; Function-Def lib::keys_t::KeyIterator::get")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:367:5: 367:32 (#0)")
(set-info :comment ";; Function-Specs lib::keys_t::KeyIterator::above")
(declare-fun ens%lib!delegation_map_v.impl&%2.above. (Dcr Type lib!keys_t.KeyIterator. Poly Bool) Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! lib!keys_t.KeyIterator.) (k! Poly) (b! Bool)) (! (= (ens%lib!delegation_map_v.impl&%2.above. K&. K& self! k! b!) (= b! (lib!delegation_map_v.impl&%2.above_spec.? K&. K& (Poly%lib!keys_t.KeyIterator. self!) k!))) :pattern ((ens%lib!delegation_map_v.impl&%2.above. K&. K& self! k! b!)) )))
(set-info :comment ";; Function-Def lib::keys_t::KeyIterator::above")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:408:5: 408:38 (#0)")
(set-info :comment ";; Function-Specs lib::delegation_map_v::vec_erase")
(declare-fun req%lib!delegation_map_v.vec_erase. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (pre%v! Poly) (start! Int) (end! Int)) (! (= (req%lib!delegation_map_v.vec_erase. A&. A& pre%v! start! end!) (=> %%global_location_label%%34 (and (<= start! end!) (<= end! (vstd!std_specs.vec.spec_vec_len.? A&. A& $ ALLOCATOR_GLOBAL pre%v!))))) :pattern ((req%lib!delegation_map_v.vec_erase. A&. A& pre%v! start! end!)) )))
(declare-fun ens%lib!delegation_map_v.vec_erase. (Dcr Type Poly Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (pre%v! Poly) (v! Poly) (start! Int) (end! Int)) (! (= (ens%lib!delegation_map_v.vec_erase. A&. A& pre%v! v! start! end!) (and (has_type v! (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL)) (= (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) v!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.subrange.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) pre%v!) (I 0) (I start!)) (vstd!seq.Seq.subrange.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) pre%v!) (I end!) (I (vstd!seq.Seq.len.? A&. A& (vstd!view.View.view.? $ (TYPE%alloc!vec.Vec. A&. A& $ ALLOCATOR_GLOBAL) pre%v!)))))))) :pattern ((ens%lib!delegation_map_v.vec_erase. A&. A& pre%v! v! start! end!)) )))
(set-info :comment ";; Function-Def lib::delegation_map_v::vec_erase")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:434:5: 449:6 (#0)")
(set-info :comment ";; Function-Def lib::delegation_map_v::vec_erase")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:420:1: 420:62 (#0)")
(set-info :comment ";; Function-Specs lib::delegation_map_v::StrictlyOrderedMap::mind_the_gap")
(declare-fun ens%lib!delegation_map_v.impl&%3.mind_the_gap. (Dcr Type lib!delegation_map_v.StrictlyOrderedMap.) Bool)
(assert (forall ((K&. Dcr) (K& Type) (self! lib!delegation_map_v.StrictlyOrderedMap.)) (! (= (ens%lib!delegation_map_v.impl&%3.mind_the_gap. K&. K& self!) (and (forall ((w$ Poly) (x$ Poly) (y$ Poly) (z$ Poly)) (! (=> (and (has_type w$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type x$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type y$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type z$ (TYPE%lib!keys_t.KeyIterator. K&. K&))) (=> (and (and (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) w$ x$) (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) y$ z$)) (lib!keys_t.impl&%3.lt_spec.? K&. K& y$ x$)) (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) w$ z$))) :pattern ((lib!keys_t.impl&%3.lt_spec.? K&. K& y$ x$) (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) w$ z$)) )) (forall ((w$ Poly) (x$ Poly) (y$ Poly) (z$ Poly)) (! (=> (and (has_type w$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type x$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type y$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type z$ (TYPE%lib!keys_t.KeyIterator. K&. K&))) (=> (and (and (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) w$ x$) (lib!keys_t.impl&%3.geq_spec.? K&. K& y$ w$)) (lib!keys_t.impl&%3.geq_spec.? K&. K& x$ z$)) (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) y$ z$))) :pattern ((lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) w$ x$) (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) y$ z$)) )) (forall ((l$ Poly) (k$ Poly) (m$ Poly)) (! (=> (and (has_type l$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type k$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type m$ (TYPE%lib!keys_t.KeyIterator. K&. K&))) (=> (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) k$ m$) (not (and (and (lib!keys_t.impl&%3.lt_spec.? K&. K& k$ l$) (lib!keys_t.impl&%3.lt_spec.? K&. K& l$ m$)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!))) (lib!delegation_map_v.impl&%2.get_spec.? K&. K& l$)))))) :pattern ((lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) k$ m$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!))) (lib!delegation_map_v.impl&%2.get_spec.? K&. K& l$))) )))) :pattern ((ens%lib!delegation_map_v.impl&%3.mind_the_gap. K&. K& self!)) )))
(set-info :comment ";; Function-Def lib::delegation_map_v::StrictlyOrderedMap::mind_the_gap")
(set-info :comment ";; ironsht/src/delegation_map_v.rs:484:11: 484:32 (#0)")
(declare-const K&. Dcr)
(declare-const K& Type)
(declare-const self! lib!delegation_map_v.StrictlyOrderedMap.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) (TYPE%lib!delegation_map_v.StrictlyOrderedMap. K&. K&)))
(assert (tr_bound%lib!keys_t.KeyTrait. K&. K&))
(assert (tr_bound%lib!verus_extra.clone_v.VerusClone. K&. K&))
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%2 Bool)
(assert (not (=> (ens%lib!keys_t.KeyTrait.cmp_properties. K&. K&) (and (=> %%location_label%%0 (forall ((w$ Poly) (x$ Poly) (y$ Poly) (z$ Poly)) (! (=> (and (has_type w$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type x$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type y$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type z$ (TYPE%lib!keys_t.KeyIterator. K&. K&))) (=> (and (and (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) w$ x$) (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) y$ z$)) (lib!keys_t.impl&%3.lt_spec.? K&. K& y$ x$)) (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) w$ z$))) :pattern ((lib!keys_t.impl&%3.lt_spec.? K&. K& y$ x$) (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) w$ z$)) ))) (and (=> %%location_label%%1 (forall ((w$ Poly) (x$ Poly) (y$ Poly) (z$ Poly)) (! (=> (and (has_type w$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type x$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type y$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type z$ (TYPE%lib!keys_t.KeyIterator. K&. K&))) (=> (and (and (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) w$ x$) (lib!keys_t.impl&%3.geq_spec.? K&. K& y$ w$)) (lib!keys_t.impl&%3.geq_spec.? K&. K& x$ z$)) (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) y$ z$))) :pattern ((lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) w$ x$) (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) y$ z$)) ))) (=> %%location_label%%2 (forall ((l$ Poly) (k$ Poly) (m$ Poly)) (! (=> (and (has_type l$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type k$ (TYPE%lib!keys_t.KeyIterator. K&. K&)) (has_type m$ (TYPE%lib!keys_t.KeyIterator. K&. K&))) (=> (lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) k$ m$) (not (and (and (lib!keys_t.impl&%3.lt_spec.? K&. K& k$ l$) (lib!keys_t.impl&%3.lt_spec.? K&. K& l$ m$)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!))) (lib!delegation_map_v.impl&%2.get_spec.? K&. K& l$)))))) :pattern ((lib!delegation_map_v.impl&%3.gap.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!) k$ m$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& $ TYPE%lib!io_t.EndPoint. (lib!delegation_map_v.impl&%3.view.? K&. K& (Poly%lib!delegation_map_v.StrictlyOrderedMap. self!))) (lib!delegation_map_v.impl&%2.get_spec.? K&. K& l$))) ))))))))
(check-sat)
(exit)
